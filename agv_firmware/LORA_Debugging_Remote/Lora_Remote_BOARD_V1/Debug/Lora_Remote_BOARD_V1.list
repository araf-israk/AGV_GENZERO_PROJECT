
Lora_Remote_BOARD_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fec  08005f68  08005f68  00006f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f54  08006f54  000080b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f54  08006f54  00007f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f5c  08006f5c  000080b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f5c  08006f5c  00007f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f60  08006f60  00007f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08006f64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200000b4  08007018  000080b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08007018  000087d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e11d  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002423  00000000  00000000  00016201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00018628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000027b3  00000000  00000000  00019528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010006  00000000  00000000  0001bcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008fb50  00000000  00000000  0002bce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000bb831  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000b75  00000000  00000000  000bb874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004420  00000000  00000000  000bc3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000c080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f50 	.word	0x08005f50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08005f50 	.word	0x08005f50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 8000d60:	2011      	movs	r0, #17
 8000d62:	f000 fcfb 	bl	800175c <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 fc3a 	bl	80015e0 <LCD_IO_Bl_OnOff>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <ili9486_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOff(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(0);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fc33 	bl	80015e0 <LCD_IO_Bl_OnOff>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPIN);    // Sleep
 8000d7a:	2010      	movs	r0, #16
 8000d7c:	f000 fcee 	bl	800175c <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 8000d88:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 8000d9a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <ili9486_ReadID>:
  * @brief  Get the ILI9486 ID.
  * @param  None
  * @retval The ILI9486 ID
  */
uint16_t ili9486_ReadID(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&id, 3, 1);
 8000db2:	1d39      	adds	r1, r7, #4
 8000db4:	2301      	movs	r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	20d3      	movs	r0, #211	@ 0xd3
 8000dba:	f000 fe83 	bl	8001ac4 <LCD_IO_ReadCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  if(id == 0x869400)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <ili9486_ReadID+0x30>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d102      	bne.n	8000dcc <ili9486_ReadID+0x24>
    return 0x9486;
 8000dc6:	f249 4386 	movw	r3, #38022	@ 0x9486
 8000dca:	e000      	b.n	8000dce <ili9486_ReadID+0x26>
  else
    return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	00869400 	.word	0x00869400

08000ddc <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 8000de0:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <ili9486_Init+0xd4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d115      	bne.n	8000e18 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8000dec:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <ili9486_Init+0xd4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <ili9486_Init+0xd4>)
 8000df8:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <ili9486_Init+0xd4>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <ili9486_Init+0x2e>
      LCD_IO_Init();
 8000e06:	f000 fbf7 	bl	80015f8 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000e0a:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <ili9486_Init+0xd4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <ili9486_Init+0xd4>)
 8000e16:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f000 fbd6 	bl	80015ca <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fc9c 	bl	800175c <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 8000e24:	2064      	movs	r0, #100	@ 0x64
 8000e26:	f000 fbd0 	bl	80015ca <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4921      	ldr	r1, [pc, #132]	@ (8000eb4 <ili9486_Init+0xd8>)
 8000e2e:	20b0      	movs	r0, #176	@ 0xb0
 8000e30:	f000 fd92 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000e34:	2011      	movs	r0, #17
 8000e36:	f000 fc91 	bl	800175c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000e3a:	200a      	movs	r0, #10
 8000e3c:	f000 fbc5 	bl	80015ca <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 8000e40:	2201      	movs	r2, #1
 8000e42:	491d      	ldr	r1, [pc, #116]	@ (8000eb8 <ili9486_Init+0xdc>)
 8000e44:	203a      	movs	r0, #58	@ 0x3a
 8000e46:	f000 fd87 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000e4a:	2036      	movs	r0, #54	@ 0x36
 8000e4c:	f000 fc86 	bl	800175c <LCD_IO_WriteCmd8>
 8000e50:	2028      	movs	r0, #40	@ 0x28
 8000e52:	f000 fcb5 	bl	80017c0 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 8000e56:	2201      	movs	r2, #1
 8000e58:	4918      	ldr	r1, [pc, #96]	@ (8000ebc <ili9486_Init+0xe0>)
 8000e5a:	20c2      	movs	r0, #194	@ 0xc2
 8000e5c:	f000 fd7c 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 8000e60:	2204      	movs	r2, #4
 8000e62:	4917      	ldr	r1, [pc, #92]	@ (8000ec0 <ili9486_Init+0xe4>)
 8000e64:	20c5      	movs	r0, #197	@ 0xc5
 8000e66:	f000 fd77 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	4915      	ldr	r1, [pc, #84]	@ (8000ec4 <ili9486_Init+0xe8>)
 8000e6e:	20e0      	movs	r0, #224	@ 0xe0
 8000e70:	f000 fd72 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000e74:	220f      	movs	r2, #15
 8000e76:	4914      	ldr	r1, [pc, #80]	@ (8000ec8 <ili9486_Init+0xec>)
 8000e78:	20e1      	movs	r0, #225	@ 0xe1
 8000e7a:	f000 fd6d 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000e7e:	220f      	movs	r2, #15
 8000e80:	4911      	ldr	r1, [pc, #68]	@ (8000ec8 <ili9486_Init+0xec>)
 8000e82:	20e2      	movs	r0, #226	@ 0xe2
 8000e84:	f000 fd68 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8000e88:	2013      	movs	r0, #19
 8000e8a:	f000 fc67 	bl	800175c <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000e8e:	2020      	movs	r0, #32
 8000e90:	f000 fc64 	bl	800175c <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000e94:	2011      	movs	r0, #17
 8000e96:	f000 fc61 	bl	800175c <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 8000e9a:	20c8      	movs	r0, #200	@ 0xc8
 8000e9c:	f000 fb95 	bl	80015ca <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 8000ea0:	2029      	movs	r0, #41	@ 0x29
 8000ea2:	f000 fc5b 	bl	800175c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f000 fb8f 	bl	80015ca <LCD_Delay>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000d0 	.word	0x200000d0
 8000eb4:	08005f68 	.word	0x08005f68
 8000eb8:	08005f6c 	.word	0x08005f6c
 8000ebc:	08005f70 	.word	0x08005f70
 8000ec0:	08005f74 	.word	0x08005f74
 8000ec4:	08005f7c 	.word	0x08005f7c
 8000ec8:	08005f8c 	.word	0x08005f8c

08000ecc <ili9486_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9486_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	80fb      	strh	r3, [r7, #6]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	80bb      	strh	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000edc:	202a      	movs	r0, #42	@ 0x2a
 8000ede:	f000 fc3d 	bl	800175c <LCD_IO_WriteCmd8>
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fc68 	bl	80017c0 <LCD_IO_WriteData8>
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fc63 	bl	80017c0 <LCD_IO_WriteData8>
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fc5c 	bl	80017c0 <LCD_IO_WriteData8>
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fc57 	bl	80017c0 <LCD_IO_WriteData8>
 8000f12:	202b      	movs	r0, #43	@ 0x2b
 8000f14:	f000 fc22 	bl	800175c <LCD_IO_WriteCmd8>
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fc4d 	bl	80017c0 <LCD_IO_WriteData8>
 8000f26:	88bb      	ldrh	r3, [r7, #4]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fc48 	bl	80017c0 <LCD_IO_WriteData8>
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fc41 	bl	80017c0 <LCD_IO_WriteData8>
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fc3c 	bl	80017c0 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000f62:	202a      	movs	r0, #42	@ 0x2a
 8000f64:	f000 fbfa 	bl	800175c <LCD_IO_WriteCmd8>
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fc25 	bl	80017c0 <LCD_IO_WriteData8>
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fc20 	bl	80017c0 <LCD_IO_WriteData8>
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fc19 	bl	80017c0 <LCD_IO_WriteData8>
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fc14 	bl	80017c0 <LCD_IO_WriteData8>
 8000f98:	202b      	movs	r0, #43	@ 0x2b
 8000f9a:	f000 fbdf 	bl	800175c <LCD_IO_WriteCmd8>
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fc0a 	bl	80017c0 <LCD_IO_WriteData8>
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 fc05 	bl	80017c0 <LCD_IO_WriteData8>
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fbfe 	bl	80017c0 <LCD_IO_WriteData8>
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fbf9 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000fce:	202c      	movs	r0, #44	@ 0x2c
 8000fd0:	f000 fbc4 	bl	800175c <LCD_IO_WriteCmd8>
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fc1c 	bl	8001814 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <ili9486_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9486_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4925      	ldr	r1, [pc, #148]	@ (800108c <ili9486_ReadPixel+0xa8>)
 8000ff8:	203a      	movs	r0, #58	@ 0x3a
 8000ffa:	f000 fcad 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000ffe:	202a      	movs	r0, #42	@ 0x2a
 8001000:	f000 fbac 	bl	800175c <LCD_IO_WriteCmd8>
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fbd7 	bl	80017c0 <LCD_IO_WriteData8>
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fbd2 	bl	80017c0 <LCD_IO_WriteData8>
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fbcb 	bl	80017c0 <LCD_IO_WriteData8>
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fbc6 	bl	80017c0 <LCD_IO_WriteData8>
 8001034:	202b      	movs	r0, #43	@ 0x2b
 8001036:	f000 fb91 	bl	800175c <LCD_IO_WriteCmd8>
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fbbc 	bl	80017c0 <LCD_IO_WriteData8>
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fbb7 	bl	80017c0 <LCD_IO_WriteData8>
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	b29b      	uxth	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fbb0 	bl	80017c0 <LCD_IO_WriteData8>
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fbab 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, (uint16_t *)&ret, 1, 1);
 800106a:	f107 010e 	add.w	r1, r7, #14
 800106e:	2301      	movs	r3, #1
 8001070:	2201      	movs	r2, #1
 8001072:	202e      	movs	r0, #46	@ 0x2e
 8001074:	f000 fd94 	bl	8001ba0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8001078:	2201      	movs	r2, #1
 800107a:	4905      	ldr	r1, [pc, #20]	@ (8001090 <ili9486_ReadPixel+0xac>)
 800107c:	203a      	movs	r0, #58	@ 0x3a
 800107e:	f000 fc6b 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  return(ret);
 8001082:	89fb      	ldrh	r3, [r7, #14]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	08005f9c 	.word	0x08005f9c
 8001090:	08005f6c 	.word	0x08005f6c

08001094 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4623      	mov	r3, r4
 80010a4:	80fb      	strh	r3, [r7, #6]
 80010a6:	4603      	mov	r3, r0
 80010a8:	80bb      	strh	r3, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]
 80010ae:	4613      	mov	r3, r2
 80010b0:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80010b2:	4a2a      	ldr	r2, [pc, #168]	@ (800115c <ili9486_SetDisplayWindow+0xc8>)
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	8013      	strh	r3, [r2, #0]
 80010b8:	88ba      	ldrh	r2, [r7, #4]
 80010ba:	883b      	ldrh	r3, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <ili9486_SetDisplayWindow+0xcc>)
 80010c6:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80010c8:	202a      	movs	r0, #42	@ 0x2a
 80010ca:	f000 fb47 	bl	800175c <LCD_IO_WriteCmd8>
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fb72 	bl	80017c0 <LCD_IO_WriteData8>
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fb6d 	bl	80017c0 <LCD_IO_WriteData8>
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	4413      	add	r3, r2
 80010ec:	3b01      	subs	r3, #1
 80010ee:	121b      	asrs	r3, r3, #8
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fb64 	bl	80017c0 <LCD_IO_WriteData8>
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	3b01      	subs	r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fb59 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800110e:	202b      	movs	r0, #43	@ 0x2b
 8001110:	f000 fb24 	bl	800175c <LCD_IO_WriteCmd8>
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fb4f 	bl	80017c0 <LCD_IO_WriteData8>
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fb4a 	bl	80017c0 <LCD_IO_WriteData8>
 800112c:	88ba      	ldrh	r2, [r7, #4]
 800112e:	883b      	ldrh	r3, [r7, #0]
 8001130:	4413      	add	r3, r2
 8001132:	3b01      	subs	r3, #1
 8001134:	121b      	asrs	r3, r3, #8
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fb41 	bl	80017c0 <LCD_IO_WriteData8>
 800113e:	88bb      	ldrh	r3, [r7, #4]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4413      	add	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	3b01      	subs	r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fb36 	bl	80017c0 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	200000d2 	.word	0x200000d2
 8001160:	200000d4 	.word	0x200000d4

08001164 <ili9486_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4623      	mov	r3, r4
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	4603      	mov	r3, r0
 8001178:	80bb      	strh	r3, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]
 800117e:	4613      	mov	r3, r2
 8001180:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8001182:	202a      	movs	r0, #42	@ 0x2a
 8001184:	f000 faea 	bl	800175c <LCD_IO_WriteCmd8>
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	b29b      	uxth	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fb15 	bl	80017c0 <LCD_IO_WriteData8>
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fb10 	bl	80017c0 <LCD_IO_WriteData8>
 80011a0:	88ba      	ldrh	r2, [r7, #4]
 80011a2:	883b      	ldrh	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	3b01      	subs	r3, #1
 80011a8:	121b      	asrs	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fb07 	bl	80017c0 <LCD_IO_WriteData8>
 80011b2:	88bb      	ldrh	r3, [r7, #4]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	883b      	ldrh	r3, [r7, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	3b01      	subs	r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fafc 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 80011c8:	202b      	movs	r0, #43	@ 0x2b
 80011ca:	f000 fac7 	bl	800175c <LCD_IO_WriteCmd8>
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 faf2 	bl	80017c0 <LCD_IO_WriteData8>
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 faed 	bl	80017c0 <LCD_IO_WriteData8>
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fae6 	bl	80017c0 <LCD_IO_WriteData8>
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fae1 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 80011fe:	883a      	ldrh	r2, [r7, #0]
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4619      	mov	r1, r3
 8001204:	202c      	movs	r0, #44	@ 0x2c
 8001206:	f000 fb45 	bl	8001894 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}

08001212 <ili9486_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001212:	b590      	push	{r4, r7, lr}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	4604      	mov	r4, r0
 800121a:	4608      	mov	r0, r1
 800121c:	4611      	mov	r1, r2
 800121e:	461a      	mov	r2, r3
 8001220:	4623      	mov	r3, r4
 8001222:	80fb      	strh	r3, [r7, #6]
 8001224:	4603      	mov	r3, r0
 8001226:	80bb      	strh	r3, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8001230:	202a      	movs	r0, #42	@ 0x2a
 8001232:	f000 fa93 	bl	800175c <LCD_IO_WriteCmd8>
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	b29b      	uxth	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fabe 	bl	80017c0 <LCD_IO_WriteData8>
 8001244:	88bb      	ldrh	r3, [r7, #4]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fab9 	bl	80017c0 <LCD_IO_WriteData8>
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fab2 	bl	80017c0 <LCD_IO_WriteData8>
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f000 faad 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8001266:	202b      	movs	r0, #43	@ 0x2b
 8001268:	f000 fa78 	bl	800175c <LCD_IO_WriteCmd8>
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	b29b      	uxth	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f000 faa3 	bl	80017c0 <LCD_IO_WriteData8>
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fa9e 	bl	80017c0 <LCD_IO_WriteData8>
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	883b      	ldrh	r3, [r7, #0]
 8001288:	4413      	add	r3, r2
 800128a:	3b01      	subs	r3, #1
 800128c:	121b      	asrs	r3, r3, #8
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fa95 	bl	80017c0 <LCD_IO_WriteData8>
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	883b      	ldrh	r3, [r7, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4413      	add	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fa8a 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 80012ac:	883a      	ldrh	r2, [r7, #0]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4619      	mov	r1, r3
 80012b2:	202c      	movs	r0, #44	@ 0x2c
 80012b4:	f000 faee 	bl	8001894 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd90      	pop	{r4, r7, pc}

080012c0 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4604      	mov	r4, r0
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	4603      	mov	r3, r0
 80012d4:	80bb      	strh	r3, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]
 80012da:	4613      	mov	r3, r2
 80012dc:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80012de:	202a      	movs	r0, #42	@ 0x2a
 80012e0:	f000 fa3c 	bl	800175c <LCD_IO_WriteCmd8>
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fa67 	bl	80017c0 <LCD_IO_WriteData8>
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fa62 	bl	80017c0 <LCD_IO_WriteData8>
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	4413      	add	r3, r2
 8001302:	3b01      	subs	r3, #1
 8001304:	121b      	asrs	r3, r3, #8
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fa59 	bl	80017c0 <LCD_IO_WriteData8>
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fa4e 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8001324:	202b      	movs	r0, #43	@ 0x2b
 8001326:	f000 fa19 	bl	800175c <LCD_IO_WriteCmd8>
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b29b      	uxth	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fa44 	bl	80017c0 <LCD_IO_WriteData8>
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fa3f 	bl	80017c0 <LCD_IO_WriteData8>
 8001342:	88ba      	ldrh	r2, [r7, #4]
 8001344:	883b      	ldrh	r3, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	3b01      	subs	r3, #1
 800134a:	121b      	asrs	r3, r3, #8
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fa36 	bl	80017c0 <LCD_IO_WriteData8>
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	883b      	ldrh	r3, [r7, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b2db      	uxtb	r3, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fa2b 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	883a      	ldrh	r2, [r7, #0]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	461a      	mov	r2, r3
 8001374:	8b3b      	ldrh	r3, [r7, #24]
 8001376:	4619      	mov	r1, r3
 8001378:	202c      	movs	r0, #44	@ 0x2c
 800137a:	f000 fa8b 	bl	8001894 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
	...

08001388 <ili9486_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9486_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	603a      	str	r2, [r7, #0]
 8001392:	80fb      	strh	r3, [r7, #6]
 8001394:	460b      	mov	r3, r1
 8001396:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800139e:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80013a6:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	085b      	lsrs	r3, r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4413      	add	r3, r2
 80013b8:	603b      	str	r3, [r7, #0]

  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_UP);
 80013ba:	2036      	movs	r0, #54	@ 0x36
 80013bc:	f000 f9ce 	bl	800175c <LCD_IO_WriteCmd8>
 80013c0:	2068      	movs	r0, #104	@ 0x68
 80013c2:	f000 f9fd 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yStart);
 80013c6:	202b      	movs	r0, #43	@ 0x2b
 80013c8:	f000 f9c8 	bl	800175c <LCD_IO_WriteCmd8>
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <ili9486_DrawBitmap+0xb0>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80013d4:	3301      	adds	r3, #1
 80013d6:	121b      	asrs	r3, r3, #8
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f9f0 	bl	80017c0 <LCD_IO_WriteData8>
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <ili9486_DrawBitmap+0xb0>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f9e7 	bl	80017c0 <LCD_IO_WriteData8>
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <ili9486_DrawBitmap+0xb4>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80013fa:	3301      	adds	r3, #1
 80013fc:	121b      	asrs	r3, r3, #8
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f9dd 	bl	80017c0 <LCD_IO_WriteData8>
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <ili9486_DrawBitmap+0xb4>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f9d4 	bl	80017c0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, (uint16_t *)pbmp, size);
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	202c      	movs	r0, #44	@ 0x2c
 800141e:	f000 faeb 	bl	80019f8 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8001422:	2036      	movs	r0, #54	@ 0x36
 8001424:	f000 f99a 	bl	800175c <LCD_IO_WriteCmd8>
 8001428:	2028      	movs	r0, #40	@ 0x28
 800142a:	f000 f9c9 	bl	80017c0 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000d4 	.word	0x200000d4
 800143c:	200000d2 	.word	0x200000d2

08001440 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4604      	mov	r4, r0
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4623      	mov	r3, r4
 8001450:	80fb      	strh	r3, [r7, #6]
 8001452:	4603      	mov	r3, r0
 8001454:	80bb      	strh	r3, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	807b      	strh	r3, [r7, #2]
 800145a:	4613      	mov	r3, r2
 800145c:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	887a      	ldrh	r2, [r7, #2]
 8001462:	88b9      	ldrh	r1, [r7, #4]
 8001464:	88f8      	ldrh	r0, [r7, #6]
 8001466:	f7ff fe15 	bl	8001094 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	883a      	ldrh	r2, [r7, #0]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	461a      	mov	r2, r3
 8001474:	69b9      	ldr	r1, [r7, #24]
 8001476:	202c      	movs	r0, #44	@ 0x2c
 8001478:	f000 fabe 	bl	80019f8 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <ili9486_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	80bb      	strh	r3, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80014a2:	883b      	ldrh	r3, [r7, #0]
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	88b9      	ldrh	r1, [r7, #4]
 80014a8:	88f8      	ldrh	r0, [r7, #6]
 80014aa:	f7ff fdf3 	bl	8001094 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 80014ae:	2201      	movs	r2, #1
 80014b0:	490b      	ldr	r1, [pc, #44]	@ (80014e0 <ili9486_ReadRGBImage+0x5c>)
 80014b2:	203a      	movs	r0, #58	@ 0x3a
 80014b4:	f000 fa50 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, pData, Xsize * Ysize, 1);
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	883a      	ldrh	r2, [r7, #0]
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	2301      	movs	r3, #1
 80014c4:	69b9      	ldr	r1, [r7, #24]
 80014c6:	202e      	movs	r0, #46	@ 0x2e
 80014c8:	f000 fb6a 	bl	8001ba0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 80014cc:	2201      	movs	r2, #1
 80014ce:	4905      	ldr	r1, [pc, #20]	@ (80014e4 <ili9486_ReadRGBImage+0x60>)
 80014d0:	203a      	movs	r0, #58	@ 0x3a
 80014d2:	f000 fa41 	bl	8001958 <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	bf00      	nop
 80014e0:	08005f9c 	.word	0x08005f9c
 80014e4:	08005f6c 	.word	0x08005f6c

080014e8 <ili9486_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9486_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
 80014f2:	460b      	mov	r3, r1
 80014f4:	80bb      	strh	r3, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9486_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 80014fa:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <ili9486_Scroll+0xb8>)
 80014fc:	885b      	ldrh	r3, [r3, #2]
 80014fe:	88ba      	ldrh	r2, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d104      	bne.n	800150e <ili9486_Scroll+0x26>
 8001504:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <ili9486_Scroll+0xb8>)
 8001506:	88db      	ldrh	r3, [r3, #6]
 8001508:	887a      	ldrh	r2, [r7, #2]
 800150a:	429a      	cmp	r2, r3
 800150c:	d013      	beq.n	8001536 <ili9486_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 800150e:	4a24      	ldr	r2, [pc, #144]	@ (80015a0 <ili9486_Scroll+0xb8>)
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8001514:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <ili9486_Scroll+0xb8>)
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9486_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 800151a:	88ba      	ldrh	r2, [r7, #4]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	4413      	add	r3, r2
 8001520:	b29b      	uxth	r3, r3
 8001522:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <ili9486_Scroll+0xb8>)
 800152a:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9486_VSCRDEF, &scrparam[1], 3);
 800152c:	2203      	movs	r2, #3
 800152e:	491d      	ldr	r1, [pc, #116]	@ (80015a4 <ili9486_Scroll+0xbc>)
 8001530:	2033      	movs	r0, #51	@ 0x33
 8001532:	f000 fa61 	bl	80019f8 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	425b      	negs	r3, r3
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <ili9486_Scroll+0xb8>)
 800153e:	8892      	ldrh	r2, [r2, #4]
 8001540:	fb93 f1f2 	sdiv	r1, r3, r2
 8001544:	fb01 f202 	mul.w	r2, r1, r2
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da0a      	bge.n	800156a <ili9486_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <ili9486_Scroll+0xb8>)
 8001556:	889a      	ldrh	r2, [r3, #4]
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4413      	add	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <ili9486_Scroll+0xb8>)
 8001560:	885b      	ldrh	r3, [r3, #2]
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	80fb      	strh	r3, [r7, #6]
 8001568:	e005      	b.n	8001576 <ili9486_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <ili9486_Scroll+0xb8>)
 800156c:	885a      	ldrh	r2, [r3, #2]
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	4413      	add	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <ili9486_Scroll+0xb8>)
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	4293      	cmp	r3, r2
 8001580:	d009      	beq.n	8001596 <ili9486_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <ili9486_Scroll+0xb8>)
 8001586:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9486_VSCRSADD, scrparam[0], 1);
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <ili9486_Scroll+0xb8>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	4619      	mov	r1, r3
 8001590:	2037      	movs	r0, #55	@ 0x37
 8001592:	f000 f97f 	bl	8001894 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9486_LCDMUTEX_POP();
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000d8 	.word	0x200000d8
 80015a4:	200000da 	.word	0x200000da

080015a8 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  while(c--);
 80015b0:	bf00      	nop
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1fa      	bne.n	80015b2 <LCD_IO_Delay+0xa>
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f001 fed4 	bl	8003380 <HAL_Delay>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB1ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 80015fc:	4b4f      	ldr	r3, [pc, #316]	@ (800173c <LCD_IO_Init+0x144>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <LCD_IO_Init+0x144>)
 8001602:	f043 0306 	orr.w	r3, r3, #6
 8001606:	6313      	str	r3, [r2, #48]	@ 0x30
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          // RST = 1
 8001608:	4b4d      	ldr	r3, [pc, #308]	@ (8001740 <LCD_IO_Init+0x148>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 800160e:	4b4d      	ldr	r3, [pc, #308]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001616:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001618:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800161c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_ODR(LCD_CS) = 1;                /* CS = 1 */
 800161e:	4b4a      	ldr	r3, [pc, #296]	@ (8001748 <LCD_IO_Init+0x150>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
  LCD_RS_DATA;                          /* RS = 1 */
 8001624:	4b49      	ldr	r3, [pc, #292]	@ (800174c <LCD_IO_Init+0x154>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_WR) = 1;                /* WR = 1 */
 800162a:	4b49      	ldr	r3, [pc, #292]	@ (8001750 <LCD_IO_Init+0x158>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_RD) = 1;                /* RD = 1 */
 8001630:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <LCD_IO_Init+0x15c>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8001636:	4b48      	ldr	r3, [pc, #288]	@ (8001758 <LCD_IO_Init+0x160>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800163e:	4a46      	ldr	r2, [pc, #280]	@ (8001758 <LCD_IO_Init+0x160>)
 8001640:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001644:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <LCD_IO_Init+0x160>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800164e:	4a42      	ldr	r2, [pc, #264]	@ (8001758 <LCD_IO_Init+0x160>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001654:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8001656:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <LCD_IO_Init+0x160>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800165e:	4a3e      	ldr	r2, [pc, #248]	@ (8001758 <LCD_IO_Init+0x160>)
 8001660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001664:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8001666:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800166e:	4a35      	ldr	r2, [pc, #212]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001674:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8001676:	4b33      	ldr	r3, [pc, #204]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001680:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8001684:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8001688:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800168a:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <LCD_IO_Init+0x160>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4a32      	ldr	r2, [pc, #200]	@ (8001758 <LCD_IO_Init+0x160>)
 8001690:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8001694:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <LCD_IO_Init+0x160>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4a2f      	ldr	r2, [pc, #188]	@ (8001758 <LCD_IO_Init+0x160>)
 800169c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80016a0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <LCD_IO_Init+0x160>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001758 <LCD_IO_Init+0x160>)
 80016a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80016ac:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 80016ae:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4a24      	ldr	r2, [pc, #144]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80016b8:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4a21      	ldr	r2, [pc, #132]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016c0:	f043 0303 	orr.w	r3, r3, #3
 80016c4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 80016c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016cc:	f043 030c 	orr.w	r3, r3, #12
 80016d0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016d8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80016dc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4a18      	ldr	r2, [pc, #96]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80016e8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4a15      	ldr	r2, [pc, #84]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016f0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80016f4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <LCD_IO_Init+0x14c>)
 80016fc:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001700:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4a0f      	ldr	r2, [pc, #60]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001708:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800170c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <LCD_IO_Init+0x14c>)
 8001714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001718:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff ff55 	bl	80015ca <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <LCD_IO_Init+0x148>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff ff4f 	bl	80015ca <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <LCD_IO_Init+0x148>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff ff49 	bl	80015ca <LCD_Delay>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	424082b0 	.word	0x424082b0
 8001744:	40020400 	.word	0x40020400
 8001748:	424102b4 	.word	0x424102b4
 800174c:	424102b8 	.word	0x424102b8
 8001750:	424102bc 	.word	0x424102bc
 8001754:	424082a8 	.word	0x424082a8
 8001758:	40020800 	.word	0x40020800

0800175c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <LCD_IO_WriteCmd8+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 800176c:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <LCD_IO_WriteCmd8+0x54>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	4a10      	ldr	r2, [pc, #64]	@ (80017b4 <LCD_IO_WriteCmd8+0x58>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	7013      	strb	r3, [r2, #0]
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <LCD_IO_WriteCmd8+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001780:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <LCD_IO_WriteCmd8+0x5c>)
 8001782:	619a      	str	r2, [r3, #24]
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <LCD_IO_WriteCmd8+0x60>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	2008      	movs	r0, #8
 800178c:	f7ff ff0c 	bl	80015a8 <LCD_IO_Delay>
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <LCD_IO_WriteCmd8+0x60>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <LCD_IO_WriteCmd8+0x54>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <LCD_IO_WriteCmd8+0x50>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	424102b4 	.word	0x424102b4
 80017b0:	424102b8 	.word	0x424102b8
 80017b4:	200000e0 	.word	0x200000e0
 80017b8:	40020400 	.word	0x40020400
 80017bc:	424102bc 	.word	0x424102bc

080017c0 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <LCD_IO_WriteData8+0x44>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
  LCD_DATA8_WRITE(Data);
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <LCD_IO_WriteData8+0x48>)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	7013      	strb	r3, [r2, #0]
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <LCD_IO_WriteData8+0x48>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <LCD_IO_WriteData8+0x4c>)
 80017e0:	619a      	str	r2, [r3, #24]
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <LCD_IO_WriteData8+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	2008      	movs	r0, #8
 80017ea:	f7ff fedd 	bl	80015a8 <LCD_IO_Delay>
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <LCD_IO_WriteData8+0x50>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <LCD_IO_WriteData8+0x44>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	424102b4 	.word	0x424102b4
 8001808:	200000e0 	.word	0x200000e0
 800180c:	40020400 	.word	0x40020400
 8001810:	424102bc 	.word	0x424102bc

08001814 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <LCD_IO_WriteData16+0x70>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
  LCD_DATA16_WRITE(Data);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b29b      	uxth	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <LCD_IO_WriteData16+0x74>)
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <LCD_IO_WriteData16+0x74>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <LCD_IO_WriteData16+0x78>)
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <LCD_IO_WriteData16+0x7c>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	2008      	movs	r0, #8
 8001844:	f7ff feb0 	bl	80015a8 <LCD_IO_Delay>
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <LCD_IO_WriteData16+0x7c>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <LCD_IO_WriteData16+0x74>)
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <LCD_IO_WriteData16+0x74>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <LCD_IO_WriteData16+0x78>)
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <LCD_IO_WriteData16+0x7c>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	2008      	movs	r0, #8
 800186a:	f7ff fe9d 	bl	80015a8 <LCD_IO_Delay>
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <LCD_IO_WriteData16+0x7c>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <LCD_IO_WriteData16+0x70>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	424102b4 	.word	0x424102b4
 8001888:	200000e0 	.word	0x200000e0
 800188c:	40020400 	.word	0x40020400
 8001890:	424102bc 	.word	0x424102bc

08001894 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	603a      	str	r2, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	460b      	mov	r3, r1
 80018a2:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 80018a4:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	4a26      	ldr	r2, [pc, #152]	@ (800194c <LCD_IO_WriteCmd8DataFill16+0xb8>)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	7013      	strb	r3, [r2, #0]
 80018b6:	4b25      	ldr	r3, [pc, #148]	@ (800194c <LCD_IO_WriteCmd8DataFill16+0xb8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	2008      	movs	r0, #8
 80018ca:	f7ff fe6d 	bl	80015a8 <LCD_IO_Delay>
 80018ce:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
  while(Size--)
 80018da:	e027      	b.n	800192c <LCD_IO_WriteCmd8DataFill16+0x98>
  {
    LCD_DATA16_WRITE(Data);
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <LCD_IO_WriteCmd8DataFill16+0xb8>)
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <LCD_IO_WriteCmd8DataFill16+0xb8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 80018f2:	619a      	str	r2, [r3, #24]
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	2008      	movs	r0, #8
 80018fc:	f7ff fe54 	bl	80015a8 <LCD_IO_Delay>
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	88bb      	ldrh	r3, [r7, #4]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <LCD_IO_WriteCmd8DataFill16+0xb8>)
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <LCD_IO_WriteCmd8DataFill16+0xbc>)
 8001918:	619a      	str	r2, [r3, #24]
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	2008      	movs	r0, #8
 8001922:	f7ff fe41 	bl	80015a8 <LCD_IO_Delay>
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <LCD_IO_WriteCmd8DataFill16+0xc0>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  while(Size--)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	603a      	str	r2, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1d2      	bne.n	80018dc <LCD_IO_WriteCmd8DataFill16+0x48>
  }
  LCD_CS_OFF;
 8001936:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	424102b4 	.word	0x424102b4
 8001948:	424102b8 	.word	0x424102b8
 800194c:	200000e0 	.word	0x200000e0
 8001950:	40020400 	.word	0x40020400
 8001954:	424102bc 	.word	0x424102bc

08001958 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001966:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <LCD_IO_WriteCmd8MultipleData8+0x90>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	4a1e      	ldr	r2, [pc, #120]	@ (80019ec <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	7013      	strb	r3, [r2, #0]
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <LCD_IO_WriteCmd8MultipleData8+0x94>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001980:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <LCD_IO_WriteCmd8MultipleData8+0x98>)
 8001982:	619a      	str	r2, [r3, #24]
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	2008      	movs	r0, #8
 800198c:	f7ff fe0c 	bl	80015a8 <LCD_IO_Delay>
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <LCD_IO_WriteCmd8MultipleData8+0x90>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

  while(Size--)
 800199c:	e015      	b.n	80019ca <LCD_IO_WriteCmd8MultipleData8+0x72>
  {
    LCD_DATA8_WRITE(*pData);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <LCD_IO_WriteCmd8MultipleData8+0x98>)
 80019b0:	619a      	str	r2, [r3, #24]
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	2008      	movs	r0, #8
 80019ba:	f7ff fdf5 	bl	80015a8 <LCD_IO_Delay>
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <LCD_IO_WriteCmd8MultipleData8+0x9c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
    pData ++;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e4      	bne.n	800199e <LCD_IO_WriteCmd8MultipleData8+0x46>
  }
  LCD_CS_OFF;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	424102b4 	.word	0x424102b4
 80019e8:	424102b8 	.word	0x424102b8
 80019ec:	200000e0 	.word	0x200000e0
 80019f0:	40020400 	.word	0x40020400
 80019f4:	424102bc 	.word	0x424102bc

080019f8 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001a06:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	7013      	strb	r3, [r2, #0]
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001a20:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 8001a22:	619a      	str	r2, [r3, #24]
 8001a24:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	2008      	movs	r0, #8
 8001a2c:	f7ff fdbc 	bl	80015a8 <LCD_IO_Delay>
 8001a30:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  while(Size--)
 8001a3c:	e02c      	b.n	8001a98 <LCD_IO_WriteCmd8MultipleData16+0xa0>
  {
    LCD_DATA16_WRITE(*pData);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 8001a56:	619a      	str	r2, [r3, #24]
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	2008      	movs	r0, #8
 8001a60:	f7ff fda2 	bl	80015a8 <LCD_IO_Delay>
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <LCD_IO_WriteCmd8MultipleData16+0xc4>)
 8001a7e:	619a      	str	r2, [r3, #24]
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	2008      	movs	r0, #8
 8001a88:	f7ff fd8e 	bl	80015a8 <LCD_IO_Delay>
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <LCD_IO_WriteCmd8MultipleData16+0xc8>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    pData ++;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3302      	adds	r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1cd      	bne.n	8001a3e <LCD_IO_WriteCmd8MultipleData16+0x46>
  }
  LCD_CS_OFF;
 8001aa2:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	424102b4 	.word	0x424102b4
 8001ab4:	424102b8 	.word	0x424102b8
 8001ab8:	200000e0 	.word	0x200000e0
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	424102bc 	.word	0x424102bc

08001ac4 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b88 <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001ada:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b90 <LCD_IO_ReadCmd8MultipleData8+0xcc>)
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	7013      	strb	r3, [r2, #0]
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <LCD_IO_ReadCmd8MultipleData8+0xcc>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001aee:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001af0:	619a      	str	r2, [r3, #24]
 8001af2:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <LCD_IO_ReadCmd8MultipleData8+0xd4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	2008      	movs	r0, #8
 8001afa:	f7ff fd55 	bl	80015a8 <LCD_IO_Delay>
 8001afe:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <LCD_IO_ReadCmd8MultipleData8+0xd4>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a21      	ldr	r2, [pc, #132]	@ (8001b94 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001b10:	0c1b      	lsrs	r3, r3, #16
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8001b16:	e008      	b.n	8001b2a <LCD_IO_ReadCmd8MultipleData8+0x66>
    LCD_DUMMY_READ;
 8001b18:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	2012      	movs	r0, #18
 8001b20:	f7ff fd42 	bl	80015a8 <LCD_IO_Delay>
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	1e5a      	subs	r2, r3, #1
 8001b2e:	603a      	str	r2, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f1      	bne.n	8001b18 <LCD_IO_ReadCmd8MultipleData8+0x54>
  while(Size--)
 8001b34:	e011      	b.n	8001b5a <LCD_IO_ReadCmd8MultipleData8+0x96>
  {
    LCD_DATA8_READ(d);
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	2012      	movs	r0, #18
 8001b3e:	f7ff fd33 	bl	80015a8 <LCD_IO_Delay>
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	75fb      	strb	r3, [r7, #23]
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <LCD_IO_ReadCmd8MultipleData8+0xd8>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
    *pData = d;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	7dfa      	ldrb	r2, [r7, #23]
 8001b52:	701a      	strb	r2, [r3, #0]
    pData++;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e8      	bne.n	8001b36 <LCD_IO_ReadCmd8MultipleData8+0x72>
  }
  LCD_CS_OFF;
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	4a08      	ldr	r2, [pc, #32]	@ (8001b94 <LCD_IO_ReadCmd8MultipleData8+0xd0>)
 8001b74:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8001b78:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8001b7c:	6013      	str	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	424102b4 	.word	0x424102b4
 8001b8c:	424102b8 	.word	0x424102b8
 8001b90:	200000e0 	.word	0x200000e0
 8001b94:	40020400 	.word	0x40020400
 8001b98:	424102bc 	.word	0x424102bc
 8001b9c:	424082a8 	.word	0x424082a8

08001ba0 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_DIRWRITE;
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint8_t  rgb888[3];
  LCD_CS_ON;
 8001bb0:	4b44      	ldr	r3, [pc, #272]	@ (8001cc4 <LCD_IO_ReadCmd8MultipleData24to16+0x124>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001bb6:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <LCD_IO_ReadCmd8MultipleData24to16+0x128>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4a43      	ldr	r2, [pc, #268]	@ (8001ccc <LCD_IO_ReadCmd8MultipleData24to16+0x12c>)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	7013      	strb	r3, [r2, #0]
 8001bc2:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <LCD_IO_ReadCmd8MultipleData24to16+0x12c>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001bca:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001bcc:	619a      	str	r2, [r3, #24]
 8001bce:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <LCD_IO_ReadCmd8MultipleData24to16+0x134>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	2008      	movs	r0, #8
 8001bd6:	f7ff fce7 	bl	80015a8 <LCD_IO_Delay>
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <LCD_IO_ReadCmd8MultipleData24to16+0x134>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <LCD_IO_ReadCmd8MultipleData24to16+0x128>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8001be6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a39      	ldr	r2, [pc, #228]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8001bf2:	e008      	b.n	8001c06 <LCD_IO_ReadCmd8MultipleData24to16+0x66>
    LCD_DUMMY_READ;
 8001bf4:	4b38      	ldr	r3, [pc, #224]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	2012      	movs	r0, #18
 8001bfc:	f7ff fcd4 	bl	80015a8 <LCD_IO_Delay>
 8001c00:	4b35      	ldr	r3, [pc, #212]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	603a      	str	r2, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f1      	bne.n	8001bf4 <LCD_IO_ReadCmd8MultipleData24to16+0x54>
  while(Size--)
 8001c10:	e042      	b.n	8001c98 <LCD_IO_ReadCmd8MultipleData24to16+0xf8>
  {
    LCD_DATA8_READ(rgb888[0]);
 8001c12:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	2012      	movs	r0, #18
 8001c1a:	f7ff fcc5 	bl	80015a8 <LCD_IO_Delay>
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	753b      	strb	r3, [r7, #20]
 8001c26:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[1]);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	2012      	movs	r0, #18
 8001c34:	f7ff fcb8 	bl	80015a8 <LCD_IO_Delay>
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	757b      	strb	r3, [r7, #21]
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[2]);
 8001c46:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	2012      	movs	r0, #18
 8001c4e:	f7ff fcab 	bl	80015a8 <LCD_IO_Delay>
 8001c52:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	75bb      	strb	r3, [r7, #22]
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <LCD_IO_ReadCmd8MultipleData24to16+0x138>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
    #if LCD_REVERSE16 == 0
    *pData = ((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
 8001c60:	7d3b      	ldrb	r3, [r7, #20]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c6a:	f023 0307 	bic.w	r3, r3, #7
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	7d7b      	ldrb	r3, [r7, #21]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	7dbb      	ldrb	r3, [r7, #22]
 8001c82:	08db      	lsrs	r3, r3, #3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	801a      	strh	r2, [r3, #0]
    #else
    *pData = __REVSH((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
    #endif
    pData++;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3302      	adds	r3, #2
 8001c96:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1b7      	bne.n	8001c12 <LCD_IO_ReadCmd8MultipleData24to16+0x72>
  }
  LCD_CS_OFF;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <LCD_IO_ReadCmd8MultipleData24to16+0x124>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	041b      	lsls	r3, r3, #16
 8001cb0:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <LCD_IO_ReadCmd8MultipleData24to16+0x130>)
 8001cb2:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8001cb6:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	424102b4 	.word	0x424102b4
 8001cc8:	424102b8 	.word	0x424102b8
 8001ccc:	200000e0 	.word	0x200000e0
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	424102bc 	.word	0x424102bc
 8001cd8:	424082a8 	.word	0x424082a8

08001cdc <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <BSP_LCD_Init+0x3c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <BSP_LCD_Init+0x40>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <BSP_LCD_Init+0x40>)
 8001cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cfa:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <BSP_LCD_Init+0x40>)
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <BSP_LCD_Init+0x44>)
 8001d00:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 f846 	bl	8001d94 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000054 	.word	0x20000054
 8001d1c:	200000e4 	.word	0x200000e4
 8001d20:	20000008 	.word	0x20000008

08001d24 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <BSP_LCD_GetXSize+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2e:	4798      	blx	r3
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000054 	.word	0x20000054

08001d3c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <BSP_LCD_GetYSize+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	4798      	blx	r3
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000054 	.word	0x20000054

08001d54 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4a03      	ldr	r2, [pc, #12]	@ (8001d70 <BSP_LCD_SetTextColor+0x1c>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	200000e4 	.word	0x200000e4

08001d74 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <BSP_LCD_SetFont+0x1c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6093      	str	r3, [r2, #8]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	200000e4 	.word	0x200000e4

08001d94 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <BSP_LCD_Clear+0x38>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001da4:	f7ff ffbe 	bl	8001d24 <BSP_LCD_GetXSize>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461d      	mov	r5, r3
 8001dac:	f7ff ffc6 	bl	8001d3c <BSP_LCD_GetYSize>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4613      	mov	r3, r2
 8001dba:	462a      	mov	r2, r5
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	47a0      	blx	r4
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000054 	.word	0x20000054

08001dd0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	80bb      	strh	r3, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <BSP_LCD_DisplayChar+0x50>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001dec:	490c      	ldr	r1, [pc, #48]	@ (8001e20 <BSP_LCD_DisplayChar+0x50>)
 8001dee:	6889      	ldr	r1, [r1, #8]
 8001df0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001df2:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <BSP_LCD_DisplayChar+0x50>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	889b      	ldrh	r3, [r3, #4]
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da00      	bge.n	8001e04 <BSP_LCD_DisplayChar+0x34>
 8001e02:	3307      	adds	r3, #7
 8001e04:	10db      	asrs	r3, r3, #3
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001e0a:	441a      	add	r2, r3
 8001e0c:	88b9      	ldrh	r1, [r7, #4]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f8f1 	bl	8001ff8 <DrawChar>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200000e4 	.word	0x200000e4

08001e24 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60ba      	str	r2, [r7, #8]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	81fb      	strh	r3, [r7, #14]
 8001e32:	460b      	mov	r3, r1
 8001e34:	81bb      	strh	r3, [r7, #12]
 8001e36:	4613      	mov	r3, r2
 8001e38:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	83fb      	strh	r3, [r7, #30]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001e4e:	e002      	b.n	8001e56 <BSP_LCD_DisplayStringAt+0x32>
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	3301      	adds	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	617a      	str	r2, [r7, #20]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f6      	bne.n	8001e50 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001e62:	f7ff ff5f 	bl	8001d24 <BSP_LCD_GetXSize>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <BSP_LCD_DisplayStringAt+0x11c>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	889b      	ldrh	r3, [r3, #4]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d014      	beq.n	8001ea8 <BSP_LCD_DisplayStringAt+0x84>
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	dc23      	bgt.n	8001eca <BSP_LCD_DisplayStringAt+0xa6>
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d002      	beq.n	8001e8c <BSP_LCD_DisplayStringAt+0x68>
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d011      	beq.n	8001eae <BSP_LCD_DisplayStringAt+0x8a>
 8001e8a:	e01e      	b.n	8001eca <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <BSP_LCD_DisplayStringAt+0x11c>)
 8001e94:	6892      	ldr	r2, [r2, #8]
 8001e96:	8892      	ldrh	r2, [r2, #4]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	89fb      	ldrh	r3, [r7, #14]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	83fb      	strh	r3, [r7, #30]
      break;
 8001ea6:	e013      	b.n	8001ed0 <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	83fb      	strh	r3, [r7, #30]
      break;
 8001eac:	e010      	b.n	8001ed0 <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <BSP_LCD_DisplayStringAt+0x11c>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	889b      	ldrh	r3, [r3, #4]
 8001ebc:	fb12 f303 	smulbb	r3, r2, r3
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	83fb      	strh	r3, [r7, #30]
      break;
 8001ec8:	e002      	b.n	8001ed0 <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	83fb      	strh	r3, [r7, #30]
      break;
 8001ece:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001ed0:	e012      	b.n	8001ef8 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	89b9      	ldrh	r1, [r7, #12]
 8001ed8:	8bfb      	ldrh	r3, [r7, #30]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff78 	bl	8001dd0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <BSP_LCD_DisplayStringAt+0x11c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	889a      	ldrh	r2, [r3, #4]
 8001ee6:	8bfb      	ldrh	r3, [r7, #30]
 8001ee8:	4413      	add	r3, r2
 8001eea:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
    i++;
 8001ef2:	8bbb      	ldrh	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2dc      	uxtb	r4, r3
 8001f06:	f7ff ff0d 	bl	8001d24 <BSP_LCD_GetXSize>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	8bbb      	ldrh	r3, [r7, #28]
 8001f10:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <BSP_LCD_DisplayStringAt+0x11c>)
 8001f12:	6892      	ldr	r2, [r2, #8]
 8001f14:	8892      	ldrh	r2, [r2, #4]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <BSP_LCD_DisplayStringAt+0x11c>)
 8001f20:	6892      	ldr	r2, [r2, #8]
 8001f22:	8892      	ldrh	r2, [r2, #4]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bfac      	ite	ge
 8001f28:	2301      	movge	r3, #1
 8001f2a:	2300      	movlt	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4023      	ands	r3, r4
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1cd      	bne.n	8001ed2 <BSP_LCD_DisplayStringAt+0xae>
  }
}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	3724      	adds	r7, #36	@ 0x24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	200000e4 	.word	0x200000e4

08001f44 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	603a      	str	r2, [r7, #0]
 8001f4e:	80fb      	strh	r3, [r7, #6]
 8001f50:	460b      	mov	r3, r1
 8001f52:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3312      	adds	r3, #18
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3313      	adds	r3, #19
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	441a      	add	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	3314      	adds	r3, #20
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	441a      	add	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3315      	adds	r3, #21
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	4413      	add	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3316      	adds	r3, #22
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	3317      	adds	r3, #23
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	441a      	add	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	3318      	adds	r3, #24
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	441a      	add	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	3319      	adds	r3, #25
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	4413      	add	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	88b9      	ldrh	r1, [r7, #4]
 8001fb6:	88f8      	ldrh	r0, [r7, #6]
 8001fb8:	f000 f910 	bl	80021dc <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <BSP_LCD_DrawBitmap+0xb0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <BSP_LCD_DrawBitmap+0xb0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	88b9      	ldrh	r1, [r7, #4]
 8001fce:	88f8      	ldrh	r0, [r7, #6]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001fd4:	f7ff fea6 	bl	8001d24 <BSP_LCD_GetXSize>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461c      	mov	r4, r3
 8001fdc:	f7ff feae 	bl	8001d3c <BSP_LCD_GetYSize>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f8f8 	bl	80021dc <SetDisplayWindow>
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	20000054 	.word	0x20000054

08001ff8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	603a      	str	r2, [r7, #0]
 8002002:	80fb      	strh	r3, [r7, #6]
 8002004:	460b      	mov	r3, r1
 8002006:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	82fb      	strh	r3, [r7, #22]
 8002018:	2300      	movs	r3, #0
 800201a:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8002028:	4b63      	ldr	r3, [pc, #396]	@ (80021b8 <DrawChar+0x1c0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	88db      	ldrh	r3, [r3, #6]
 800202e:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8002030:	4b61      	ldr	r3, [pc, #388]	@ (80021b8 <DrawChar+0x1c0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	889b      	ldrh	r3, [r3, #4]
 8002036:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8002038:	8afa      	ldrh	r2, [r7, #22]
 800203a:	8abb      	ldrh	r3, [r7, #20]
 800203c:	fb12 f303 	smulbb	r3, r2, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	331b      	adds	r3, #27
 8002044:	b29b      	uxth	r3, r3
 8002046:	4a5d      	ldr	r2, [pc, #372]	@ (80021bc <DrawChar+0x1c4>)
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 800204e:	8afb      	ldrh	r3, [r7, #22]
 8002050:	8aba      	ldrh	r2, [r7, #20]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	331b      	adds	r3, #27
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	141a      	asrs	r2, r3, #16
 800205c:	4b58      	ldr	r3, [pc, #352]	@ (80021c0 <DrawChar+0x1c8>)
 800205e:	b292      	uxth	r2, r2
 8002060:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8002062:	4b58      	ldr	r3, [pc, #352]	@ (80021c4 <DrawChar+0x1cc>)
 8002064:	2236      	movs	r2, #54	@ 0x36
 8002066:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8002068:	4a57      	ldr	r2, [pc, #348]	@ (80021c8 <DrawChar+0x1d0>)
 800206a:	8abb      	ldrh	r3, [r7, #20]
 800206c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800206e:	8abb      	ldrh	r3, [r7, #20]
 8002070:	141a      	asrs	r2, r3, #16
 8002072:	4b56      	ldr	r3, [pc, #344]	@ (80021cc <DrawChar+0x1d4>)
 8002074:	b292      	uxth	r2, r2
 8002076:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8002078:	4a55      	ldr	r2, [pc, #340]	@ (80021d0 <DrawChar+0x1d8>)
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	141a      	asrs	r2, r3, #16
 8002082:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <DrawChar+0x1dc>)
 8002084:	b292      	uxth	r2, r2
 8002086:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8002088:	8abb      	ldrh	r3, [r7, #20]
 800208a:	3307      	adds	r3, #7
 800208c:	2b00      	cmp	r3, #0
 800208e:	da00      	bge.n	8002092 <DrawChar+0x9a>
 8002090:	3307      	adds	r3, #7
 8002092:	10db      	asrs	r3, r3, #3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	b2da      	uxtb	r2, r3
 800209a:	8abb      	ldrh	r3, [r7, #20]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a6:	e078      	b.n	800219a <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 80020a8:	8abb      	ldrh	r3, [r7, #20]
 80020aa:	3307      	adds	r3, #7
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da00      	bge.n	80020b2 <DrawChar+0xba>
 80020b0:	3307      	adds	r3, #7
 80020b2:	10db      	asrs	r3, r3, #3
 80020b4:	461a      	mov	r2, r3
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 80020c2:	8abb      	ldrh	r3, [r7, #20]
 80020c4:	3b11      	subs	r3, #17
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d80c      	bhi.n	80020e4 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	041a      	lsls	r2, r3, #16
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	4313      	orrs	r3, r2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	3202      	adds	r2, #2
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 80020e4:	8abb      	ldrh	r3, [r7, #20]
 80020e6:	3b09      	subs	r3, #9
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d807      	bhi.n	80020fc <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	3201      	adds	r2, #1
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 80020fc:	8abb      	ldrh	r3, [r7, #20]
 80020fe:	3b01      	subs	r3, #1
 8002100:	2b07      	cmp	r3, #7
 8002102:	d802      	bhi.n	800210a <DrawChar+0x112>
    {
      line =  pchar[0];
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	e03d      	b.n	800218c <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8002110:	8afa      	ldrh	r2, [r7, #22]
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	8aba      	ldrh	r2, [r7, #20]
 800211a:	fb03 f202 	mul.w	r2, r3, r2
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	4413      	add	r3, r2
 8002122:	331b      	adds	r3, #27
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8002128:	8aba      	ldrh	r2, [r7, #20]
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	4413      	add	r3, r2
 8002132:	3b01      	subs	r3, #1
 8002134:	2201      	movs	r2, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	461a      	mov	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8002144:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <DrawChar+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <DrawChar+0x1e0>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <DrawChar+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0a1a      	lsrs	r2, r3, #8
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	3301      	adds	r3, #1
 800215e:	b2d1      	uxtb	r1, r2
 8002160:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <DrawChar+0x1e0>)
 8002162:	54d1      	strb	r1, [r2, r3]
 8002164:	e00f      	b.n	8002186 <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <DrawChar+0x1c0>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	b2d9      	uxtb	r1, r3
 800216c:	4a1a      	ldr	r2, [pc, #104]	@ (80021d8 <DrawChar+0x1e0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	460a      	mov	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <DrawChar+0x1c0>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	0a1a      	lsrs	r2, r3, #8
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	3301      	adds	r3, #1
 8002180:	b2d1      	uxtb	r1, r2
 8002182:	4a15      	ldr	r2, [pc, #84]	@ (80021d8 <DrawChar+0x1e0>)
 8002184:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	3301      	adds	r3, #1
 800218a:	623b      	str	r3, [r7, #32]
 800218c:	8abb      	ldrh	r3, [r7, #20]
 800218e:	6a3a      	ldr	r2, [r7, #32]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3bd      	bcc.n	8002110 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	3301      	adds	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
 800219a:	8afb      	ldrh	r3, [r7, #22]
 800219c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219e:	429a      	cmp	r2, r3
 80021a0:	d382      	bcc.n	80020a8 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 80021a2:	88b9      	ldrh	r1, [r7, #4]
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	4a0c      	ldr	r2, [pc, #48]	@ (80021d8 <DrawChar+0x1e0>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fecb 	bl	8001f44 <BSP_LCD_DrawBitmap>
}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	@ 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200000e4 	.word	0x200000e4
 80021bc:	200000f2 	.word	0x200000f2
 80021c0:	200000f4 	.word	0x200000f4
 80021c4:	200000fa 	.word	0x200000fa
 80021c8:	20000102 	.word	0x20000102
 80021cc:	20000104 	.word	0x20000104
 80021d0:	20000106 	.word	0x20000106
 80021d4:	20000108 	.word	0x20000108
 80021d8:	200000f0 	.word	0x200000f0

080021dc <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4604      	mov	r4, r0
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	80fb      	strh	r3, [r7, #6]
 80021ee:	4603      	mov	r3, r0
 80021f0:	80bb      	strh	r3, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <SetDisplayWindow+0x40>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SetDisplayWindow+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69dc      	ldr	r4, [r3, #28]
 800220a:	883b      	ldrh	r3, [r7, #0]
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	88b9      	ldrh	r1, [r7, #4]
 8002210:	88f8      	ldrh	r0, [r7, #6]
 8002212:	47a0      	blx	r4
  }  
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	20000054 	.word	0x20000054

08002220 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8002220:	b4b0      	push	{r4, r5, r7}
 8002222:	b08f      	sub	sp, #60	@ 0x3c
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8002228:	f240 13b1 	movw	r3, #433	@ 0x1b1
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800222e:	2307      	movs	r3, #7
 8002230:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8002234:	2307      	movs	r3, #7
 8002236:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8002240:	23ff      	movs	r3, #255	@ 0xff
 8002242:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8002246:	2364      	movs	r3, #100	@ 0x64
 8002248:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 800224c:	2308      	movs	r3, #8
 800224e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	461d      	mov	r5, r3
 8002254:	f107 040c 	add.w	r4, r7, #12
 8002258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002260:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002264:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	373c      	adds	r7, #60	@ 0x3c
 800226c:	46bd      	mov	sp, r7
 800226e:	bcb0      	pop	{r4, r5, r7}
 8002270:	4770      	bx	lr

08002272 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800227c:	2101      	movs	r1, #1
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f9ff 	bl	8002682 <LoRa_read>
 8002284:	4603      	mov	r3, r0
 8002286:	73bb      	strb	r3, [r7, #14]
	data = read;
 8002288:	7bbb      	ldrb	r3, [r7, #14]
 800228a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8002292:	7bbb      	ldrb	r3, [r7, #14]
 8002294:	f023 0307 	bic.w	r3, r3, #7
 8002298:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
 80022a0:	e03e      	b.n	8002320 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10c      	bne.n	80022c2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80022a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022ac:	f023 0307 	bic.w	r3, r3, #7
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	61da      	str	r2, [r3, #28]
 80022c0:	e02e      	b.n	8002320 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d10c      	bne.n	80022e2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80022c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022cc:	f023 0307 	bic.w	r3, r3, #7
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	f043 0303 	orr.w	r3, r3, #3
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	61da      	str	r2, [r3, #28]
 80022e0:	e01e      	b.n	8002320 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80022e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022ec:	f023 0307 	bic.w	r3, r3, #7
 80022f0:	b25b      	sxtb	r3, r3
 80022f2:	f043 0305 	orr.w	r3, r3, #5
 80022f6:	b25b      	sxtb	r3, r3
 80022f8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2205      	movs	r2, #5
 80022fe:	61da      	str	r2, [r3, #28]
 8002300:	e00e      	b.n	8002320 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d10b      	bne.n	8002320 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8002308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800230c:	f023 0307 	bic.w	r3, r3, #7
 8002310:	b25b      	sxtb	r3, r3
 8002312:	f043 0306 	orr.w	r3, r3, #6
 8002316:	b25b      	sxtb	r3, r3
 8002318:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2206      	movs	r2, #6
 800231e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	461a      	mov	r2, r3
 8002324:	2101      	movs	r1, #1
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f9c5 	bl	80026b6 <LoRa_write>
	//HAL_Delay(10);
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	889b      	ldrh	r3, [r3, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	4619      	mov	r1, r3
 8002350:	f001 fad0 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6998      	ldr	r0, [r3, #24]
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	f001 ffc1 	bl	80042e6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002364:	bf00      	nop
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fbc6 	bl	8004afc <HAL_SPI_GetState>
 8002370:	4603      	mov	r3, r0
 8002372:	2b01      	cmp	r3, #1
 8002374:	d1f7      	bne.n	8002366 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6998      	ldr	r0, [r3, #24]
 800237a:	8b3a      	ldrh	r2, [r7, #24]
 800237c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	f002 f8f3 	bl	800456c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002386:	bf00      	nop
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4618      	mov	r0, r3
 800238e:	f002 fbb5 	bl	8004afc <HAL_SPI_GetState>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d1f7      	bne.n	8002388 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	889b      	ldrh	r3, [r3, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4619      	mov	r1, r3
 80023a4:	f001 faa6 	bl	80038f4 <HAL_GPIO_WritePin>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	889b      	ldrh	r3, [r3, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	f001 fa92 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6998      	ldr	r0, [r3, #24]
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	f001 ff83 	bl	80042e6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80023e0:	bf00      	nop
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fb88 	bl	8004afc <HAL_SPI_GetState>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d1f7      	bne.n	80023e2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6998      	ldr	r0, [r3, #24]
 80023f6:	8b3a      	ldrh	r2, [r7, #24]
 80023f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80023fc:	6839      	ldr	r1, [r7, #0]
 80023fe:	f001 ff72 	bl	80042e6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002402:	bf00      	nop
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fb77 	bl	8004afc <HAL_SPI_GetState>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d1f7      	bne.n	8002404 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	889b      	ldrh	r3, [r3, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	4619      	mov	r1, r3
 8002420:	f001 fa68 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8002438:	2126      	movs	r1, #38	@ 0x26
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f921 	bl	8002682 <LoRa_read>
 8002440:	4603      	mov	r3, r0
 8002442:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800244a:	7bbb      	ldrb	r3, [r7, #14]
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	e003      	b.n	800245c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8002454:	7bbb      	ldrb	r3, [r7, #14]
 8002456:	f023 0308 	bic.w	r3, r3, #8
 800245a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	461a      	mov	r2, r3
 8002460:	2126      	movs	r1, #38	@ 0x26
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f927 	bl	80026b6 <LoRa_write>
	HAL_Delay(10);
 8002468:	200a      	movs	r0, #10
 800246a:	f000 ff89 	bl	8003380 <HAL_Delay>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8002478:	b580      	push	{r7, lr}
 800247a:	b096      	sub	sp, #88	@ 0x58
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8002480:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <LoRa_setAutoLDO+0x68>)
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	4611      	mov	r1, r2
 8002488:	2250      	movs	r2, #80	@ 0x50
 800248a:	4618      	mov	r0, r3
 800248c:	f003 f914 	bl	80056b8 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002496:	461a      	mov	r2, r3
 8002498:	2301      	movs	r3, #1
 800249a:	4093      	lsls	r3, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f841 	bl	8000524 <__aeabi_i2d>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	3358      	adds	r3, #88	@ 0x58
 80024ac:	443b      	add	r3, r7
 80024ae:	3b50      	subs	r3, #80	@ 0x50
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f9ca 	bl	800084c <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe faac 	bl	8000a1c <__aeabi_d2iz>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	bfcc      	ite	gt
 80024ca:	2301      	movgt	r3, #1
 80024cc:	2300      	movle	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffaa 	bl	800242c <LoRa_setLowDaraRateOptimization>
}
 80024d8:	bf00      	nop
 80024da:	3758      	adds	r7, #88	@ 0x58
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08005fa0 	.word	0x08005fa0

080024e4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	04db      	lsls	r3, r3, #19
 80024f2:	115b      	asrs	r3, r3, #5
 80024f4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	461a      	mov	r2, r3
 8002500:	2106      	movs	r1, #6
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8d7 	bl	80026b6 <LoRa_write>
	HAL_Delay(5);
 8002508:	2005      	movs	r0, #5
 800250a:	f000 ff39 	bl	8003380 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	461a      	mov	r2, r3
 8002518:	2107      	movs	r1, #7
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8cb 	bl	80026b6 <LoRa_write>
	HAL_Delay(5);
 8002520:	2005      	movs	r0, #5
 8002522:	f000 ff2d 	bl	8003380 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	461a      	mov	r2, r3
 800252e:	2108      	movs	r1, #8
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8c0 	bl	80026b6 <LoRa_write>
	HAL_Delay(5);
 8002536:	2005      	movs	r0, #5
 8002538:	f000 ff22 	bl	8003380 <HAL_Delay>
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b0c      	cmp	r3, #12
 8002552:	dd01      	ble.n	8002558 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8002554:	230c      	movs	r3, #12
 8002556:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b06      	cmp	r3, #6
 800255c:	dc01      	bgt.n	8002562 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800255e:	2307      	movs	r3, #7
 8002560:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8002562:	211e      	movs	r1, #30
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f88c 	bl	8002682 <LoRa_read>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800256e:	200a      	movs	r0, #10
 8002570:	f000 ff06 	bl	8003380 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	b2da      	uxtb	r2, r3
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4413      	add	r3, r2
 8002586:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	461a      	mov	r2, r3
 800258c:	211e      	movs	r1, #30
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f891 	bl	80026b6 <LoRa_write>
	HAL_Delay(10);
 8002594:	200a      	movs	r0, #10
 8002596:	f000 fef3 	bl	8003380 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff6c 	bl	8002478 <LoRa_setAutoLDO>
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	461a      	mov	r2, r3
 80025b8:	2109      	movs	r1, #9
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f87b 	bl	80026b6 <LoRa_write>
	HAL_Delay(10);
 80025c0:	200a      	movs	r0, #10
 80025c2:	f000 fedd 	bl	8003380 <HAL_Delay>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	2b2c      	cmp	r3, #44	@ 0x2c
 80025e4:	d801      	bhi.n	80025ea <LoRa_setOCP+0x1a>
		current = 45;
 80025e6:	232d      	movs	r3, #45	@ 0x2d
 80025e8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	2bf0      	cmp	r3, #240	@ 0xf0
 80025ee:	d901      	bls.n	80025f4 <LoRa_setOCP+0x24>
		current = 240;
 80025f0:	23f0      	movs	r3, #240	@ 0xf0
 80025f2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	2b78      	cmp	r3, #120	@ 0x78
 80025f8:	d809      	bhi.n	800260e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	3b2d      	subs	r3, #45	@ 0x2d
 80025fe:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <LoRa_setOCP+0x78>)
 8002600:	fb82 1203 	smull	r1, r2, r2, r3
 8002604:	1052      	asrs	r2, r2, #1
 8002606:	17db      	asrs	r3, r3, #31
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e00b      	b.n	8002626 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	2bf0      	cmp	r3, #240	@ 0xf0
 8002612:	d808      	bhi.n	8002626 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	331e      	adds	r3, #30
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <LoRa_setOCP+0x78>)
 800261a:	fb82 1203 	smull	r1, r2, r2, r3
 800261e:	1092      	asrs	r2, r2, #2
 8002620:	17db      	asrs	r3, r3, #31
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	3320      	adds	r3, #32
 800262a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	461a      	mov	r2, r3
 8002630:	210b      	movs	r1, #11
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f83f 	bl	80026b6 <LoRa_write>
	HAL_Delay(10);
 8002638:	200a      	movs	r0, #10
 800263a:	f000 fea1 	bl	8003380 <HAL_Delay>
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	66666667 	.word	0x66666667

0800264c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8002654:	211e      	movs	r1, #30
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f813 	bl	8002682 <LoRa_read>
 800265c:	4603      	mov	r3, r0
 800265e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	f043 0307 	orr.w	r3, r3, #7
 8002666:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8002668:	7bbb      	ldrb	r3, [r7, #14]
 800266a:	461a      	mov	r2, r3
 800266c:	211e      	movs	r1, #30
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f821 	bl	80026b6 <LoRa_write>
	HAL_Delay(10);
 8002674:	200a      	movs	r0, #10
 8002676:	f000 fe83 	bl	8003380 <HAL_Delay>
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af02      	add	r7, sp, #8
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002694:	b2db      	uxtb	r3, r3
 8002696:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002698:	f107 030f 	add.w	r3, r7, #15
 800269c:	f107 010e 	add.w	r1, r7, #14
 80026a0:	2201      	movs	r2, #1
 80026a2:	9200      	str	r2, [sp, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fe44 	bl	8002334 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af02      	add	r7, sp, #8
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	70fb      	strb	r3, [r7, #3]
 80026c2:	4613      	mov	r3, r2
 80026c4:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	73bb      	strb	r3, [r7, #14]
	data = value;
 80026d0:	78bb      	ldrb	r3, [r7, #2]
 80026d2:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80026d4:	f107 030f 	add.w	r3, r7, #15
 80026d8:	f107 010e 	add.w	r1, r7, #14
 80026dc:	2201      	movs	r2, #1
 80026de:	9200      	str	r2, [sp, #0]
 80026e0:	2201      	movs	r2, #1
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fe64 	bl	80023b0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	460b      	mov	r3, r1
 80026fe:	72fb      	strb	r3, [r7, #11]
 8002700:	4613      	mov	r3, r2
 8002702:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8002704:	7afb      	ldrb	r3, [r7, #11]
 8002706:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800270a:	b2db      	uxtb	r3, r3
 800270c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	889b      	ldrh	r3, [r3, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	4619      	mov	r1, r3
 800271a:	f001 f8eb 	bl	80038f4 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6998      	ldr	r0, [r3, #24]
 8002722:	f107 0117 	add.w	r1, r7, #23
 8002726:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800272a:	2201      	movs	r2, #1
 800272c:	f001 fddb 	bl	80042e6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002730:	bf00      	nop
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	4618      	mov	r0, r3
 8002738:	f002 f9e0 	bl	8004afc <HAL_SPI_GetState>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d1f7      	bne.n	8002732 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6998      	ldr	r0, [r3, #24]
 8002746:	7abb      	ldrb	r3, [r7, #10]
 8002748:	b29a      	uxth	r2, r3
 800274a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	f001 fdc9 	bl	80042e6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002754:	bf00      	nop
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 f9ce 	bl	8004afc <HAL_SPI_GetState>
 8002760:	4603      	mov	r3, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	d1f7      	bne.n	8002756 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	889b      	ldrh	r3, [r3, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	4619      	mov	r1, r3
 8002772:	f001 f8bf 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]

	return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	4611      	mov	r1, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	460b      	mov	r3, r1
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80027b0:	2101      	movs	r1, #1
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fd5d 	bl	8002272 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80027b8:	210e      	movs	r1, #14
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff ff61 	bl	8002682 <LoRa_read>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	461a      	mov	r2, r3
 80027c8:	210d      	movs	r1, #13
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff ff73 	bl	80026b6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	461a      	mov	r2, r3
 80027d4:	2122      	movs	r1, #34	@ 0x22
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff ff6d 	bl	80026b6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	2100      	movs	r1, #0
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff ff84 	bl	80026f0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80027e8:	2103      	movs	r1, #3
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff fd41 	bl	8002272 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80027f0:	2112      	movs	r1, #18
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff ff45 	bl	8002682 <LoRa_read>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8002806:	22ff      	movs	r2, #255	@ 0xff
 8002808:	2112      	movs	r1, #18
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff ff53 	bl	80026b6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fd2d 	bl	8002272 <LoRa_gotoMode>
			return 1;
 8002818:	2301      	movs	r3, #1
 800281a:	e00f      	b.n	800283c <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800281c:	88bb      	ldrh	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	80bb      	strh	r3, [r7, #4]
 8002822:	88bb      	ldrh	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8002828:	6979      	ldr	r1, [r7, #20]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fd21 	bl	8002272 <LoRa_gotoMode>
				return 0;
 8002830:	2300      	movs	r3, #0
 8002832:	e003      	b.n	800283c <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8002834:	2001      	movs	r0, #1
 8002836:	f000 fda3 	bl	8003380 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800283a:	e7d9      	b.n	80027f0 <LoRa_transmit+0x5c>
	}
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800284c:	2105      	movs	r1, #5
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fd0f 	bl	8002272 <LoRa_gotoMode>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e007      	b.n	8002884 <LoRa_receive+0x28>
		data[i]=0;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4413      	add	r3, r2
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	3301      	adds	r3, #1
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	429a      	cmp	r2, r3
 800288a:	dbf3      	blt.n	8002874 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800288c:	2101      	movs	r1, #1
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff fcef 	bl	8002272 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8002894:	2112      	movs	r1, #18
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fef3 	bl	8002682 <LoRa_read>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d02f      	beq.n	800290a <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80028aa:	22ff      	movs	r2, #255	@ 0xff
 80028ac:	2112      	movs	r1, #18
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff ff01 	bl	80026b6 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80028b4:	2113      	movs	r1, #19
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff fee3 	bl	8002682 <LoRa_read>
 80028bc:	4603      	mov	r3, r0
 80028be:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80028c0:	2110      	movs	r1, #16
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fedd 	bl	8002682 <LoRa_read>
 80028c8:	4603      	mov	r3, r0
 80028ca:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	461a      	mov	r2, r3
 80028d0:	210d      	movs	r1, #13
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff feef 	bl	80026b6 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80028d8:	7cba      	ldrb	r2, [r7, #18]
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4293      	cmp	r3, r2
 80028de:	bf28      	it	cs
 80028e0:	4613      	movcs	r3, r2
 80028e2:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e00b      	b.n	8002902 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	18d4      	adds	r4, r2, r3
 80028f0:	2100      	movs	r1, #0
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fec5 	bl	8002682 <LoRa_read>
 80028f8:	4603      	mov	r3, r0
 80028fa:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	7ffb      	ldrb	r3, [r7, #31]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	429a      	cmp	r2, r3
 8002908:	dbef      	blt.n	80028ea <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800290a:	2105      	movs	r1, #5
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff fcb0 	bl	8002272 <LoRa_gotoMode>
    return min;
 8002912:	7ffb      	ldrb	r3, [r7, #31]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3724      	adds	r7, #36	@ 0x24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd90      	pop	{r4, r7, pc}

0800291c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff2a 	bl	800277e <LoRa_isvalid>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8096 	beq.w	8002a5e <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8002932:	2100      	movs	r1, #0
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fc9c 	bl	8002272 <LoRa_gotoMode>
			HAL_Delay(10);
 800293a:	200a      	movs	r0, #10
 800293c:	f000 fd20 	bl	8003380 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002940:	2101      	movs	r1, #1
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fe9d 	bl	8002682 <LoRa_read>
 8002948:	4603      	mov	r3, r0
 800294a:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800294c:	200a      	movs	r0, #10
 800294e:	f000 fd17 	bl	8003380 <HAL_Delay>
			data = read | 0x80;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002958:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800295a:	7bbb      	ldrb	r3, [r7, #14]
 800295c:	461a      	mov	r2, r3
 800295e:	2101      	movs	r1, #1
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fea8 	bl	80026b6 <LoRa_write>
			HAL_Delay(100);
 8002966:	2064      	movs	r0, #100	@ 0x64
 8002968:	f000 fd0a 	bl	8003380 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff fdb6 	bl	80024e4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fe11 	bl	80025a8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fe1e 	bl	80025d0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002994:	2223      	movs	r2, #35	@ 0x23
 8002996:	210c      	movs	r1, #12
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fe8c 	bl	80026b6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fe54 	bl	800264c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fdc9 	bl	8002544 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80029b2:	22ff      	movs	r2, #255	@ 0xff
 80029b4:	211f      	movs	r1, #31
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fe7d 	bl	80026b6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80029d8:	7bbb      	ldrb	r3, [r7, #14]
 80029da:	461a      	mov	r2, r3
 80029dc:	211d      	movs	r1, #29
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fe69 	bl	80026b6 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fd47 	bl	8002478 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	2120      	movs	r1, #32
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fe5c 	bl	80026b6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	2121      	movs	r1, #33	@ 0x21
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fe54 	bl	80026b6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fe36 	bl	8002682 <LoRa_read>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8002a20:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002a22:	7bbb      	ldrb	r3, [r7, #14]
 8002a24:	461a      	mov	r2, r3
 8002a26:	2140      	movs	r1, #64	@ 0x40
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fe44 	bl	80026b6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002a2e:	2101      	movs	r1, #1
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fc1e 	bl	8002272 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8002a3c:	200a      	movs	r0, #10
 8002a3e:	f000 fc9f 	bl	8003380 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8002a42:	2142      	movs	r1, #66	@ 0x42
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fe1c 	bl	8002682 <LoRa_read>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b12      	cmp	r3, #18
 8002a52:	d101      	bne.n	8002a58 <LoRa_init+0x13c>
				return LORA_OK;
 8002a54:	23c8      	movs	r3, #200	@ 0xc8
 8002a56:	e004      	b.n	8002a62 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8002a58:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8002a5c:	e001      	b.n	8002a62 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8002a5e:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM4)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a05      	ldr	r2, [pc, #20]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d102      	bne.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
	 	 check_connectivity_tick = 255;
 8002a7e:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002a80:	22ff      	movs	r2, #255	@ 0xff
 8002a82:	701a      	strb	r2, [r3, #0]
	}
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40000800 	.word	0x40000800
 8002a94:	20000628 	.word	0x20000628

08002a98 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == myLoRa.DIO0_pin){
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_GPIO_EXTI_Callback+0x34>)
 8002aa4:	8a9b      	ldrh	r3, [r3, #20]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_GPIO_EXTI_Callback+0x2c>
		LoRa_receive(&myLoRa, RxBuffer, 128);
 8002aac:	2280      	movs	r2, #128	@ 0x80
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <HAL_GPIO_EXTI_Callback+0x38>)
 8002ab0:	4806      	ldr	r0, [pc, #24]	@ (8002acc <HAL_GPIO_EXTI_Callback+0x34>)
 8002ab2:	f7ff fed3 	bl	800285c <LoRa_receive>
		HAL_GPIO_TogglePin(GREENLED_GPIO_Port, GREENLED_Pin);
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4806      	ldr	r0, [pc, #24]	@ (8002ad4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002aba:	f000 ff34 	bl	8003926 <HAL_GPIO_TogglePin>
		receive_tick = 255;
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_GPIO_EXTI_Callback+0x40>)
 8002ac0:	22ff      	movs	r2, #255	@ 0xff
 8002ac2:	701a      	strb	r2, [r3, #0]
	}
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200004f8 	.word	0x200004f8
 8002ad0:	200005a8 	.word	0x200005a8
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	20000629 	.word	0x20000629

08002adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	b097      	sub	sp, #92	@ 0x5c
 8002ae0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae2:	f000 fbdb 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae6:	f000 f91b 	bl	8002d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aea:	f000 fa05 	bl	8002ef8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002aee:	f000 f97f 	bl	8002df0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002af2:	f000 f9b3 	bl	8002e5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8002af6:	487b      	ldr	r0, [pc, #492]	@ (8002ce4 <main+0x208>)
 8002af8:	f002 f9a0 	bl	8004e3c <HAL_TIM_Base_Start_IT>

  BSP_LCD_Init();
 8002afc:	f7ff f8ee 	bl	8001cdc <BSP_LCD_Init>

  myLoRa = newLoRa();
 8002b00:	4c79      	ldr	r4, [pc, #484]	@ (8002ce8 <main+0x20c>)
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fb8a 	bl	8002220 <newLoRa>
 8002b0c:	4625      	mov	r5, r4
 8002b0e:	f107 0408 	add.w	r4, r7, #8
 8002b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b1a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b1e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8002b22:	4b71      	ldr	r3, [pc, #452]	@ (8002ce8 <main+0x20c>)
 8002b24:	4a71      	ldr	r2, [pc, #452]	@ (8002cec <main+0x210>)
 8002b26:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8002b28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <main+0x20c>)
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8002b2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ce8 <main+0x20c>)
 8002b30:	4a6e      	ldr	r2, [pc, #440]	@ (8002cec <main+0x210>)
 8002b32:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8002b34:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce8 <main+0x20c>)
 8002b36:	2208      	movs	r2, #8
 8002b38:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8002b3a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ce8 <main+0x20c>)
 8002b3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002cec <main+0x210>)
 8002b3e:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8002b40:	4b69      	ldr	r3, [pc, #420]	@ (8002ce8 <main+0x20c>)
 8002b42:	2204      	movs	r2, #4
 8002b44:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8002b46:	4b68      	ldr	r3, [pc, #416]	@ (8002ce8 <main+0x20c>)
 8002b48:	4a69      	ldr	r2, [pc, #420]	@ (8002cf0 <main+0x214>)
 8002b4a:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8002b4c:	4b66      	ldr	r3, [pc, #408]	@ (8002ce8 <main+0x20c>)
 8002b4e:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8002b52:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8002b54:	4b64      	ldr	r3, [pc, #400]	@ (8002ce8 <main+0x20c>)
 8002b56:	2207      	movs	r2, #7
 8002b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8002b5c:	4b62      	ldr	r3, [pc, #392]	@ (8002ce8 <main+0x20c>)
 8002b5e:	2207      	movs	r2, #7
 8002b60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8002b64:	4b60      	ldr	r3, [pc, #384]	@ (8002ce8 <main+0x20c>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8002b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce8 <main+0x20c>)
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8002b74:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce8 <main+0x20c>)
 8002b76:	2264      	movs	r2, #100	@ 0x64
 8002b78:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce8 <main+0x20c>)
 8002b7e:	2208      	movs	r2, #8
 8002b80:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8002b82:	4859      	ldr	r0, [pc, #356]	@ (8002ce8 <main+0x20c>)
 8002b84:	f7ff feca 	bl	800291c <LoRa_init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b8c:	d102      	bne.n	8002b94 <main+0xb8>
	  LoRa_stat = 1;
 8002b8e:	4b59      	ldr	r3, [pc, #356]	@ (8002cf4 <main+0x218>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8002b94:	4854      	ldr	r0, [pc, #336]	@ (8002ce8 <main+0x20c>)
 8002b96:	f7ff fe55 	bl	8002844 <LoRa_startReceiving>

  TxBuffer[0] = 45;
 8002b9a:	4b57      	ldr	r3, [pc, #348]	@ (8002cf8 <main+0x21c>)
 8002b9c:	222d      	movs	r2, #45	@ 0x2d
 8002b9e:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xF2;
 8002ba0:	4b55      	ldr	r3, [pc, #340]	@ (8002cf8 <main+0x21c>)
 8002ba2:	22f2      	movs	r2, #242	@ 0xf2
 8002ba4:	705a      	strb	r2, [r3, #1]
  TxBuffer[2] = 'G';
 8002ba6:	4b54      	ldr	r3, [pc, #336]	@ (8002cf8 <main+0x21c>)
 8002ba8:	2247      	movs	r2, #71	@ 0x47
 8002baa:	709a      	strb	r2, [r3, #2]

  LoRa_transmit(&myLoRa, TxBuffer, 3, 500);
 8002bac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4951      	ldr	r1, [pc, #324]	@ (8002cf8 <main+0x21c>)
 8002bb4:	484c      	ldr	r0, [pc, #304]	@ (8002ce8 <main+0x20c>)
 8002bb6:	f7ff fded 	bl	8002794 <LoRa_transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LCD_Clear(0x0);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7ff f8ea 	bl	8001d94 <BSP_LCD_Clear>
  //HAL_GPIO_TogglePin(REDLED_GPIO_Port, REDLED_Pin);

  while (1)
  {

	  if(check_connectivity_tick == 255){
 8002bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8002cfc <main+0x220>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2bff      	cmp	r3, #255	@ 0xff
 8002bc6:	d119      	bne.n	8002bfc <main+0x120>
		  TxBuffer[0] = 0xAA;
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf8 <main+0x21c>)
 8002bca:	22aa      	movs	r2, #170	@ 0xaa
 8002bcc:	701a      	strb	r2, [r3, #0]
		  TxBuffer[1] = 0xBB;
 8002bce:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf8 <main+0x21c>)
 8002bd0:	22bb      	movs	r2, #187	@ 0xbb
 8002bd2:	705a      	strb	r2, [r3, #1]
		  TxBuffer[2] = 0xCC;
 8002bd4:	4b48      	ldr	r3, [pc, #288]	@ (8002cf8 <main+0x21c>)
 8002bd6:	22cc      	movs	r2, #204	@ 0xcc
 8002bd8:	709a      	strb	r2, [r3, #2]
		  if(LoRa_transmit(&myLoRa, TxBuffer, 3, 500) == 1){
 8002bda:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bde:	2203      	movs	r2, #3
 8002be0:	4945      	ldr	r1, [pc, #276]	@ (8002cf8 <main+0x21c>)
 8002be2:	4841      	ldr	r0, [pc, #260]	@ (8002ce8 <main+0x20c>)
 8002be4:	f7ff fdd6 	bl	8002794 <LoRa_transmit>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d103      	bne.n	8002bf6 <main+0x11a>
			  HAL_GPIO_TogglePin(REDLED_GPIO_Port, REDLED_Pin);
 8002bee:	2102      	movs	r1, #2
 8002bf0:	483e      	ldr	r0, [pc, #248]	@ (8002cec <main+0x210>)
 8002bf2:	f000 fe98 	bl	8003926 <HAL_GPIO_TogglePin>
		  }
		  check_connectivity_tick = 0;
 8002bf6:	4b41      	ldr	r3, [pc, #260]	@ (8002cfc <main+0x220>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
	  }
	  if(receive_tick == 255){
 8002bfc:	4b40      	ldr	r3, [pc, #256]	@ (8002d00 <main+0x224>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2bff      	cmp	r3, #255	@ 0xff
 8002c02:	d102      	bne.n	8002c0a <main+0x12e>
//		  back_line_sensor_buffer[6] = RxBuffer[22];
//		  back_line_sensor_buffer[7] = RxBuffer[23];
//		  back_line_sensor_buffer[8] = RxBuffer[24];
//		  back_line_sensor_buffer[9] = RxBuffer[25];

		  receive_tick = 0;
 8002c04:	4b3e      	ldr	r3, [pc, #248]	@ (8002d00 <main+0x224>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
	  }

	  BSP_LCD_SetFont(&Font16);
 8002c0a:	483e      	ldr	r0, [pc, #248]	@ (8002d04 <main+0x228>)
 8002c0c:	f7ff f8b2 	bl	8001d74 <BSP_LCD_SetFont>

	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002c10:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8002c14:	f7ff f89e 	bl	8001d54 <BSP_LCD_SetTextColor>
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c18:	4b3b      	ldr	r3, [pc, #236]	@ (8002d08 <main+0x22c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	469c      	mov	ip, r3
			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	front_line_sensor_buffer[1],
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <main+0x22c>)
 8002c20:	785b      	ldrb	r3, [r3, #1]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c22:	469e      	mov	lr, r3
																				front_line_sensor_buffer[2],
 8002c24:	4b38      	ldr	r3, [pc, #224]	@ (8002d08 <main+0x22c>)
 8002c26:	789b      	ldrb	r3, [r3, #2]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c28:	461a      	mov	r2, r3
																				front_line_sensor_buffer[3],
 8002c2a:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <main+0x22c>)
 8002c2c:	78db      	ldrb	r3, [r3, #3]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c2e:	4619      	mov	r1, r3
																				front_line_sensor_buffer[4],
 8002c30:	4b35      	ldr	r3, [pc, #212]	@ (8002d08 <main+0x22c>)
 8002c32:	791b      	ldrb	r3, [r3, #4]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c34:	4618      	mov	r0, r3
																				front_line_sensor_buffer[5],
 8002c36:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <main+0x22c>)
 8002c38:	795b      	ldrb	r3, [r3, #5]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c3a:	461c      	mov	r4, r3
																				front_line_sensor_buffer[6],
 8002c3c:	4b32      	ldr	r3, [pc, #200]	@ (8002d08 <main+0x22c>)
 8002c3e:	799b      	ldrb	r3, [r3, #6]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c40:	461d      	mov	r5, r3
																				front_line_sensor_buffer[7],
 8002c42:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <main+0x22c>)
 8002c44:	79db      	ldrb	r3, [r3, #7]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c46:	461e      	mov	r6, r3
																				front_line_sensor_buffer[8],
 8002c48:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <main+0x22c>)
 8002c4a:	7a1b      	ldrb	r3, [r3, #8]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c4c:	607b      	str	r3, [r7, #4]
																				front_line_sensor_buffer[9]);
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d08 <main+0x22c>)
 8002c50:	7a5b      	ldrb	r3, [r3, #9]
	  sprintf(front_line_display_buffer, "F00F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", front_line_sensor_buffer[0],
 8002c52:	9307      	str	r3, [sp, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	9306      	str	r3, [sp, #24]
 8002c58:	9605      	str	r6, [sp, #20]
 8002c5a:	9504      	str	r5, [sp, #16]
 8002c5c:	9403      	str	r4, [sp, #12]
 8002c5e:	9002      	str	r0, [sp, #8]
 8002c60:	9101      	str	r1, [sp, #4]
 8002c62:	9200      	str	r2, [sp, #0]
 8002c64:	4673      	mov	r3, lr
 8002c66:	4662      	mov	r2, ip
 8002c68:	4928      	ldr	r1, [pc, #160]	@ (8002d0c <main+0x230>)
 8002c6a:	4829      	ldr	r0, [pc, #164]	@ (8002d10 <main+0x234>)
 8002c6c:	f002 fcd0 	bl	8005610 <siprintf>
	  BSP_LCD_DisplayStringAt(40, 10, front_line_display_buffer, LEFT_MODE);
 8002c70:	2303      	movs	r3, #3
 8002c72:	4a27      	ldr	r2, [pc, #156]	@ (8002d10 <main+0x234>)
 8002c74:	210a      	movs	r1, #10
 8002c76:	2028      	movs	r0, #40	@ 0x28
 8002c78:	f7ff f8d4 	bl	8001e24 <BSP_LCD_DisplayStringAt>


	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002c7c:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <main+0x238>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	469c      	mov	ip, r3
			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	   back_line_sensor_buffer[1],
 8002c82:	4b24      	ldr	r3, [pc, #144]	@ (8002d14 <main+0x238>)
 8002c84:	785b      	ldrb	r3, [r3, #1]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002c86:	469e      	mov	lr, r3
																			   back_line_sensor_buffer[2],
 8002c88:	4b22      	ldr	r3, [pc, #136]	@ (8002d14 <main+0x238>)
 8002c8a:	789b      	ldrb	r3, [r3, #2]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002c8c:	461a      	mov	r2, r3
																			   back_line_sensor_buffer[3],
 8002c8e:	4b21      	ldr	r3, [pc, #132]	@ (8002d14 <main+0x238>)
 8002c90:	78db      	ldrb	r3, [r3, #3]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002c92:	4619      	mov	r1, r3
																			   back_line_sensor_buffer[4],
 8002c94:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <main+0x238>)
 8002c96:	791b      	ldrb	r3, [r3, #4]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002c98:	4618      	mov	r0, r3
																			   back_line_sensor_buffer[5],
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <main+0x238>)
 8002c9c:	795b      	ldrb	r3, [r3, #5]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002c9e:	461c      	mov	r4, r3
																			   back_line_sensor_buffer[6],
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <main+0x238>)
 8002ca2:	799b      	ldrb	r3, [r3, #6]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002ca4:	461d      	mov	r5, r3
																			   back_line_sensor_buffer[7],
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <main+0x238>)
 8002ca8:	79db      	ldrb	r3, [r3, #7]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002caa:	461e      	mov	r6, r3
																			   back_line_sensor_buffer[8],
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <main+0x238>)
 8002cae:	7a1b      	ldrb	r3, [r3, #8]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002cb0:	607b      	str	r3, [r7, #4]
																			   back_line_sensor_buffer[9]);
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <main+0x238>)
 8002cb4:	7a5b      	ldrb	r3, [r3, #9]
	  sprintf(back_line_display_buffer, "F11F|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", back_line_sensor_buffer[0],
 8002cb6:	9307      	str	r3, [sp, #28]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	9306      	str	r3, [sp, #24]
 8002cbc:	9605      	str	r6, [sp, #20]
 8002cbe:	9504      	str	r5, [sp, #16]
 8002cc0:	9403      	str	r4, [sp, #12]
 8002cc2:	9002      	str	r0, [sp, #8]
 8002cc4:	9101      	str	r1, [sp, #4]
 8002cc6:	9200      	str	r2, [sp, #0]
 8002cc8:	4673      	mov	r3, lr
 8002cca:	4662      	mov	r2, ip
 8002ccc:	4912      	ldr	r1, [pc, #72]	@ (8002d18 <main+0x23c>)
 8002cce:	4813      	ldr	r0, [pc, #76]	@ (8002d1c <main+0x240>)
 8002cd0:	f002 fc9e 	bl	8005610 <siprintf>
	  BSP_LCD_DisplayStringAt(40, 40, back_line_display_buffer, LEFT_MODE);
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	4a11      	ldr	r2, [pc, #68]	@ (8002d1c <main+0x240>)
 8002cd8:	2128      	movs	r1, #40	@ 0x28
 8002cda:	2028      	movs	r0, #40	@ 0x28
 8002cdc:	f7ff f8a2 	bl	8001e24 <BSP_LCD_DisplayStringAt>
  {
 8002ce0:	e76e      	b.n	8002bc0 <main+0xe4>
 8002ce2:	bf00      	nop
 8002ce4:	200004b0 	.word	0x200004b0
 8002ce8:	200004f8 	.word	0x200004f8
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	20000458 	.word	0x20000458
 8002cf4:	20000524 	.word	0x20000524
 8002cf8:	20000528 	.word	0x20000528
 8002cfc:	20000628 	.word	0x20000628
 8002d00:	20000629 	.word	0x20000629
 8002d04:	20000000 	.word	0x20000000
 8002d08:	2000062c 	.word	0x2000062c
 8002d0c:	08005ff0 	.word	0x08005ff0
 8002d10:	20000638 	.word	0x20000638
 8002d14:	20000658 	.word	0x20000658
 8002d18:	08006014 	.word	0x08006014
 8002d1c:	20000664 	.word	0x20000664

08002d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b094      	sub	sp, #80	@ 0x50
 8002d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d26:	f107 0320 	add.w	r3, r7, #32
 8002d2a:	2230      	movs	r2, #48	@ 0x30
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fc8e 	bl	8005650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <SystemClock_Config+0xc8>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	4a26      	ldr	r2, [pc, #152]	@ (8002de8 <SystemClock_Config+0xc8>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d54:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <SystemClock_Config+0xc8>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <SystemClock_Config+0xcc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a20      	ldr	r2, [pc, #128]	@ (8002dec <SystemClock_Config+0xcc>)
 8002d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <SystemClock_Config+0xcc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d86:	2302      	movs	r3, #2
 8002d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002d90:	230c      	movs	r3, #12
 8002d92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002d94:	2360      	movs	r3, #96	@ 0x60
 8002d96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fdf1 	bl	800398c <HAL_RCC_OscConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002db0:	f000 f924 	bl	8002ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db4:	230f      	movs	r3, #15
 8002db6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db8:	2302      	movs	r3, #2
 8002dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	2103      	movs	r1, #3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 f853 	bl	8003e7c <HAL_RCC_ClockConfig>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ddc:	f000 f90e 	bl	8002ffc <Error_Handler>
  }
}
 8002de0:	bf00      	nop
 8002de2:	3750      	adds	r7, #80	@ 0x50
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000

08002df0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002df6:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <MX_SPI1_Init+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002dfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e02:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e08:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e22:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e24:	2220      	movs	r2, #32
 8002e26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e28:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e34:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e3c:	220a      	movs	r2, #10
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e40:	4804      	ldr	r0, [pc, #16]	@ (8002e54 <MX_SPI1_Init+0x64>)
 8002e42:	f001 f9c7 	bl	80041d4 <HAL_SPI_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e4c:	f000 f8d6 	bl	8002ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000458 	.word	0x20000458
 8002e58:	40013000 	.word	0x40013000

08002e5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e70:	463b      	mov	r3, r7
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef4 <MX_TIM4_Init+0x98>)
 8002e7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320-1;
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002e80:	f240 123f 	movw	r2, #319	@ 0x13f
 8002e84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32000-1;
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002e8e:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8002e92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ea0:	4813      	ldr	r0, [pc, #76]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002ea2:	f001 ff7b 	bl	8004d9c <HAL_TIM_Base_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002eac:	f000 f8a6 	bl	8002ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480c      	ldr	r0, [pc, #48]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002ebe:	f002 f90f 	bl	80050e0 <HAL_TIM_ConfigClockSource>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ec8:	f000 f898 	bl	8002ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4805      	ldr	r0, [pc, #20]	@ (8002ef0 <MX_TIM4_Init+0x94>)
 8002eda:	f002 fb17 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ee4:	f000 f88a 	bl	8002ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ee8:	bf00      	nop
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200004b0 	.word	0x200004b0
 8002ef4:	40000800 	.word	0x40000800

08002ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b37      	ldr	r3, [pc, #220]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a36      	ldr	r2, [pc, #216]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b30      	ldr	r3, [pc, #192]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a28      	ldr	r2, [pc, #160]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b26      	ldr	r3, [pc, #152]	@ (8002ff0 <MX_GPIO_Init+0xf8>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f68:	4822      	ldr	r0, [pc, #136]	@ (8002ff4 <MX_GPIO_Init+0xfc>)
 8002f6a:	f000 fcc3 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREENLED_Pin|REDLED_Pin, GPIO_PIN_RESET);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2103      	movs	r1, #3
 8002f72:	4821      	ldr	r0, [pc, #132]	@ (8002ff8 <MX_GPIO_Init+0x100>)
 8002f74:	f000 fcbe 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2118      	movs	r1, #24
 8002f7c:	481e      	ldr	r0, [pc, #120]	@ (8002ff8 <MX_GPIO_Init+0x100>)
 8002f7e:	f000 fcb9 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4816      	ldr	r0, [pc, #88]	@ (8002ff4 <MX_GPIO_Init+0xfc>)
 8002f9c:	f000 fb26 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : GREENLED_Pin REDLED_Pin RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = GREENLED_Pin|REDLED_Pin|RST_Pin|NSS_Pin;
 8002fa0:	231b      	movs	r3, #27
 8002fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4810      	ldr	r0, [pc, #64]	@ (8002ff8 <MX_GPIO_Init+0x100>)
 8002fb8:	f000 fb18 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 030c 	add.w	r3, r7, #12
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4809      	ldr	r0, [pc, #36]	@ (8002ff8 <MX_GPIO_Init+0x100>)
 8002fd2:	f000 fb0b 	bl	80035ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2008      	movs	r0, #8
 8002fdc:	f000 facf 	bl	800357e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002fe0:	2008      	movs	r0, #8
 8002fe2:	f000 fae8 	bl	80035b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fe6:	bf00      	nop
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40020800 	.word	0x40020800
 8002ff8:	40020000 	.word	0x40020000

08002ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003000:	b672      	cpsid	i
}
 8003002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <Error_Handler+0x8>

08003008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <HAL_MspInit+0x4c>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	4a0f      	ldr	r2, [pc, #60]	@ (8003054 <HAL_MspInit+0x4c>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800301c:	6453      	str	r3, [r2, #68]	@ 0x44
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <HAL_MspInit+0x4c>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_MspInit+0x4c>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	4a08      	ldr	r2, [pc, #32]	@ (8003054 <HAL_MspInit+0x4c>)
 8003034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003038:	6413      	str	r3, [r2, #64]	@ 0x40
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_MspInit+0x4c>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_SPI_MspInit+0x84>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d12b      	bne.n	80030d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	4b18      	ldr	r3, [pc, #96]	@ (80030e0 <HAL_SPI_MspInit+0x88>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_SPI_MspInit+0x88>)
 8003084:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003088:	6453      	str	r3, [r2, #68]	@ 0x44
 800308a:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <HAL_SPI_MspInit+0x88>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <HAL_SPI_MspInit+0x88>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	4a10      	ldr	r2, [pc, #64]	@ (80030e0 <HAL_SPI_MspInit+0x88>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a6:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <HAL_SPI_MspInit+0x88>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030b2:	23e0      	movs	r3, #224	@ 0xe0
 80030b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030be:	2303      	movs	r3, #3
 80030c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030c2:	2305      	movs	r3, #5
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	4619      	mov	r1, r3
 80030cc:	4805      	ldr	r0, [pc, #20]	@ (80030e4 <HAL_SPI_MspInit+0x8c>)
 80030ce:	f000 fa8d 	bl	80035ec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80030d2:	bf00      	nop
 80030d4:	3728      	adds	r7, #40	@ 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40013000 	.word	0x40013000
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40020000 	.word	0x40020000

080030e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003130 <HAL_TIM_Base_MspInit+0x48>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d115      	bne.n	8003126 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <HAL_TIM_Base_MspInit+0x4c>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	4a0c      	ldr	r2, [pc, #48]	@ (8003134 <HAL_TIM_Base_MspInit+0x4c>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6413      	str	r3, [r2, #64]	@ 0x40
 800310a:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_TIM_Base_MspInit+0x4c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	201e      	movs	r0, #30
 800311c:	f000 fa2f 	bl	800357e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003120:	201e      	movs	r0, #30
 8003122:	f000 fa48 	bl	80035b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40000800 	.word	0x40000800
 8003134:	40023800 	.word	0x40023800

08003138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <NMI_Handler+0x4>

08003140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003144:	bf00      	nop
 8003146:	e7fd      	b.n	8003144 <HardFault_Handler+0x4>

08003148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <MemManage_Handler+0x4>

08003150 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <BusFault_Handler+0x4>

08003158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <UsageFault_Handler+0x4>

08003160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800318e:	f000 f8d7 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}

08003196 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800319a:	2004      	movs	r0, #4
 800319c:	f000 fbde 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031a8:	4802      	ldr	r0, [pc, #8]	@ (80031b4 <TIM4_IRQHandler+0x10>)
 80031aa:	f001 fea9 	bl	8004f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200004b0 	.word	0x200004b0

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f002 fa3a 	bl	8005660 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20020000 	.word	0x20020000
 8003218:	00000400 	.word	0x00000400
 800321c:	20000684 	.word	0x20000684
 8003220:	200007d8 	.word	0x200007d8

08003224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	@ (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800324c:	f7ff ffea 	bl	8003224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003250:	480c      	ldr	r0, [pc, #48]	@ (8003284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003252:	490d      	ldr	r1, [pc, #52]	@ (8003288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003268:	4c0a      	ldr	r4, [pc, #40]	@ (8003294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003276:	f002 f9f9 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327a:	f7ff fc2f 	bl	8002adc <main>
  bx  lr    
 800327e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800328c:	08006f64 	.word	0x08006f64
  ldr r2, =_sbss
 8003290:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8003294:	200007d4 	.word	0x200007d4

08003298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC_IRQHandler>
	...

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a0:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	@ (80032dc <HAL_Init+0x40>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_Init+0x40>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	@ (80032dc <HAL_Init+0x40>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 f94f 	bl	8003568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	200f      	movs	r0, #15
 80032cc:	f000 f808 	bl	80032e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff fe9a 	bl	8003008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_InitTick+0x54>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_InitTick+0x58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f967 	bl	80035d2 <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f000 f92f 	bl	800357e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	@ (800333c <HAL_InitTick+0x5c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000058 	.word	0x20000058
 8003338:	20000060 	.word	0x20000060
 800333c:	2000005c 	.word	0x2000005c

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000060 	.word	0x20000060
 8003364:	20000688 	.word	0x20000688

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000688 	.word	0x20000688

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffde 	bl	8003368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000060 	.word	0x20000060

080033c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033e4:	4013      	ands	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fa:	4a04      	ldr	r2, [pc, #16]	@ (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	60d3      	str	r3, [r2, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <__NVIC_GetPriorityGrouping+0x18>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0307 	and.w	r3, r3, #7
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db0b      	blt.n	8003456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4907      	ldr	r1, [pc, #28]	@ (8003464 <__NVIC_EnableIRQ+0x38>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2001      	movs	r0, #1
 800344e:	fa00 f202 	lsl.w	r2, r0, r2
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000e100 	.word	0xe000e100

08003468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	6039      	str	r1, [r7, #0]
 8003472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003478:	2b00      	cmp	r3, #0
 800347a:	db0a      	blt.n	8003492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	490c      	ldr	r1, [pc, #48]	@ (80034b4 <__NVIC_SetPriority+0x4c>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	0112      	lsls	r2, r2, #4
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	440b      	add	r3, r1
 800348c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003490:	e00a      	b.n	80034a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	4908      	ldr	r1, [pc, #32]	@ (80034b8 <__NVIC_SetPriority+0x50>)
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	3b04      	subs	r3, #4
 80034a0:	0112      	lsls	r2, r2, #4
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	440b      	add	r3, r1
 80034a6:	761a      	strb	r2, [r3, #24]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000e100 	.word	0xe000e100
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	@ 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f1c3 0307 	rsb	r3, r3, #7
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	bf28      	it	cs
 80034da:	2304      	movcs	r3, #4
 80034dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3304      	adds	r3, #4
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d902      	bls.n	80034ec <NVIC_EncodePriority+0x30>
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3b03      	subs	r3, #3
 80034ea:	e000      	b.n	80034ee <NVIC_EncodePriority+0x32>
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	f04f 32ff 	mov.w	r2, #4294967295
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	401a      	ands	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003504:	f04f 31ff 	mov.w	r1, #4294967295
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	43d9      	mvns	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	4313      	orrs	r3, r2
         );
}
 8003516:	4618      	mov	r0, r3
 8003518:	3724      	adds	r7, #36	@ 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3b01      	subs	r3, #1
 8003530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003534:	d301      	bcc.n	800353a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003536:	2301      	movs	r3, #1
 8003538:	e00f      	b.n	800355a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353a:	4a0a      	ldr	r2, [pc, #40]	@ (8003564 <SysTick_Config+0x40>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003542:	210f      	movs	r1, #15
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	f7ff ff8e 	bl	8003468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <SysTick_Config+0x40>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003552:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <SysTick_Config+0x40>)
 8003554:	2207      	movs	r2, #7
 8003556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	e000e010 	.word	0xe000e010

08003568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff29 	bl	80033c8 <__NVIC_SetPriorityGrouping>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003590:	f7ff ff3e 	bl	8003410 <__NVIC_GetPriorityGrouping>
 8003594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	6978      	ldr	r0, [r7, #20]
 800359c:	f7ff ff8e 	bl	80034bc <NVIC_EncodePriority>
 80035a0:	4602      	mov	r2, r0
 80035a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff5d 	bl	8003468 <__NVIC_SetPriority>
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff31 	bl	800342c <__NVIC_EnableIRQ>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ffa2 	bl	8003524 <SysTick_Config>
 80035e0:	4603      	mov	r3, r0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e159      	b.n	80038bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	f040 8148 	bne.w	80038b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d005      	beq.n	800363e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800363a:	2b02      	cmp	r3, #2
 800363c:	d130      	bne.n	80036a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003674:	2201      	movs	r2, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 0201 	and.w	r2, r3, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d017      	beq.n	80036dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d123      	bne.n	8003730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	08da      	lsrs	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3208      	adds	r2, #8
 80036f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	220f      	movs	r2, #15
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	08da      	lsrs	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3208      	adds	r2, #8
 800372a:	69b9      	ldr	r1, [r7, #24]
 800372c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0203 	and.w	r2, r3, #3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a2 	beq.w	80038b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	4b57      	ldr	r3, [pc, #348]	@ (80038d4 <HAL_GPIO_Init+0x2e8>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	4a56      	ldr	r2, [pc, #344]	@ (80038d4 <HAL_GPIO_Init+0x2e8>)
 800377c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003780:	6453      	str	r3, [r2, #68]	@ 0x44
 8003782:	4b54      	ldr	r3, [pc, #336]	@ (80038d4 <HAL_GPIO_Init+0x2e8>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378e:	4a52      	ldr	r2, [pc, #328]	@ (80038d8 <HAL_GPIO_Init+0x2ec>)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a49      	ldr	r2, [pc, #292]	@ (80038dc <HAL_GPIO_Init+0x2f0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d019      	beq.n	80037ee <HAL_GPIO_Init+0x202>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a48      	ldr	r2, [pc, #288]	@ (80038e0 <HAL_GPIO_Init+0x2f4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_GPIO_Init+0x1fe>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a47      	ldr	r2, [pc, #284]	@ (80038e4 <HAL_GPIO_Init+0x2f8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00d      	beq.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a46      	ldr	r2, [pc, #280]	@ (80038e8 <HAL_GPIO_Init+0x2fc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <HAL_GPIO_Init+0x1f6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a45      	ldr	r2, [pc, #276]	@ (80038ec <HAL_GPIO_Init+0x300>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_GPIO_Init+0x1f2>
 80037da:	2304      	movs	r3, #4
 80037dc:	e008      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037de:	2307      	movs	r3, #7
 80037e0:	e006      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037e2:	2303      	movs	r3, #3
 80037e4:	e004      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e002      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037ee:	2300      	movs	r3, #0
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f002 0203 	and.w	r2, r2, #3
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4093      	lsls	r3, r2
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003800:	4935      	ldr	r1, [pc, #212]	@ (80038d8 <HAL_GPIO_Init+0x2ec>)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	3302      	adds	r3, #2
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380e:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003832:	4a2f      	ldr	r2, [pc, #188]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003838:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800385c:	4a24      	ldr	r2, [pc, #144]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003862:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003886:	4a1a      	ldr	r2, [pc, #104]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038b0:	4a0f      	ldr	r2, [pc, #60]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b0f      	cmp	r3, #15
 80038c0:	f67f aea2 	bls.w	8003608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40020000 	.word	0x40020000
 80038e0:	40020400 	.word	0x40020400
 80038e4:	40020800 	.word	0x40020800
 80038e8:	40020c00 	.word	0x40020c00
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003938:	887a      	ldrh	r2, [r7, #2]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	041a      	lsls	r2, r3, #16
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	43d9      	mvns	r1, r3
 8003944:	887b      	ldrh	r3, [r7, #2]
 8003946:	400b      	ands	r3, r1
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003972:	4a05      	ldr	r2, [pc, #20]	@ (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f88c 	bl	8002a98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e267      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d075      	beq.n	8003a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039aa:	4b88      	ldr	r3, [pc, #544]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d00c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4b85      	ldr	r3, [pc, #532]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d112      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c2:	4b82      	ldr	r3, [pc, #520]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	4b7e      	ldr	r3, [pc, #504]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05b      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d157      	bne.n	8003a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e242      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCC_OscConfig+0x74>
 80039f2:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e01d      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x98>
 8003a0a:	4b70      	ldr	r3, [pc, #448]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6f      	ldr	r2, [pc, #444]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b6d      	ldr	r3, [pc, #436]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6c      	ldr	r2, [pc, #432]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
 8003a24:	4b69      	ldr	r3, [pc, #420]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a68      	ldr	r2, [pc, #416]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7ff fc90 	bl	8003368 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7ff fc8c 	bl	8003368 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	@ 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e207      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0xc0>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7ff fc7c 	bl	8003368 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a74:	f7ff fc78 	bl	8003368 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	@ 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e1f3      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	4b51      	ldr	r3, [pc, #324]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0xe8>
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d063      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d11c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aba:	4b44      	ldr	r3, [pc, #272]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d116      	bne.n	8003af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_RCC_OscConfig+0x152>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e1c7      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4937      	ldr	r1, [pc, #220]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	e03a      	b.n	8003b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afc:	4b34      	ldr	r3, [pc, #208]	@ (8003bd0 <HAL_RCC_OscConfig+0x244>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7ff fc31 	bl	8003368 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7ff fc2d 	bl	8003368 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1a8      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4925      	ldr	r1, [pc, #148]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]
 8003b3c:	e015      	b.n	8003b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3e:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <HAL_RCC_OscConfig+0x244>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7ff fc10 	bl	8003368 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4c:	f7ff fc0c 	bl	8003368 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e187      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d036      	beq.n	8003be4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7e:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <HAL_RCC_OscConfig+0x248>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7ff fbf0 	bl	8003368 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8c:	f7ff fbec 	bl	8003368 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e167      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_RCC_OscConfig+0x240>)
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x200>
 8003baa:	e01b      	b.n	8003be4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_RCC_OscConfig+0x248>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7ff fbd9 	bl	8003368 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	e00e      	b.n	8003bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bba:	f7ff fbd5 	bl	8003368 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d907      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e150      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470000 	.word	0x42470000
 8003bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd8:	4b88      	ldr	r3, [pc, #544]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ea      	bne.n	8003bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8097 	beq.w	8003d20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf6:	4b81      	ldr	r3, [pc, #516]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	4b7d      	ldr	r3, [pc, #500]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c12:	4b7a      	ldr	r3, [pc, #488]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b77      	ldr	r3, [pc, #476]	@ (8003e00 <HAL_RCC_OscConfig+0x474>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b74      	ldr	r3, [pc, #464]	@ (8003e00 <HAL_RCC_OscConfig+0x474>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a73      	ldr	r2, [pc, #460]	@ (8003e00 <HAL_RCC_OscConfig+0x474>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7ff fb95 	bl	8003368 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7ff fb91 	bl	8003368 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e10c      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b6a      	ldr	r3, [pc, #424]	@ (8003e00 <HAL_RCC_OscConfig+0x474>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x2ea>
 8003c68:	4b64      	ldr	r3, [pc, #400]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	4a63      	ldr	r2, [pc, #396]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c74:	e01c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x324>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x30c>
 8003c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	4a5e      	ldr	r2, [pc, #376]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x324>
 8003c98:	4b58      	ldr	r3, [pc, #352]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4a57      	ldr	r2, [pc, #348]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca4:	4b55      	ldr	r3, [pc, #340]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a54      	ldr	r2, [pc, #336]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003caa:	f023 0304 	bic.w	r3, r3, #4
 8003cae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7ff fb56 	bl	8003368 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7ff fb52 	bl	8003368 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0cb      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	4b49      	ldr	r3, [pc, #292]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ee      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x334>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce4:	f7ff fb40 	bl	8003368 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7ff fb3c 	bl	8003368 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0b5      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d02:	4b3e      	ldr	r3, [pc, #248]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ee      	bne.n	8003cec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d14:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	4a38      	ldr	r2, [pc, #224]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a1 	beq.w	8003e6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2a:	4b34      	ldr	r3, [pc, #208]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d05c      	beq.n	8003df0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d141      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_RCC_OscConfig+0x478>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7ff fb10 	bl	8003368 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7ff fb0c 	bl	8003368 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e087      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	491b      	ldr	r1, [pc, #108]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x478>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7ff fae5 	bl	8003368 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da2:	f7ff fae1 	bl	8003368 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e05c      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x416>
 8003dc0:	e054      	b.n	8003e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7ff face 	bl	8003368 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7ff faca 	bl	8003368 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e045      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_OscConfig+0x470>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x444>
 8003dee:	e03d      	b.n	8003e6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e038      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40007000 	.word	0x40007000
 8003e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e08:	4b1b      	ldr	r3, [pc, #108]	@ (8003e78 <HAL_RCC_OscConfig+0x4ec>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d028      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d121      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d11a      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e38:	4013      	ands	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d111      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	3b01      	subs	r3, #1
 8003e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800

08003e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0cc      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e90:	4b68      	ldr	r3, [pc, #416]	@ (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d90c      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b65      	ldr	r3, [pc, #404]	@ (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b63      	ldr	r3, [pc, #396]	@ (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0b8      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed0:	4b59      	ldr	r3, [pc, #356]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a58      	ldr	r2, [pc, #352]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee8:	4b53      	ldr	r3, [pc, #332]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a52      	ldr	r2, [pc, #328]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b50      	ldr	r3, [pc, #320]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	494d      	ldr	r1, [pc, #308]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d044      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	4b47      	ldr	r3, [pc, #284]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d119      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e07f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e06f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e067      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5a:	4b37      	ldr	r3, [pc, #220]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f023 0203 	bic.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4934      	ldr	r1, [pc, #208]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f6c:	f7ff f9fc 	bl	8003368 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f74:	f7ff f9f8 	bl	8003368 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e04f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 020c 	and.w	r2, r3, #12
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d1eb      	bne.n	8003f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b25      	ldr	r3, [pc, #148]	@ (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d20c      	bcs.n	8003fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b22      	ldr	r3, [pc, #136]	@ (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd0:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4916      	ldr	r1, [pc, #88]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	490e      	ldr	r1, [pc, #56]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004002:	f000 f821 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490a      	ldr	r1, [pc, #40]	@ (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800401e:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff f95c 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023c00 	.word	0x40023c00
 8004038:	40023800 	.word	0x40023800
 800403c:	08006f10 	.word	0x08006f10
 8004040:	20000058 	.word	0x20000058
 8004044:	2000005c 	.word	0x2000005c

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b090      	sub	sp, #64	@ 0x40
 800404e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
 8004054:	2300      	movs	r3, #0
 8004056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004058:	2300      	movs	r3, #0
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004060:	4b59      	ldr	r3, [pc, #356]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b08      	cmp	r3, #8
 800406a:	d00d      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x40>
 800406c:	2b08      	cmp	r3, #8
 800406e:	f200 80a1 	bhi.w	80041b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x34>
 8004076:	2b04      	cmp	r3, #4
 8004078:	d003      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x3a>
 800407a:	e09b      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800407c:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x184>)
 800407e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004080:	e09b      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004082:	4b53      	ldr	r3, [pc, #332]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004084:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004086:	e098      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004088:	4b4f      	ldr	r3, [pc, #316]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004090:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004092:	4b4d      	ldr	r3, [pc, #308]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d028      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409e:	4b4a      	ldr	r3, [pc, #296]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	2200      	movs	r2, #0
 80040a6:	623b      	str	r3, [r7, #32]
 80040a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040b0:	2100      	movs	r1, #0
 80040b2:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80040b4:	fb03 f201 	mul.w	r2, r3, r1
 80040b8:	2300      	movs	r3, #0
 80040ba:	fb00 f303 	mul.w	r3, r0, r3
 80040be:	4413      	add	r3, r2
 80040c0:	4a43      	ldr	r2, [pc, #268]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c2:	fba0 1202 	umull	r1, r2, r0, r2
 80040c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c8:	460a      	mov	r2, r1
 80040ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ce:	4413      	add	r3, r2
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	2200      	movs	r2, #0
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	61fa      	str	r2, [r7, #28]
 80040da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040e2:	f7fc fcc3 	bl	8000a6c <__aeabi_uldivmod>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4613      	mov	r3, r2
 80040ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ee:	e053      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f0:	4b35      	ldr	r3, [pc, #212]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	099b      	lsrs	r3, r3, #6
 80040f6:	2200      	movs	r2, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	617a      	str	r2, [r7, #20]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004102:	f04f 0b00 	mov.w	fp, #0
 8004106:	4652      	mov	r2, sl
 8004108:	465b      	mov	r3, fp
 800410a:	f04f 0000 	mov.w	r0, #0
 800410e:	f04f 0100 	mov.w	r1, #0
 8004112:	0159      	lsls	r1, r3, #5
 8004114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004118:	0150      	lsls	r0, r2, #5
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	ebb2 080a 	subs.w	r8, r2, sl
 8004122:	eb63 090b 	sbc.w	r9, r3, fp
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004132:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004136:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800413a:	ebb2 0408 	subs.w	r4, r2, r8
 800413e:	eb63 0509 	sbc.w	r5, r3, r9
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	00eb      	lsls	r3, r5, #3
 800414c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004150:	00e2      	lsls	r2, r4, #3
 8004152:	4614      	mov	r4, r2
 8004154:	461d      	mov	r5, r3
 8004156:	eb14 030a 	adds.w	r3, r4, sl
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	eb45 030b 	adc.w	r3, r5, fp
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800416e:	4629      	mov	r1, r5
 8004170:	028b      	lsls	r3, r1, #10
 8004172:	4621      	mov	r1, r4
 8004174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004178:	4621      	mov	r1, r4
 800417a:	028a      	lsls	r2, r1, #10
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004182:	2200      	movs	r2, #0
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800418c:	f7fc fc6e 	bl	8000a6c <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4613      	mov	r3, r2
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	3301      	adds	r3, #1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80041a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041b2:	e002      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x184>)
 80041b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3740      	adds	r7, #64	@ 0x40
 80041c0:	46bd      	mov	sp, r7
 80041c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	017d7840 	.word	0x017d7840

080041d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e07b      	b.n	80042de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d108      	bne.n	8004200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041f6:	d009      	beq.n	800420c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	61da      	str	r2, [r3, #28]
 80041fe:	e005      	b.n	800420c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fe ff16 	bl	8003058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0104 	and.w	r1, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f003 0210 	and.w	r2, r3, #16
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b088      	sub	sp, #32
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_SPI_Transmit+0x22>
 8004304:	2302      	movs	r3, #2
 8004306:	e12d      	b.n	8004564 <HAL_SPI_Transmit+0x27e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004310:	f7ff f82a 	bl	8003368 <HAL_GetTick>
 8004314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d002      	beq.n	800432c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004326:	2302      	movs	r3, #2
 8004328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800432a:	e116      	b.n	800455a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_Transmit+0x52>
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800433c:	e10d      	b.n	800455a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2203      	movs	r2, #3
 8004342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004384:	d10f      	bne.n	80043a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d007      	beq.n	80043c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043cc:	d14f      	bne.n	800446e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_Transmit+0xf6>
 80043d6:	8afb      	ldrh	r3, [r7, #22]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d142      	bne.n	8004462 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004400:	e02f      	b.n	8004462 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d112      	bne.n	8004436 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	1c9a      	adds	r2, r3, #2
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004434:	e015      	b.n	8004462 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004436:	f7fe ff97 	bl	8003368 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d803      	bhi.n	800444e <HAL_SPI_Transmit+0x168>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d102      	bne.n	8004454 <HAL_SPI_Transmit+0x16e>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004460:	e07b      	b.n	800455a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ca      	bne.n	8004402 <HAL_SPI_Transmit+0x11c>
 800446c:	e050      	b.n	8004510 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_SPI_Transmit+0x196>
 8004476:	8afb      	ldrh	r3, [r7, #22]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d144      	bne.n	8004506 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044a2:	e030      	b.n	8004506 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d113      	bne.n	80044da <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	7812      	ldrb	r2, [r2, #0]
 80044be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044d8:	e015      	b.n	8004506 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044da:	f7fe ff45 	bl	8003368 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d803      	bhi.n	80044f2 <HAL_SPI_Transmit+0x20c>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d102      	bne.n	80044f8 <HAL_SPI_Transmit+0x212>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004504:	e029      	b.n	800455a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1c9      	bne.n	80044a4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fbed 	bl	8004cf4 <SPI_EndRxTxTransaction>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e003      	b.n	800455a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004562:	7ffb      	ldrb	r3, [r7, #31]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d002      	beq.n	8004592 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800458c:	2302      	movs	r3, #2
 800458e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004590:	e0fb      	b.n	800478a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800459a:	d112      	bne.n	80045c2 <HAL_SPI_Receive+0x56>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10e      	bne.n	80045c2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2204      	movs	r2, #4
 80045a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f8ef 	bl	800479c <HAL_SPI_TransmitReceive>
 80045be:	4603      	mov	r3, r0
 80045c0:	e0e8      	b.n	8004794 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_SPI_Receive+0x64>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e0e1      	b.n	8004794 <HAL_SPI_Receive+0x228>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d8:	f7fe fec6 	bl	8003368 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SPI_Receive+0x7e>
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045ee:	e0cc      	b.n	800478a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2204      	movs	r2, #4
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004636:	d10f      	bne.n	8004658 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004646:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004656:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b40      	cmp	r3, #64	@ 0x40
 8004664:	d007      	beq.n	8004676 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d16a      	bne.n	8004754 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800467e:	e032      	b.n	80046e6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d115      	bne.n	80046ba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f103 020c 	add.w	r2, r3, #12
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	7812      	ldrb	r2, [r2, #0]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046b8:	e015      	b.n	80046e6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ba:	f7fe fe55 	bl	8003368 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d803      	bhi.n	80046d2 <HAL_SPI_Receive+0x166>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d102      	bne.n	80046d8 <HAL_SPI_Receive+0x16c>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80046e4:	e051      	b.n	800478a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1c7      	bne.n	8004680 <HAL_SPI_Receive+0x114>
 80046f0:	e035      	b.n	800475e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d113      	bne.n	8004728 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	b292      	uxth	r2, r2
 800470c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	1c9a      	adds	r2, r3, #2
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004726:	e015      	b.n	8004754 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004728:	f7fe fe1e 	bl	8003368 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d803      	bhi.n	8004740 <HAL_SPI_Receive+0x1d4>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d102      	bne.n	8004746 <HAL_SPI_Receive+0x1da>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004752:	e01a      	b.n	800478a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1c9      	bne.n	80046f2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fa60 	bl	8004c28 <SPI_EndRxTransaction>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
 8004780:	e003      	b.n	800478a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08c      	sub	sp, #48	@ 0x30
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047aa:	2301      	movs	r3, #1
 80047ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x26>
 80047be:	2302      	movs	r3, #2
 80047c0:	e198      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x358>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ca:	f7fe fdcd 	bl	8003368 <HAL_GetTick>
 80047ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d00f      	beq.n	800480c <HAL_SPI_TransmitReceive+0x70>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047f2:	d107      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x68>
 80047fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004800:	2b04      	cmp	r3, #4
 8004802:	d003      	beq.n	800480c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800480a:	e16d      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_SPI_TransmitReceive+0x82>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_SPI_TransmitReceive+0x82>
 8004818:	887b      	ldrh	r3, [r7, #2]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004824:	e160      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b04      	cmp	r3, #4
 8004830:	d003      	beq.n	800483a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2205      	movs	r2, #5
 8004836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	887a      	ldrh	r2, [r7, #2]
 800484a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	887a      	ldrh	r2, [r7, #2]
 8004862:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487a:	2b40      	cmp	r3, #64	@ 0x40
 800487c:	d007      	beq.n	800488e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004896:	d17c      	bne.n	8004992 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x10a>
 80048a0:	8b7b      	ldrh	r3, [r7, #26]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d16a      	bne.n	800497c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	1c9a      	adds	r2, r3, #2
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ca:	e057      	b.n	800497c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d11b      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x176>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <HAL_SPI_TransmitReceive+0x176>
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d113      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	1c9a      	adds	r2, r3, #2
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d119      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x1b8>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d014      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	b292      	uxth	r2, r2
 8004936:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004950:	2301      	movs	r3, #1
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004954:	f7fe fd08 	bl	8003368 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004960:	429a      	cmp	r2, r3
 8004962:	d80b      	bhi.n	800497c <HAL_SPI_TransmitReceive+0x1e0>
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d007      	beq.n	800497c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800497a:	e0b5      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1a2      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x130>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d19d      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x130>
 8004990:	e080      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x204>
 800499a:	8b7b      	ldrh	r3, [r7, #26]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d16f      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	7812      	ldrb	r2, [r2, #0]
 80049ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c6:	e05b      	b.n	8004a80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d11c      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x274>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d017      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x274>
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d114      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	7812      	ldrb	r2, [r2, #0]
 80049f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d119      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x2b6>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d014      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a52:	f7fe fc89 	bl	8003368 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d803      	bhi.n	8004a6a <HAL_SPI_TransmitReceive+0x2ce>
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d102      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x2d4>
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004a7e:	e033      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d19e      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x22c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d199      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f92b 	bl	8004cf4 <SPI_EndRxTxTransaction>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004ab0:	e01a      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ade:	e003      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004af0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3730      	adds	r7, #48	@ 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b0a:	b2db      	uxtb	r3, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b28:	f7fe fc1e 	bl	8003368 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b38:	f7fe fc16 	bl	8003368 <HAL_GetTick>
 8004b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	015b      	lsls	r3, r3, #5
 8004b44:	0d1b      	lsrs	r3, r3, #20
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	e054      	b.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d050      	beq.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b58:	f7fe fc06 	bl	8003368 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d902      	bls.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d13d      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b86:	d111      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b90:	d004      	beq.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d107      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb4:	d10f      	bne.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e017      	b.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4013      	ands	r3, r2
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	bf0c      	ite	eq
 8004c0a:	2301      	moveq	r3, #1
 8004c0c:	2300      	movne	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d19b      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000058 	.word	0x20000058

08004c28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3c:	d111      	bne.n	8004c62 <SPI_EndRxTransaction+0x3a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c46:	d004      	beq.n	8004c52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c50:	d107      	bne.n	8004c62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c6a:	d12a      	bne.n	8004cc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c74:	d012      	beq.n	8004c9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	@ 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff49 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02d      	beq.n	8004ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e026      	b.n	8004cea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff36 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01a      	beq.n	8004ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e013      	b.n	8004cea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2101      	movs	r1, #1
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff ff23 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e000      	b.n	8004cea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2201      	movs	r2, #1
 8004d08:	2102      	movs	r1, #2
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff ff04 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e032      	b.n	8004d8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d26:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <SPI_EndRxTxTransaction+0xa0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <SPI_EndRxTxTransaction+0xa4>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	0d5b      	lsrs	r3, r3, #21
 8004d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d44:	d112      	bne.n	8004d6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff fee1 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d016      	beq.n	8004d8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e00f      	b.n	8004d8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b80      	cmp	r3, #128	@ 0x80
 8004d84:	d0f2      	beq.n	8004d6c <SPI_EndRxTxTransaction+0x78>
 8004d86:	e000      	b.n	8004d8a <SPI_EndRxTxTransaction+0x96>
        break;
 8004d88:	bf00      	nop
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000058 	.word	0x20000058
 8004d98:	165e9f81 	.word	0x165e9f81

08004d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e041      	b.n	8004e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fe f990 	bl	80030e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 fa70 	bl	80052c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e044      	b.n	8004ede <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <HAL_TIM_Base_Start_IT+0xb0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d018      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d013      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1a      	ldr	r2, [pc, #104]	@ (8004ef0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00e      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d009      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a17      	ldr	r2, [pc, #92]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a16      	ldr	r2, [pc, #88]	@ (8004efc <HAL_TIM_Base_Start_IT+0xc0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d111      	bne.n	8004ecc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d010      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	e007      	b.n	8004edc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40014000 	.word	0x40014000

08004f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0202 	mvn.w	r2, #2
 8004f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f999 	bl	8005282 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f98b 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f99c 	bl	8005296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d020      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0204 	mvn.w	r2, #4
 8004f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f973 	bl	8005282 <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f965 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f976 	bl	8005296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0208 	mvn.w	r2, #8
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f94d 	bl	8005282 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f93f 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f950 	bl	8005296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0210 	mvn.w	r2, #16
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2208      	movs	r2, #8
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f927 	bl	8005282 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f919 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f92a 	bl	8005296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fd fd00 	bl	8002a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fab6 	bl	80055fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8fb 	bl	80052aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0220 	mvn.w	r2, #32
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa88 	bl	80055e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIM_ConfigClockSource+0x1c>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e0b4      	b.n	8005266 <HAL_TIM_ConfigClockSource+0x186>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800511a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005134:	d03e      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513a:	f200 8087 	bhi.w	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	f000 8086 	beq.w	8005252 <HAL_TIM_ConfigClockSource+0x172>
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800514a:	d87f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b70      	cmp	r3, #112	@ 0x70
 800514e:	d01a      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0xa6>
 8005150:	2b70      	cmp	r3, #112	@ 0x70
 8005152:	d87b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b60      	cmp	r3, #96	@ 0x60
 8005156:	d050      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x11a>
 8005158:	2b60      	cmp	r3, #96	@ 0x60
 800515a:	d877      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b50      	cmp	r3, #80	@ 0x50
 800515e:	d03c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0xfa>
 8005160:	2b50      	cmp	r3, #80	@ 0x50
 8005162:	d873      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b40      	cmp	r3, #64	@ 0x40
 8005166:	d058      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x13a>
 8005168:	2b40      	cmp	r3, #64	@ 0x40
 800516a:	d86f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b30      	cmp	r3, #48	@ 0x30
 800516e:	d064      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	2b30      	cmp	r3, #48	@ 0x30
 8005172:	d86b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b20      	cmp	r3, #32
 8005176:	d060      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d867      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d05c      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005180:	2b10      	cmp	r3, #16
 8005182:	d05a      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005184:	e062      	b.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005196:	f000 f999 	bl	80054cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	609a      	str	r2, [r3, #8]
      break;
 80051b2:	e04f      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051c4:	f000 f982 	bl	80054cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051d6:	609a      	str	r2, [r3, #8]
      break;
 80051d8:	e03c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 f8f6 	bl	80053d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2150      	movs	r1, #80	@ 0x50
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f94f 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 80051f8:	e02c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005206:	461a      	mov	r2, r3
 8005208:	f000 f915 	bl	8005436 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2160      	movs	r1, #96	@ 0x60
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f93f 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8005218:	e01c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	461a      	mov	r2, r3
 8005228:	f000 f8d6 	bl	80053d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2140      	movs	r1, #64	@ 0x40
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f92f 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8005238:	e00c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f000 f926 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 800524a:	e003      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	e000      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005264:	7bfb      	ldrb	r3, [r7, #15]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a3a      	ldr	r2, [pc, #232]	@ (80053bc <TIM_Base_SetConfig+0xfc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a37      	ldr	r2, [pc, #220]	@ (80053c0 <TIM_Base_SetConfig+0x100>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a36      	ldr	r2, [pc, #216]	@ (80053c4 <TIM_Base_SetConfig+0x104>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a35      	ldr	r2, [pc, #212]	@ (80053c8 <TIM_Base_SetConfig+0x108>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2b      	ldr	r2, [pc, #172]	@ (80053bc <TIM_Base_SetConfig+0xfc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01b      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005318:	d017      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a28      	ldr	r2, [pc, #160]	@ (80053c0 <TIM_Base_SetConfig+0x100>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a27      	ldr	r2, [pc, #156]	@ (80053c4 <TIM_Base_SetConfig+0x104>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00f      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a26      	ldr	r2, [pc, #152]	@ (80053c8 <TIM_Base_SetConfig+0x108>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00b      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <TIM_Base_SetConfig+0x10c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a24      	ldr	r2, [pc, #144]	@ (80053d0 <TIM_Base_SetConfig+0x110>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a23      	ldr	r2, [pc, #140]	@ (80053d4 <TIM_Base_SetConfig+0x114>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d108      	bne.n	800535c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a0e      	ldr	r2, [pc, #56]	@ (80053bc <TIM_Base_SetConfig+0xfc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d103      	bne.n	8005390 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f023 0201 	bic.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	611a      	str	r2, [r3, #16]
  }
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800

080053d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 030a 	bic.w	r3, r3, #10
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f023 0210 	bic.w	r2, r3, #16
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005472:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f043 0307 	orr.w	r3, r3, #7
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e050      	b.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005570:	d013      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a18      	ldr	r2, [pc, #96]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a15      	ldr	r2, [pc, #84]	@ (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a13      	ldr	r2, [pc, #76]	@ (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10c      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40014000 	.word	0x40014000

080055e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <siprintf>:
 8005610:	b40e      	push	{r1, r2, r3}
 8005612:	b500      	push	{lr}
 8005614:	b09c      	sub	sp, #112	@ 0x70
 8005616:	ab1d      	add	r3, sp, #116	@ 0x74
 8005618:	9002      	str	r0, [sp, #8]
 800561a:	9006      	str	r0, [sp, #24]
 800561c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005620:	4809      	ldr	r0, [pc, #36]	@ (8005648 <siprintf+0x38>)
 8005622:	9107      	str	r1, [sp, #28]
 8005624:	9104      	str	r1, [sp, #16]
 8005626:	4909      	ldr	r1, [pc, #36]	@ (800564c <siprintf+0x3c>)
 8005628:	f853 2b04 	ldr.w	r2, [r3], #4
 800562c:	9105      	str	r1, [sp, #20]
 800562e:	6800      	ldr	r0, [r0, #0]
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	a902      	add	r1, sp, #8
 8005634:	f000 f9a2 	bl	800597c <_svfiprintf_r>
 8005638:	9b02      	ldr	r3, [sp, #8]
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	b01c      	add	sp, #112	@ 0x70
 8005640:	f85d eb04 	ldr.w	lr, [sp], #4
 8005644:	b003      	add	sp, #12
 8005646:	4770      	bx	lr
 8005648:	20000064 	.word	0x20000064
 800564c:	ffff0208 	.word	0xffff0208

08005650 <memset>:
 8005650:	4402      	add	r2, r0
 8005652:	4603      	mov	r3, r0
 8005654:	4293      	cmp	r3, r2
 8005656:	d100      	bne.n	800565a <memset+0xa>
 8005658:	4770      	bx	lr
 800565a:	f803 1b01 	strb.w	r1, [r3], #1
 800565e:	e7f9      	b.n	8005654 <memset+0x4>

08005660 <__errno>:
 8005660:	4b01      	ldr	r3, [pc, #4]	@ (8005668 <__errno+0x8>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000064 	.word	0x20000064

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4d0d      	ldr	r5, [pc, #52]	@ (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	@ (80056a8 <__libc_init_array+0x3c>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2600      	movs	r6, #0
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4d0b      	ldr	r5, [pc, #44]	@ (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	@ (80056b0 <__libc_init_array+0x44>)
 8005680:	f000 fc66 	bl	8005f50 <_init>
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2600      	movs	r6, #0
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08006f5c 	.word	0x08006f5c
 80056a8:	08006f5c 	.word	0x08006f5c
 80056ac:	08006f5c 	.word	0x08006f5c
 80056b0:	08006f60 	.word	0x08006f60

080056b4 <__retarget_lock_acquire_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_release_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <memcpy>:
 80056b8:	440a      	add	r2, r1
 80056ba:	4291      	cmp	r1, r2
 80056bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c0:	d100      	bne.n	80056c4 <memcpy+0xc>
 80056c2:	4770      	bx	lr
 80056c4:	b510      	push	{r4, lr}
 80056c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ce:	4291      	cmp	r1, r2
 80056d0:	d1f9      	bne.n	80056c6 <memcpy+0xe>
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <_free_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4605      	mov	r5, r0
 80056d8:	2900      	cmp	r1, #0
 80056da:	d041      	beq.n	8005760 <_free_r+0x8c>
 80056dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e0:	1f0c      	subs	r4, r1, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfb8      	it	lt
 80056e6:	18e4      	addlt	r4, r4, r3
 80056e8:	f000 f8e0 	bl	80058ac <__malloc_lock>
 80056ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005764 <_free_r+0x90>)
 80056ee:	6813      	ldr	r3, [r2, #0]
 80056f0:	b933      	cbnz	r3, 8005700 <_free_r+0x2c>
 80056f2:	6063      	str	r3, [r4, #4]
 80056f4:	6014      	str	r4, [r2, #0]
 80056f6:	4628      	mov	r0, r5
 80056f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056fc:	f000 b8dc 	b.w	80058b8 <__malloc_unlock>
 8005700:	42a3      	cmp	r3, r4
 8005702:	d908      	bls.n	8005716 <_free_r+0x42>
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	1821      	adds	r1, r4, r0
 8005708:	428b      	cmp	r3, r1
 800570a:	bf01      	itttt	eq
 800570c:	6819      	ldreq	r1, [r3, #0]
 800570e:	685b      	ldreq	r3, [r3, #4]
 8005710:	1809      	addeq	r1, r1, r0
 8005712:	6021      	streq	r1, [r4, #0]
 8005714:	e7ed      	b.n	80056f2 <_free_r+0x1e>
 8005716:	461a      	mov	r2, r3
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	b10b      	cbz	r3, 8005720 <_free_r+0x4c>
 800571c:	42a3      	cmp	r3, r4
 800571e:	d9fa      	bls.n	8005716 <_free_r+0x42>
 8005720:	6811      	ldr	r1, [r2, #0]
 8005722:	1850      	adds	r0, r2, r1
 8005724:	42a0      	cmp	r0, r4
 8005726:	d10b      	bne.n	8005740 <_free_r+0x6c>
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	4401      	add	r1, r0
 800572c:	1850      	adds	r0, r2, r1
 800572e:	4283      	cmp	r3, r0
 8005730:	6011      	str	r1, [r2, #0]
 8005732:	d1e0      	bne.n	80056f6 <_free_r+0x22>
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	6053      	str	r3, [r2, #4]
 800573a:	4408      	add	r0, r1
 800573c:	6010      	str	r0, [r2, #0]
 800573e:	e7da      	b.n	80056f6 <_free_r+0x22>
 8005740:	d902      	bls.n	8005748 <_free_r+0x74>
 8005742:	230c      	movs	r3, #12
 8005744:	602b      	str	r3, [r5, #0]
 8005746:	e7d6      	b.n	80056f6 <_free_r+0x22>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	1821      	adds	r1, r4, r0
 800574c:	428b      	cmp	r3, r1
 800574e:	bf04      	itt	eq
 8005750:	6819      	ldreq	r1, [r3, #0]
 8005752:	685b      	ldreq	r3, [r3, #4]
 8005754:	6063      	str	r3, [r4, #4]
 8005756:	bf04      	itt	eq
 8005758:	1809      	addeq	r1, r1, r0
 800575a:	6021      	streq	r1, [r4, #0]
 800575c:	6054      	str	r4, [r2, #4]
 800575e:	e7ca      	b.n	80056f6 <_free_r+0x22>
 8005760:	bd38      	pop	{r3, r4, r5, pc}
 8005762:	bf00      	nop
 8005764:	200007d0 	.word	0x200007d0

08005768 <sbrk_aligned>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	4e0f      	ldr	r6, [pc, #60]	@ (80057a8 <sbrk_aligned+0x40>)
 800576c:	460c      	mov	r4, r1
 800576e:	6831      	ldr	r1, [r6, #0]
 8005770:	4605      	mov	r5, r0
 8005772:	b911      	cbnz	r1, 800577a <sbrk_aligned+0x12>
 8005774:	f000 fba6 	bl	8005ec4 <_sbrk_r>
 8005778:	6030      	str	r0, [r6, #0]
 800577a:	4621      	mov	r1, r4
 800577c:	4628      	mov	r0, r5
 800577e:	f000 fba1 	bl	8005ec4 <_sbrk_r>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	d103      	bne.n	800578e <sbrk_aligned+0x26>
 8005786:	f04f 34ff 	mov.w	r4, #4294967295
 800578a:	4620      	mov	r0, r4
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	1cc4      	adds	r4, r0, #3
 8005790:	f024 0403 	bic.w	r4, r4, #3
 8005794:	42a0      	cmp	r0, r4
 8005796:	d0f8      	beq.n	800578a <sbrk_aligned+0x22>
 8005798:	1a21      	subs	r1, r4, r0
 800579a:	4628      	mov	r0, r5
 800579c:	f000 fb92 	bl	8005ec4 <_sbrk_r>
 80057a0:	3001      	adds	r0, #1
 80057a2:	d1f2      	bne.n	800578a <sbrk_aligned+0x22>
 80057a4:	e7ef      	b.n	8005786 <sbrk_aligned+0x1e>
 80057a6:	bf00      	nop
 80057a8:	200007cc 	.word	0x200007cc

080057ac <_malloc_r>:
 80057ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b0:	1ccd      	adds	r5, r1, #3
 80057b2:	f025 0503 	bic.w	r5, r5, #3
 80057b6:	3508      	adds	r5, #8
 80057b8:	2d0c      	cmp	r5, #12
 80057ba:	bf38      	it	cc
 80057bc:	250c      	movcc	r5, #12
 80057be:	2d00      	cmp	r5, #0
 80057c0:	4606      	mov	r6, r0
 80057c2:	db01      	blt.n	80057c8 <_malloc_r+0x1c>
 80057c4:	42a9      	cmp	r1, r5
 80057c6:	d904      	bls.n	80057d2 <_malloc_r+0x26>
 80057c8:	230c      	movs	r3, #12
 80057ca:	6033      	str	r3, [r6, #0]
 80057cc:	2000      	movs	r0, #0
 80057ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058a8 <_malloc_r+0xfc>
 80057d6:	f000 f869 	bl	80058ac <__malloc_lock>
 80057da:	f8d8 3000 	ldr.w	r3, [r8]
 80057de:	461c      	mov	r4, r3
 80057e0:	bb44      	cbnz	r4, 8005834 <_malloc_r+0x88>
 80057e2:	4629      	mov	r1, r5
 80057e4:	4630      	mov	r0, r6
 80057e6:	f7ff ffbf 	bl	8005768 <sbrk_aligned>
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	4604      	mov	r4, r0
 80057ee:	d158      	bne.n	80058a2 <_malloc_r+0xf6>
 80057f0:	f8d8 4000 	ldr.w	r4, [r8]
 80057f4:	4627      	mov	r7, r4
 80057f6:	2f00      	cmp	r7, #0
 80057f8:	d143      	bne.n	8005882 <_malloc_r+0xd6>
 80057fa:	2c00      	cmp	r4, #0
 80057fc:	d04b      	beq.n	8005896 <_malloc_r+0xea>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	4639      	mov	r1, r7
 8005802:	4630      	mov	r0, r6
 8005804:	eb04 0903 	add.w	r9, r4, r3
 8005808:	f000 fb5c 	bl	8005ec4 <_sbrk_r>
 800580c:	4581      	cmp	r9, r0
 800580e:	d142      	bne.n	8005896 <_malloc_r+0xea>
 8005810:	6821      	ldr	r1, [r4, #0]
 8005812:	1a6d      	subs	r5, r5, r1
 8005814:	4629      	mov	r1, r5
 8005816:	4630      	mov	r0, r6
 8005818:	f7ff ffa6 	bl	8005768 <sbrk_aligned>
 800581c:	3001      	adds	r0, #1
 800581e:	d03a      	beq.n	8005896 <_malloc_r+0xea>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	442b      	add	r3, r5
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	f8d8 3000 	ldr.w	r3, [r8]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	bb62      	cbnz	r2, 8005888 <_malloc_r+0xdc>
 800582e:	f8c8 7000 	str.w	r7, [r8]
 8005832:	e00f      	b.n	8005854 <_malloc_r+0xa8>
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	1b52      	subs	r2, r2, r5
 8005838:	d420      	bmi.n	800587c <_malloc_r+0xd0>
 800583a:	2a0b      	cmp	r2, #11
 800583c:	d917      	bls.n	800586e <_malloc_r+0xc2>
 800583e:	1961      	adds	r1, r4, r5
 8005840:	42a3      	cmp	r3, r4
 8005842:	6025      	str	r5, [r4, #0]
 8005844:	bf18      	it	ne
 8005846:	6059      	strne	r1, [r3, #4]
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	bf08      	it	eq
 800584c:	f8c8 1000 	streq.w	r1, [r8]
 8005850:	5162      	str	r2, [r4, r5]
 8005852:	604b      	str	r3, [r1, #4]
 8005854:	4630      	mov	r0, r6
 8005856:	f000 f82f 	bl	80058b8 <__malloc_unlock>
 800585a:	f104 000b 	add.w	r0, r4, #11
 800585e:	1d23      	adds	r3, r4, #4
 8005860:	f020 0007 	bic.w	r0, r0, #7
 8005864:	1ac2      	subs	r2, r0, r3
 8005866:	bf1c      	itt	ne
 8005868:	1a1b      	subne	r3, r3, r0
 800586a:	50a3      	strne	r3, [r4, r2]
 800586c:	e7af      	b.n	80057ce <_malloc_r+0x22>
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	42a3      	cmp	r3, r4
 8005872:	bf0c      	ite	eq
 8005874:	f8c8 2000 	streq.w	r2, [r8]
 8005878:	605a      	strne	r2, [r3, #4]
 800587a:	e7eb      	b.n	8005854 <_malloc_r+0xa8>
 800587c:	4623      	mov	r3, r4
 800587e:	6864      	ldr	r4, [r4, #4]
 8005880:	e7ae      	b.n	80057e0 <_malloc_r+0x34>
 8005882:	463c      	mov	r4, r7
 8005884:	687f      	ldr	r7, [r7, #4]
 8005886:	e7b6      	b.n	80057f6 <_malloc_r+0x4a>
 8005888:	461a      	mov	r2, r3
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	42a3      	cmp	r3, r4
 800588e:	d1fb      	bne.n	8005888 <_malloc_r+0xdc>
 8005890:	2300      	movs	r3, #0
 8005892:	6053      	str	r3, [r2, #4]
 8005894:	e7de      	b.n	8005854 <_malloc_r+0xa8>
 8005896:	230c      	movs	r3, #12
 8005898:	6033      	str	r3, [r6, #0]
 800589a:	4630      	mov	r0, r6
 800589c:	f000 f80c 	bl	80058b8 <__malloc_unlock>
 80058a0:	e794      	b.n	80057cc <_malloc_r+0x20>
 80058a2:	6005      	str	r5, [r0, #0]
 80058a4:	e7d6      	b.n	8005854 <_malloc_r+0xa8>
 80058a6:	bf00      	nop
 80058a8:	200007d0 	.word	0x200007d0

080058ac <__malloc_lock>:
 80058ac:	4801      	ldr	r0, [pc, #4]	@ (80058b4 <__malloc_lock+0x8>)
 80058ae:	f7ff bf01 	b.w	80056b4 <__retarget_lock_acquire_recursive>
 80058b2:	bf00      	nop
 80058b4:	200007c8 	.word	0x200007c8

080058b8 <__malloc_unlock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	@ (80058c0 <__malloc_unlock+0x8>)
 80058ba:	f7ff befc 	b.w	80056b6 <__retarget_lock_release_recursive>
 80058be:	bf00      	nop
 80058c0:	200007c8 	.word	0x200007c8

080058c4 <__ssputs_r>:
 80058c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	688e      	ldr	r6, [r1, #8]
 80058ca:	461f      	mov	r7, r3
 80058cc:	42be      	cmp	r6, r7
 80058ce:	680b      	ldr	r3, [r1, #0]
 80058d0:	4682      	mov	sl, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	4690      	mov	r8, r2
 80058d6:	d82d      	bhi.n	8005934 <__ssputs_r+0x70>
 80058d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058e0:	d026      	beq.n	8005930 <__ssputs_r+0x6c>
 80058e2:	6965      	ldr	r5, [r4, #20]
 80058e4:	6909      	ldr	r1, [r1, #16]
 80058e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058ea:	eba3 0901 	sub.w	r9, r3, r1
 80058ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f2:	1c7b      	adds	r3, r7, #1
 80058f4:	444b      	add	r3, r9
 80058f6:	106d      	asrs	r5, r5, #1
 80058f8:	429d      	cmp	r5, r3
 80058fa:	bf38      	it	cc
 80058fc:	461d      	movcc	r5, r3
 80058fe:	0553      	lsls	r3, r2, #21
 8005900:	d527      	bpl.n	8005952 <__ssputs_r+0x8e>
 8005902:	4629      	mov	r1, r5
 8005904:	f7ff ff52 	bl	80057ac <_malloc_r>
 8005908:	4606      	mov	r6, r0
 800590a:	b360      	cbz	r0, 8005966 <__ssputs_r+0xa2>
 800590c:	6921      	ldr	r1, [r4, #16]
 800590e:	464a      	mov	r2, r9
 8005910:	f7ff fed2 	bl	80056b8 <memcpy>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800591a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	6126      	str	r6, [r4, #16]
 8005922:	6165      	str	r5, [r4, #20]
 8005924:	444e      	add	r6, r9
 8005926:	eba5 0509 	sub.w	r5, r5, r9
 800592a:	6026      	str	r6, [r4, #0]
 800592c:	60a5      	str	r5, [r4, #8]
 800592e:	463e      	mov	r6, r7
 8005930:	42be      	cmp	r6, r7
 8005932:	d900      	bls.n	8005936 <__ssputs_r+0x72>
 8005934:	463e      	mov	r6, r7
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	4632      	mov	r2, r6
 800593a:	4641      	mov	r1, r8
 800593c:	f000 faa8 	bl	8005e90 <memmove>
 8005940:	68a3      	ldr	r3, [r4, #8]
 8005942:	1b9b      	subs	r3, r3, r6
 8005944:	60a3      	str	r3, [r4, #8]
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	4433      	add	r3, r6
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	2000      	movs	r0, #0
 800594e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005952:	462a      	mov	r2, r5
 8005954:	f000 fac6 	bl	8005ee4 <_realloc_r>
 8005958:	4606      	mov	r6, r0
 800595a:	2800      	cmp	r0, #0
 800595c:	d1e0      	bne.n	8005920 <__ssputs_r+0x5c>
 800595e:	6921      	ldr	r1, [r4, #16]
 8005960:	4650      	mov	r0, sl
 8005962:	f7ff feb7 	bl	80056d4 <_free_r>
 8005966:	230c      	movs	r3, #12
 8005968:	f8ca 3000 	str.w	r3, [sl]
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	e7e9      	b.n	800594e <__ssputs_r+0x8a>
	...

0800597c <_svfiprintf_r>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	4698      	mov	r8, r3
 8005982:	898b      	ldrh	r3, [r1, #12]
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	b09d      	sub	sp, #116	@ 0x74
 8005988:	4607      	mov	r7, r0
 800598a:	460d      	mov	r5, r1
 800598c:	4614      	mov	r4, r2
 800598e:	d510      	bpl.n	80059b2 <_svfiprintf_r+0x36>
 8005990:	690b      	ldr	r3, [r1, #16]
 8005992:	b973      	cbnz	r3, 80059b2 <_svfiprintf_r+0x36>
 8005994:	2140      	movs	r1, #64	@ 0x40
 8005996:	f7ff ff09 	bl	80057ac <_malloc_r>
 800599a:	6028      	str	r0, [r5, #0]
 800599c:	6128      	str	r0, [r5, #16]
 800599e:	b930      	cbnz	r0, 80059ae <_svfiprintf_r+0x32>
 80059a0:	230c      	movs	r3, #12
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	b01d      	add	sp, #116	@ 0x74
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	2340      	movs	r3, #64	@ 0x40
 80059b0:	616b      	str	r3, [r5, #20]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059b6:	2320      	movs	r3, #32
 80059b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c0:	2330      	movs	r3, #48	@ 0x30
 80059c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b60 <_svfiprintf_r+0x1e4>
 80059c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059ca:	f04f 0901 	mov.w	r9, #1
 80059ce:	4623      	mov	r3, r4
 80059d0:	469a      	mov	sl, r3
 80059d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d6:	b10a      	cbz	r2, 80059dc <_svfiprintf_r+0x60>
 80059d8:	2a25      	cmp	r2, #37	@ 0x25
 80059da:	d1f9      	bne.n	80059d0 <_svfiprintf_r+0x54>
 80059dc:	ebba 0b04 	subs.w	fp, sl, r4
 80059e0:	d00b      	beq.n	80059fa <_svfiprintf_r+0x7e>
 80059e2:	465b      	mov	r3, fp
 80059e4:	4622      	mov	r2, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	4638      	mov	r0, r7
 80059ea:	f7ff ff6b 	bl	80058c4 <__ssputs_r>
 80059ee:	3001      	adds	r0, #1
 80059f0:	f000 80a7 	beq.w	8005b42 <_svfiprintf_r+0x1c6>
 80059f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059f6:	445a      	add	r2, fp
 80059f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80059fa:	f89a 3000 	ldrb.w	r3, [sl]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 809f 	beq.w	8005b42 <_svfiprintf_r+0x1c6>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0e:	f10a 0a01 	add.w	sl, sl, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	9307      	str	r3, [sp, #28]
 8005a16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a1c:	4654      	mov	r4, sl
 8005a1e:	2205      	movs	r2, #5
 8005a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a24:	484e      	ldr	r0, [pc, #312]	@ (8005b60 <_svfiprintf_r+0x1e4>)
 8005a26:	f7fa fbdb 	bl	80001e0 <memchr>
 8005a2a:	9a04      	ldr	r2, [sp, #16]
 8005a2c:	b9d8      	cbnz	r0, 8005a66 <_svfiprintf_r+0xea>
 8005a2e:	06d0      	lsls	r0, r2, #27
 8005a30:	bf44      	itt	mi
 8005a32:	2320      	movmi	r3, #32
 8005a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a38:	0711      	lsls	r1, r2, #28
 8005a3a:	bf44      	itt	mi
 8005a3c:	232b      	movmi	r3, #43	@ 0x2b
 8005a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a42:	f89a 3000 	ldrb.w	r3, [sl]
 8005a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a48:	d015      	beq.n	8005a76 <_svfiprintf_r+0xfa>
 8005a4a:	9a07      	ldr	r2, [sp, #28]
 8005a4c:	4654      	mov	r4, sl
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f04f 0c0a 	mov.w	ip, #10
 8005a54:	4621      	mov	r1, r4
 8005a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5a:	3b30      	subs	r3, #48	@ 0x30
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d94b      	bls.n	8005af8 <_svfiprintf_r+0x17c>
 8005a60:	b1b0      	cbz	r0, 8005a90 <_svfiprintf_r+0x114>
 8005a62:	9207      	str	r2, [sp, #28]
 8005a64:	e014      	b.n	8005a90 <_svfiprintf_r+0x114>
 8005a66:	eba0 0308 	sub.w	r3, r0, r8
 8005a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	46a2      	mov	sl, r4
 8005a74:	e7d2      	b.n	8005a1c <_svfiprintf_r+0xa0>
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	9103      	str	r1, [sp, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfbb      	ittet	lt
 8005a82:	425b      	neglt	r3, r3
 8005a84:	f042 0202 	orrlt.w	r2, r2, #2
 8005a88:	9307      	strge	r3, [sp, #28]
 8005a8a:	9307      	strlt	r3, [sp, #28]
 8005a8c:	bfb8      	it	lt
 8005a8e:	9204      	strlt	r2, [sp, #16]
 8005a90:	7823      	ldrb	r3, [r4, #0]
 8005a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a94:	d10a      	bne.n	8005aac <_svfiprintf_r+0x130>
 8005a96:	7863      	ldrb	r3, [r4, #1]
 8005a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9a:	d132      	bne.n	8005b02 <_svfiprintf_r+0x186>
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aa8:	3402      	adds	r4, #2
 8005aaa:	9305      	str	r3, [sp, #20]
 8005aac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b70 <_svfiprintf_r+0x1f4>
 8005ab0:	7821      	ldrb	r1, [r4, #0]
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	f7fa fb93 	bl	80001e0 <memchr>
 8005aba:	b138      	cbz	r0, 8005acc <_svfiprintf_r+0x150>
 8005abc:	9b04      	ldr	r3, [sp, #16]
 8005abe:	eba0 000a 	sub.w	r0, r0, sl
 8005ac2:	2240      	movs	r2, #64	@ 0x40
 8005ac4:	4082      	lsls	r2, r0
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	3401      	adds	r4, #1
 8005aca:	9304      	str	r3, [sp, #16]
 8005acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad0:	4824      	ldr	r0, [pc, #144]	@ (8005b64 <_svfiprintf_r+0x1e8>)
 8005ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ad6:	2206      	movs	r2, #6
 8005ad8:	f7fa fb82 	bl	80001e0 <memchr>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d036      	beq.n	8005b4e <_svfiprintf_r+0x1d2>
 8005ae0:	4b21      	ldr	r3, [pc, #132]	@ (8005b68 <_svfiprintf_r+0x1ec>)
 8005ae2:	bb1b      	cbnz	r3, 8005b2c <_svfiprintf_r+0x1b0>
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	3307      	adds	r3, #7
 8005ae8:	f023 0307 	bic.w	r3, r3, #7
 8005aec:	3308      	adds	r3, #8
 8005aee:	9303      	str	r3, [sp, #12]
 8005af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af2:	4433      	add	r3, r6
 8005af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af6:	e76a      	b.n	80059ce <_svfiprintf_r+0x52>
 8005af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005afc:	460c      	mov	r4, r1
 8005afe:	2001      	movs	r0, #1
 8005b00:	e7a8      	b.n	8005a54 <_svfiprintf_r+0xd8>
 8005b02:	2300      	movs	r3, #0
 8005b04:	3401      	adds	r4, #1
 8005b06:	9305      	str	r3, [sp, #20]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f04f 0c0a 	mov.w	ip, #10
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b14:	3a30      	subs	r2, #48	@ 0x30
 8005b16:	2a09      	cmp	r2, #9
 8005b18:	d903      	bls.n	8005b22 <_svfiprintf_r+0x1a6>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0c6      	beq.n	8005aac <_svfiprintf_r+0x130>
 8005b1e:	9105      	str	r1, [sp, #20]
 8005b20:	e7c4      	b.n	8005aac <_svfiprintf_r+0x130>
 8005b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b26:	4604      	mov	r4, r0
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e7f0      	b.n	8005b0e <_svfiprintf_r+0x192>
 8005b2c:	ab03      	add	r3, sp, #12
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	462a      	mov	r2, r5
 8005b32:	4b0e      	ldr	r3, [pc, #56]	@ (8005b6c <_svfiprintf_r+0x1f0>)
 8005b34:	a904      	add	r1, sp, #16
 8005b36:	4638      	mov	r0, r7
 8005b38:	f3af 8000 	nop.w
 8005b3c:	1c42      	adds	r2, r0, #1
 8005b3e:	4606      	mov	r6, r0
 8005b40:	d1d6      	bne.n	8005af0 <_svfiprintf_r+0x174>
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	065b      	lsls	r3, r3, #25
 8005b46:	f53f af2d 	bmi.w	80059a4 <_svfiprintf_r+0x28>
 8005b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b4c:	e72c      	b.n	80059a8 <_svfiprintf_r+0x2c>
 8005b4e:	ab03      	add	r3, sp, #12
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	462a      	mov	r2, r5
 8005b54:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <_svfiprintf_r+0x1f0>)
 8005b56:	a904      	add	r1, sp, #16
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f000 f879 	bl	8005c50 <_printf_i>
 8005b5e:	e7ed      	b.n	8005b3c <_svfiprintf_r+0x1c0>
 8005b60:	08006f20 	.word	0x08006f20
 8005b64:	08006f2a 	.word	0x08006f2a
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	080058c5 	.word	0x080058c5
 8005b70:	08006f26 	.word	0x08006f26

08005b74 <_printf_common>:
 8005b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	4616      	mov	r6, r2
 8005b7a:	4698      	mov	r8, r3
 8005b7c:	688a      	ldr	r2, [r1, #8]
 8005b7e:	690b      	ldr	r3, [r1, #16]
 8005b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bfb8      	it	lt
 8005b88:	4613      	movlt	r3, r2
 8005b8a:	6033      	str	r3, [r6, #0]
 8005b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b90:	4607      	mov	r7, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	b10a      	cbz	r2, 8005b9a <_printf_common+0x26>
 8005b96:	3301      	adds	r3, #1
 8005b98:	6033      	str	r3, [r6, #0]
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	0699      	lsls	r1, r3, #26
 8005b9e:	bf42      	ittt	mi
 8005ba0:	6833      	ldrmi	r3, [r6, #0]
 8005ba2:	3302      	addmi	r3, #2
 8005ba4:	6033      	strmi	r3, [r6, #0]
 8005ba6:	6825      	ldr	r5, [r4, #0]
 8005ba8:	f015 0506 	ands.w	r5, r5, #6
 8005bac:	d106      	bne.n	8005bbc <_printf_common+0x48>
 8005bae:	f104 0a19 	add.w	sl, r4, #25
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	6832      	ldr	r2, [r6, #0]
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dc26      	bgt.n	8005c0a <_printf_common+0x96>
 8005bbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	3b00      	subs	r3, #0
 8005bc4:	bf18      	it	ne
 8005bc6:	2301      	movne	r3, #1
 8005bc8:	0692      	lsls	r2, r2, #26
 8005bca:	d42b      	bmi.n	8005c24 <_printf_common+0xb0>
 8005bcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	47c8      	blx	r9
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d01e      	beq.n	8005c18 <_printf_common+0xa4>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	6922      	ldr	r2, [r4, #16]
 8005bde:	f003 0306 	and.w	r3, r3, #6
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	bf02      	ittt	eq
 8005be6:	68e5      	ldreq	r5, [r4, #12]
 8005be8:	6833      	ldreq	r3, [r6, #0]
 8005bea:	1aed      	subeq	r5, r5, r3
 8005bec:	68a3      	ldr	r3, [r4, #8]
 8005bee:	bf0c      	ite	eq
 8005bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf4:	2500      	movne	r5, #0
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	bfc4      	itt	gt
 8005bfa:	1a9b      	subgt	r3, r3, r2
 8005bfc:	18ed      	addgt	r5, r5, r3
 8005bfe:	2600      	movs	r6, #0
 8005c00:	341a      	adds	r4, #26
 8005c02:	42b5      	cmp	r5, r6
 8005c04:	d11a      	bne.n	8005c3c <_printf_common+0xc8>
 8005c06:	2000      	movs	r0, #0
 8005c08:	e008      	b.n	8005c1c <_printf_common+0xa8>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4641      	mov	r1, r8
 8005c10:	4638      	mov	r0, r7
 8005c12:	47c8      	blx	r9
 8005c14:	3001      	adds	r0, #1
 8005c16:	d103      	bne.n	8005c20 <_printf_common+0xac>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	3501      	adds	r5, #1
 8005c22:	e7c6      	b.n	8005bb2 <_printf_common+0x3e>
 8005c24:	18e1      	adds	r1, r4, r3
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	2030      	movs	r0, #48	@ 0x30
 8005c2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c2e:	4422      	add	r2, r4
 8005c30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c38:	3302      	adds	r3, #2
 8005c3a:	e7c7      	b.n	8005bcc <_printf_common+0x58>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4622      	mov	r2, r4
 8005c40:	4641      	mov	r1, r8
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c8      	blx	r9
 8005c46:	3001      	adds	r0, #1
 8005c48:	d0e6      	beq.n	8005c18 <_printf_common+0xa4>
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7d9      	b.n	8005c02 <_printf_common+0x8e>
	...

08005c50 <_printf_i>:
 8005c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	7e0f      	ldrb	r7, [r1, #24]
 8005c56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c58:	2f78      	cmp	r7, #120	@ 0x78
 8005c5a:	4691      	mov	r9, r2
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	469a      	mov	sl, r3
 8005c62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c66:	d807      	bhi.n	8005c78 <_printf_i+0x28>
 8005c68:	2f62      	cmp	r7, #98	@ 0x62
 8005c6a:	d80a      	bhi.n	8005c82 <_printf_i+0x32>
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	f000 80d2 	beq.w	8005e16 <_printf_i+0x1c6>
 8005c72:	2f58      	cmp	r7, #88	@ 0x58
 8005c74:	f000 80b9 	beq.w	8005dea <_printf_i+0x19a>
 8005c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c80:	e03a      	b.n	8005cf8 <_printf_i+0xa8>
 8005c82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c86:	2b15      	cmp	r3, #21
 8005c88:	d8f6      	bhi.n	8005c78 <_printf_i+0x28>
 8005c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8005c90 <_printf_i+0x40>)
 8005c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c90:	08005ce9 	.word	0x08005ce9
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005c79 	.word	0x08005c79
 8005c9c:	08005c79 	.word	0x08005c79
 8005ca0:	08005c79 	.word	0x08005c79
 8005ca4:	08005c79 	.word	0x08005c79
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005c79 	.word	0x08005c79
 8005cb0:	08005c79 	.word	0x08005c79
 8005cb4:	08005c79 	.word	0x08005c79
 8005cb8:	08005c79 	.word	0x08005c79
 8005cbc:	08005dfd 	.word	0x08005dfd
 8005cc0:	08005d27 	.word	0x08005d27
 8005cc4:	08005db7 	.word	0x08005db7
 8005cc8:	08005c79 	.word	0x08005c79
 8005ccc:	08005c79 	.word	0x08005c79
 8005cd0:	08005e1f 	.word	0x08005e1f
 8005cd4:	08005c79 	.word	0x08005c79
 8005cd8:	08005d27 	.word	0x08005d27
 8005cdc:	08005c79 	.word	0x08005c79
 8005ce0:	08005c79 	.word	0x08005c79
 8005ce4:	08005dbf 	.word	0x08005dbf
 8005ce8:	6833      	ldr	r3, [r6, #0]
 8005cea:	1d1a      	adds	r2, r3, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6032      	str	r2, [r6, #0]
 8005cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e09d      	b.n	8005e38 <_printf_i+0x1e8>
 8005cfc:	6833      	ldr	r3, [r6, #0]
 8005cfe:	6820      	ldr	r0, [r4, #0]
 8005d00:	1d19      	adds	r1, r3, #4
 8005d02:	6031      	str	r1, [r6, #0]
 8005d04:	0606      	lsls	r6, r0, #24
 8005d06:	d501      	bpl.n	8005d0c <_printf_i+0xbc>
 8005d08:	681d      	ldr	r5, [r3, #0]
 8005d0a:	e003      	b.n	8005d14 <_printf_i+0xc4>
 8005d0c:	0645      	lsls	r5, r0, #25
 8005d0e:	d5fb      	bpl.n	8005d08 <_printf_i+0xb8>
 8005d10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	da03      	bge.n	8005d20 <_printf_i+0xd0>
 8005d18:	232d      	movs	r3, #45	@ 0x2d
 8005d1a:	426d      	negs	r5, r5
 8005d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d20:	4859      	ldr	r0, [pc, #356]	@ (8005e88 <_printf_i+0x238>)
 8005d22:	230a      	movs	r3, #10
 8005d24:	e011      	b.n	8005d4a <_printf_i+0xfa>
 8005d26:	6821      	ldr	r1, [r4, #0]
 8005d28:	6833      	ldr	r3, [r6, #0]
 8005d2a:	0608      	lsls	r0, r1, #24
 8005d2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d30:	d402      	bmi.n	8005d38 <_printf_i+0xe8>
 8005d32:	0649      	lsls	r1, r1, #25
 8005d34:	bf48      	it	mi
 8005d36:	b2ad      	uxthmi	r5, r5
 8005d38:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d3a:	4853      	ldr	r0, [pc, #332]	@ (8005e88 <_printf_i+0x238>)
 8005d3c:	6033      	str	r3, [r6, #0]
 8005d3e:	bf14      	ite	ne
 8005d40:	230a      	movne	r3, #10
 8005d42:	2308      	moveq	r3, #8
 8005d44:	2100      	movs	r1, #0
 8005d46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d4a:	6866      	ldr	r6, [r4, #4]
 8005d4c:	60a6      	str	r6, [r4, #8]
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	bfa2      	ittt	ge
 8005d52:	6821      	ldrge	r1, [r4, #0]
 8005d54:	f021 0104 	bicge.w	r1, r1, #4
 8005d58:	6021      	strge	r1, [r4, #0]
 8005d5a:	b90d      	cbnz	r5, 8005d60 <_printf_i+0x110>
 8005d5c:	2e00      	cmp	r6, #0
 8005d5e:	d04b      	beq.n	8005df8 <_printf_i+0x1a8>
 8005d60:	4616      	mov	r6, r2
 8005d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d66:	fb03 5711 	mls	r7, r3, r1, r5
 8005d6a:	5dc7      	ldrb	r7, [r0, r7]
 8005d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d70:	462f      	mov	r7, r5
 8005d72:	42bb      	cmp	r3, r7
 8005d74:	460d      	mov	r5, r1
 8005d76:	d9f4      	bls.n	8005d62 <_printf_i+0x112>
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d10b      	bne.n	8005d94 <_printf_i+0x144>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	07df      	lsls	r7, r3, #31
 8005d80:	d508      	bpl.n	8005d94 <_printf_i+0x144>
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	6861      	ldr	r1, [r4, #4]
 8005d86:	4299      	cmp	r1, r3
 8005d88:	bfde      	ittt	le
 8005d8a:	2330      	movle	r3, #48	@ 0x30
 8005d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d94:	1b92      	subs	r2, r2, r6
 8005d96:	6122      	str	r2, [r4, #16]
 8005d98:	f8cd a000 	str.w	sl, [sp]
 8005d9c:	464b      	mov	r3, r9
 8005d9e:	aa03      	add	r2, sp, #12
 8005da0:	4621      	mov	r1, r4
 8005da2:	4640      	mov	r0, r8
 8005da4:	f7ff fee6 	bl	8005b74 <_printf_common>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d14a      	bne.n	8005e42 <_printf_i+0x1f2>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	b004      	add	sp, #16
 8005db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f043 0320 	orr.w	r3, r3, #32
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	4833      	ldr	r0, [pc, #204]	@ (8005e8c <_printf_i+0x23c>)
 8005dc0:	2778      	movs	r7, #120	@ 0x78
 8005dc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	6831      	ldr	r1, [r6, #0]
 8005dca:	061f      	lsls	r7, r3, #24
 8005dcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dd0:	d402      	bmi.n	8005dd8 <_printf_i+0x188>
 8005dd2:	065f      	lsls	r7, r3, #25
 8005dd4:	bf48      	it	mi
 8005dd6:	b2ad      	uxthmi	r5, r5
 8005dd8:	6031      	str	r1, [r6, #0]
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	bf44      	itt	mi
 8005dde:	f043 0320 	orrmi.w	r3, r3, #32
 8005de2:	6023      	strmi	r3, [r4, #0]
 8005de4:	b11d      	cbz	r5, 8005dee <_printf_i+0x19e>
 8005de6:	2310      	movs	r3, #16
 8005de8:	e7ac      	b.n	8005d44 <_printf_i+0xf4>
 8005dea:	4827      	ldr	r0, [pc, #156]	@ (8005e88 <_printf_i+0x238>)
 8005dec:	e7e9      	b.n	8005dc2 <_printf_i+0x172>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	f023 0320 	bic.w	r3, r3, #32
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	e7f6      	b.n	8005de6 <_printf_i+0x196>
 8005df8:	4616      	mov	r6, r2
 8005dfa:	e7bd      	b.n	8005d78 <_printf_i+0x128>
 8005dfc:	6833      	ldr	r3, [r6, #0]
 8005dfe:	6825      	ldr	r5, [r4, #0]
 8005e00:	6961      	ldr	r1, [r4, #20]
 8005e02:	1d18      	adds	r0, r3, #4
 8005e04:	6030      	str	r0, [r6, #0]
 8005e06:	062e      	lsls	r6, r5, #24
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	d501      	bpl.n	8005e10 <_printf_i+0x1c0>
 8005e0c:	6019      	str	r1, [r3, #0]
 8005e0e:	e002      	b.n	8005e16 <_printf_i+0x1c6>
 8005e10:	0668      	lsls	r0, r5, #25
 8005e12:	d5fb      	bpl.n	8005e0c <_printf_i+0x1bc>
 8005e14:	8019      	strh	r1, [r3, #0]
 8005e16:	2300      	movs	r3, #0
 8005e18:	6123      	str	r3, [r4, #16]
 8005e1a:	4616      	mov	r6, r2
 8005e1c:	e7bc      	b.n	8005d98 <_printf_i+0x148>
 8005e1e:	6833      	ldr	r3, [r6, #0]
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	6032      	str	r2, [r6, #0]
 8005e24:	681e      	ldr	r6, [r3, #0]
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7fa f9d8 	bl	80001e0 <memchr>
 8005e30:	b108      	cbz	r0, 8005e36 <_printf_i+0x1e6>
 8005e32:	1b80      	subs	r0, r0, r6
 8005e34:	6060      	str	r0, [r4, #4]
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e40:	e7aa      	b.n	8005d98 <_printf_i+0x148>
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	4632      	mov	r2, r6
 8005e46:	4649      	mov	r1, r9
 8005e48:	4640      	mov	r0, r8
 8005e4a:	47d0      	blx	sl
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d0ad      	beq.n	8005dac <_printf_i+0x15c>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	079b      	lsls	r3, r3, #30
 8005e54:	d413      	bmi.n	8005e7e <_printf_i+0x22e>
 8005e56:	68e0      	ldr	r0, [r4, #12]
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	4298      	cmp	r0, r3
 8005e5c:	bfb8      	it	lt
 8005e5e:	4618      	movlt	r0, r3
 8005e60:	e7a6      	b.n	8005db0 <_printf_i+0x160>
 8005e62:	2301      	movs	r3, #1
 8005e64:	4632      	mov	r2, r6
 8005e66:	4649      	mov	r1, r9
 8005e68:	4640      	mov	r0, r8
 8005e6a:	47d0      	blx	sl
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d09d      	beq.n	8005dac <_printf_i+0x15c>
 8005e70:	3501      	adds	r5, #1
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	9903      	ldr	r1, [sp, #12]
 8005e76:	1a5b      	subs	r3, r3, r1
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	dcf2      	bgt.n	8005e62 <_printf_i+0x212>
 8005e7c:	e7eb      	b.n	8005e56 <_printf_i+0x206>
 8005e7e:	2500      	movs	r5, #0
 8005e80:	f104 0619 	add.w	r6, r4, #25
 8005e84:	e7f5      	b.n	8005e72 <_printf_i+0x222>
 8005e86:	bf00      	nop
 8005e88:	08006f31 	.word	0x08006f31
 8005e8c:	08006f42 	.word	0x08006f42

08005e90 <memmove>:
 8005e90:	4288      	cmp	r0, r1
 8005e92:	b510      	push	{r4, lr}
 8005e94:	eb01 0402 	add.w	r4, r1, r2
 8005e98:	d902      	bls.n	8005ea0 <memmove+0x10>
 8005e9a:	4284      	cmp	r4, r0
 8005e9c:	4623      	mov	r3, r4
 8005e9e:	d807      	bhi.n	8005eb0 <memmove+0x20>
 8005ea0:	1e43      	subs	r3, r0, #1
 8005ea2:	42a1      	cmp	r1, r4
 8005ea4:	d008      	beq.n	8005eb8 <memmove+0x28>
 8005ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eae:	e7f8      	b.n	8005ea2 <memmove+0x12>
 8005eb0:	4402      	add	r2, r0
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	428a      	cmp	r2, r1
 8005eb6:	d100      	bne.n	8005eba <memmove+0x2a>
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ec2:	e7f7      	b.n	8005eb4 <memmove+0x24>

08005ec4 <_sbrk_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d06      	ldr	r5, [pc, #24]	@ (8005ee0 <_sbrk_r+0x1c>)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fd f972 	bl	80031b8 <_sbrk>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_sbrk_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_sbrk_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200007c4 	.word	0x200007c4

08005ee4 <_realloc_r>:
 8005ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee8:	4680      	mov	r8, r0
 8005eea:	4615      	mov	r5, r2
 8005eec:	460c      	mov	r4, r1
 8005eee:	b921      	cbnz	r1, 8005efa <_realloc_r+0x16>
 8005ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	f7ff bc59 	b.w	80057ac <_malloc_r>
 8005efa:	b92a      	cbnz	r2, 8005f08 <_realloc_r+0x24>
 8005efc:	f7ff fbea 	bl	80056d4 <_free_r>
 8005f00:	2400      	movs	r4, #0
 8005f02:	4620      	mov	r0, r4
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	f000 f81a 	bl	8005f40 <_malloc_usable_size_r>
 8005f0c:	4285      	cmp	r5, r0
 8005f0e:	4606      	mov	r6, r0
 8005f10:	d802      	bhi.n	8005f18 <_realloc_r+0x34>
 8005f12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f16:	d8f4      	bhi.n	8005f02 <_realloc_r+0x1e>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	f7ff fc46 	bl	80057ac <_malloc_r>
 8005f20:	4607      	mov	r7, r0
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d0ec      	beq.n	8005f00 <_realloc_r+0x1c>
 8005f26:	42b5      	cmp	r5, r6
 8005f28:	462a      	mov	r2, r5
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	bf28      	it	cs
 8005f2e:	4632      	movcs	r2, r6
 8005f30:	f7ff fbc2 	bl	80056b8 <memcpy>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff fbcc 	bl	80056d4 <_free_r>
 8005f3c:	463c      	mov	r4, r7
 8005f3e:	e7e0      	b.n	8005f02 <_realloc_r+0x1e>

08005f40 <_malloc_usable_size_r>:
 8005f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f44:	1f18      	subs	r0, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfbc      	itt	lt
 8005f4a:	580b      	ldrlt	r3, [r1, r0]
 8005f4c:	18c0      	addlt	r0, r0, r3
 8005f4e:	4770      	bx	lr

08005f50 <_init>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr

08005f5c <_fini>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr
