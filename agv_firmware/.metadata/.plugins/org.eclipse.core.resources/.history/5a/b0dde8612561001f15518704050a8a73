/*
 * line_sensor.c
 *
 *  Created on: Aug 23, 2024
 *      Author: arafi
 */

#include "line_sensor.h"



void ir_array_init(ir_array *ir_struct,
                   volatile uint16_t *ir_sen_val_dma,
                   volatile uint16_t *ir_sen_val_cal,
                   uint16_t *ir_sen_max_val,
                   uint16_t *ir_sen_min_val,
                   uint8_t *ir_sen_channel_num,
                   uint16_t *ir_sen_read_line_val,
                   int      *ir_sen_read_line_old_val,
                   uint8_t  *ir_sen_on_line_total_num,
                   uint8_t  *ir_sen_on_line_mid_num,
                   uint8_t  *ir_sen_on_line_left_num,
                   uint8_t  *ir_sen_on_line_right_num,
                   uint16_t *ir_sen_threshold){

    for(uint8_t i = 0; i < 10; i++){
        ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
    ir_struct->ir_sen_threshold = *ir_sen_threshold;

}

void Line_Sensor_Calculation(ir_array *ir_struct){
    uint8_t i, on_line = 0;
    uint32_t avg = 0;
    uint32_t sum = 0;
    uint16_t value;
    uint8_t on_sensor_total_number = 0;

    uint8_t middle_on_line = 0;


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
        calmin = ir_struct->ir_sen_min_val[i];

        denominator = calmax - calmin;

        int x = 0;
        if(denominator != 0){
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
        }
        if(x <0){
            x = 0;
        }
        if(x>1000){
            x = 1000;
        }
        value = (1000-x);
        ir_struct->ir_sen_val_cal[i] = value;

        // start read line number section
        if(value > 600){
            on_line = 1;
        }
        if(value > 200){
            avg += (long)(value)*(i*1000);
            sum += value;
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
            on_sensor_total_number++;
            if(i >= 2 && i <= 7){
                middle_on_line++;
            }
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
            ir_struct->ir_sen_read_line_old_val = 0;
        }
        else{
            ir_struct->ir_sen_read_line_old_val = (ir_struct->ir_sen_channel_num - 1)*1000;
        }
    }
    else{
        ir_struct->ir_sen_read_line_old_val = avg/sum;
    }
    ir_struct->ir_sen_read_line_val = ir_struct->ir_sen_read_line_old_val;
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = 100;
    ir_struct->ir_sen_on_line_right_num = 111;

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
