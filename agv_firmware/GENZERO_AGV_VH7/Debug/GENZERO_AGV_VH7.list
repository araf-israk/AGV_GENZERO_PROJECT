
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6ec  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800f9b8  0800f9b8  000109b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc50  0800fc50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc58  0800fc58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fc5c  0800fc5c  00010c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800fc60  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b0  24000064  0800fcc4  00011064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000614  0800fcc4  00011614  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ed31  00000000  00000000  00011092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000334f  00000000  00000000  0002fdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001314  00000000  00000000  00034980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f7c  00000000  00000000  00035c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021ae0  00000000  00000000  0006bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166f42  00000000  00000000  0008d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f4632  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a38  00000000  00000000  001f4678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001fb0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000064 	.word	0x24000064
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f9a0 	.word	0x0800f9a0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000068 	.word	0x24000068
 8000308:	0800f9a0 	.word	0x0800f9a0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 faaa 	bl	8007c84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00a ff9a 	bl	800b674 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fbf4 	bl	800bf34 <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b f977 	bl	800ba50 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fbe3 	bl	800bf34 <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fa80 	bl	8007c84 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fa6c 	bl	8007c84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00a ff5c 	bl	800b674 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fbb6 	bl	800bf34 <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00a ff4b 	bl	800b674 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fba5 	bl	800bf34 <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 fa42 	bl	8007c84 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f84b 	bl	80028e0 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f88c 	bl	800f984 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800f9b8 	.word	0x0800f9b8

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f001 fffd 	bl	80028e0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f001 fff1 	bl	80028e0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f001 ffe6 	bl	80028e0 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 ffca 	bl	80028e0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f001 ffb7 	bl	80028e0 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 ffa1 	bl	80028e0 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f001 ff65 	bl	80028e0 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f001 ff47 	bl	80028e0 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fdb0 	bl	800064e <LoRa_gotoMode>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b089      	sub	sp, #36	@ 0x24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e007      	b.n	8000b1e <LoRa_receive+0x28>
		data[i]=0;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf3      	blt.n	8000b0e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd90 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	2112      	movs	r1, #18
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff92 	bl	8000a5a <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02f      	beq.n	8000ba4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	2112      	movs	r1, #18
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffa0 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b4e:	2113      	movs	r1, #19
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff82 	bl	8000a5a <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7c 	bl	8000a5a <LoRa_read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff8e 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b72:	7cba      	ldrb	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00b      	b.n	8000b9c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff ff64 	bl	8000a5a <LoRa_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbef      	blt.n	8000b84 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fd51 	bl	800064e <LoRa_gotoMode>
    return min;
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <LoRa_isvalid>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8096 	beq.w	8000cf8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd3d 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f001 fe83 	bl	80028e0 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff3c 	bl	8000a5a <LoRa_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f001 fe7a 	bl	80028e0 <HAL_Delay>
			data = read | 0x80;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff47 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f001 fe6d 	bl	80028e0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe55 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feb0 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febd 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	210c      	movs	r1, #12
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff2b 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fef3 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe68 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c4c:	22ff      	movs	r2, #255	@ 0xff
 8000c4e:	211f      	movs	r1, #31
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1c 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	461a      	mov	r2, r3
 8000c76:	211d      	movs	r1, #29
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff08 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fde8 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2120      	movs	r1, #32
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fefb 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2121      	movs	r1, #33	@ 0x21
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef3 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fed5 	bl	8000a5a <LoRa_read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fee3 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fcbf 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f001 fe02 	bl	80028e0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cdc:	2142      	movs	r1, #66	@ 0x42
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff febb 	bl	8000a5a <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d101      	bne.n	8000cf2 <LoRa_init+0x13c>
				return LORA_OK;
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	e004      	b.n	8000cfc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000cf2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000cf6:	e001      	b.n	8000cfc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000cf8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e025      	b.n	8000d64 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	441a      	add	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	b291      	uxth	r1, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3214      	adds	r2, #20
 8000d42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	8811      	ldrh	r1, [r2, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	331c      	adds	r3, #28
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d6      	bls.n	8000d18 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <Line_Sensor_Calculation>:

void Line_Sensor_Calculation(ir_array *ir_struct){
 8000dce:	b480      	push	{r7}
 8000dd0:	b08b      	sub	sp, #44	@ 0x2c
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    uint8_t i, on_line = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t avg = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    uint32_t sum = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    uint16_t value;
    uint8_t on_sensor_total_number = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	76fb      	strb	r3, [r7, #27]

    uint8_t middle_on_line = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	76bb      	strb	r3, [r7, #26]


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000df2:	e075      	b.n	8000ee0 <Line_Sensor_Calculation+0x112>
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
 8000df4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3214      	adds	r2, #20
 8000dfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e00:	827b      	strh	r3, [r7, #18]
        calmin = ir_struct->ir_sen_min_val[i];
 8000e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	331c      	adds	r3, #28
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	889b      	ldrh	r3, [r3, #4]
 8000e10:	823b      	strh	r3, [r7, #16]

        denominator = calmax - calmin;
 8000e12:	8a7a      	ldrh	r2, [r7, #18]
 8000e14:	8a3b      	ldrh	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	81fb      	strh	r3, [r7, #14]

        int x = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
        if(denominator != 0){
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d010      	beq.n	8000e46 <Line_Sensor_Calculation+0x78>
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
 8000e24:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	8a3b      	ldrh	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e3a:	fb03 f202 	mul.w	r2, r3, r2
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
        }
        if(x <0){
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	da01      	bge.n	8000e50 <Line_Sensor_Calculation+0x82>
            x = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
        }
        if(x>1000){
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e56:	dd02      	ble.n	8000e5e <Line_Sensor_Calculation+0x90>
            x = 1000;
 8000e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5c:	617b      	str	r3, [r7, #20]
        }
        value = (1000-x);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000e66:	81bb      	strh	r3, [r7, #12]
        ir_struct->ir_sen_val_cal[i] = value;
 8000e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	3308      	adds	r3, #8
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	89ba      	ldrh	r2, [r7, #12]
 8000e76:	809a      	strh	r2, [r3, #4]

        // start read line number section
        if(value > 600){
 8000e78:	89bb      	ldrh	r3, [r7, #12]
 8000e7a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e7e:	d902      	bls.n	8000e86 <Line_Sensor_Calculation+0xb8>
            on_line = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        if(value > 200){
 8000e86:	89bb      	ldrh	r3, [r7, #12]
 8000e88:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e8a:	d910      	bls.n	8000eae <Line_Sensor_Calculation+0xe0>
            avg += (long)(value)*(i*1000);
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e92:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	623b      	str	r3, [r7, #32]
            sum += value;
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	4413      	add	r3, r2
 8000eac:	61fb      	str	r3, [r7, #28]
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000eb4:	89ba      	ldrh	r2, [r7, #12]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d90d      	bls.n	8000ed6 <Line_Sensor_Calculation+0x108>
            on_sensor_total_number++;
 8000eba:	7efb      	ldrb	r3, [r7, #27]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	76fb      	strb	r3, [r7, #27]
            if(i >= 2 && i <= 7){
 8000ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d906      	bls.n	8000ed6 <Line_Sensor_Calculation+0x108>
 8000ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ecc:	2b07      	cmp	r3, #7
 8000ece:	d802      	bhi.n	8000ed6 <Line_Sensor_Calculation+0x108>
                middle_on_line++;
 8000ed0:	7ebb      	ldrb	r3, [r7, #26]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	76bb      	strb	r3, [r7, #26]
    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eda:	3301      	adds	r3, #1
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ee6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d382      	bcc.n	8000df4 <Line_Sensor_Calculation+0x26>
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
 8000eee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d11a      	bne.n	8000f2c <Line_Sensor_Calculation+0x15e>
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f00:	3b01      	subs	r3, #1
 8000f02:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	da03      	bge.n	8000f16 <Line_Sensor_Calculation+0x148>
            ir_struct->ir_sen_read_line_old_val = 0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f14:	e011      	b.n	8000f3a <Line_Sensor_Calculation+0x16c>
        }
        else{
            ir_struct->ir_sen_read_line_old_val = (ir_struct->ir_sen_channel_num - 1)*1000;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f22:	fb03 f202 	mul.w	r2, r3, r2
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f2a:	e006      	b.n	8000f3a <Line_Sensor_Calculation+0x16c>
        }
    }
    else{
        ir_struct->ir_sen_read_line_old_val = avg/sum;
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    ir_struct->ir_sen_read_line_val = ir_struct->ir_sen_read_line_old_val;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = 100;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2264      	movs	r2, #100	@ 0x64
 8000f4a:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = 111;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	226f      	movs	r2, #111	@ 0x6f
 8000f52:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7eba      	ldrb	r2, [r7, #26]
 8000f5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7efa      	ldrb	r2, [r7, #27]
 8000f62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
 8000f66:	bf00      	nop
 8000f68:	372c      	adds	r7, #44	@ 0x2c
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d102      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d102      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d102      	bne.n	8000fae <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	2b10      	cmp	r3, #16
 8000fb2:	d103      	bne.n	8000fbc <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x78>)
 8000fb8:	f006 fe7d 	bl	8007cb6 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fbe:	8a9b      	ldrh	r3, [r3, #20]
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d10b      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	490a      	ldr	r1, [pc, #40]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000fca:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fcc:	f7ff fd93 	bl	8000af6 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8000fd0:	2140      	movs	r1, #64	@ 0x40
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000fd4:	f006 fe6f 	bl	8007cb6 <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x88>)
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	701a      	strb	r2, [r3, #0]

	}
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	240004d8 	.word	0x240004d8
 8000fec:	58021800 	.word	0x58021800
 8000ff0:	240004dc 	.word	0x240004dc
 8000ff4:	2400058c 	.word	0x2400058c
 8000ff8:	58020c00 	.word	0x58020c00
 8000ffc:	2400060c 	.word	0x2400060c

08001000 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]

//	if(rs485_RxData[1] == 0x6){ //0x6 == writing function code
//
//	}
	if(rs485_RxData[1] == 0x3){ //0x3 == reading function code
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_UARTEx_RxEventCallback+0x6c>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d11b      	bne.n	800104c <HAL_UARTEx_RxEventCallback+0x4c>
		rs485_rx_num_bytes = rs485_RxData[2];
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_UARTEx_RxEventCallback+0x6c>)
 8001016:	789a      	ldrb	r2, [r3, #2]
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_UARTEx_RxEventCallback+0x70>)
 800101a:	701a      	strb	r2, [r3, #0]
		rs485_reg_address = (rs485_TxData[2] << 8) | (rs485_TxData[3]);
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_UARTEx_RxEventCallback+0x74>)
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UARTEx_RxEventCallback+0x74>)
 8001026:	78db      	ldrb	r3, [r3, #3]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_UARTEx_RxEventCallback+0x78>)
 8001032:	801a      	strh	r2, [r3, #0]
		rs485_reg_number  = (rs485_TxData[4] << 8) | (rs485_TxData[5]);
 8001034:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_UARTEx_RxEventCallback+0x74>)
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_UARTEx_RxEventCallback+0x74>)
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <HAL_UARTEx_RxEventCallback+0x7c>)
 800104a:	801a      	strh	r2, [r3, #0]

	}
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;
	rs485_isbusy = 0;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HAL_UARTEx_RxEventCallback+0x80>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
	rs485_fail_check = 0;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x84>)
 8001054:	2200      	movs	r2, #0
 8001056:	801a      	strh	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rs485_RxData, 32);
 8001058:	2220      	movs	r2, #32
 800105a:	4904      	ldr	r1, [pc, #16]	@ (800106c <HAL_UARTEx_RxEventCallback+0x6c>)
 800105c:	480a      	ldr	r0, [pc, #40]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x88>)
 800105e:	f00e fbc6 	bl	800f7ee <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	240003b8 	.word	0x240003b8
 8001070:	240003d6 	.word	0x240003d6
 8001074:	240003c8 	.word	0x240003c8
 8001078:	240003d2 	.word	0x240003d2
 800107c:	240003d4 	.word	0x240003d4
 8001080:	240003d0 	.word	0x240003d0
 8001084:	240003d8 	.word	0x240003d8
 8001088:	24000324 	.word	0x24000324

0800108c <rs485_send_data>:

void rs485_send_data(uint8_t *data)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

	if(rs485_isbusy == 0){
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <rs485_send_data+0x98>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d116      	bne.n	80010ca <rs485_send_data+0x3e>
		HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a2:	4821      	ldr	r0, [pc, #132]	@ (8001128 <rs485_send_data+0x9c>)
 80010a4:	f006 fdee 	bl	8007c84 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, data, 8, 1000);
 80010a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ac:	2208      	movs	r2, #8
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	481e      	ldr	r0, [pc, #120]	@ (800112c <rs485_send_data+0xa0>)
 80010b2:	f00b ff57 	bl	800cf64 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin , GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010bc:	481a      	ldr	r0, [pc, #104]	@ (8001128 <rs485_send_data+0x9c>)
 80010be:	f006 fde1 	bl	8007c84 <HAL_GPIO_WritePin>
		rs485_isbusy = 255;
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <rs485_send_data+0x98>)
 80010c4:	22ff      	movs	r2, #255	@ 0xff
 80010c6:	701a      	strb	r2, [r3, #0]
				//rs485_connectivity++;
			}
		}
		rs485_last_fail_check = rs485_fail_check;
	}
}
 80010c8:	e028      	b.n	800111c <rs485_send_data+0x90>
		if(rs485_fail_check < 0xffff){
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <rs485_send_data+0xa4>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d006      	beq.n	80010e4 <rs485_send_data+0x58>
			rs485_fail_check++;
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <rs485_send_data+0xa4>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <rs485_send_data+0xa4>)
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	e005      	b.n	80010f0 <rs485_send_data+0x64>
			rs485_isbusy = 0;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <rs485_send_data+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
			HAL_Delay(20);
 80010ea:	2014      	movs	r0, #20
 80010ec:	f001 fbf8 	bl	80028e0 <HAL_Delay>
		if(rs485_last_fail_check == 0xffff){
 80010f0:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <rs485_send_data+0xa8>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d10b      	bne.n	8001114 <rs485_send_data+0x88>
			if(rs485_fail_check < 0xffff){
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <rs485_send_data+0xa4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001104:	4293      	cmp	r3, r2
 8001106:	d005      	beq.n	8001114 <rs485_send_data+0x88>
				motor_enable_velocity_mode(0x01);
 8001108:	2001      	movs	r0, #1
 800110a:	f000 f815 	bl	8001138 <motor_enable_velocity_mode>
				motor_enable_velocity_mode(0x02);
 800110e:	2002      	movs	r0, #2
 8001110:	f000 f812 	bl	8001138 <motor_enable_velocity_mode>
		rs485_last_fail_check = rs485_fail_check;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <rs485_send_data+0xa4>)
 8001116:	881a      	ldrh	r2, [r3, #0]
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <rs485_send_data+0xa8>)
 800111a:	801a      	strh	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	240003d0 	.word	0x240003d0
 8001128:	58020400 	.word	0x58020400
 800112c:	24000324 	.word	0x24000324
 8001130:	240003d8 	.word	0x240003d8
 8001134:	240003da 	.word	0x240003da

08001138 <motor_enable_velocity_mode>:


void motor_enable_velocity_mode(uint8_t id){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	  rs485_TxData[0] = id;
 8001142:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	7013      	strb	r3, [r2, #0]
	  rs485_TxData[1] = 0x06;  // Function code
 8001148:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 800114a:	2206      	movs	r2, #6
 800114c:	705a      	strb	r2, [r3, #1]
	  //address 2032 -> Operating Mode
	  rs485_TxData[2] = 0x20;  // High 8 bit register address
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001150:	2220      	movs	r2, #32
 8001152:	709a      	strb	r2, [r3, #2]
	  rs485_TxData[3] = 0x32;  // Low  8 bit register address
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001156:	2232      	movs	r2, #50	@ 0x32
 8001158:	70da      	strb	r2, [r3, #3]
	  //data 0x03 -> Set Velocity Mode
	  rs485_TxData[4] = 0x00;  // High 8 bit register data
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 800115c:	2200      	movs	r2, #0
 800115e:	711a      	strb	r2, [r3, #4]
	  rs485_TxData[5] = 0x03;  // Low  8 bit register data
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001162:	2203      	movs	r2, #3
 8001164:	715a      	strb	r2, [r3, #5]
	  uint16_t crc = crc16(rs485_TxData, 6);
 8001166:	2106      	movs	r1, #6
 8001168:	481d      	ldr	r0, [pc, #116]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 800116a:	f000 feef 	bl	8001f4c <crc16>
 800116e:	4603      	mov	r3, r0
 8001170:	81fb      	strh	r3, [r7, #14]
	  rs485_TxData[6] = crc&0xFF;
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001178:	719a      	strb	r2, [r3, #6]
	  rs485_TxData[7] = (crc>>8)&0xFF;
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001184:	71da      	strb	r2, [r3, #7]
	  rs485_send_data(rs485_TxData);
 8001186:	4816      	ldr	r0, [pc, #88]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001188:	f7ff ff80 	bl	800108c <rs485_send_data>


	  rs485_TxData[0] = id;
 800118c:	4a14      	ldr	r2, [pc, #80]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	7013      	strb	r3, [r2, #0]
	  rs485_TxData[1] = 0x06;  // Function code
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 8001194:	2206      	movs	r2, #6
 8001196:	705a      	strb	r2, [r3, #1]
	  //address 2031 -> Control Word
	  rs485_TxData[2] = 0x20;  // High 8 bit register address
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 800119a:	2220      	movs	r2, #32
 800119c:	709a      	strb	r2, [r3, #2]
	  rs485_TxData[3] = 0x31;  // Low  8 bit register address
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 80011a0:	2231      	movs	r2, #49	@ 0x31
 80011a2:	70da      	strb	r2, [r3, #3]
	  //data 0x08 -> Enable Motor
	  rs485_TxData[4] = 0x00;  // High 8 bit register data
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	711a      	strb	r2, [r3, #4]
	  rs485_TxData[5] = 0x08;  // Low  8 bit register data
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 80011ac:	2208      	movs	r2, #8
 80011ae:	715a      	strb	r2, [r3, #5]
	  crc = crc16(rs485_TxData, 6);
 80011b0:	2106      	movs	r1, #6
 80011b2:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 80011b4:	f000 feca 	bl	8001f4c <crc16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	81fb      	strh	r3, [r7, #14]
	  rs485_TxData[6] = crc&0xFF;
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 80011c2:	719a      	strb	r2, [r3, #6]
	  rs485_TxData[7] = (crc>>8)&0xFF;
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 80011ce:	71da      	strb	r2, [r3, #7]
	  rs485_send_data(rs485_TxData);
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <motor_enable_velocity_mode+0xa8>)
 80011d2:	f7ff ff5b 	bl	800108c <rs485_send_data>

}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	240003c8 	.word	0x240003c8

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b096      	sub	sp, #88	@ 0x58
 80011e8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f001 fae7 	bl	80027bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f963 	bl	80014b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011f2:	f000 f9d3 	bl	800159c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 fd4b 	bl	8001c90 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fa:	f000 fd21 	bl	8001c40 <MX_DMA_Init>
  MX_ADC1_Init();
 80011fe:	f000 fa01 	bl	8001604 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001202:	f000 fb11 	bl	8001828 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001206:	f000 fccf 	bl	8001ba8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800120a:	f000 fc69 	bl	8001ae0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800120e:	f000 fc11 	bl	8001a34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_UARTEx_ReceiveToIdle_IT(&huart1, rs485_RxData, 16);
 8001212:	2210      	movs	r2, #16
 8001214:	4984      	ldr	r1, [pc, #528]	@ (8001428 <main+0x244>)
 8001216:	4885      	ldr	r0, [pc, #532]	@ (800142c <main+0x248>)
 8001218:	f00e fae9 	bl	800f7ee <HAL_UARTEx_ReceiveToIdle_IT>



  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800121c:	2100      	movs	r1, #0
 800121e:	4884      	ldr	r0, [pc, #528]	@ (8001430 <main+0x24c>)
 8001220:	f00a ffd6 	bl	800c1d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001224:	2104      	movs	r1, #4
 8001226:	4882      	ldr	r0, [pc, #520]	@ (8001430 <main+0x24c>)
 8001228:	f00a ffd2 	bl	800c1d0 <HAL_TIM_PWM_Start>
//						 &line_sensor_back_on_line_total_number,
//						  line_sensor_back_trigger_threshhold,
//						  line_sensor_back_total_channel,
//						 &line_sensor_back_read_line_value);

  if((line_sensor_back_on_line_total_number >= 9) &&(line_sensor_front_on_line_total_number >= 1)){
 800122c:	4b81      	ldr	r3, [pc, #516]	@ (8001434 <main+0x250>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b08      	cmp	r3, #8
 8001234:	d908      	bls.n	8001248 <main+0x64>
 8001236:	4b80      	ldr	r3, [pc, #512]	@ (8001438 <main+0x254>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <main+0x64>
	  agv_orientation = 0xF00F;
 8001240:	4b7e      	ldr	r3, [pc, #504]	@ (800143c <main+0x258>)
 8001242:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001246:	801a      	strh	r2, [r3, #0]
  }
  if((line_sensor_front_on_line_total_number >= 9) && (line_sensor_back_on_line_total_number >= 1)){
 8001248:	4b7b      	ldr	r3, [pc, #492]	@ (8001438 <main+0x254>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b08      	cmp	r3, #8
 8001250:	d908      	bls.n	8001264 <main+0x80>
 8001252:	4b78      	ldr	r3, [pc, #480]	@ (8001434 <main+0x250>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <main+0x80>
	  agv_orientation = 0xF11F;
 800125c:	4b77      	ldr	r3, [pc, #476]	@ (800143c <main+0x258>)
 800125e:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001262:	801a      	strh	r2, [r3, #0]
  }

  myLoRa = newLoRa();
 8001264:	4c76      	ldr	r4, [pc, #472]	@ (8001440 <main+0x25c>)
 8001266:	463b      	mov	r3, r7
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f9c7 	bl	80005fc <newLoRa>
 800126e:	4625      	mov	r5, r4
 8001270:	463c      	mov	r4, r7
 8001272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800127e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001282:	4b6f      	ldr	r3, [pc, #444]	@ (8001440 <main+0x25c>)
 8001284:	4a6f      	ldr	r2, [pc, #444]	@ (8001444 <main+0x260>)
 8001286:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8001288:	4b6d      	ldr	r3, [pc, #436]	@ (8001440 <main+0x25c>)
 800128a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800128e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001290:	4b6b      	ldr	r3, [pc, #428]	@ (8001440 <main+0x25c>)
 8001292:	4a6c      	ldr	r2, [pc, #432]	@ (8001444 <main+0x260>)
 8001294:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8001296:	4b6a      	ldr	r3, [pc, #424]	@ (8001440 <main+0x25c>)
 8001298:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800129c:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 800129e:	4b68      	ldr	r3, [pc, #416]	@ (8001440 <main+0x25c>)
 80012a0:	4a68      	ldr	r2, [pc, #416]	@ (8001444 <main+0x260>)
 80012a2:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 80012a4:	4b66      	ldr	r3, [pc, #408]	@ (8001440 <main+0x25c>)
 80012a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012aa:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 80012ac:	4b64      	ldr	r3, [pc, #400]	@ (8001440 <main+0x25c>)
 80012ae:	4a66      	ldr	r2, [pc, #408]	@ (8001448 <main+0x264>)
 80012b0:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 80012b2:	4b63      	ldr	r3, [pc, #396]	@ (8001440 <main+0x25c>)
 80012b4:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80012b8:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 80012ba:	4b61      	ldr	r3, [pc, #388]	@ (8001440 <main+0x25c>)
 80012bc:	2207      	movs	r2, #7
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 80012c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001440 <main+0x25c>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 80012ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001440 <main+0x25c>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 80012d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <main+0x25c>)
 80012d4:	22ff      	movs	r2, #255	@ 0xff
 80012d6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 80012da:	4b59      	ldr	r3, [pc, #356]	@ (8001440 <main+0x25c>)
 80012dc:	2264      	movs	r2, #100	@ 0x64
 80012de:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 80012e2:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <main+0x25c>)
 80012e4:	2208      	movs	r2, #8
 80012e6:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 80012e8:	4855      	ldr	r0, [pc, #340]	@ (8001440 <main+0x25c>)
 80012ea:	f7ff fc64 	bl	8000bb6 <LoRa_init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80012f2:	d102      	bne.n	80012fa <main+0x116>
	  LoRa_stat = 1;
 80012f4:	4b55      	ldr	r3, [pc, #340]	@ (800144c <main+0x268>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 80012fa:	4851      	ldr	r0, [pc, #324]	@ (8001440 <main+0x25c>)
 80012fc:	f7ff fbef 	bl	8000ade <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8001300:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <main+0x26c>)
 8001302:	22aa      	movs	r2, #170	@ 0xaa
 8001304:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8001306:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <main+0x26c>)
 8001308:	22bb      	movs	r2, #187	@ 0xbb
 800130a:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 800130c:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <main+0x26c>)
 800130e:	22cc      	movs	r2, #204	@ 0xcc
 8001310:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 8001312:	230a      	movs	r3, #10
 8001314:	461a      	mov	r2, r3
 8001316:	494f      	ldr	r1, [pc, #316]	@ (8001454 <main+0x270>)
 8001318:	484f      	ldr	r0, [pc, #316]	@ (8001458 <main+0x274>)
 800131a:	f002 f80f 	bl	800333c <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 800131e:	4b4f      	ldr	r3, [pc, #316]	@ (800145c <main+0x278>)
 8001320:	9307      	str	r3, [sp, #28]
 8001322:	4b4f      	ldr	r3, [pc, #316]	@ (8001460 <main+0x27c>)
 8001324:	9306      	str	r3, [sp, #24]
 8001326:	4b4f      	ldr	r3, [pc, #316]	@ (8001464 <main+0x280>)
 8001328:	9305      	str	r3, [sp, #20]
 800132a:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <main+0x284>)
 800132c:	9304      	str	r3, [sp, #16]
 800132e:	4b42      	ldr	r3, [pc, #264]	@ (8001438 <main+0x254>)
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	4b4e      	ldr	r3, [pc, #312]	@ (800146c <main+0x288>)
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	4b4e      	ldr	r3, [pc, #312]	@ (8001470 <main+0x28c>)
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	4b4e      	ldr	r3, [pc, #312]	@ (8001474 <main+0x290>)
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4b4e      	ldr	r3, [pc, #312]	@ (8001478 <main+0x294>)
 8001340:	4a4e      	ldr	r2, [pc, #312]	@ (800147c <main+0x298>)
 8001342:	494f      	ldr	r1, [pc, #316]	@ (8001480 <main+0x29c>)
 8001344:	4843      	ldr	r0, [pc, #268]	@ (8001454 <main+0x270>)
 8001346:	f7ff fcdd 	bl	8000d04 <ir_array_init>
                &line_sensor_front_on_line_total_number,
                &line_sensor_front_on_line_middle_number,
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);
  Line_Sensor_Calculation(&front_array);
 800134a:	4842      	ldr	r0, [pc, #264]	@ (8001454 <main+0x270>)
 800134c:	f7ff fd3f 	bl	8000dce <Line_Sensor_Calculation>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 8001350:	230a      	movs	r3, #10
 8001352:	461a      	mov	r2, r3
 8001354:	494b      	ldr	r1, [pc, #300]	@ (8001484 <main+0x2a0>)
 8001356:	484c      	ldr	r0, [pc, #304]	@ (8001488 <main+0x2a4>)
 8001358:	f001 fff0 	bl	800333c <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 800135c:	4b4b      	ldr	r3, [pc, #300]	@ (800148c <main+0x2a8>)
 800135e:	9307      	str	r3, [sp, #28]
 8001360:	4b4b      	ldr	r3, [pc, #300]	@ (8001490 <main+0x2ac>)
 8001362:	9306      	str	r3, [sp, #24]
 8001364:	4b4b      	ldr	r3, [pc, #300]	@ (8001494 <main+0x2b0>)
 8001366:	9305      	str	r3, [sp, #20]
 8001368:	4b4b      	ldr	r3, [pc, #300]	@ (8001498 <main+0x2b4>)
 800136a:	9304      	str	r3, [sp, #16]
 800136c:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <main+0x250>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b4a      	ldr	r3, [pc, #296]	@ (800149c <main+0x2b8>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b4a      	ldr	r3, [pc, #296]	@ (80014a0 <main+0x2bc>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b4a      	ldr	r3, [pc, #296]	@ (80014a4 <main+0x2c0>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b4a      	ldr	r3, [pc, #296]	@ (80014a8 <main+0x2c4>)
 800137e:	4a4b      	ldr	r2, [pc, #300]	@ (80014ac <main+0x2c8>)
 8001380:	494b      	ldr	r1, [pc, #300]	@ (80014b0 <main+0x2cc>)
 8001382:	4840      	ldr	r0, [pc, #256]	@ (8001484 <main+0x2a0>)
 8001384:	f7ff fcbe 	bl	8000d04 <ir_array_init>
                &line_sensor_back_on_line_total_number,
                &line_sensor_back_on_line_middle_number,
                &line_sensor_back_on_line_left_number,
                &line_sensor_back_on_line_right_number,
                &line_sensor_back_threshold);
  Line_Sensor_Calculation(&back_array);
 8001388:	483e      	ldr	r0, [pc, #248]	@ (8001484 <main+0x2a0>)
 800138a:	f7ff fd20 	bl	8000dce <Line_Sensor_Calculation>

//
	  //PID_Forward_Rotation(10, 50, &agv_orientation);
	  //agv_orientation = 0xF11F;

	  rs485_TxData[0] = 0x1;  // slave address
 800138e:	4b49      	ldr	r3, [pc, #292]	@ (80014b4 <main+0x2d0>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
	  rs485_TxData[1] = 0x03;  // Function code for Read Holding Registers
 8001394:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <main+0x2d0>)
 8001396:	2203      	movs	r2, #3
 8001398:	705a      	strb	r2, [r3, #1]

	  rs485_TxData[2] = 0x20;
 800139a:	4b46      	ldr	r3, [pc, #280]	@ (80014b4 <main+0x2d0>)
 800139c:	2220      	movs	r2, #32
 800139e:	709a      	strb	r2, [r3, #2]
	  rs485_TxData[3] = 0x24;
 80013a0:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <main+0x2d0>)
 80013a2:	2224      	movs	r2, #36	@ 0x24
 80013a4:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  rs485_TxData[4] = 0x00;
 80013a6:	4b43      	ldr	r3, [pc, #268]	@ (80014b4 <main+0x2d0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	711a      	strb	r2, [r3, #4]
	  rs485_TxData[5] = 0x01;
 80013ac:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <main+0x2d0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  uint16_t crc = crc16(rs485_TxData, 6);
 80013b2:	2106      	movs	r1, #6
 80013b4:	483f      	ldr	r0, [pc, #252]	@ (80014b4 <main+0x2d0>)
 80013b6:	f000 fdc9 	bl	8001f4c <crc16>
 80013ba:	4603      	mov	r3, r0
 80013bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
	  rs485_TxData[6] = crc&0xFF;
 80013be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <main+0x2d0>)
 80013c4:	719a      	strb	r2, [r3, #6]
	  rs485_TxData[7] = (crc>>8)&0xFF;
 80013c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <main+0x2d0>)
 80013d0:	71da      	strb	r2, [r3, #7]

	  rs485_send_data(rs485_TxData);
 80013d2:	4838      	ldr	r0, [pc, #224]	@ (80014b4 <main+0x2d0>)
 80013d4:	f7ff fe5a 	bl	800108c <rs485_send_data>
	  //HAL_Delay(10);
	  rs485_TxData[0] = 0x1;  // slave address
 80013d8:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <main+0x2d0>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
	  rs485_TxData[1] = 0x03;  // Function code for Read Holding Registers
 80013de:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <main+0x2d0>)
 80013e0:	2203      	movs	r2, #3
 80013e2:	705a      	strb	r2, [r3, #1]

	  rs485_TxData[2] = 0x20;
 80013e4:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <main+0x2d0>)
 80013e6:	2220      	movs	r2, #32
 80013e8:	709a      	strb	r2, [r3, #2]
	  rs485_TxData[3] = 0x2C;
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <main+0x2d0>)
 80013ec:	222c      	movs	r2, #44	@ 0x2c
 80013ee:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  rs485_TxData[4] = 0x00;
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <main+0x2d0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	711a      	strb	r2, [r3, #4]
	  rs485_TxData[5] = 0x01;
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <main+0x2d0>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  crc = crc16(rs485_TxData, 6);
 80013fc:	2106      	movs	r1, #6
 80013fe:	482d      	ldr	r0, [pc, #180]	@ (80014b4 <main+0x2d0>)
 8001400:	f000 fda4 	bl	8001f4c <crc16>
 8001404:	4603      	mov	r3, r0
 8001406:	86fb      	strh	r3, [r7, #54]	@ 0x36
	  rs485_TxData[6] = crc&0xFF;
 8001408:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <main+0x2d0>)
 800140e:	719a      	strb	r2, [r3, #6]
	  rs485_TxData[7] = (crc>>8)&0xFF;
 8001410:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <main+0x2d0>)
 800141a:	71da      	strb	r2, [r3, #7]

	  rs485_send_data(rs485_TxData);
 800141c:	4825      	ldr	r0, [pc, #148]	@ (80014b4 <main+0x2d0>)
 800141e:	f7ff fe35 	bl	800108c <rs485_send_data>
  {
 8001422:	bf00      	nop
 8001424:	e7b3      	b.n	800138e <main+0x1aa>
 8001426:	bf00      	nop
 8001428:	240003b8 	.word	0x240003b8
 800142c:	24000324 	.word	0x24000324
 8001430:	240002d8 	.word	0x240002d8
 8001434:	24000413 	.word	0x24000413
 8001438:	2400040f 	.word	0x2400040f
 800143c:	24000050 	.word	0x24000050
 8001440:	240004dc 	.word	0x240004dc
 8001444:	58021800 	.word	0x58021800
 8001448:	24000250 	.word	0x24000250
 800144c:	24000508 	.word	0x24000508
 8001450:	2400050c 	.word	0x2400050c
 8001454:	24000418 	.word	0x24000418
 8001458:	24000080 	.word	0x24000080
 800145c:	0800fa0a 	.word	0x0800fa0a
 8001460:	2400040e 	.word	0x2400040e
 8001464:	2400040c 	.word	0x2400040c
 8001468:	2400040d 	.word	0x2400040d
 800146c:	240003dc 	.word	0x240003dc
 8001470:	24000414 	.word	0x24000414
 8001474:	0800fa08 	.word	0x0800fa08
 8001478:	24000014 	.word	0x24000014
 800147c:	24000000 	.word	0x24000000
 8001480:	240003e4 	.word	0x240003e4
 8001484:	24000478 	.word	0x24000478
 8001488:	240000f0 	.word	0x240000f0
 800148c:	0800fa0c 	.word	0x0800fa0c
 8001490:	24000412 	.word	0x24000412
 8001494:	24000410 	.word	0x24000410
 8001498:	24000411 	.word	0x24000411
 800149c:	240003e0 	.word	0x240003e0
 80014a0:	24000416 	.word	0x24000416
 80014a4:	0800fa09 	.word	0x0800fa09
 80014a8:	2400003c 	.word	0x2400003c
 80014ac:	24000028 	.word	0x24000028
 80014b0:	240003f8 	.word	0x240003f8
 80014b4:	240003c8 	.word	0x240003c8

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b09c      	sub	sp, #112	@ 0x70
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c2:	224c      	movs	r2, #76	@ 0x4c
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00e fa30 	bl	800f92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2220      	movs	r2, #32
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00e fa2a 	bl	800f92c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014d8:	2002      	movs	r0, #2
 80014da:	f006 fc21 	bl	8007d20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <SystemClock_Config+0xe0>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001598 <SystemClock_Config+0xe0>)
 80014e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <SystemClock_Config+0xe0>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014fa:	bf00      	nop
 80014fc:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <SystemClock_Config+0xe0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001508:	d1f8      	bne.n	80014fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800150a:	2303      	movs	r3, #3
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001514:	2301      	movs	r3, #1
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001518:	2340      	movs	r3, #64	@ 0x40
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001520:	2302      	movs	r3, #2
 8001522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001524:	2302      	movs	r3, #2
 8001526:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001528:	232c      	movs	r3, #44	@ 0x2c
 800152a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001530:	2303      	movs	r3, #3
 8001532:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001534:	2302      	movs	r3, #2
 8001536:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001538:	230c      	movs	r3, #12
 800153a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800153c:	2300      	movs	r3, #0
 800153e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fc23 	bl	8007d94 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001554:	f000 fcf4 	bl	8001f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	233f      	movs	r3, #63	@ 0x3f
 800155a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2303      	movs	r3, #3
 800155e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001564:	2308      	movs	r3, #8
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001568:	2340      	movs	r3, #64	@ 0x40
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800156c:	2340      	movs	r3, #64	@ 0x40
 800156e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001576:	2340      	movs	r3, #64	@ 0x40
 8001578:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2103      	movs	r1, #3
 800157e:	4618      	mov	r0, r3
 8001580:	f006 ffe2 	bl	8008548 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800158a:	f000 fcd9 	bl	8001f40 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3770      	adds	r7, #112	@ 0x70
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	58024800 	.word	0x58024800

0800159c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0ae      	sub	sp, #184	@ 0xb8
 80015a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	22b8      	movs	r2, #184	@ 0xb8
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00e f9bf 	bl	800f92c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 80015ae:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <PeriphCommonClock_Config+0x64>)
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 80015bc:	230f      	movs	r3, #15
 80015be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015cc:	23c0      	movs	r3, #192	@ 0xc0
 80015ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80015d4:	f640 3386 	movw	r3, #2950	@ 0xb86
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80015da:	2300      	movs	r3, #0
 80015dc:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4618      	mov	r0, r3
 80015e8:	f007 fb3a 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80015f2:	f000 fca5 	bl	8001f40 <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	37b8      	adds	r7, #184	@ 0xb8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	80080000 	.word	0x80080000

08001604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	@ 0x30
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2224      	movs	r2, #36	@ 0x24
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00e f985 	bl	800f92c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001622:	4b75      	ldr	r3, [pc, #468]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001624:	4a75      	ldr	r2, [pc, #468]	@ (80017fc <MX_ADC1_Init+0x1f8>)
 8001626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001628:	4b73      	ldr	r3, [pc, #460]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800162e:	4b72      	ldr	r3, [pc, #456]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001630:	2208      	movs	r2, #8
 8001632:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001634:	4b70      	ldr	r3, [pc, #448]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001636:	2201      	movs	r2, #1
 8001638:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163a:	4b6f      	ldr	r3, [pc, #444]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800163c:	2204      	movs	r2, #4
 800163e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001640:	4b6d      	ldr	r3, [pc, #436]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001642:	2200      	movs	r2, #0
 8001644:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001646:	4b6c      	ldr	r3, [pc, #432]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001648:	2201      	movs	r2, #1
 800164a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 800164c:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800164e:	220a      	movs	r2, #10
 8001650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001652:	4b69      	ldr	r3, [pc, #420]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165a:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800165c:	2200      	movs	r2, #0
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001660:	4b65      	ldr	r3, [pc, #404]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001666:	4b64      	ldr	r3, [pc, #400]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001668:	2203      	movs	r2, #3
 800166a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800166c:	4b62      	ldr	r3, [pc, #392]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800166e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001674:	4b60      	ldr	r3, [pc, #384]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001676:	2200      	movs	r2, #0
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800167a:	4b5f      	ldr	r3, [pc, #380]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001682:	4b5d      	ldr	r3, [pc, #372]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001684:	2201      	movs	r2, #1
 8001686:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001688:	485b      	ldr	r0, [pc, #364]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800168a:	f001 fc4f 	bl	8002f2c <HAL_ADC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001694:	f000 fc54 	bl	8001f40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800169c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	4855      	ldr	r0, [pc, #340]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 80016a4:	f003 f91c 	bl	80048e0 <HAL_ADCEx_MultiModeConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80016ae:	f000 fc47 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016b2:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <MX_ADC1_Init+0x1fc>)
 80016b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016b6:	2306      	movs	r3, #6
 80016b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80016ba:	2305      	movs	r3, #5
 80016bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016be:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016c4:	2304      	movs	r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d2:	463b      	mov	r3, r7
 80016d4:	4619      	mov	r1, r3
 80016d6:	4848      	ldr	r0, [pc, #288]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 80016d8:	f002 f96e 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80016e2:	f000 fc2d 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <MX_ADC1_Init+0x200>)
 80016e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016ea:	230c      	movs	r3, #12
 80016ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	4841      	ldr	r0, [pc, #260]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 80016f4:	f002 f960 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80016fe:	f000 fc1f 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001702:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <MX_ADC1_Init+0x204>)
 8001704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001706:	2312      	movs	r3, #18
 8001708:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	4619      	mov	r1, r3
 800170e:	483a      	ldr	r0, [pc, #232]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001710:	f002 f952 	bl	80039b8 <HAL_ADC_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800171a:	f000 fc11 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800171e:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <MX_ADC1_Init+0x208>)
 8001720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001722:	2318      	movs	r3, #24
 8001724:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	4833      	ldr	r0, [pc, #204]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800172c:	f002 f944 	bl	80039b8 <HAL_ADC_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001736:	f000 fc03 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800173a:	4b35      	ldr	r3, [pc, #212]	@ (8001810 <MX_ADC1_Init+0x20c>)
 800173c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800173e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	482b      	ldr	r0, [pc, #172]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 800174a:	f002 f935 	bl	80039b8 <HAL_ADC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001754:	f000 fbf4 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001758:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <MX_ADC1_Init+0x210>)
 800175a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800175c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001760:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4824      	ldr	r0, [pc, #144]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001768:	f002 f926 	bl	80039b8 <HAL_ADC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8001772:	f000 fbe5 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <MX_ADC1_Init+0x214>)
 8001778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800177a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800177e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	481c      	ldr	r0, [pc, #112]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 8001786:	f002 f917 	bl	80039b8 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8001790:	f000 fbd6 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001794:	4b21      	ldr	r3, [pc, #132]	@ (800181c <MX_ADC1_Init+0x218>)
 8001796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001798:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800179c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	4619      	mov	r1, r3
 80017a2:	4815      	ldr	r0, [pc, #84]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 80017a4:	f002 f908 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 80017ae:	f000 fbc7 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MX_ADC1_Init+0x21c>)
 80017b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80017b6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 80017c2:	f002 f8f9 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 80017cc:	f000 fbb8 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_ADC1_Init+0x220>)
 80017d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80017d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <MX_ADC1_Init+0x1f4>)
 80017e0:	f002 f8ea 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 80017ea:	f000 fba9 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	@ 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24000080 	.word	0x24000080
 80017fc:	40022000 	.word	0x40022000
 8001800:	08600004 	.word	0x08600004
 8001804:	0c900008 	.word	0x0c900008
 8001808:	10c00010 	.word	0x10c00010
 800180c:	14f00020 	.word	0x14f00020
 8001810:	19200040 	.word	0x19200040
 8001814:	1d500080 	.word	0x1d500080
 8001818:	21800100 	.word	0x21800100
 800181c:	25b00200 	.word	0x25b00200
 8001820:	2a000400 	.word	0x2a000400
 8001824:	2e300800 	.word	0x2e300800

08001828 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2224      	movs	r2, #36	@ 0x24
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f00e f879 	bl	800f92c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800183a:	4b73      	ldr	r3, [pc, #460]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800183c:	4a73      	ldr	r2, [pc, #460]	@ (8001a0c <MX_ADC3_Init+0x1e4>)
 800183e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001840:	4b71      	ldr	r3, [pc, #452]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001846:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001848:	2208      	movs	r2, #8
 800184a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800184c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001852:	4b6d      	ldr	r3, [pc, #436]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001854:	2201      	movs	r2, #1
 8001856:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001858:	4b6b      	ldr	r3, [pc, #428]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800185a:	2204      	movs	r2, #4
 800185c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800185e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001860:	2200      	movs	r2, #0
 8001862:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001864:	4b68      	ldr	r3, [pc, #416]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001866:	2201      	movs	r2, #1
 8001868:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 800186a:	4b67      	ldr	r3, [pc, #412]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800186c:	220a      	movs	r2, #10
 800186e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001870:	4b65      	ldr	r3, [pc, #404]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001878:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800187e:	4b62      	ldr	r3, [pc, #392]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001880:	2200      	movs	r2, #0
 8001882:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001884:	4b60      	ldr	r3, [pc, #384]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800188c:	4b5e      	ldr	r3, [pc, #376]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001892:	4b5d      	ldr	r3, [pc, #372]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001894:	2203      	movs	r2, #3
 8001896:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001898:	4b5b      	ldr	r3, [pc, #364]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800189a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018a0:	4b59      	ldr	r3, [pc, #356]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80018a6:	4b58      	ldr	r3, [pc, #352]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80018ae:	4b56      	ldr	r3, [pc, #344]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018b4:	4854      	ldr	r0, [pc, #336]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80018b6:	f001 fb39 	bl	8002f2c <HAL_ADC_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 80018c0:	f000 fb3e 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018c4:	2301      	movs	r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c8:	2306      	movs	r3, #6
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 80018cc:	2305      	movs	r3, #5
 80018ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80018d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018d6:	2304      	movs	r3, #4
 80018d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4848      	ldr	r0, [pc, #288]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80018e8:	f002 f866 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80018f2:	f000 fb25 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <MX_ADC3_Init+0x1e8>)
 80018f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018fa:	230c      	movs	r3, #12
 80018fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4841      	ldr	r0, [pc, #260]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001904:	f002 f858 	bl	80039b8 <HAL_ADC_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800190e:	f000 fb17 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001912:	4b40      	ldr	r3, [pc, #256]	@ (8001a14 <MX_ADC3_Init+0x1ec>)
 8001914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001916:	2312      	movs	r3, #18
 8001918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	483a      	ldr	r0, [pc, #232]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001920:	f002 f84a 	bl	80039b8 <HAL_ADC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800192a:	f000 fb09 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800192e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a18 <MX_ADC3_Init+0x1f0>)
 8001930:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001932:	2318      	movs	r3, #24
 8001934:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4833      	ldr	r0, [pc, #204]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800193c:	f002 f83c 	bl	80039b8 <HAL_ADC_ConfigChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8001946:	f000 fafb 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800194a:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <MX_ADC3_Init+0x1f4>)
 800194c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800194e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001952:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	4619      	mov	r1, r3
 8001958:	482b      	ldr	r0, [pc, #172]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 800195a:	f002 f82d 	bl	80039b8 <HAL_ADC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 8001964:	f000 faec 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001968:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <MX_ADC3_Init+0x1f8>)
 800196a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800196c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001970:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4824      	ldr	r0, [pc, #144]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001978:	f002 f81e 	bl	80039b8 <HAL_ADC_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 8001982:	f000 fadd 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <MX_ADC3_Init+0x1fc>)
 8001988:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800198a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800198e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 8001996:	f002 f80f 	bl	80039b8 <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 80019a0:	f000 face 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019a4:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <MX_ADC3_Init+0x200>)
 80019a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80019a8:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80019ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4815      	ldr	r0, [pc, #84]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80019b4:	f002 f800 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 80019be:	f000 fabf 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <MX_ADC3_Init+0x204>)
 80019c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80019c6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80019ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	480d      	ldr	r0, [pc, #52]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80019d2:	f001 fff1 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 80019dc:	f000 fab0 	bl	8001f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <MX_ADC3_Init+0x208>)
 80019e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80019e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <MX_ADC3_Init+0x1e0>)
 80019f0:	f001 ffe2 	bl	80039b8 <HAL_ADC_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 80019fa:	f000 faa1 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	240000f0 	.word	0x240000f0
 8001a0c:	58026000 	.word	0x58026000
 8001a10:	04300002 	.word	0x04300002
 8001a14:	08600004 	.word	0x08600004
 8001a18:	0c900008 	.word	0x0c900008
 8001a1c:	10c00010 	.word	0x10c00010
 8001a20:	14f00020 	.word	0x14f00020
 8001a24:	19200040 	.word	0x19200040
 8001a28:	1d500080 	.word	0x1d500080
 8001a2c:	21800100 	.word	0x21800100
 8001a30:	25b00200 	.word	0x25b00200

08001a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a3a:	4a28      	ldr	r2, [pc, #160]	@ (8001adc <MX_SPI1_Init+0xa8>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a4e:	2207      	movs	r2, #7
 8001a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a60:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a68:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001a6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a74:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a80:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <MX_SPI1_Init+0xa4>)
 8001ac6:	f009 fcb1 	bl	800b42c <HAL_SPI_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001ad0:	f000 fa36 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	24000250 	.word	0x24000250
 8001adc:	40013000 	.word	0x40013000

08001ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b04:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001b0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b0e:	2240      	movs	r2, #64	@ 0x40
 8001b10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b26:	2280      	movs	r2, #128	@ 0x80
 8001b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b2a:	481e      	ldr	r0, [pc, #120]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b2c:	f00a faf9 	bl	800c122 <HAL_TIM_PWM_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b36:	f000 fa03 	bl	8001f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4816      	ldr	r0, [pc, #88]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b4a:	f00b f91f 	bl	800cd8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b54:	f000 f9f4 	bl	8001f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b58:	2360      	movs	r3, #96	@ 0x60
 8001b5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b64:	2304      	movs	r3, #4
 8001b66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480d      	ldr	r0, [pc, #52]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b70:	f00a fc4a 	bl	800c408 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b7a:	f000 f9e1 	bl	8001f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2204      	movs	r2, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4807      	ldr	r0, [pc, #28]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b86:	f00a fc3f 	bl	800c408 <HAL_TIM_PWM_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b90:	f000 f9d6 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b94:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <MX_TIM2_Init+0xc4>)
 8001b96:	f000 fc3f 	bl	8002418 <HAL_TIM_MspPostInit>

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	@ 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	240002d8 	.word	0x240002d8

08001ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bac:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bae:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf0:	4811      	ldr	r0, [pc, #68]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001bf2:	f00b f967 	bl	800cec4 <HAL_UART_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bfc:	f000 f9a0 	bl	8001f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c00:	2100      	movs	r1, #0
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001c04:	f00d fd77 	bl	800f6f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c0e:	f000 f997 	bl	8001f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c12:	2100      	movs	r1, #0
 8001c14:	4808      	ldr	r0, [pc, #32]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001c16:	f00d fdac 	bl	800f772 <HAL_UARTEx_SetRxFifoThreshold>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c20:	f000 f98e 	bl	8001f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_USART1_UART_Init+0x90>)
 8001c26:	f00d fd2d 	bl	800f684 <HAL_UARTEx_DisableFifoMode>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c30:	f000 f986 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24000324 	.word	0x24000324
 8001c3c:	40011000 	.word	0x40011000

08001c40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <MX_DMA_Init+0x4c>)
 8001c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <MX_DMA_Init+0x4c>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <MX_DMA_Init+0x4c>)
 8001c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	200b      	movs	r0, #11
 8001c6a:	f002 fff6 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c6e:	200b      	movs	r0, #11
 8001c70:	f003 f80d 	bl	8004c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	200c      	movs	r0, #12
 8001c7a:	f002 ffee 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c7e:	200c      	movs	r0, #12
 8001c80:	f003 f805 	bl	8004c8e <HAL_NVIC_EnableIRQ>

}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	58024400 	.word	0x58024400

08001c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	@ 0x38
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	4b9f      	ldr	r3, [pc, #636]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cac:	4a9d      	ldr	r2, [pc, #628]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001cae:	f043 0310 	orr.w	r3, r3, #16
 8001cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb6:	4b9b      	ldr	r3, [pc, #620]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc4:	4b97      	ldr	r3, [pc, #604]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cca:	4a96      	ldr	r2, [pc, #600]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd4:	4b93      	ldr	r3, [pc, #588]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce2:	4b90      	ldr	r3, [pc, #576]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001cea:	f043 0320 	orr.w	r3, r3, #32
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf2:	4b8c      	ldr	r3, [pc, #560]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d00:	4b88      	ldr	r3, [pc, #544]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d06:	4a87      	ldr	r2, [pc, #540]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d10:	4b84      	ldr	r3, [pc, #528]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b81      	ldr	r3, [pc, #516]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	4a7f      	ldr	r2, [pc, #508]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d2e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3c:	4b79      	ldr	r3, [pc, #484]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d42:	4a78      	ldr	r2, [pc, #480]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d4c:	4b75      	ldr	r3, [pc, #468]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5a:	4b72      	ldr	r3, [pc, #456]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d60:	4a70      	ldr	r2, [pc, #448]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d78:	4b6a      	ldr	r3, [pc, #424]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7e:	4a69      	ldr	r2, [pc, #420]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d88:	4b66      	ldr	r3, [pc, #408]	@ (8001f24 <MX_GPIO_Init+0x294>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d9c:	4862      	ldr	r0, [pc, #392]	@ (8001f28 <MX_GPIO_Init+0x298>)
 8001d9e:	f005 ff71 	bl	8007c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	213c      	movs	r1, #60	@ 0x3c
 8001da6:	4861      	ldr	r0, [pc, #388]	@ (8001f2c <MX_GPIO_Init+0x29c>)
 8001da8:	f005 ff6c 	bl	8007c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001db2:	485f      	ldr	r0, [pc, #380]	@ (8001f30 <MX_GPIO_Init+0x2a0>)
 8001db4:	f005 ff66 	bl	8007c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dbe:	485d      	ldr	r0, [pc, #372]	@ (8001f34 <MX_GPIO_Init+0x2a4>)
 8001dc0:	f005 ff60 	bl	8007c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001dca:	485b      	ldr	r0, [pc, #364]	@ (8001f38 <MX_GPIO_Init+0x2a8>)
 8001dcc:	f005 ff5a 	bl	8007c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2140      	movs	r1, #64	@ 0x40
 8001dd4:	4859      	ldr	r0, [pc, #356]	@ (8001f3c <MX_GPIO_Init+0x2ac>)
 8001dd6:	f005 ff55 	bl	8007c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001de0:	4855      	ldr	r0, [pc, #340]	@ (8001f38 <MX_GPIO_Init+0x2a8>)
 8001de2:	f005 ff4f 	bl	8007c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001de6:	231f      	movs	r3, #31
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	484d      	ldr	r0, [pc, #308]	@ (8001f30 <MX_GPIO_Init+0x2a0>)
 8001dfc:	f005 fd9a 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e16:	4619      	mov	r1, r3
 8001e18:	4843      	ldr	r0, [pc, #268]	@ (8001f28 <MX_GPIO_Init+0x298>)
 8001e1a:	f005 fd8b 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8001e1e:	233c      	movs	r3, #60	@ 0x3c
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	483d      	ldr	r0, [pc, #244]	@ (8001f2c <MX_GPIO_Init+0x29c>)
 8001e36:	f005 fd7d 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e44:	2302      	movs	r3, #2
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4837      	ldr	r0, [pc, #220]	@ (8001f30 <MX_GPIO_Init+0x2a0>)
 8001e54:	f005 fd6e 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8001e58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4830      	ldr	r0, [pc, #192]	@ (8001f34 <MX_GPIO_Init+0x2a4>)
 8001e72:	f005 fd5f 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8001e76:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	482a      	ldr	r0, [pc, #168]	@ (8001f38 <MX_GPIO_Init+0x2a8>)
 8001e90:	f005 fd50 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = LORA_RX_LED_Pin;
 8001e94:	2340      	movs	r3, #64	@ 0x40
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LORA_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4824      	ldr	r0, [pc, #144]	@ (8001f3c <MX_GPIO_Init+0x2ac>)
 8001eac:	f005 fd42 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	481c      	ldr	r0, [pc, #112]	@ (8001f38 <MX_GPIO_Init+0x2a8>)
 8001ec8:	f005 fd34 	bl	8007934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2006      	movs	r0, #6
 8001ed2:	f002 fec2 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ed6:	2006      	movs	r0, #6
 8001ed8:	f002 fed9 	bl	8004c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2007      	movs	r0, #7
 8001ee2:	f002 feba 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ee6:	2007      	movs	r0, #7
 8001ee8:	f002 fed1 	bl	8004c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2008      	movs	r0, #8
 8001ef2:	f002 feb2 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ef6:	2008      	movs	r0, #8
 8001ef8:	f002 fec9 	bl	8004c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2009      	movs	r0, #9
 8001f02:	f002 feaa 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f06:	2009      	movs	r0, #9
 8001f08:	f002 fec1 	bl	8004c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2028      	movs	r0, #40	@ 0x28
 8001f12:	f002 fea2 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f16:	2028      	movs	r0, #40	@ 0x28
 8001f18:	f002 feb9 	bl	8004c8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f1c:	bf00      	nop
 8001f1e:	3738      	adds	r7, #56	@ 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	58024400 	.word	0x58024400
 8001f28:	58020800 	.word	0x58020800
 8001f2c:	58020000 	.word	0x58020000
 8001f30:	58021000 	.word	0x58021000
 8001f34:	58020400 	.word	0x58020400
 8001f38:	58021800 	.word	0x58021800
 8001f3c:	58020c00 	.word	0x58020c00

08001f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <Error_Handler+0x8>

08001f4c <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001f58:	23ff      	movs	r3, #255	@ 0xff
 8001f5a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001f5c:	23ff      	movs	r3, #255	@ 0xff
 8001f5e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001f60:	e013      	b.n	8001f8a <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	7bbb      	ldrb	r3, [r7, #14]
 8001f6c:	4053      	eors	r3, r2
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001f72:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <crc16+0x64>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4413      	add	r3, r2
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	4053      	eors	r3, r2
 8001f7e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001f80:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <crc16+0x68>)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	807a      	strh	r2, [r7, #2]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e6      	bne.n	8001f62 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	7bbb      	ldrb	r3, [r7, #14]
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	b29b      	uxth	r3, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	0800fa10 	.word	0x0800fa10
 8001fb4:	0800fb10 	.word	0x0800fb10

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_MspInit+0x30>)
 8001fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fc4:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_MspInit+0x30>)
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_MspInit+0x30>)
 8001fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58024400 	.word	0x58024400

08001fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b090      	sub	sp, #64	@ 0x40
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4aa0      	ldr	r2, [pc, #640]	@ (800228c <HAL_ADC_MspInit+0x2a0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	f040 80b6 	bne.w	800217c <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002010:	4b9f      	ldr	r3, [pc, #636]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002016:	4a9e      	ldr	r2, [pc, #632]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002018:	f043 0320 	orr.w	r3, r3, #32
 800201c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002020:	4b9b      	ldr	r3, [pc, #620]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	4b98      	ldr	r3, [pc, #608]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002034:	4a96      	ldr	r2, [pc, #600]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800203e:	4b94      	ldr	r3, [pc, #592]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b90      	ldr	r3, [pc, #576]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002052:	4a8f      	ldr	r2, [pc, #572]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205c:	4b8c      	ldr	r3, [pc, #560]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b89      	ldr	r3, [pc, #548]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002070:	4a87      	ldr	r2, [pc, #540]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207a:	4b85      	ldr	r3, [pc, #532]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002088:	4b81      	ldr	r3, [pc, #516]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208e:	4a80      	ldr	r2, [pc, #512]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002090:	f043 0320 	orr.w	r3, r3, #32
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002098:	4b7d      	ldr	r3, [pc, #500]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80020a6:	2333      	movs	r3, #51	@ 0x33
 80020a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020aa:	2303      	movs	r3, #3
 80020ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b6:	4619      	mov	r1, r3
 80020b8:	4876      	ldr	r0, [pc, #472]	@ (8002294 <HAL_ADC_MspInit+0x2a8>)
 80020ba:	f005 fc3b 	bl	8007934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020be:	23c0      	movs	r3, #192	@ 0xc0
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c2:	2303      	movs	r3, #3
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ce:	4619      	mov	r1, r3
 80020d0:	4871      	ldr	r0, [pc, #452]	@ (8002298 <HAL_ADC_MspInit+0x2ac>)
 80020d2:	f005 fc2f 	bl	8007934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020da:	2303      	movs	r3, #3
 80020dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e6:	4619      	mov	r1, r3
 80020e8:	486c      	ldr	r0, [pc, #432]	@ (800229c <HAL_ADC_MspInit+0x2b0>)
 80020ea:	f005 fc23 	bl	8007934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f4:	2303      	movs	r3, #3
 80020f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002100:	4619      	mov	r1, r3
 8002102:	4867      	ldr	r0, [pc, #412]	@ (80022a0 <HAL_ADC_MspInit+0x2b4>)
 8002104:	f005 fc16 	bl	8007934 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002108:	4b66      	ldr	r3, [pc, #408]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 800210a:	4a67      	ldr	r2, [pc, #412]	@ (80022a8 <HAL_ADC_MspInit+0x2bc>)
 800210c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800210e:	4b65      	ldr	r3, [pc, #404]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002110:	2209      	movs	r2, #9
 8002112:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002114:	4b63      	ldr	r3, [pc, #396]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800211a:	4b62      	ldr	r3, [pc, #392]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002120:	4b60      	ldr	r3, [pc, #384]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002126:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002128:	4b5e      	ldr	r3, [pc, #376]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 800212a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800212e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002130:	4b5c      	ldr	r3, [pc, #368]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002132:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002136:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002138:	4b5a      	ldr	r3, [pc, #360]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 800213a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800213e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002140:	4b58      	ldr	r3, [pc, #352]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002142:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002146:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002148:	4b56      	ldr	r3, [pc, #344]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800214e:	4855      	ldr	r0, [pc, #340]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002150:	f002 fdb8 	bl	8004cc4 <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 800215a:	f7ff fef1 	bl	8001f40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a50      	ldr	r2, [pc, #320]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002162:	659a      	str	r2, [r3, #88]	@ 0x58
 8002164:	4a4f      	ldr	r2, [pc, #316]	@ (80022a4 <HAL_ADC_MspInit+0x2b8>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2012      	movs	r0, #18
 8002170:	f002 fd73 	bl	8004c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002174:	2012      	movs	r0, #18
 8002176:	f002 fd8a 	bl	8004c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800217a:	e083      	b.n	8002284 <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a4a      	ldr	r2, [pc, #296]	@ (80022ac <HAL_ADC_MspInit+0x2c0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d17e      	bne.n	8002284 <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002186:	4b42      	ldr	r3, [pc, #264]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218c:	4a40      	ldr	r2, [pc, #256]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002196:	4b3e      	ldr	r3, [pc, #248]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 80021a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021aa:	4a39      	ldr	r2, [pc, #228]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b4:	4b36      	ldr	r3, [pc, #216]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c8:	4a31      	ldr	r2, [pc, #196]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002290 <HAL_ADC_MspInit+0x2a4>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80021e0:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80021e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f2:	4619      	mov	r1, r3
 80021f4:	482a      	ldr	r0, [pc, #168]	@ (80022a0 <HAL_ADC_MspInit+0x2b4>)
 80021f6:	f005 fb9d 	bl	8007934 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80021fa:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80021fe:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002202:	f000 fb91 	bl	8002928 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002206:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800220a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800220e:	f000 fb8b 	bl	8002928 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002212:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 8002214:	4a27      	ldr	r2, [pc, #156]	@ (80022b4 <HAL_ADC_MspInit+0x2c8>)
 8002216:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 800221a:	2273      	movs	r2, #115	@ 0x73
 800221c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221e:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800222a:	4b21      	ldr	r3, [pc, #132]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 800222c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002230:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 8002234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002238:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 800223c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002240:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002242:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 8002244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002248:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 800224c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002250:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002252:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002258:	4815      	ldr	r0, [pc, #84]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 800225a:	f002 fd33 	bl	8004cc4 <HAL_DMA_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8002264:	f7ff fe6c 	bl	8001f40 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 800226c:	659a      	str	r2, [r3, #88]	@ 0x58
 800226e:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <HAL_ADC_MspInit+0x2c4>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	207f      	movs	r0, #127	@ 0x7f
 800227a:	f002 fcee 	bl	8004c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800227e:	207f      	movs	r0, #127	@ 0x7f
 8002280:	f002 fd05 	bl	8004c8e <HAL_NVIC_EnableIRQ>
}
 8002284:	bf00      	nop
 8002286:	3740      	adds	r7, #64	@ 0x40
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40022000 	.word	0x40022000
 8002290:	58024400 	.word	0x58024400
 8002294:	58020800 	.word	0x58020800
 8002298:	58020000 	.word	0x58020000
 800229c:	58020400 	.word	0x58020400
 80022a0:	58021400 	.word	0x58021400
 80022a4:	24000160 	.word	0x24000160
 80022a8:	40020010 	.word	0x40020010
 80022ac:	58026000 	.word	0x58026000
 80022b0:	240001d8 	.word	0x240001d8
 80022b4:	40020028 	.word	0x40020028

080022b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0ba      	sub	sp, #232	@ 0xe8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	22b8      	movs	r2, #184	@ 0xb8
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f00d fb27 	bl	800f92c <memset>
  if(hspi->Instance==SPI1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a39      	ldr	r2, [pc, #228]	@ (80023c8 <HAL_SPI_MspInit+0x110>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d16a      	bne.n	80023be <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80022f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022f8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 fcae 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800230a:	f7ff fe19 	bl	8001f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800230e:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 8002310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002314:	4a2d      	ldr	r2, [pc, #180]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 8002316:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800231a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800231e:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 8002320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 800232e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002332:	4a26      	ldr	r2, [pc, #152]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800233c:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002350:	4a1e      	ldr	r2, [pc, #120]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 8002352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <HAL_SPI_MspInit+0x114>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002380:	2305      	movs	r3, #5
 8002382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002386:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800238a:	4619      	mov	r1, r3
 800238c:	4810      	ldr	r0, [pc, #64]	@ (80023d0 <HAL_SPI_MspInit+0x118>)
 800238e:	f005 fad1 	bl	8007934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002392:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002396:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ac:	2305      	movs	r3, #5
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4806      	ldr	r0, [pc, #24]	@ (80023d4 <HAL_SPI_MspInit+0x11c>)
 80023ba:	f005 fabb 	bl	8007934 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023be:	bf00      	nop
 80023c0:	37e8      	adds	r7, #232	@ 0xe8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40013000 	.word	0x40013000
 80023cc:	58024400 	.word	0x58024400
 80023d0:	58020c00 	.word	0x58020c00
 80023d4:	58021800 	.word	0x58021800

080023d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f0:	4a08      	ldr	r2, [pc, #32]	@ (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	58024400 	.word	0x58024400

08002418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002438:	d11e      	bne.n	8002478 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <HAL_TIM_MspPostInit+0x68>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002440:	4a0f      	ldr	r2, [pc, #60]	@ (8002480 <HAL_TIM_MspPostInit+0x68>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_TIM_MspPostInit+0x68>)
 800244c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002458:	2303      	movs	r3, #3
 800245a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002468:	2301      	movs	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	4619      	mov	r1, r3
 8002472:	4804      	ldr	r0, [pc, #16]	@ (8002484 <HAL_TIM_MspPostInit+0x6c>)
 8002474:	f005 fa5e 	bl	8007934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	58024400 	.word	0x58024400
 8002484:	58020000 	.word	0x58020000

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0b8      	sub	sp, #224	@ 0xe0
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	22b8      	movs	r2, #184	@ 0xb8
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00d fa3f 	bl	800f92c <memset>
  if(huart->Instance==USART1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002560 <HAL_UART_MspInit+0xd8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d14e      	bne.n	8002556 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024b8:	f04f 0201 	mov.w	r2, #1
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 fbc6 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024da:	f7ff fd31 	bl	8001f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_UART_MspInit+0xdc>)
 80024e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <HAL_UART_MspInit+0xdc>)
 80024e6:	f043 0310 	orr.w	r3, r3, #16
 80024ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_UART_MspInit+0xdc>)
 80024f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_UART_MspInit+0xdc>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002502:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <HAL_UART_MspInit+0xdc>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800250c:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_UART_MspInit+0xdc>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800251a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800251e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002534:	2304      	movs	r3, #4
 8002536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800253e:	4619      	mov	r1, r3
 8002540:	4809      	ldr	r0, [pc, #36]	@ (8002568 <HAL_UART_MspInit+0xe0>)
 8002542:	f005 f9f7 	bl	8007934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2025      	movs	r0, #37	@ 0x25
 800254c:	f002 fb85 	bl	8004c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002550:	2025      	movs	r0, #37	@ 0x25
 8002552:	f002 fb9c 	bl	8004c8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002556:	bf00      	nop
 8002558:	37e0      	adds	r7, #224	@ 0xe0
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40011000 	.word	0x40011000
 8002564:	58024400 	.word	0x58024400
 8002568:	58020400 	.word	0x58020400

0800256c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <NMI_Handler+0x4>

08002574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <HardFault_Handler+0x4>

0800257c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <MemManage_Handler+0x4>

08002584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <BusFault_Handler+0x4>

0800258c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <UsageFault_Handler+0x4>

08002594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c2:	f000 f96d 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}

080025ca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f005 fb8b 	bl	8007cea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80025dc:	2002      	movs	r0, #2
 80025de:	f005 fb84 	bl	8007cea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80025ea:	2004      	movs	r0, #4
 80025ec:	f005 fb7d 	bl	8007cea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80025f8:	2008      	movs	r0, #8
 80025fa:	f005 fb76 	bl	8007cea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <DMA1_Stream0_IRQHandler+0x10>)
 800260a:	f003 fe81 	bl	8006310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	24000160 	.word	0x24000160

08002618 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <DMA1_Stream1_IRQHandler+0x10>)
 800261e:	f003 fe77 	bl	8006310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	240001d8 	.word	0x240001d8

0800262c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <ADC_IRQHandler+0x10>)
 8002632:	f000 ff5f 	bl	80034f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24000080 	.word	0x24000080

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f00a fd1b 	bl	800d080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24000324 	.word	0x24000324

08002654 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8002658:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800265c:	f005 fb45 	bl	8007cea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002668:	4802      	ldr	r0, [pc, #8]	@ (8002674 <ADC3_IRQHandler+0x10>)
 800266a:	f000 ff43 	bl	80034f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	240000f0 	.word	0x240000f0

08002678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800267c:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <SystemInit+0xd0>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002682:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <SystemInit+0xd0>)
 8002684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800268c:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <SystemInit+0xd4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	2b06      	cmp	r3, #6
 8002696:	d807      	bhi.n	80026a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002698:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <SystemInit+0xd4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 030f 	bic.w	r3, r3, #15
 80026a0:	4a2a      	ldr	r2, [pc, #168]	@ (800274c <SystemInit+0xd4>)
 80026a2:	f043 0307 	orr.w	r3, r3, #7
 80026a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026a8:	4b29      	ldr	r3, [pc, #164]	@ (8002750 <SystemInit+0xd8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a28      	ldr	r2, [pc, #160]	@ (8002750 <SystemInit+0xd8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026b4:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <SystemInit+0xd8>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026ba:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <SystemInit+0xd8>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4924      	ldr	r1, [pc, #144]	@ (8002750 <SystemInit+0xd8>)
 80026c0:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <SystemInit+0xdc>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026c6:	4b21      	ldr	r3, [pc, #132]	@ (800274c <SystemInit+0xd4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026d2:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <SystemInit+0xd4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 030f 	bic.w	r3, r3, #15
 80026da:	4a1c      	ldr	r2, [pc, #112]	@ (800274c <SystemInit+0xd4>)
 80026dc:	f043 0307 	orr.w	r3, r3, #7
 80026e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <SystemInit+0xd8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026e8:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <SystemInit+0xd8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026ee:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <SystemInit+0xd8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <SystemInit+0xd8>)
 80026f6:	4a18      	ldr	r2, [pc, #96]	@ (8002758 <SystemInit+0xe0>)
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <SystemInit+0xd8>)
 80026fc:	4a17      	ldr	r2, [pc, #92]	@ (800275c <SystemInit+0xe4>)
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <SystemInit+0xd8>)
 8002702:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <SystemInit+0xe8>)
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <SystemInit+0xd8>)
 8002708:	2200      	movs	r2, #0
 800270a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <SystemInit+0xd8>)
 800270e:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <SystemInit+0xe8>)
 8002710:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <SystemInit+0xd8>)
 8002714:	2200      	movs	r2, #0
 8002716:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002718:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <SystemInit+0xd8>)
 800271a:	4a11      	ldr	r2, [pc, #68]	@ (8002760 <SystemInit+0xe8>)
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <SystemInit+0xd8>)
 8002720:	2200      	movs	r2, #0
 8002722:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002724:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <SystemInit+0xd8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <SystemInit+0xd8>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800272e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002730:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <SystemInit+0xd8>)
 8002732:	2200      	movs	r2, #0
 8002734:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <SystemInit+0xec>)
 8002738:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800273c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	52002000 	.word	0x52002000
 8002750:	58024400 	.word	0x58024400
 8002754:	eaf6ed7f 	.word	0xeaf6ed7f
 8002758:	02020200 	.word	0x02020200
 800275c:	01ff0000 	.word	0x01ff0000
 8002760:	01010280 	.word	0x01010280
 8002764:	52004000 	.word	0x52004000

08002768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800276c:	f7ff ff84 	bl	8002678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002770:	480c      	ldr	r0, [pc, #48]	@ (80027a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002772:	490d      	ldr	r1, [pc, #52]	@ (80027a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002788:	4c0a      	ldr	r4, [pc, #40]	@ (80027b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002796:	f00d f8d1 	bl	800f93c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800279a:	f7fe fd23 	bl	80011e4 <main>
  bx  lr
 800279e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027a0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80027a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027a8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80027ac:	0800fc60 	.word	0x0800fc60
  ldr r2, =_sbss
 80027b0:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80027b4:	24000614 	.word	0x24000614

080027b8 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b8:	e7fe      	b.n	80027b8 <BDMA_Channel0_IRQHandler>
	...

080027bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c2:	2003      	movs	r0, #3
 80027c4:	f002 fa3e 	bl	8004c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027c8:	f006 f874 	bl	80088b4 <HAL_RCC_GetSysClockFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_Init+0x68>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	4913      	ldr	r1, [pc, #76]	@ (8002828 <HAL_Init+0x6c>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_Init+0x68>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <HAL_Init+0x6c>)
 80027f0:	5cd3      	ldrb	r3, [r2, r3]
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	4a0b      	ldr	r2, [pc, #44]	@ (800282c <HAL_Init+0x70>)
 80027fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <HAL_Init+0x74>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002806:	200f      	movs	r0, #15
 8002808:	f000 f814 	bl	8002834 <HAL_InitTick>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e002      	b.n	800281c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002816:	f7ff fbcf 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	58024400 	.word	0x58024400
 8002828:	0800fc10 	.word	0x0800fc10
 800282c:	24000058 	.word	0x24000058
 8002830:	24000054 	.word	0x24000054

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800283c:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_InitTick+0x60>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e021      	b.n	800288c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HAL_InitTick+0x64>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_InitTick+0x60>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f002 fa23 	bl	8004caa <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f002 f9ed 	bl	8004c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <HAL_InitTick+0x68>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	24000060 	.word	0x24000060
 8002898:	24000054 	.word	0x24000054
 800289c:	2400005c 	.word	0x2400005c

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	24000060 	.word	0x24000060
 80028c4:	24000610 	.word	0x24000610

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	24000610 	.word	0x24000610

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	24000060 	.word	0x24000060

08002928 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	43db      	mvns	r3, r3
 800293a:	401a      	ands	r2, r3
 800293c:	4904      	ldr	r1, [pc, #16]	@ (8002950 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	58000400 	.word	0x58000400

08002954 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	609a      	str	r2, [r3, #8]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3360      	adds	r3, #96	@ 0x60
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a10      	ldr	r2, [pc, #64]	@ (8002a1c <LL_ADC_SetOffset+0x60>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10b      	bne.n	80029f8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029f6:	e00b      	b.n	8002a10 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	58026000 	.word	0x58026000

08002a20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3360      	adds	r3, #96	@ 0x60
 8002a2e:	461a      	mov	r2, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	611a      	str	r2, [r3, #16]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00e      	beq.n	8002ab2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3360      	adds	r3, #96	@ 0x60
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	58026000 	.word	0x58026000

08002ac4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b04 <LL_ADC_SetOffsetSaturation+0x40>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10e      	bne.n	8002af6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3360      	adds	r3, #96	@ 0x60
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	58026000 	.word	0x58026000

08002b08 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	@ (8002b48 <LL_ADC_SetOffsetSign+0x40>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10e      	bne.n	8002b3a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3360      	adds	r3, #96	@ 0x60
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	58026000 	.word	0x58026000

08002b4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	@ 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <LL_ADC_SetOffsetState+0x50>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002b7e:	e007      	b.n	8002b90 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	58026000 	.word	0x58026000

08002ba0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b087      	sub	sp, #28
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3330      	adds	r3, #48	@ 0x30
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	4413      	add	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	211f      	movs	r1, #31
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	f003 011f 	and.w	r1, r3, #31
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f023 0203 	bic.w	r2, r3, #3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d107      	bne.n	8002c86 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60da      	str	r2, [r3, #12]
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	58026000 	.word	0x58026000

08002c98 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b087      	sub	sp, #28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	0e5b      	lsrs	r3, r3, #25
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	4413      	add	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	0d1b      	lsrs	r3, r3, #20
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2107      	movs	r1, #7
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0d1b      	lsrs	r3, r3, #20
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	431a      	orrs	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a1a      	ldr	r2, [pc, #104]	@ (8002d8c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d115      	bne.n	8002d54 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d34:	43db      	mvns	r3, r3
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0318 	and.w	r3, r3, #24
 8002d3e:	4914      	ldr	r1, [pc, #80]	@ (8002d90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d40:	40d9      	lsrs	r1, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	400b      	ands	r3, r1
 8002d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d52:	e014      	b.n	8002d7e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0318 	and.w	r3, r3, #24
 8002d6a:	4909      	ldr	r1, [pc, #36]	@ (8002d90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d6c:	40d9      	lsrs	r1, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	400b      	ands	r3, r1
 8002d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	58026000 	.word	0x58026000
 8002d90:	000fffff 	.word	0x000fffff

08002d94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 031f 	and.w	r3, r3, #31
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6093      	str	r3, [r2, #8]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	5fffffc0 	.word	0x5fffffc0

08002df0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <LL_ADC_EnableInternalRegulator+0x24>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	6fffffc0 	.word	0x6fffffc0

08002e40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e54:	d101      	bne.n	8002e5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <LL_ADC_Enable+0x24>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	7fffffc0 	.word	0x7fffffc0

08002e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <LL_ADC_IsEnabled+0x18>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <LL_ADC_IsEnabled+0x1a>
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <LL_ADC_REG_StartConversion+0x24>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	7fffffc0 	.word	0x7fffffc0

08002ee0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d101      	bne.n	8002ef8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d101      	bne.n	8002f1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1ee      	b.n	8003324 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff f849 	bl	8001fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff3f 	bl	8002df0 <LL_ADC_IsDeepPowerDownEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff25 	bl	8002dcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff5a 	bl	8002e40 <LL_ADC_IsInternalRegulatorEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d114      	bne.n	8002fbc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff3e 	bl	8002e18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f9c:	4b8e      	ldr	r3, [pc, #568]	@ (80031d8 <HAL_ADC_Init+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	4a8e      	ldr	r2, [pc, #568]	@ (80031dc <HAL_ADC_Init+0x2b0>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f9      	bne.n	8002fb0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff3d 	bl	8002e40 <LL_ADC_IsInternalRegulatorEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd0:	f043 0210 	orr.w	r2, r3, #16
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff77 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 8002ff2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 8188 	bne.w	8003312 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 8184 	bne.w	8003312 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003012:	f043 0202 	orr.w	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff36 	bl	8002e90 <LL_ADC_IsEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d136      	bne.n	8003098 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6c      	ldr	r2, [pc, #432]	@ (80031e0 <HAL_ADC_Init+0x2b4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_ADC_Init+0x112>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6a      	ldr	r2, [pc, #424]	@ (80031e4 <HAL_ADC_Init+0x2b8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10e      	bne.n	800305c <HAL_ADC_Init+0x130>
 800303e:	4868      	ldr	r0, [pc, #416]	@ (80031e0 <HAL_ADC_Init+0x2b4>)
 8003040:	f7ff ff26 	bl	8002e90 <LL_ADC_IsEnabled>
 8003044:	4604      	mov	r4, r0
 8003046:	4867      	ldr	r0, [pc, #412]	@ (80031e4 <HAL_ADC_Init+0x2b8>)
 8003048:	f7ff ff22 	bl	8002e90 <LL_ADC_IsEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	4323      	orrs	r3, r4
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e008      	b.n	800306e <HAL_ADC_Init+0x142>
 800305c:	4862      	ldr	r0, [pc, #392]	@ (80031e8 <HAL_ADC_Init+0x2bc>)
 800305e:	f7ff ff17 	bl	8002e90 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5a      	ldr	r2, [pc, #360]	@ (80031e0 <HAL_ADC_Init+0x2b4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_ADC_Init+0x15a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a58      	ldr	r2, [pc, #352]	@ (80031e4 <HAL_ADC_Init+0x2b8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x15e>
 8003086:	4a59      	ldr	r2, [pc, #356]	@ (80031ec <HAL_ADC_Init+0x2c0>)
 8003088:	e000      	b.n	800308c <HAL_ADC_Init+0x160>
 800308a:	4a59      	ldr	r2, [pc, #356]	@ (80031f0 <HAL_ADC_Init+0x2c4>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f7ff fc5e 	bl	8002954 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a52      	ldr	r2, [pc, #328]	@ (80031e8 <HAL_ADC_Init+0x2bc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d129      	bne.n	80030f6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7e5b      	ldrb	r3, [r3, #25]
 80030a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030ac:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80030b2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d013      	beq.n	80030e4 <HAL_ADC_Init+0x1b8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d00d      	beq.n	80030e0 <HAL_ADC_Init+0x1b4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b1c      	cmp	r3, #28
 80030ca:	d007      	beq.n	80030dc <HAL_ADC_Init+0x1b0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b18      	cmp	r3, #24
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_Init+0x1ac>
 80030d4:	2318      	movs	r3, #24
 80030d6:	e006      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030d8:	2300      	movs	r3, #0
 80030da:	e004      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030dc:	2310      	movs	r3, #16
 80030de:	e002      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030e0:	2308      	movs	r3, #8
 80030e2:	e000      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030e4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80030e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e00e      	b.n	8003114 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7e5b      	ldrb	r3, [r3, #25]
 80030fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003100:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003106:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d106      	bne.n	800312c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	3b01      	subs	r3, #1
 8003124:	045b      	lsls	r3, r3, #17
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a26      	ldr	r2, [pc, #152]	@ (80031e8 <HAL_ADC_Init+0x2bc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d115      	bne.n	800317e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4b26      	ldr	r3, [pc, #152]	@ (80031f4 <HAL_ADC_Init+0x2c8>)
 800315a:	4013      	ands	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	69b9      	ldr	r1, [r7, #24]
 8003162:	430b      	orrs	r3, r1
 8003164:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	611a      	str	r2, [r3, #16]
 800317c:	e009      	b.n	8003192 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_ADC_Init+0x2cc>)
 8003186:	4013      	ands	r3, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	430b      	orrs	r3, r1
 8003190:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fea2 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 800319c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff feaf 	bl	8002f06 <LL_ADC_INJ_IsConversionOngoing>
 80031a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 808e 	bne.w	80032ce <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 808a 	bne.w	80032ce <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <HAL_ADC_Init+0x2bc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d11b      	bne.n	80031fc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e1b      	ldrb	r3, [r3, #24]
 80031c8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031d0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e018      	b.n	800320a <HAL_ADC_Init+0x2de>
 80031d8:	24000054 	.word	0x24000054
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40022100 	.word	0x40022100
 80031e8:	58026000 	.word	0x58026000
 80031ec:	40022300 	.word	0x40022300
 80031f0:	58026300 	.word	0x58026300
 80031f4:	fff04007 	.word	0xfff04007
 80031f8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7e1b      	ldrb	r3, [r3, #24]
 8003200:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b46      	ldr	r3, [pc, #280]	@ (800332c <HAL_ADC_Init+0x400>)
 8003212:	4013      	ands	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	430b      	orrs	r3, r1
 800321c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003224:	2b01      	cmp	r3, #1
 8003226:	d137      	bne.n	8003298 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a3f      	ldr	r2, [pc, #252]	@ (8003330 <HAL_ADC_Init+0x404>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d116      	bne.n	8003266 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	4b3d      	ldr	r3, [pc, #244]	@ (8003334 <HAL_ADC_Init+0x408>)
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800324a:	4311      	orrs	r1, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003256:	430a      	orrs	r2, r1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	611a      	str	r2, [r3, #16]
 8003264:	e020      	b.n	80032a8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	4b32      	ldr	r3, [pc, #200]	@ (8003338 <HAL_ADC_Init+0x40c>)
 800326e:	4013      	ands	r3, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003274:	3a01      	subs	r2, #1
 8003276:	0411      	lsls	r1, r2, #16
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003288:	430a      	orrs	r2, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	611a      	str	r2, [r3, #16]
 8003296:	e007      	b.n	80032a8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003330 <HAL_ADC_Init+0x404>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d002      	beq.n	80032ce <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f001 f9c3 	bl	8004654 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10c      	bne.n	80032f0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	f023 010f 	bic.w	r1, r3, #15
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	1e5a      	subs	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ee:	e007      	b.n	8003300 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 020f 	bic.w	r2, r2, #15
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003304:	f023 0303 	bic.w	r3, r3, #3
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003310:	e007      	b.n	8003322 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f043 0210 	orr.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003322:	7ffb      	ldrb	r3, [r7, #31]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3724      	adds	r7, #36	@ 0x24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	ffffbffc 	.word	0xffffbffc
 8003330:	58026000 	.word	0x58026000
 8003334:	fc00f81f 	.word	0xfc00f81f
 8003338:	fc00f81e 	.word	0xfc00f81e

0800333c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a60      	ldr	r2, [pc, #384]	@ (80034d0 <HAL_ADC_Start_DMA+0x194>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_ADC_Start_DMA+0x20>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a5f      	ldr	r2, [pc, #380]	@ (80034d4 <HAL_ADC_Start_DMA+0x198>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_ADC_Start_DMA+0x24>
 800335c:	4b5e      	ldr	r3, [pc, #376]	@ (80034d8 <HAL_ADC_Start_DMA+0x19c>)
 800335e:	e000      	b.n	8003362 <HAL_ADC_Start_DMA+0x26>
 8003360:	4b5e      	ldr	r3, [pc, #376]	@ (80034dc <HAL_ADC_Start_DMA+0x1a0>)
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fd16 	bl	8002d94 <LL_ADC_GetMultimode>
 8003368:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fdb6 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 80a2 	bne.w	80034c0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_ADC_Start_DMA+0x4e>
 8003386:	2302      	movs	r3, #2
 8003388:	e09d      	b.n	80034c6 <HAL_ADC_Start_DMA+0x18a>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b05      	cmp	r3, #5
 800339c:	d003      	beq.n	80033a6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b09      	cmp	r3, #9
 80033a2:	f040 8086 	bne.w	80034b2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f001 f836 	bl	8004418 <ADC_Enable>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d178      	bne.n	80034a8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033ba:	4b49      	ldr	r3, [pc, #292]	@ (80034e0 <HAL_ADC_Start_DMA+0x1a4>)
 80033bc:	4013      	ands	r3, r2
 80033be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a42      	ldr	r2, [pc, #264]	@ (80034d4 <HAL_ADC_Start_DMA+0x198>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d002      	beq.n	80033d6 <HAL_ADC_Start_DMA+0x9a>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e000      	b.n	80033d8 <HAL_ADC_Start_DMA+0x9c>
 80033d6:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <HAL_ADC_Start_DMA+0x194>)
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4293      	cmp	r3, r2
 80033de:	d002      	beq.n	80033e6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003402:	f023 0206 	bic.w	r2, r3, #6
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	665a      	str	r2, [r3, #100]	@ 0x64
 800340a:	e002      	b.n	8003412 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	4a33      	ldr	r2, [pc, #204]	@ (80034e4 <HAL_ADC_Start_DMA+0x1a8>)
 8003418:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	4a32      	ldr	r2, [pc, #200]	@ (80034e8 <HAL_ADC_Start_DMA+0x1ac>)
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	4a31      	ldr	r2, [pc, #196]	@ (80034ec <HAL_ADC_Start_DMA+0x1b0>)
 8003428:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	221c      	movs	r2, #28
 8003430:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0210 	orr.w	r2, r2, #16
 8003448:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a28      	ldr	r2, [pc, #160]	@ (80034f0 <HAL_ADC_Start_DMA+0x1b4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d10f      	bne.n	8003474 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f7ff fbfe 	bl	8002c64 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fbe9 	bl	8002c44 <LL_ADC_EnableDMAReq>
 8003472:	e007      	b.n	8003484 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f7ff fbcd 	bl	8002c1e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3340      	adds	r3, #64	@ 0x40
 800348e:	4619      	mov	r1, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f001 ff6e 	bl	8005374 <HAL_DMA_Start_IT>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fd09 	bl	8002eb8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034a6:	e00d      	b.n	80034c4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80034b0:	e008      	b.n	80034c4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80034be:	e001      	b.n	80034c4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40022100 	.word	0x40022100
 80034d8:	40022300 	.word	0x40022300
 80034dc:	58026300 	.word	0x58026300
 80034e0:	fffff0fe 	.word	0xfffff0fe
 80034e4:	0800452d 	.word	0x0800452d
 80034e8:	08004605 	.word	0x08004605
 80034ec:	08004621 	.word	0x08004621
 80034f0:	58026000 	.word	0x58026000

080034f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a87      	ldr	r2, [pc, #540]	@ (8003734 <HAL_ADC_IRQHandler+0x240>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_ADC_IRQHandler+0x30>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a86      	ldr	r2, [pc, #536]	@ (8003738 <HAL_ADC_IRQHandler+0x244>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_ADC_IRQHandler+0x34>
 8003524:	4b85      	ldr	r3, [pc, #532]	@ (800373c <HAL_ADC_IRQHandler+0x248>)
 8003526:	e000      	b.n	800352a <HAL_ADC_IRQHandler+0x36>
 8003528:	4b85      	ldr	r3, [pc, #532]	@ (8003740 <HAL_ADC_IRQHandler+0x24c>)
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fc32 	bl	8002d94 <LL_ADC_GetMultimode>
 8003530:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d017      	beq.n	800356c <HAL_ADC_IRQHandler+0x78>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d012      	beq.n	800356c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f001 f9b4 	bl	80048cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2202      	movs	r2, #2
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_ADC_IRQHandler+0x8c>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8083 	beq.w	8003692 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d07d      	beq.n	8003692 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff faf4 	bl	8002ba0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d062      	beq.n	8003684 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003738 <HAL_ADC_IRQHandler+0x244>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d002      	beq.n	80035ce <HAL_ADC_IRQHandler+0xda>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	e000      	b.n	80035d0 <HAL_ADC_IRQHandler+0xdc>
 80035ce:	4b59      	ldr	r3, [pc, #356]	@ (8003734 <HAL_ADC_IRQHandler+0x240>)
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d008      	beq.n	80035ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d002      	beq.n	80035ea <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b09      	cmp	r3, #9
 80035e8:	d104      	bne.n	80035f4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	e00c      	b.n	800360e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003738 <HAL_ADC_IRQHandler+0x244>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d002      	beq.n	8003604 <HAL_ADC_IRQHandler+0x110>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e000      	b.n	8003606 <HAL_ADC_IRQHandler+0x112>
 8003604:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <HAL_ADC_IRQHandler+0x240>)
 8003606:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d135      	bne.n	8003684 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d12e      	bne.n	8003684 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fc58 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11a      	bne.n	800366c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 020c 	bic.w	r2, r2, #12
 8003644:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003656:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d112      	bne.n	8003684 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	661a      	str	r2, [r3, #96]	@ 0x60
 800366a:	e00b      	b.n	8003684 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003670:	f043 0210 	orr.w	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f96f 	bl	8003968 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	220c      	movs	r2, #12
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_IRQHandler+0x1b2>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a0 	beq.w	80037f2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 809a 	beq.w	80037f2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fadc 	bl	8002c98 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036e0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fa5a 	bl	8002ba0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036ec:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_ADC_IRQHandler+0x244>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d002      	beq.n	80036fe <HAL_ADC_IRQHandler+0x20a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	e000      	b.n	8003700 <HAL_ADC_IRQHandler+0x20c>
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <HAL_ADC_IRQHandler+0x240>)
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	4293      	cmp	r3, r2
 8003706:	d008      	beq.n	800371a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b06      	cmp	r3, #6
 8003712:	d002      	beq.n	800371a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b07      	cmp	r3, #7
 8003718:	d104      	bne.n	8003724 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	e014      	b.n	800374e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a03      	ldr	r2, [pc, #12]	@ (8003738 <HAL_ADC_IRQHandler+0x244>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00a      	beq.n	8003744 <HAL_ADC_IRQHandler+0x250>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	e008      	b.n	8003746 <HAL_ADC_IRQHandler+0x252>
 8003734:	40022000 	.word	0x40022000
 8003738:	40022100 	.word	0x40022100
 800373c:	40022300 	.word	0x40022300
 8003740:	58026300 	.word	0x58026300
 8003744:	4b84      	ldr	r3, [pc, #528]	@ (8003958 <HAL_ADC_IRQHandler+0x464>)
 8003746:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d047      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_ADC_IRQHandler+0x27a>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03f      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	d13a      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b40      	cmp	r3, #64	@ 0x40
 800377a:	d133      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d12e      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fbbb 	bl	8002f06 <LL_ADC_INJ_IsConversionOngoing>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11a      	bne.n	80037cc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037a4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d112      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60
 80037ca:	e00b      	b.n	80037e4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d0:	f043 0210 	orr.w	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f001 f849 	bl	800487c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2260      	movs	r2, #96	@ 0x60
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d011      	beq.n	8003820 <HAL_ADC_IRQHandler+0x32c>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8bc 	bl	8003990 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <HAL_ADC_IRQHandler+0x35c>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f001 f82f 	bl	80048a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <HAL_ADC_IRQHandler+0x38c>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f001 f821 	bl	80048b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d043      	beq.n	8003912 <HAL_ADC_IRQHandler+0x41e>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d03e      	beq.n	8003912 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a0:	e021      	b.n	80038e6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003958 <HAL_ADC_IRQHandler+0x464>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_ADC_IRQHandler+0x3c8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a29      	ldr	r2, [pc, #164]	@ (800395c <HAL_ADC_IRQHandler+0x468>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x3cc>
 80038bc:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <HAL_ADC_IRQHandler+0x46c>)
 80038be:	e000      	b.n	80038c2 <HAL_ADC_IRQHandler+0x3ce>
 80038c0:	4b28      	ldr	r3, [pc, #160]	@ (8003964 <HAL_ADC_IRQHandler+0x470>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fa74 	bl	8002db0 <LL_ADC_GetMultiDMATransfer>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038ce:	2301      	movs	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d2:	e008      	b.n	80038e6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038e2:	2301      	movs	r3, #1
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d10e      	bne.n	800390a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038fc:	f043 0202 	orr.w	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f84d 	bl	80039a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2210      	movs	r2, #16
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d018      	beq.n	800394e <HAL_ADC_IRQHandler+0x45a>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003922:	2b00      	cmp	r3, #0
 8003924:	d013      	beq.n	800394e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003936:	f043 0208 	orr.w	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003946:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 ffa1 	bl	8004890 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800394e:	bf00      	nop
 8003950:	3728      	adds	r7, #40	@ 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40022000 	.word	0x40022000
 800395c:	40022100 	.word	0x40022100
 8003960:	40022300 	.word	0x40022300
 8003964:	58026300 	.word	0x58026300

08003968 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b0b9      	sub	sp, #228	@ 0xe4
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039d2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4aab      	ldr	r2, [pc, #684]	@ (8003c88 <HAL_ADC_ConfigChannel+0x2d0>)
 80039da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d102      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x34>
 80039e6:	2302      	movs	r3, #2
 80039e8:	f000 bcfe 	b.w	80043e8 <HAL_ADC_ConfigChannel+0xa30>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fa71 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f040 84e2 	bne.w	80043ca <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	db38      	blt.n	8003a80 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a9e      	ldr	r2, [pc, #632]	@ (8003c8c <HAL_ADC_ConfigChannel+0x2d4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d033      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x7e>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2201      	movs	r2, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	e01d      	b.n	8003a72 <HAL_ADC_ConfigChannel+0xba>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	e004      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	69d1      	ldr	r1, [r2, #28]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f7ff f89a 	bl	8002bc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fa22 	bl	8002ee0 <LL_ADC_REG_IsConversionOngoing>
 8003a9c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fa2e 	bl	8002f06 <LL_ADC_INJ_IsConversionOngoing>
 8003aaa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 8270 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ab8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 826b 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7ff f8f5 	bl	8002cbe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6c      	ldr	r2, [pc, #432]	@ (8003c8c <HAL_ADC_ConfigChannel+0x2d4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10d      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003af8:	e032      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003afa:	4b65      	ldr	r3, [pc, #404]	@ (8003c90 <HAL_ADC_ConfigChannel+0x2d8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b06:	d10b      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x168>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	e01d      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x1a4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x18e>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	e00a      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x1a4>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d048      	beq.n	8003bfa <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6919      	ldr	r1, [r3, #16]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b78:	f7fe ff20 	bl	80029bc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a42      	ldr	r2, [pc, #264]	@ (8003c8c <HAL_ADC_ConfigChannel+0x2d4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d119      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6919      	ldr	r1, [r3, #16]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f7fe ffb8 	bl	8002b08 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6919      	ldr	r1, [r3, #16]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1f8>
 8003baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bae:	e000      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x1fa>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f7fe ff86 	bl	8002ac4 <LL_ADC_SetOffsetSaturation>
 8003bb8:	e1ee      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6919      	ldr	r1, [r3, #16]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d102      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x21a>
 8003bcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003bd0:	e000      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x21c>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f7fe ff53 	bl	8002a80 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6919      	ldr	r1, [r3, #16]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	7e1b      	ldrb	r3, [r3, #24]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d102      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x238>
 8003bea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bee:	e000      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x23a>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7fe ff2a 	bl	8002a4c <LL_ADC_SetDataRightShift>
 8003bf8:	e1ce      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a23      	ldr	r2, [pc, #140]	@ (8003c8c <HAL_ADC_ConfigChannel+0x2d4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f040 8181 	bne.w	8003f08 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe ff07 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x27a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fefc 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	0e9b      	lsrs	r3, r3, #26
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	e01e      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x2b8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fef1 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003c50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003c58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003c60:	2320      	movs	r3, #32
 8003c62:	e004      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003c64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x2dc>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0e9b      	lsrs	r3, r3, #26
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	e01e      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x30e>
 8003c88:	47ff0000 	.word	0x47ff0000
 8003c8c:	58026000 	.word	0x58026000
 8003c90:	5c001000 	.word	0x5c001000
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003cb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	e004      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003cbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d106      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe ff3a 	bl	8002b4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fe9e 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x34c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fe93 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	f003 021f 	and.w	r2, r3, #31
 8003d02:	e01e      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x38a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fe88 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003d22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003d32:	2320      	movs	r3, #32
 8003d34:	e004      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d105      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x3a2>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	0e9b      	lsrs	r3, r3, #26
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	e018      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x3d4>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e004      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d106      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fed7 	bl	8002b4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2102      	movs	r1, #2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fe3b 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x412>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fe30 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	e01e      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x450>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe fe25 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e004      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x468>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	e014      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x492>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e28:	fa93 f3a3 	rbit	r3, r3
 8003e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e004      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d106      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	2102      	movs	r1, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fe78 	bl	8002b4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2103      	movs	r1, #3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fddc 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x4d0>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2103      	movs	r1, #3
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fdd1 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	0e9b      	lsrs	r3, r3, #26
 8003e82:	f003 021f 	and.w	r2, r3, #31
 8003e86:	e017      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x500>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fdc6 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	e003      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x518>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	e011      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x53c>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003ee2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	e003      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003eec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d14f      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2103      	movs	r1, #3
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fe23 	bl	8002b4c <LL_ADC_SetOffsetState>
 8003f06:	e047      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	069b      	lsls	r3, r3, #26
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f2a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	069b      	lsls	r3, r3, #26
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d107      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f4e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	069b      	lsls	r3, r3, #26
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f72:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	069b      	lsls	r3, r3, #26
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f96:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe ff77 	bl	8002e90 <LL_ADC_IsEnabled>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f040 8219 	bne.w	80043dc <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7fe feac 	bl	8002d14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4aa1      	ldr	r2, [pc, #644]	@ (8004248 <HAL_ADC_ConfigChannel+0x890>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	f040 812e 	bne.w	8004224 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x638>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0e9b      	lsrs	r3, r3, #26
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2b09      	cmp	r3, #9
 8003fe6:	bf94      	ite	ls
 8003fe8:	2301      	movls	r3, #1
 8003fea:	2300      	movhi	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e019      	b.n	8004024 <HAL_ADC_ConfigChannel+0x66c>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004000:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004008:	2320      	movs	r3, #32
 800400a:	e003      	b.n	8004014 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800400c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2b09      	cmp	r3, #9
 800401c:	bf94      	ite	ls
 800401e:	2301      	movls	r3, #1
 8004020:	2300      	movhi	r3, #0
 8004022:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004024:	2b00      	cmp	r3, #0
 8004026:	d079      	beq.n	800411c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004030:	2b00      	cmp	r3, #0
 8004032:	d107      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x68c>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0e9b      	lsrs	r3, r3, #26
 800403a:	3301      	adds	r3, #1
 800403c:	069b      	lsls	r3, r3, #26
 800403e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004042:	e015      	b.n	8004070 <HAL_ADC_ConfigChannel+0x6b8>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004054:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800405c:	2320      	movs	r3, #32
 800405e:	e003      	b.n	8004068 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004062:	fab3 f383 	clz	r3, r3
 8004066:	b2db      	uxtb	r3, r3
 8004068:	3301      	adds	r3, #1
 800406a:	069b      	lsls	r3, r3, #26
 800406c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x6d8>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0e9b      	lsrs	r3, r3, #26
 8004082:	3301      	adds	r3, #1
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2101      	movs	r1, #1
 800408a:	fa01 f303 	lsl.w	r3, r1, r3
 800408e:	e017      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x708>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800409e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80040a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e003      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80040ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	ea42 0103 	orr.w	r1, r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x72e>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0e9b      	lsrs	r3, r3, #26
 80040d6:	3301      	adds	r3, #1
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	051b      	lsls	r3, r3, #20
 80040e4:	e018      	b.n	8004118 <HAL_ADC_ConfigChannel+0x760>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80040fe:	2320      	movs	r3, #32
 8004100:	e003      	b.n	800410a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f003 021f 	and.w	r2, r3, #31
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004118:	430b      	orrs	r3, r1
 800411a:	e07e      	b.n	800421a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004124:	2b00      	cmp	r3, #0
 8004126:	d107      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x780>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0e9b      	lsrs	r3, r3, #26
 800412e:	3301      	adds	r3, #1
 8004130:	069b      	lsls	r3, r3, #26
 8004132:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004136:	e015      	b.n	8004164 <HAL_ADC_ConfigChannel+0x7ac>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800414a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004150:	2320      	movs	r3, #32
 8004152:	e003      	b.n	800415c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3301      	adds	r3, #1
 800415e:	069b      	lsls	r3, r3, #26
 8004160:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x7cc>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	3301      	adds	r3, #1
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	2101      	movs	r1, #1
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	e017      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x7fc>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	61bb      	str	r3, [r7, #24]
  return result;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800419c:	2320      	movs	r3, #32
 800419e:	e003      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2101      	movs	r1, #1
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	ea42 0103 	orr.w	r1, r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10d      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x828>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	3301      	adds	r3, #1
 80041cc:	f003 021f 	and.w	r2, r3, #31
 80041d0:	4613      	mov	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	3b1e      	subs	r3, #30
 80041d8:	051b      	lsls	r3, r3, #20
 80041da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041de:	e01b      	b.n	8004218 <HAL_ADC_ConfigChannel+0x860>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	60fb      	str	r3, [r7, #12]
  return result;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e003      	b.n	8004204 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3301      	adds	r3, #1
 8004206:	f003 021f 	and.w	r2, r3, #31
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	3b1e      	subs	r3, #30
 8004212:	051b      	lsls	r3, r3, #20
 8004214:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004218:	430b      	orrs	r3, r1
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	4619      	mov	r1, r3
 8004220:	f7fe fd4d 	bl	8002cbe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f280 80d7 	bge.w	80043dc <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a06      	ldr	r2, [pc, #24]	@ (800424c <HAL_ADC_ConfigChannel+0x894>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x88a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a04      	ldr	r2, [pc, #16]	@ (8004250 <HAL_ADC_ConfigChannel+0x898>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10a      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x8a0>
 8004242:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <HAL_ADC_ConfigChannel+0x89c>)
 8004244:	e009      	b.n	800425a <HAL_ADC_ConfigChannel+0x8a2>
 8004246:	bf00      	nop
 8004248:	47ff0000 	.word	0x47ff0000
 800424c:	40022000 	.word	0x40022000
 8004250:	40022100 	.word	0x40022100
 8004254:	40022300 	.word	0x40022300
 8004258:	4b65      	ldr	r3, [pc, #404]	@ (80043f0 <HAL_ADC_ConfigChannel+0xa38>)
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fba0 	bl	80029a0 <LL_ADC_GetCommonPathInternalCh>
 8004260:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a62      	ldr	r2, [pc, #392]	@ (80043f4 <HAL_ADC_ConfigChannel+0xa3c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_ADC_ConfigChannel+0x8c0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a61      	ldr	r2, [pc, #388]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa40>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10e      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x8de>
 8004278:	485e      	ldr	r0, [pc, #376]	@ (80043f4 <HAL_ADC_ConfigChannel+0xa3c>)
 800427a:	f7fe fe09 	bl	8002e90 <LL_ADC_IsEnabled>
 800427e:	4604      	mov	r4, r0
 8004280:	485d      	ldr	r0, [pc, #372]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa40>)
 8004282:	f7fe fe05 	bl	8002e90 <LL_ADC_IsEnabled>
 8004286:	4603      	mov	r3, r0
 8004288:	4323      	orrs	r3, r4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e008      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x8f0>
 8004296:	4859      	ldr	r0, [pc, #356]	@ (80043fc <HAL_ADC_ConfigChannel+0xa44>)
 8004298:	f7fe fdfa 	bl	8002e90 <LL_ADC_IsEnabled>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8084 	beq.w	80043b6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a53      	ldr	r2, [pc, #332]	@ (8004400 <HAL_ADC_ConfigChannel+0xa48>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d132      	bne.n	800431e <HAL_ADC_ConfigChannel+0x966>
 80042b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d12c      	bne.n	800431e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a4c      	ldr	r2, [pc, #304]	@ (80043fc <HAL_ADC_ConfigChannel+0xa44>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f040 8086 	bne.w	80043dc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a47      	ldr	r2, [pc, #284]	@ (80043f4 <HAL_ADC_ConfigChannel+0xa3c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_ADC_ConfigChannel+0x92c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a46      	ldr	r2, [pc, #280]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa40>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x930>
 80042e4:	4a47      	ldr	r2, [pc, #284]	@ (8004404 <HAL_ADC_ConfigChannel+0xa4c>)
 80042e6:	e000      	b.n	80042ea <HAL_ADC_ConfigChannel+0x932>
 80042e8:	4a41      	ldr	r2, [pc, #260]	@ (80043f0 <HAL_ADC_ConfigChannel+0xa38>)
 80042ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7fe fb40 	bl	800297a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042fa:	4b43      	ldr	r3, [pc, #268]	@ (8004408 <HAL_ADC_ConfigChannel+0xa50>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	4a42      	ldr	r2, [pc, #264]	@ (800440c <HAL_ADC_ConfigChannel+0xa54>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	3301      	adds	r3, #1
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800430e:	e002      	b.n	8004316 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	3b01      	subs	r3, #1
 8004314:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f9      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800431c:	e05e      	b.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3b      	ldr	r2, [pc, #236]	@ (8004410 <HAL_ADC_ConfigChannel+0xa58>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d120      	bne.n	800436a <HAL_ADC_ConfigChannel+0x9b2>
 8004328:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800432c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d11a      	bne.n	800436a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a30      	ldr	r2, [pc, #192]	@ (80043fc <HAL_ADC_ConfigChannel+0xa44>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d14e      	bne.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2c      	ldr	r2, [pc, #176]	@ (80043f4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_ADC_ConfigChannel+0x99a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2a      	ldr	r2, [pc, #168]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa40>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x99e>
 8004352:	4a2c      	ldr	r2, [pc, #176]	@ (8004404 <HAL_ADC_ConfigChannel+0xa4c>)
 8004354:	e000      	b.n	8004358 <HAL_ADC_ConfigChannel+0x9a0>
 8004356:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <HAL_ADC_ConfigChannel+0xa38>)
 8004358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800435c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7fe fb09 	bl	800297a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004368:	e038      	b.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a29      	ldr	r2, [pc, #164]	@ (8004414 <HAL_ADC_ConfigChannel+0xa5c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d133      	bne.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
 8004374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d12d      	bne.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <HAL_ADC_ConfigChannel+0xa44>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d128      	bne.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_ADC_ConfigChannel+0x9e6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa40>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x9ea>
 800439e:	4a19      	ldr	r2, [pc, #100]	@ (8004404 <HAL_ADC_ConfigChannel+0xa4c>)
 80043a0:	e000      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x9ec>
 80043a2:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <HAL_ADC_ConfigChannel+0xa38>)
 80043a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f7fe fae3 	bl	800297a <LL_ADC_SetCommonPathInternalCh>
 80043b4:	e012      	b.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80043c8:	e008      	b.n	80043dc <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043e4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	37e4      	adds	r7, #228	@ 0xe4
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd90      	pop	{r4, r7, pc}
 80043f0:	58026300 	.word	0x58026300
 80043f4:	40022000 	.word	0x40022000
 80043f8:	40022100 	.word	0x40022100
 80043fc:	58026000 	.word	0x58026000
 8004400:	c7520000 	.word	0xc7520000
 8004404:	40022300 	.word	0x40022300
 8004408:	24000054 	.word	0x24000054
 800440c:	053e2d63 	.word	0x053e2d63
 8004410:	c3210000 	.word	0xc3210000
 8004414:	cb840000 	.word	0xcb840000

08004418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fd33 	bl	8002e90 <LL_ADC_IsEnabled>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d16e      	bne.n	800450e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	4b38      	ldr	r3, [pc, #224]	@ (8004518 <ADC_Enable+0x100>)
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e05a      	b.n	8004510 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fd02 	bl	8002e68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004464:	f7fe fa30 	bl	80028c8 <HAL_GetTick>
 8004468:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2b      	ldr	r2, [pc, #172]	@ (800451c <ADC_Enable+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <ADC_Enable+0x66>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a29      	ldr	r2, [pc, #164]	@ (8004520 <ADC_Enable+0x108>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <ADC_Enable+0x6a>
 800447e:	4b29      	ldr	r3, [pc, #164]	@ (8004524 <ADC_Enable+0x10c>)
 8004480:	e000      	b.n	8004484 <ADC_Enable+0x6c>
 8004482:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <ADC_Enable+0x110>)
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fc85 	bl	8002d94 <LL_ADC_GetMultimode>
 800448a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a23      	ldr	r2, [pc, #140]	@ (8004520 <ADC_Enable+0x108>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d002      	beq.n	800449c <ADC_Enable+0x84>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	e000      	b.n	800449e <ADC_Enable+0x86>
 800449c:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <ADC_Enable+0x104>)
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02c      	beq.n	8004500 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d130      	bne.n	800450e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ac:	e028      	b.n	8004500 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fcec 	bl	8002e90 <LL_ADC_IsEnabled>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fcd0 	bl	8002e68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044c8:	f7fe f9fe 	bl	80028c8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d914      	bls.n	8004500 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d00d      	beq.n	8004500 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e8:	f043 0210 	orr.w	r2, r3, #16
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d1cf      	bne.n	80044ae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	8000003f 	.word	0x8000003f
 800451c:	40022000 	.word	0x40022000
 8004520:	40022100 	.word	0x40022100
 8004524:	40022300 	.word	0x40022300
 8004528:	58026300 	.word	0x58026300

0800452c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	d14b      	bne.n	80045de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d021      	beq.n	80045a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fb1b 	bl	8002ba0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d032      	beq.n	80045d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d12b      	bne.n	80045d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11f      	bne.n	80045d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80045a2:	e018      	b.n	80045d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d111      	bne.n	80045d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff f9c6 	bl	8003968 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045dc:	e00e      	b.n	80045fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff f9da 	bl	80039a4 <HAL_ADC_ErrorCallback>
}
 80045f0:	e004      	b.n	80045fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff f9b2 	bl	800397c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004632:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463e:	f043 0204 	orr.w	r2, r3, #4
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff f9ac 	bl	80039a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a6c      	ldr	r2, [pc, #432]	@ (8004814 <ADC_ConfigureBoostMode+0x1c0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <ADC_ConfigureBoostMode+0x1c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a6b      	ldr	r2, [pc, #428]	@ (8004818 <ADC_ConfigureBoostMode+0x1c4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d109      	bne.n	8004684 <ADC_ConfigureBoostMode+0x30>
 8004670:	4b6a      	ldr	r3, [pc, #424]	@ (800481c <ADC_ConfigureBoostMode+0x1c8>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e008      	b.n	8004696 <ADC_ConfigureBoostMode+0x42>
 8004684:	4b66      	ldr	r3, [pc, #408]	@ (8004820 <ADC_ConfigureBoostMode+0x1cc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01c      	beq.n	80046d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800469a:	f004 fa85 	bl	8008ba8 <HAL_RCC_GetHCLKFreq>
 800469e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046a8:	d010      	beq.n	80046cc <ADC_ConfigureBoostMode+0x78>
 80046aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046ae:	d873      	bhi.n	8004798 <ADC_ConfigureBoostMode+0x144>
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b4:	d002      	beq.n	80046bc <ADC_ConfigureBoostMode+0x68>
 80046b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ba:	d16d      	bne.n	8004798 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	60fb      	str	r3, [r7, #12]
        break;
 80046ca:	e068      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	60fb      	str	r3, [r7, #12]
        break;
 80046d2:	e064      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80046d4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	f005 fc60 	bl	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq>
 80046e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046ea:	d051      	beq.n	8004790 <ADC_ConfigureBoostMode+0x13c>
 80046ec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046f0:	d854      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 80046f2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046f6:	d047      	beq.n	8004788 <ADC_ConfigureBoostMode+0x134>
 80046f8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046fc:	d84e      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 80046fe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004702:	d03d      	beq.n	8004780 <ADC_ConfigureBoostMode+0x12c>
 8004704:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004708:	d848      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 800470a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800470e:	d033      	beq.n	8004778 <ADC_ConfigureBoostMode+0x124>
 8004710:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004714:	d842      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 8004716:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800471a:	d029      	beq.n	8004770 <ADC_ConfigureBoostMode+0x11c>
 800471c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004720:	d83c      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 8004722:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004726:	d01a      	beq.n	800475e <ADC_ConfigureBoostMode+0x10a>
 8004728:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800472c:	d836      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 800472e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004732:	d014      	beq.n	800475e <ADC_ConfigureBoostMode+0x10a>
 8004734:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004738:	d830      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473e:	d00e      	beq.n	800475e <ADC_ConfigureBoostMode+0x10a>
 8004740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004744:	d82a      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 8004746:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800474a:	d008      	beq.n	800475e <ADC_ConfigureBoostMode+0x10a>
 800474c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004750:	d824      	bhi.n	800479c <ADC_ConfigureBoostMode+0x148>
 8004752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004756:	d002      	beq.n	800475e <ADC_ConfigureBoostMode+0x10a>
 8004758:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800475c:	d11e      	bne.n	800479c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	0c9b      	lsrs	r3, r3, #18
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	60fb      	str	r3, [r7, #12]
        break;
 800476e:	e016      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	60fb      	str	r3, [r7, #12]
        break;
 8004776:	e012      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	60fb      	str	r3, [r7, #12]
        break;
 800477e:	e00e      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	60fb      	str	r3, [r7, #12]
        break;
 8004786:	e00a      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	09db      	lsrs	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]
        break;
 800478e:	e006      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	60fb      	str	r3, [r7, #12]
        break;
 8004796:	e002      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800479c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004824 <ADC_ConfigureBoostMode+0x1d0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d808      	bhi.n	80047be <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80047bc:	e025      	b.n	800480a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <ADC_ConfigureBoostMode+0x1d4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d80a      	bhi.n	80047dc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d8:	609a      	str	r2, [r3, #8]
}
 80047da:	e016      	b.n	800480a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a13      	ldr	r2, [pc, #76]	@ (800482c <ADC_ConfigureBoostMode+0x1d8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d80a      	bhi.n	80047fa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	e007      	b.n	800480a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004808:	609a      	str	r2, [r3, #8]
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40022000 	.word	0x40022000
 8004818:	40022100 	.word	0x40022100
 800481c:	40022300 	.word	0x40022300
 8004820:	58026300 	.word	0x58026300
 8004824:	005f5e10 	.word	0x005f5e10
 8004828:	00bebc20 	.word	0x00bebc20
 800482c:	017d7840 	.word	0x017d7840

08004830 <LL_ADC_IsEnabled>:
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <LL_ADC_IsEnabled+0x18>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <LL_ADC_IsEnabled+0x1a>
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <LL_ADC_REG_IsConversionOngoing>:
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d101      	bne.n	800486e <LL_ADC_REG_IsConversionOngoing+0x18>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b0a3      	sub	sp, #140	@ 0x8c
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0c1      	b.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800490a:	2300      	movs	r3, #0
 800490c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a5e      	ldr	r2, [pc, #376]	@ (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d102      	bne.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004918:	4b5d      	ldr	r3, [pc, #372]	@ (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e001      	b.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0a0      	b.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ff87 	bl	8004856 <LL_ADC_REG_IsConversionOngoing>
 8004948:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff80 	bl	8004856 <LL_ADC_REG_IsConversionOngoing>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 8081 	bne.w	8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800495e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d17c      	bne.n	8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a48      	ldr	r2, [pc, #288]	@ (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a46      	ldr	r2, [pc, #280]	@ (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800497a:	4b46      	ldr	r3, [pc, #280]	@ (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800497c:	e000      	b.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800497e:	4b46      	ldr	r3, [pc, #280]	@ (8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004980:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d039      	beq.n	80049fe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800498a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800499a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a3a      	ldr	r2, [pc, #232]	@ (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a39      	ldr	r2, [pc, #228]	@ (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10e      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80049b0:	4836      	ldr	r0, [pc, #216]	@ (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049b2:	f7ff ff3d 	bl	8004830 <LL_ADC_IsEnabled>
 80049b6:	4604      	mov	r4, r0
 80049b8:	4835      	ldr	r0, [pc, #212]	@ (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ba:	f7ff ff39 	bl	8004830 <LL_ADC_IsEnabled>
 80049be:	4603      	mov	r3, r0
 80049c0:	4323      	orrs	r3, r4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e008      	b.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80049ce:	4833      	ldr	r0, [pc, #204]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049d0:	f7ff ff2e 	bl	8004830 <LL_ADC_IsEnabled>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d047      	beq.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	6811      	ldr	r1, [r2, #0]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	6892      	ldr	r2, [r2, #8]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049fc:	e03a      	b.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a08:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	@ (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10e      	bne.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004a1e:	481b      	ldr	r0, [pc, #108]	@ (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a20:	f7ff ff06 	bl	8004830 <LL_ADC_IsEnabled>
 8004a24:	4604      	mov	r4, r0
 8004a26:	481a      	ldr	r0, [pc, #104]	@ (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a28:	f7ff ff02 	bl	8004830 <LL_ADC_IsEnabled>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4323      	orrs	r3, r4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e008      	b.n	8004a4e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004a3c:	4817      	ldr	r0, [pc, #92]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a3e:	f7ff fef7 	bl	8004830 <LL_ADC_IsEnabled>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a5e:	e009      	b.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004a72:	e000      	b.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a7e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	378c      	adds	r7, #140	@ 0x8c
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd90      	pop	{r4, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40022000 	.word	0x40022000
 8004a90:	40022100 	.word	0x40022100
 8004a94:	40022300 	.word	0x40022300
 8004a98:	58026300 	.word	0x58026300
 8004a9c:	58026000 	.word	0x58026000
 8004aa0:	fffff0e0 	.word	0xfffff0e0

08004aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ad2:	4a04      	ldr	r2, [pc, #16]	@ (8004ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	60d3      	str	r3, [r2, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00
 8004ae8:	05fa0000 	.word	0x05fa0000

08004aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af0:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <__NVIC_GetPriorityGrouping+0x18>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f003 0307 	and.w	r3, r3, #7
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db0b      	blt.n	8004b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	4907      	ldr	r1, [pc, #28]	@ (8004b40 <__NVIC_EnableIRQ+0x38>)
 8004b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2001      	movs	r0, #1
 8004b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e100 	.word	0xe000e100

08004b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	db0a      	blt.n	8004b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	490c      	ldr	r1, [pc, #48]	@ (8004b90 <__NVIC_SetPriority+0x4c>)
 8004b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b62:	0112      	lsls	r2, r2, #4
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	440b      	add	r3, r1
 8004b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b6c:	e00a      	b.n	8004b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	4908      	ldr	r1, [pc, #32]	@ (8004b94 <__NVIC_SetPriority+0x50>)
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	3b04      	subs	r3, #4
 8004b7c:	0112      	lsls	r2, r2, #4
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	440b      	add	r3, r1
 8004b82:	761a      	strb	r2, [r3, #24]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000e100 	.word	0xe000e100
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	@ 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f1c3 0307 	rsb	r3, r3, #7
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	bf28      	it	cs
 8004bb6:	2304      	movcs	r3, #4
 8004bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	2b06      	cmp	r3, #6
 8004bc0:	d902      	bls.n	8004bc8 <NVIC_EncodePriority+0x30>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3b03      	subs	r3, #3
 8004bc6:	e000      	b.n	8004bca <NVIC_EncodePriority+0x32>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	401a      	ands	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be0:	f04f 31ff 	mov.w	r1, #4294967295
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	43d9      	mvns	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf0:	4313      	orrs	r3, r2
         );
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3724      	adds	r7, #36	@ 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c10:	d301      	bcc.n	8004c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c12:	2301      	movs	r3, #1
 8004c14:	e00f      	b.n	8004c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c16:	4a0a      	ldr	r2, [pc, #40]	@ (8004c40 <SysTick_Config+0x40>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c1e:	210f      	movs	r1, #15
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	f7ff ff8e 	bl	8004b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c28:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <SysTick_Config+0x40>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c2e:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <SysTick_Config+0x40>)
 8004c30:	2207      	movs	r2, #7
 8004c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	e000e010 	.word	0xe000e010

08004c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff29 	bl	8004aa4 <__NVIC_SetPriorityGrouping>
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b086      	sub	sp, #24
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	4603      	mov	r3, r0
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c68:	f7ff ff40 	bl	8004aec <__NVIC_GetPriorityGrouping>
 8004c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	6978      	ldr	r0, [r7, #20]
 8004c74:	f7ff ff90 	bl	8004b98 <NVIC_EncodePriority>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff5f 	bl	8004b44 <__NVIC_SetPriority>
}
 8004c86:	bf00      	nop
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	4603      	mov	r3, r0
 8004c96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ff33 	bl	8004b08 <__NVIC_EnableIRQ>
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ffa4 	bl	8004c00 <SysTick_Config>
 8004cb8:	4603      	mov	r3, r0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ccc:	f7fd fdfc 	bl	80028c8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e312      	b.n	8005302 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a66      	ldr	r2, [pc, #408]	@ (8004e7c <HAL_DMA_Init+0x1b8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d04a      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a65      	ldr	r2, [pc, #404]	@ (8004e80 <HAL_DMA_Init+0x1bc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d045      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a63      	ldr	r2, [pc, #396]	@ (8004e84 <HAL_DMA_Init+0x1c0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d040      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a62      	ldr	r2, [pc, #392]	@ (8004e88 <HAL_DMA_Init+0x1c4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d03b      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a60      	ldr	r2, [pc, #384]	@ (8004e8c <HAL_DMA_Init+0x1c8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d036      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a5f      	ldr	r2, [pc, #380]	@ (8004e90 <HAL_DMA_Init+0x1cc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d031      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004e94 <HAL_DMA_Init+0x1d0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02c      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5c      	ldr	r2, [pc, #368]	@ (8004e98 <HAL_DMA_Init+0x1d4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d027      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5a      	ldr	r2, [pc, #360]	@ (8004e9c <HAL_DMA_Init+0x1d8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d022      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a59      	ldr	r2, [pc, #356]	@ (8004ea0 <HAL_DMA_Init+0x1dc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d01d      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a57      	ldr	r2, [pc, #348]	@ (8004ea4 <HAL_DMA_Init+0x1e0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d018      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a56      	ldr	r2, [pc, #344]	@ (8004ea8 <HAL_DMA_Init+0x1e4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a54      	ldr	r2, [pc, #336]	@ (8004eac <HAL_DMA_Init+0x1e8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a53      	ldr	r2, [pc, #332]	@ (8004eb0 <HAL_DMA_Init+0x1ec>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d009      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a51      	ldr	r2, [pc, #324]	@ (8004eb4 <HAL_DMA_Init+0x1f0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a50      	ldr	r2, [pc, #320]	@ (8004eb8 <HAL_DMA_Init+0x1f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d101      	bne.n	8004d80 <HAL_DMA_Init+0xbc>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <HAL_DMA_Init+0xbe>
 8004d80:	2300      	movs	r3, #0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 813c 	beq.w	8005000 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a37      	ldr	r2, [pc, #220]	@ (8004e7c <HAL_DMA_Init+0x1b8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04a      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a36      	ldr	r2, [pc, #216]	@ (8004e80 <HAL_DMA_Init+0x1bc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d045      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a34      	ldr	r2, [pc, #208]	@ (8004e84 <HAL_DMA_Init+0x1c0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d040      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a33      	ldr	r2, [pc, #204]	@ (8004e88 <HAL_DMA_Init+0x1c4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d03b      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a31      	ldr	r2, [pc, #196]	@ (8004e8c <HAL_DMA_Init+0x1c8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d036      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a30      	ldr	r2, [pc, #192]	@ (8004e90 <HAL_DMA_Init+0x1cc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d031      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004e94 <HAL_DMA_Init+0x1d0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02c      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e98 <HAL_DMA_Init+0x1d4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d027      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2b      	ldr	r2, [pc, #172]	@ (8004e9c <HAL_DMA_Init+0x1d8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d022      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea0 <HAL_DMA_Init+0x1dc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01d      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a28      	ldr	r2, [pc, #160]	@ (8004ea4 <HAL_DMA_Init+0x1e0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a27      	ldr	r2, [pc, #156]	@ (8004ea8 <HAL_DMA_Init+0x1e4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a25      	ldr	r2, [pc, #148]	@ (8004eac <HAL_DMA_Init+0x1e8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a24      	ldr	r2, [pc, #144]	@ (8004eb0 <HAL_DMA_Init+0x1ec>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a22      	ldr	r2, [pc, #136]	@ (8004eb4 <HAL_DMA_Init+0x1f0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	@ (8004eb8 <HAL_DMA_Init+0x1f4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <HAL_DMA_Init+0x186>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e007      	b.n	8004e5a <HAL_DMA_Init+0x196>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e5a:	e02f      	b.n	8004ebc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e5c:	f7fd fd34 	bl	80028c8 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d928      	bls.n	8004ebc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2203      	movs	r2, #3
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e242      	b.n	8005302 <HAL_DMA_Init+0x63e>
 8004e7c:	40020010 	.word	0x40020010
 8004e80:	40020028 	.word	0x40020028
 8004e84:	40020040 	.word	0x40020040
 8004e88:	40020058 	.word	0x40020058
 8004e8c:	40020070 	.word	0x40020070
 8004e90:	40020088 	.word	0x40020088
 8004e94:	400200a0 	.word	0x400200a0
 8004e98:	400200b8 	.word	0x400200b8
 8004e9c:	40020410 	.word	0x40020410
 8004ea0:	40020428 	.word	0x40020428
 8004ea4:	40020440 	.word	0x40020440
 8004ea8:	40020458 	.word	0x40020458
 8004eac:	40020470 	.word	0x40020470
 8004eb0:	40020488 	.word	0x40020488
 8004eb4:	400204a0 	.word	0x400204a0
 8004eb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1c8      	bne.n	8004e5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4b83      	ldr	r3, [pc, #524]	@ (80050e4 <HAL_DMA_Init+0x420>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ee2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d107      	bne.n	8004f20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b28      	cmp	r3, #40	@ 0x28
 8004f26:	d903      	bls.n	8004f30 <HAL_DMA_Init+0x26c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f2e:	d91f      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f36:	d903      	bls.n	8004f40 <HAL_DMA_Init+0x27c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b42      	cmp	r3, #66	@ 0x42
 8004f3e:	d917      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b46      	cmp	r3, #70	@ 0x46
 8004f46:	d903      	bls.n	8004f50 <HAL_DMA_Init+0x28c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b48      	cmp	r3, #72	@ 0x48
 8004f4e:	d90f      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f56:	d903      	bls.n	8004f60 <HAL_DMA_Init+0x29c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b52      	cmp	r3, #82	@ 0x52
 8004f5e:	d907      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b73      	cmp	r3, #115	@ 0x73
 8004f66:	d905      	bls.n	8004f74 <HAL_DMA_Init+0x2b0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b77      	cmp	r3, #119	@ 0x77
 8004f6e:	d801      	bhi.n	8004f74 <HAL_DMA_Init+0x2b0>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_DMA_Init+0x2b2>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f80:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0307 	bic.w	r3, r3, #7
 8004f98:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d117      	bne.n	8004fdc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f002 fb2e 	bl	8007620 <DMA_CheckFifoParam>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2240      	movs	r2, #64	@ 0x40
 8004fce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e192      	b.n	8005302 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f002 fa69 	bl	80074bc <DMA_CalcBaseAndBitshift>
 8004fea:	4603      	mov	r3, r0
 8004fec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	223f      	movs	r2, #63	@ 0x3f
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	609a      	str	r2, [r3, #8]
 8004ffe:	e0c8      	b.n	8005192 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a38      	ldr	r2, [pc, #224]	@ (80050e8 <HAL_DMA_Init+0x424>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a37      	ldr	r2, [pc, #220]	@ (80050ec <HAL_DMA_Init+0x428>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d01d      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a35      	ldr	r2, [pc, #212]	@ (80050f0 <HAL_DMA_Init+0x42c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d018      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a34      	ldr	r2, [pc, #208]	@ (80050f4 <HAL_DMA_Init+0x430>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a32      	ldr	r2, [pc, #200]	@ (80050f8 <HAL_DMA_Init+0x434>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a31      	ldr	r2, [pc, #196]	@ (80050fc <HAL_DMA_Init+0x438>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a2f      	ldr	r2, [pc, #188]	@ (8005100 <HAL_DMA_Init+0x43c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2e      	ldr	r2, [pc, #184]	@ (8005104 <HAL_DMA_Init+0x440>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_DMA_Init+0x390>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_DMA_Init+0x392>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8092 	beq.w	8005180 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a21      	ldr	r2, [pc, #132]	@ (80050e8 <HAL_DMA_Init+0x424>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d021      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a20      	ldr	r2, [pc, #128]	@ (80050ec <HAL_DMA_Init+0x428>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d01c      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1e      	ldr	r2, [pc, #120]	@ (80050f0 <HAL_DMA_Init+0x42c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d017      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <HAL_DMA_Init+0x430>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d012      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1b      	ldr	r2, [pc, #108]	@ (80050f8 <HAL_DMA_Init+0x434>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00d      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1a      	ldr	r2, [pc, #104]	@ (80050fc <HAL_DMA_Init+0x438>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d008      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <HAL_DMA_Init+0x43c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <HAL_DMA_Init+0x440>)
 80050a8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <HAL_DMA_Init+0x444>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d01c      	beq.n	800510c <HAL_DMA_Init+0x448>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b80      	cmp	r3, #128	@ 0x80
 80050d8:	d102      	bne.n	80050e0 <HAL_DMA_Init+0x41c>
 80050da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050de:	e016      	b.n	800510e <HAL_DMA_Init+0x44a>
 80050e0:	2300      	movs	r3, #0
 80050e2:	e014      	b.n	800510e <HAL_DMA_Init+0x44a>
 80050e4:	fe10803f 	.word	0xfe10803f
 80050e8:	58025408 	.word	0x58025408
 80050ec:	5802541c 	.word	0x5802541c
 80050f0:	58025430 	.word	0x58025430
 80050f4:	58025444 	.word	0x58025444
 80050f8:	58025458 	.word	0x58025458
 80050fc:	5802546c 	.word	0x5802546c
 8005100:	58025480 	.word	0x58025480
 8005104:	58025494 	.word	0x58025494
 8005108:	fffe000f 	.word	0xfffe000f
 800510c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800511c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800512c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800513c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	4b6e      	ldr	r3, [pc, #440]	@ (800530c <HAL_DMA_Init+0x648>)
 8005154:	4413      	add	r3, r2
 8005156:	4a6e      	ldr	r2, [pc, #440]	@ (8005310 <HAL_DMA_Init+0x64c>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f002 f9a9 	bl	80074bc <DMA_CalcBaseAndBitshift>
 800516a:	4603      	mov	r3, r0
 800516c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2201      	movs	r2, #1
 8005178:	409a      	lsls	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	e008      	b.n	8005192 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2240      	movs	r2, #64	@ 0x40
 8005184:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2203      	movs	r2, #3
 800518a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0b7      	b.n	8005302 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5f      	ldr	r2, [pc, #380]	@ (8005314 <HAL_DMA_Init+0x650>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d072      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005318 <HAL_DMA_Init+0x654>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d06d      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a5c      	ldr	r2, [pc, #368]	@ (800531c <HAL_DMA_Init+0x658>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d068      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005320 <HAL_DMA_Init+0x65c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d063      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a59      	ldr	r2, [pc, #356]	@ (8005324 <HAL_DMA_Init+0x660>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d05e      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a57      	ldr	r2, [pc, #348]	@ (8005328 <HAL_DMA_Init+0x664>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d059      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a56      	ldr	r2, [pc, #344]	@ (800532c <HAL_DMA_Init+0x668>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d054      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a54      	ldr	r2, [pc, #336]	@ (8005330 <HAL_DMA_Init+0x66c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04f      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a53      	ldr	r2, [pc, #332]	@ (8005334 <HAL_DMA_Init+0x670>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d04a      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a51      	ldr	r2, [pc, #324]	@ (8005338 <HAL_DMA_Init+0x674>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d045      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a50      	ldr	r2, [pc, #320]	@ (800533c <HAL_DMA_Init+0x678>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d040      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a4e      	ldr	r2, [pc, #312]	@ (8005340 <HAL_DMA_Init+0x67c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d03b      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a4d      	ldr	r2, [pc, #308]	@ (8005344 <HAL_DMA_Init+0x680>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d036      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a4b      	ldr	r2, [pc, #300]	@ (8005348 <HAL_DMA_Init+0x684>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d031      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a4a      	ldr	r2, [pc, #296]	@ (800534c <HAL_DMA_Init+0x688>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d02c      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a48      	ldr	r2, [pc, #288]	@ (8005350 <HAL_DMA_Init+0x68c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d027      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a47      	ldr	r2, [pc, #284]	@ (8005354 <HAL_DMA_Init+0x690>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d022      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a45      	ldr	r2, [pc, #276]	@ (8005358 <HAL_DMA_Init+0x694>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a44      	ldr	r2, [pc, #272]	@ (800535c <HAL_DMA_Init+0x698>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a42      	ldr	r2, [pc, #264]	@ (8005360 <HAL_DMA_Init+0x69c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a41      	ldr	r2, [pc, #260]	@ (8005364 <HAL_DMA_Init+0x6a0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a3f      	ldr	r2, [pc, #252]	@ (8005368 <HAL_DMA_Init+0x6a4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3e      	ldr	r2, [pc, #248]	@ (800536c <HAL_DMA_Init+0x6a8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_DMA_Init+0x5be>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a3c      	ldr	r2, [pc, #240]	@ (8005370 <HAL_DMA_Init+0x6ac>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_DMA_Init+0x5c2>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_DMA_Init+0x5c4>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d032      	beq.n	80052f2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f002 fa43 	bl	8007718 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	d102      	bne.n	80052a0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_DMA_Init+0x61c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d80c      	bhi.n	80052e0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f002 fac0 	bl	800784c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	e008      	b.n	80052f2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	a7fdabf8 	.word	0xa7fdabf8
 8005310:	cccccccd 	.word	0xcccccccd
 8005314:	40020010 	.word	0x40020010
 8005318:	40020028 	.word	0x40020028
 800531c:	40020040 	.word	0x40020040
 8005320:	40020058 	.word	0x40020058
 8005324:	40020070 	.word	0x40020070
 8005328:	40020088 	.word	0x40020088
 800532c:	400200a0 	.word	0x400200a0
 8005330:	400200b8 	.word	0x400200b8
 8005334:	40020410 	.word	0x40020410
 8005338:	40020428 	.word	0x40020428
 800533c:	40020440 	.word	0x40020440
 8005340:	40020458 	.word	0x40020458
 8005344:	40020470 	.word	0x40020470
 8005348:	40020488 	.word	0x40020488
 800534c:	400204a0 	.word	0x400204a0
 8005350:	400204b8 	.word	0x400204b8
 8005354:	58025408 	.word	0x58025408
 8005358:	5802541c 	.word	0x5802541c
 800535c:	58025430 	.word	0x58025430
 8005360:	58025444 	.word	0x58025444
 8005364:	58025458 	.word	0x58025458
 8005368:	5802546c 	.word	0x5802546c
 800536c:	58025480 	.word	0x58025480
 8005370:	58025494 	.word	0x58025494

08005374 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e226      	b.n	80057de <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_DMA_Start_IT+0x2a>
 800539a:	2302      	movs	r3, #2
 800539c:	e21f      	b.n	80057de <HAL_DMA_Start_IT+0x46a>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	f040 820a 	bne.w	80057c8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a68      	ldr	r2, [pc, #416]	@ (8005568 <HAL_DMA_Start_IT+0x1f4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d04a      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a66      	ldr	r2, [pc, #408]	@ (800556c <HAL_DMA_Start_IT+0x1f8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d045      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a65      	ldr	r2, [pc, #404]	@ (8005570 <HAL_DMA_Start_IT+0x1fc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d040      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a63      	ldr	r2, [pc, #396]	@ (8005574 <HAL_DMA_Start_IT+0x200>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d03b      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a62      	ldr	r2, [pc, #392]	@ (8005578 <HAL_DMA_Start_IT+0x204>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d036      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a60      	ldr	r2, [pc, #384]	@ (800557c <HAL_DMA_Start_IT+0x208>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d031      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5f      	ldr	r2, [pc, #380]	@ (8005580 <HAL_DMA_Start_IT+0x20c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d02c      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5d      	ldr	r2, [pc, #372]	@ (8005584 <HAL_DMA_Start_IT+0x210>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d027      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a5c      	ldr	r2, [pc, #368]	@ (8005588 <HAL_DMA_Start_IT+0x214>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a5a      	ldr	r2, [pc, #360]	@ (800558c <HAL_DMA_Start_IT+0x218>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01d      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a59      	ldr	r2, [pc, #356]	@ (8005590 <HAL_DMA_Start_IT+0x21c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a57      	ldr	r2, [pc, #348]	@ (8005594 <HAL_DMA_Start_IT+0x220>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a56      	ldr	r2, [pc, #344]	@ (8005598 <HAL_DMA_Start_IT+0x224>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a54      	ldr	r2, [pc, #336]	@ (800559c <HAL_DMA_Start_IT+0x228>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a53      	ldr	r2, [pc, #332]	@ (80055a0 <HAL_DMA_Start_IT+0x22c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_DMA_Start_IT+0xee>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a51      	ldr	r2, [pc, #324]	@ (80055a4 <HAL_DMA_Start_IT+0x230>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <HAL_DMA_Start_IT+0x100>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e007      	b.n	8005484 <HAL_DMA_Start_IT+0x110>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 fe6a 	bl	8007164 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a34      	ldr	r2, [pc, #208]	@ (8005568 <HAL_DMA_Start_IT+0x1f4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d04a      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a33      	ldr	r2, [pc, #204]	@ (800556c <HAL_DMA_Start_IT+0x1f8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d045      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a31      	ldr	r2, [pc, #196]	@ (8005570 <HAL_DMA_Start_IT+0x1fc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d040      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a30      	ldr	r2, [pc, #192]	@ (8005574 <HAL_DMA_Start_IT+0x200>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d03b      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005578 <HAL_DMA_Start_IT+0x204>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d036      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a2d      	ldr	r2, [pc, #180]	@ (800557c <HAL_DMA_Start_IT+0x208>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d031      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005580 <HAL_DMA_Start_IT+0x20c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02c      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2a      	ldr	r2, [pc, #168]	@ (8005584 <HAL_DMA_Start_IT+0x210>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d027      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a28      	ldr	r2, [pc, #160]	@ (8005588 <HAL_DMA_Start_IT+0x214>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a27      	ldr	r2, [pc, #156]	@ (800558c <HAL_DMA_Start_IT+0x218>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d01d      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a25      	ldr	r2, [pc, #148]	@ (8005590 <HAL_DMA_Start_IT+0x21c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a24      	ldr	r2, [pc, #144]	@ (8005594 <HAL_DMA_Start_IT+0x220>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a22      	ldr	r2, [pc, #136]	@ (8005598 <HAL_DMA_Start_IT+0x224>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a21      	ldr	r2, [pc, #132]	@ (800559c <HAL_DMA_Start_IT+0x228>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1f      	ldr	r2, [pc, #124]	@ (80055a0 <HAL_DMA_Start_IT+0x22c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_DMA_Start_IT+0x1bc>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1e      	ldr	r2, [pc, #120]	@ (80055a4 <HAL_DMA_Start_IT+0x230>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d101      	bne.n	8005534 <HAL_DMA_Start_IT+0x1c0>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_DMA_Start_IT+0x1c2>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d036      	beq.n	80055a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f023 021e 	bic.w	r2, r3, #30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0216 	orr.w	r2, r2, #22
 800554c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d03e      	beq.n	80055d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0208 	orr.w	r2, r2, #8
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e035      	b.n	80055d4 <HAL_DMA_Start_IT+0x260>
 8005568:	40020010 	.word	0x40020010
 800556c:	40020028 	.word	0x40020028
 8005570:	40020040 	.word	0x40020040
 8005574:	40020058 	.word	0x40020058
 8005578:	40020070 	.word	0x40020070
 800557c:	40020088 	.word	0x40020088
 8005580:	400200a0 	.word	0x400200a0
 8005584:	400200b8 	.word	0x400200b8
 8005588:	40020410 	.word	0x40020410
 800558c:	40020428 	.word	0x40020428
 8005590:	40020440 	.word	0x40020440
 8005594:	40020458 	.word	0x40020458
 8005598:	40020470 	.word	0x40020470
 800559c:	40020488 	.word	0x40020488
 80055a0:	400204a0 	.word	0x400204a0
 80055a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 020e 	bic.w	r2, r3, #14
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 020a 	orr.w	r2, r2, #10
 80055ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0204 	orr.w	r2, r2, #4
 80055d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a83      	ldr	r2, [pc, #524]	@ (80057e8 <HAL_DMA_Start_IT+0x474>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d072      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a82      	ldr	r2, [pc, #520]	@ (80057ec <HAL_DMA_Start_IT+0x478>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d06d      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a80      	ldr	r2, [pc, #512]	@ (80057f0 <HAL_DMA_Start_IT+0x47c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d068      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a7f      	ldr	r2, [pc, #508]	@ (80057f4 <HAL_DMA_Start_IT+0x480>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d063      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a7d      	ldr	r2, [pc, #500]	@ (80057f8 <HAL_DMA_Start_IT+0x484>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d05e      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7c      	ldr	r2, [pc, #496]	@ (80057fc <HAL_DMA_Start_IT+0x488>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d059      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a7a      	ldr	r2, [pc, #488]	@ (8005800 <HAL_DMA_Start_IT+0x48c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d054      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a79      	ldr	r2, [pc, #484]	@ (8005804 <HAL_DMA_Start_IT+0x490>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d04f      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a77      	ldr	r2, [pc, #476]	@ (8005808 <HAL_DMA_Start_IT+0x494>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d04a      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a76      	ldr	r2, [pc, #472]	@ (800580c <HAL_DMA_Start_IT+0x498>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d045      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a74      	ldr	r2, [pc, #464]	@ (8005810 <HAL_DMA_Start_IT+0x49c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d040      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a73      	ldr	r2, [pc, #460]	@ (8005814 <HAL_DMA_Start_IT+0x4a0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d03b      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a71      	ldr	r2, [pc, #452]	@ (8005818 <HAL_DMA_Start_IT+0x4a4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d036      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a70      	ldr	r2, [pc, #448]	@ (800581c <HAL_DMA_Start_IT+0x4a8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d031      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a6e      	ldr	r2, [pc, #440]	@ (8005820 <HAL_DMA_Start_IT+0x4ac>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d02c      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a6d      	ldr	r2, [pc, #436]	@ (8005824 <HAL_DMA_Start_IT+0x4b0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d027      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a6b      	ldr	r2, [pc, #428]	@ (8005828 <HAL_DMA_Start_IT+0x4b4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d022      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a6a      	ldr	r2, [pc, #424]	@ (800582c <HAL_DMA_Start_IT+0x4b8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d01d      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a68      	ldr	r2, [pc, #416]	@ (8005830 <HAL_DMA_Start_IT+0x4bc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d018      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a67      	ldr	r2, [pc, #412]	@ (8005834 <HAL_DMA_Start_IT+0x4c0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a65      	ldr	r2, [pc, #404]	@ (8005838 <HAL_DMA_Start_IT+0x4c4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a64      	ldr	r2, [pc, #400]	@ (800583c <HAL_DMA_Start_IT+0x4c8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a62      	ldr	r2, [pc, #392]	@ (8005840 <HAL_DMA_Start_IT+0x4cc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_DMA_Start_IT+0x350>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a61      	ldr	r2, [pc, #388]	@ (8005844 <HAL_DMA_Start_IT+0x4d0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d101      	bne.n	80056c8 <HAL_DMA_Start_IT+0x354>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <HAL_DMA_Start_IT+0x356>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01a      	beq.n	8005704 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005702:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a37      	ldr	r2, [pc, #220]	@ (80057e8 <HAL_DMA_Start_IT+0x474>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d04a      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a36      	ldr	r2, [pc, #216]	@ (80057ec <HAL_DMA_Start_IT+0x478>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d045      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a34      	ldr	r2, [pc, #208]	@ (80057f0 <HAL_DMA_Start_IT+0x47c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d040      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a33      	ldr	r2, [pc, #204]	@ (80057f4 <HAL_DMA_Start_IT+0x480>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d03b      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a31      	ldr	r2, [pc, #196]	@ (80057f8 <HAL_DMA_Start_IT+0x484>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d036      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a30      	ldr	r2, [pc, #192]	@ (80057fc <HAL_DMA_Start_IT+0x488>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d031      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2e      	ldr	r2, [pc, #184]	@ (8005800 <HAL_DMA_Start_IT+0x48c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d02c      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a2d      	ldr	r2, [pc, #180]	@ (8005804 <HAL_DMA_Start_IT+0x490>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d027      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2b      	ldr	r2, [pc, #172]	@ (8005808 <HAL_DMA_Start_IT+0x494>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2a      	ldr	r2, [pc, #168]	@ (800580c <HAL_DMA_Start_IT+0x498>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d01d      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a28      	ldr	r2, [pc, #160]	@ (8005810 <HAL_DMA_Start_IT+0x49c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a27      	ldr	r2, [pc, #156]	@ (8005814 <HAL_DMA_Start_IT+0x4a0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a25      	ldr	r2, [pc, #148]	@ (8005818 <HAL_DMA_Start_IT+0x4a4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a24      	ldr	r2, [pc, #144]	@ (800581c <HAL_DMA_Start_IT+0x4a8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <HAL_DMA_Start_IT+0x4ac>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_DMA_Start_IT+0x430>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a21      	ldr	r2, [pc, #132]	@ (8005824 <HAL_DMA_Start_IT+0x4b0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <HAL_DMA_Start_IT+0x442>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e012      	b.n	80057dc <HAL_DMA_Start_IT+0x468>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e009      	b.n	80057dc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40020010 	.word	0x40020010
 80057ec:	40020028 	.word	0x40020028
 80057f0:	40020040 	.word	0x40020040
 80057f4:	40020058 	.word	0x40020058
 80057f8:	40020070 	.word	0x40020070
 80057fc:	40020088 	.word	0x40020088
 8005800:	400200a0 	.word	0x400200a0
 8005804:	400200b8 	.word	0x400200b8
 8005808:	40020410 	.word	0x40020410
 800580c:	40020428 	.word	0x40020428
 8005810:	40020440 	.word	0x40020440
 8005814:	40020458 	.word	0x40020458
 8005818:	40020470 	.word	0x40020470
 800581c:	40020488 	.word	0x40020488
 8005820:	400204a0 	.word	0x400204a0
 8005824:	400204b8 	.word	0x400204b8
 8005828:	58025408 	.word	0x58025408
 800582c:	5802541c 	.word	0x5802541c
 8005830:	58025430 	.word	0x58025430
 8005834:	58025444 	.word	0x58025444
 8005838:	58025458 	.word	0x58025458
 800583c:	5802546c 	.word	0x5802546c
 8005840:	58025480 	.word	0x58025480
 8005844:	58025494 	.word	0x58025494

08005848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005850:	f7fd f83a 	bl	80028c8 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e2dc      	b.n	8005e1a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d008      	beq.n	800587e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2280      	movs	r2, #128	@ 0x80
 8005870:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e2cd      	b.n	8005e1a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a76      	ldr	r2, [pc, #472]	@ (8005a5c <HAL_DMA_Abort+0x214>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d04a      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a74      	ldr	r2, [pc, #464]	@ (8005a60 <HAL_DMA_Abort+0x218>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d045      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a73      	ldr	r2, [pc, #460]	@ (8005a64 <HAL_DMA_Abort+0x21c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d040      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a71      	ldr	r2, [pc, #452]	@ (8005a68 <HAL_DMA_Abort+0x220>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d03b      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a70      	ldr	r2, [pc, #448]	@ (8005a6c <HAL_DMA_Abort+0x224>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d036      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005a70 <HAL_DMA_Abort+0x228>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d031      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a6d      	ldr	r2, [pc, #436]	@ (8005a74 <HAL_DMA_Abort+0x22c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d02c      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6b      	ldr	r2, [pc, #428]	@ (8005a78 <HAL_DMA_Abort+0x230>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d027      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a6a      	ldr	r2, [pc, #424]	@ (8005a7c <HAL_DMA_Abort+0x234>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d022      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a68      	ldr	r2, [pc, #416]	@ (8005a80 <HAL_DMA_Abort+0x238>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01d      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a67      	ldr	r2, [pc, #412]	@ (8005a84 <HAL_DMA_Abort+0x23c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d018      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a65      	ldr	r2, [pc, #404]	@ (8005a88 <HAL_DMA_Abort+0x240>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a64      	ldr	r2, [pc, #400]	@ (8005a8c <HAL_DMA_Abort+0x244>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a62      	ldr	r2, [pc, #392]	@ (8005a90 <HAL_DMA_Abort+0x248>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a61      	ldr	r2, [pc, #388]	@ (8005a94 <HAL_DMA_Abort+0x24c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_DMA_Abort+0xd6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a5f      	ldr	r2, [pc, #380]	@ (8005a98 <HAL_DMA_Abort+0x250>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <HAL_DMA_Abort+0xda>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <HAL_DMA_Abort+0xdc>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d013      	beq.n	8005950 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 021e 	bic.w	r2, r2, #30
 8005936:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005946:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	e00a      	b.n	8005966 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 020e 	bic.w	r2, r2, #14
 800595e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a3c      	ldr	r2, [pc, #240]	@ (8005a5c <HAL_DMA_Abort+0x214>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d072      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a3a      	ldr	r2, [pc, #232]	@ (8005a60 <HAL_DMA_Abort+0x218>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d06d      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a39      	ldr	r2, [pc, #228]	@ (8005a64 <HAL_DMA_Abort+0x21c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d068      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a37      	ldr	r2, [pc, #220]	@ (8005a68 <HAL_DMA_Abort+0x220>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d063      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a36      	ldr	r2, [pc, #216]	@ (8005a6c <HAL_DMA_Abort+0x224>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d05e      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a34      	ldr	r2, [pc, #208]	@ (8005a70 <HAL_DMA_Abort+0x228>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d059      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a33      	ldr	r2, [pc, #204]	@ (8005a74 <HAL_DMA_Abort+0x22c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d054      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a31      	ldr	r2, [pc, #196]	@ (8005a78 <HAL_DMA_Abort+0x230>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d04f      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a30      	ldr	r2, [pc, #192]	@ (8005a7c <HAL_DMA_Abort+0x234>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d04a      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a80 <HAL_DMA_Abort+0x238>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d045      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005a84 <HAL_DMA_Abort+0x23c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d040      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a88 <HAL_DMA_Abort+0x240>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d03b      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a8c <HAL_DMA_Abort+0x244>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d036      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a28      	ldr	r2, [pc, #160]	@ (8005a90 <HAL_DMA_Abort+0x248>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d031      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a27      	ldr	r2, [pc, #156]	@ (8005a94 <HAL_DMA_Abort+0x24c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d02c      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a25      	ldr	r2, [pc, #148]	@ (8005a98 <HAL_DMA_Abort+0x250>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d027      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a24      	ldr	r2, [pc, #144]	@ (8005a9c <HAL_DMA_Abort+0x254>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d022      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a22      	ldr	r2, [pc, #136]	@ (8005aa0 <HAL_DMA_Abort+0x258>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01d      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a21      	ldr	r2, [pc, #132]	@ (8005aa4 <HAL_DMA_Abort+0x25c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d018      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa8 <HAL_DMA_Abort+0x260>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1e      	ldr	r2, [pc, #120]	@ (8005aac <HAL_DMA_Abort+0x264>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00e      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab0 <HAL_DMA_Abort+0x268>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d009      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab4 <HAL_DMA_Abort+0x26c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <HAL_DMA_Abort+0x20e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <HAL_DMA_Abort+0x270>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d132      	bne.n	8005abc <HAL_DMA_Abort+0x274>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e031      	b.n	8005abe <HAL_DMA_Abort+0x276>
 8005a5a:	bf00      	nop
 8005a5c:	40020010 	.word	0x40020010
 8005a60:	40020028 	.word	0x40020028
 8005a64:	40020040 	.word	0x40020040
 8005a68:	40020058 	.word	0x40020058
 8005a6c:	40020070 	.word	0x40020070
 8005a70:	40020088 	.word	0x40020088
 8005a74:	400200a0 	.word	0x400200a0
 8005a78:	400200b8 	.word	0x400200b8
 8005a7c:	40020410 	.word	0x40020410
 8005a80:	40020428 	.word	0x40020428
 8005a84:	40020440 	.word	0x40020440
 8005a88:	40020458 	.word	0x40020458
 8005a8c:	40020470 	.word	0x40020470
 8005a90:	40020488 	.word	0x40020488
 8005a94:	400204a0 	.word	0x400204a0
 8005a98:	400204b8 	.word	0x400204b8
 8005a9c:	58025408 	.word	0x58025408
 8005aa0:	5802541c 	.word	0x5802541c
 8005aa4:	58025430 	.word	0x58025430
 8005aa8:	58025444 	.word	0x58025444
 8005aac:	58025458 	.word	0x58025458
 8005ab0:	5802546c 	.word	0x5802546c
 8005ab4:	58025480 	.word	0x58025480
 8005ab8:	58025494 	.word	0x58025494
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ad0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8005c8c <HAL_DMA_Abort+0x444>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d04a      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8005c90 <HAL_DMA_Abort+0x448>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d045      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6a      	ldr	r2, [pc, #424]	@ (8005c94 <HAL_DMA_Abort+0x44c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d040      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a68      	ldr	r2, [pc, #416]	@ (8005c98 <HAL_DMA_Abort+0x450>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d03b      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a67      	ldr	r2, [pc, #412]	@ (8005c9c <HAL_DMA_Abort+0x454>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d036      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a65      	ldr	r2, [pc, #404]	@ (8005ca0 <HAL_DMA_Abort+0x458>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d031      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a64      	ldr	r2, [pc, #400]	@ (8005ca4 <HAL_DMA_Abort+0x45c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d02c      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a62      	ldr	r2, [pc, #392]	@ (8005ca8 <HAL_DMA_Abort+0x460>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d027      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a61      	ldr	r2, [pc, #388]	@ (8005cac <HAL_DMA_Abort+0x464>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d022      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5f      	ldr	r2, [pc, #380]	@ (8005cb0 <HAL_DMA_Abort+0x468>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01d      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb4 <HAL_DMA_Abort+0x46c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d018      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a5c      	ldr	r2, [pc, #368]	@ (8005cb8 <HAL_DMA_Abort+0x470>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5b      	ldr	r2, [pc, #364]	@ (8005cbc <HAL_DMA_Abort+0x474>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a59      	ldr	r2, [pc, #356]	@ (8005cc0 <HAL_DMA_Abort+0x478>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a58      	ldr	r2, [pc, #352]	@ (8005cc4 <HAL_DMA_Abort+0x47c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_DMA_Abort+0x32a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a56      	ldr	r2, [pc, #344]	@ (8005cc8 <HAL_DMA_Abort+0x480>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <HAL_DMA_Abort+0x33c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e007      	b.n	8005b94 <HAL_DMA_Abort+0x34c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b94:	e013      	b.n	8005bbe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b96:	f7fc fe97 	bl	80028c8 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d90c      	bls.n	8005bbe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2203      	movs	r2, #3
 8005bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e12d      	b.n	8005e1a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2f      	ldr	r2, [pc, #188]	@ (8005c8c <HAL_DMA_Abort+0x444>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d04a      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c90 <HAL_DMA_Abort+0x448>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d045      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c94 <HAL_DMA_Abort+0x44c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d040      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2a      	ldr	r2, [pc, #168]	@ (8005c98 <HAL_DMA_Abort+0x450>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d03b      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a29      	ldr	r2, [pc, #164]	@ (8005c9c <HAL_DMA_Abort+0x454>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d036      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a27      	ldr	r2, [pc, #156]	@ (8005ca0 <HAL_DMA_Abort+0x458>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d031      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a26      	ldr	r2, [pc, #152]	@ (8005ca4 <HAL_DMA_Abort+0x45c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d02c      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a24      	ldr	r2, [pc, #144]	@ (8005ca8 <HAL_DMA_Abort+0x460>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d027      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a23      	ldr	r2, [pc, #140]	@ (8005cac <HAL_DMA_Abort+0x464>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d022      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a21      	ldr	r2, [pc, #132]	@ (8005cb0 <HAL_DMA_Abort+0x468>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01d      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a20      	ldr	r2, [pc, #128]	@ (8005cb4 <HAL_DMA_Abort+0x46c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d018      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb8 <HAL_DMA_Abort+0x470>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_DMA_Abort+0x474>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00e      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc0 <HAL_DMA_Abort+0x478>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d009      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc4 <HAL_DMA_Abort+0x47c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_DMA_Abort+0x422>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <HAL_DMA_Abort+0x480>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_DMA_Abort+0x426>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_DMA_Abort+0x428>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02b      	beq.n	8005ccc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	223f      	movs	r2, #63	@ 0x3f
 8005c84:	409a      	lsls	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	609a      	str	r2, [r3, #8]
 8005c8a:	e02a      	b.n	8005ce2 <HAL_DMA_Abort+0x49a>
 8005c8c:	40020010 	.word	0x40020010
 8005c90:	40020028 	.word	0x40020028
 8005c94:	40020040 	.word	0x40020040
 8005c98:	40020058 	.word	0x40020058
 8005c9c:	40020070 	.word	0x40020070
 8005ca0:	40020088 	.word	0x40020088
 8005ca4:	400200a0 	.word	0x400200a0
 8005ca8:	400200b8 	.word	0x400200b8
 8005cac:	40020410 	.word	0x40020410
 8005cb0:	40020428 	.word	0x40020428
 8005cb4:	40020440 	.word	0x40020440
 8005cb8:	40020458 	.word	0x40020458
 8005cbc:	40020470 	.word	0x40020470
 8005cc0:	40020488 	.word	0x40020488
 8005cc4:	400204a0 	.word	0x400204a0
 8005cc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2201      	movs	r2, #1
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a4f      	ldr	r2, [pc, #316]	@ (8005e24 <HAL_DMA_Abort+0x5dc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d072      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8005e28 <HAL_DMA_Abort+0x5e0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d06d      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8005e2c <HAL_DMA_Abort+0x5e4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d068      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a4a      	ldr	r2, [pc, #296]	@ (8005e30 <HAL_DMA_Abort+0x5e8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d063      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a49      	ldr	r2, [pc, #292]	@ (8005e34 <HAL_DMA_Abort+0x5ec>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d05e      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a47      	ldr	r2, [pc, #284]	@ (8005e38 <HAL_DMA_Abort+0x5f0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d059      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a46      	ldr	r2, [pc, #280]	@ (8005e3c <HAL_DMA_Abort+0x5f4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d054      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a44      	ldr	r2, [pc, #272]	@ (8005e40 <HAL_DMA_Abort+0x5f8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d04f      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a43      	ldr	r2, [pc, #268]	@ (8005e44 <HAL_DMA_Abort+0x5fc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d04a      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a41      	ldr	r2, [pc, #260]	@ (8005e48 <HAL_DMA_Abort+0x600>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d045      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a40      	ldr	r2, [pc, #256]	@ (8005e4c <HAL_DMA_Abort+0x604>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d040      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a3e      	ldr	r2, [pc, #248]	@ (8005e50 <HAL_DMA_Abort+0x608>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d03b      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8005e54 <HAL_DMA_Abort+0x60c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d036      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a3b      	ldr	r2, [pc, #236]	@ (8005e58 <HAL_DMA_Abort+0x610>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d031      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a3a      	ldr	r2, [pc, #232]	@ (8005e5c <HAL_DMA_Abort+0x614>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d02c      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a38      	ldr	r2, [pc, #224]	@ (8005e60 <HAL_DMA_Abort+0x618>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d027      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a37      	ldr	r2, [pc, #220]	@ (8005e64 <HAL_DMA_Abort+0x61c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d022      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a35      	ldr	r2, [pc, #212]	@ (8005e68 <HAL_DMA_Abort+0x620>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01d      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a34      	ldr	r2, [pc, #208]	@ (8005e6c <HAL_DMA_Abort+0x624>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d018      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a32      	ldr	r2, [pc, #200]	@ (8005e70 <HAL_DMA_Abort+0x628>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a31      	ldr	r2, [pc, #196]	@ (8005e74 <HAL_DMA_Abort+0x62c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00e      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2f      	ldr	r2, [pc, #188]	@ (8005e78 <HAL_DMA_Abort+0x630>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d009      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e7c <HAL_DMA_Abort+0x634>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_DMA_Abort+0x58a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8005e80 <HAL_DMA_Abort+0x638>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_DMA_Abort+0x58e>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <HAL_DMA_Abort+0x590>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005de4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e06:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40020010 	.word	0x40020010
 8005e28:	40020028 	.word	0x40020028
 8005e2c:	40020040 	.word	0x40020040
 8005e30:	40020058 	.word	0x40020058
 8005e34:	40020070 	.word	0x40020070
 8005e38:	40020088 	.word	0x40020088
 8005e3c:	400200a0 	.word	0x400200a0
 8005e40:	400200b8 	.word	0x400200b8
 8005e44:	40020410 	.word	0x40020410
 8005e48:	40020428 	.word	0x40020428
 8005e4c:	40020440 	.word	0x40020440
 8005e50:	40020458 	.word	0x40020458
 8005e54:	40020470 	.word	0x40020470
 8005e58:	40020488 	.word	0x40020488
 8005e5c:	400204a0 	.word	0x400204a0
 8005e60:	400204b8 	.word	0x400204b8
 8005e64:	58025408 	.word	0x58025408
 8005e68:	5802541c 	.word	0x5802541c
 8005e6c:	58025430 	.word	0x58025430
 8005e70:	58025444 	.word	0x58025444
 8005e74:	58025458 	.word	0x58025458
 8005e78:	5802546c 	.word	0x5802546c
 8005e7c:	58025480 	.word	0x58025480
 8005e80:	58025494 	.word	0x58025494

08005e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e237      	b.n	8006306 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d004      	beq.n	8005eac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2280      	movs	r2, #128	@ 0x80
 8005ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e22c      	b.n	8006306 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8006024 <HAL_DMA_Abort_IT+0x1a0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04a      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a5b      	ldr	r2, [pc, #364]	@ (8006028 <HAL_DMA_Abort_IT+0x1a4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d045      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a59      	ldr	r2, [pc, #356]	@ (800602c <HAL_DMA_Abort_IT+0x1a8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d040      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a58      	ldr	r2, [pc, #352]	@ (8006030 <HAL_DMA_Abort_IT+0x1ac>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d03b      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a56      	ldr	r2, [pc, #344]	@ (8006034 <HAL_DMA_Abort_IT+0x1b0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d036      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a55      	ldr	r2, [pc, #340]	@ (8006038 <HAL_DMA_Abort_IT+0x1b4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d031      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a53      	ldr	r2, [pc, #332]	@ (800603c <HAL_DMA_Abort_IT+0x1b8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02c      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a52      	ldr	r2, [pc, #328]	@ (8006040 <HAL_DMA_Abort_IT+0x1bc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d027      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a50      	ldr	r2, [pc, #320]	@ (8006044 <HAL_DMA_Abort_IT+0x1c0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a4f      	ldr	r2, [pc, #316]	@ (8006048 <HAL_DMA_Abort_IT+0x1c4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a4d      	ldr	r2, [pc, #308]	@ (800604c <HAL_DMA_Abort_IT+0x1c8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006050 <HAL_DMA_Abort_IT+0x1cc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a4a      	ldr	r2, [pc, #296]	@ (8006054 <HAL_DMA_Abort_IT+0x1d0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a49      	ldr	r2, [pc, #292]	@ (8006058 <HAL_DMA_Abort_IT+0x1d4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a47      	ldr	r2, [pc, #284]	@ (800605c <HAL_DMA_Abort_IT+0x1d8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_Abort_IT+0xc8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a46      	ldr	r2, [pc, #280]	@ (8006060 <HAL_DMA_Abort_IT+0x1dc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d101      	bne.n	8005f50 <HAL_DMA_Abort_IT+0xcc>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <HAL_DMA_Abort_IT+0xce>
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8086 	beq.w	8006064 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2f      	ldr	r2, [pc, #188]	@ (8006024 <HAL_DMA_Abort_IT+0x1a0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d04a      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006028 <HAL_DMA_Abort_IT+0x1a4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d045      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2c      	ldr	r2, [pc, #176]	@ (800602c <HAL_DMA_Abort_IT+0x1a8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d040      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a2b      	ldr	r2, [pc, #172]	@ (8006030 <HAL_DMA_Abort_IT+0x1ac>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d03b      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a29      	ldr	r2, [pc, #164]	@ (8006034 <HAL_DMA_Abort_IT+0x1b0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d036      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a28      	ldr	r2, [pc, #160]	@ (8006038 <HAL_DMA_Abort_IT+0x1b4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d031      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a26      	ldr	r2, [pc, #152]	@ (800603c <HAL_DMA_Abort_IT+0x1b8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d02c      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a25      	ldr	r2, [pc, #148]	@ (8006040 <HAL_DMA_Abort_IT+0x1bc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d027      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a23      	ldr	r2, [pc, #140]	@ (8006044 <HAL_DMA_Abort_IT+0x1c0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d022      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a22      	ldr	r2, [pc, #136]	@ (8006048 <HAL_DMA_Abort_IT+0x1c4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d01d      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a20      	ldr	r2, [pc, #128]	@ (800604c <HAL_DMA_Abort_IT+0x1c8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d018      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006050 <HAL_DMA_Abort_IT+0x1cc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006054 <HAL_DMA_Abort_IT+0x1d0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00e      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8006058 <HAL_DMA_Abort_IT+0x1d4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d009      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800605c <HAL_DMA_Abort_IT+0x1d8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_DMA_Abort_IT+0x17c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a19      	ldr	r2, [pc, #100]	@ (8006060 <HAL_DMA_Abort_IT+0x1dc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <HAL_DMA_Abort_IT+0x18e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e178      	b.n	8006304 <HAL_DMA_Abort_IT+0x480>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e16f      	b.n	8006304 <HAL_DMA_Abort_IT+0x480>
 8006024:	40020010 	.word	0x40020010
 8006028:	40020028 	.word	0x40020028
 800602c:	40020040 	.word	0x40020040
 8006030:	40020058 	.word	0x40020058
 8006034:	40020070 	.word	0x40020070
 8006038:	40020088 	.word	0x40020088
 800603c:	400200a0 	.word	0x400200a0
 8006040:	400200b8 	.word	0x400200b8
 8006044:	40020410 	.word	0x40020410
 8006048:	40020428 	.word	0x40020428
 800604c:	40020440 	.word	0x40020440
 8006050:	40020458 	.word	0x40020458
 8006054:	40020470 	.word	0x40020470
 8006058:	40020488 	.word	0x40020488
 800605c:	400204a0 	.word	0x400204a0
 8006060:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 020e 	bic.w	r2, r2, #14
 8006072:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6c      	ldr	r2, [pc, #432]	@ (800622c <HAL_DMA_Abort_IT+0x3a8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d04a      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6b      	ldr	r2, [pc, #428]	@ (8006230 <HAL_DMA_Abort_IT+0x3ac>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d045      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a69      	ldr	r2, [pc, #420]	@ (8006234 <HAL_DMA_Abort_IT+0x3b0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d040      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a68      	ldr	r2, [pc, #416]	@ (8006238 <HAL_DMA_Abort_IT+0x3b4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d03b      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a66      	ldr	r2, [pc, #408]	@ (800623c <HAL_DMA_Abort_IT+0x3b8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d036      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a65      	ldr	r2, [pc, #404]	@ (8006240 <HAL_DMA_Abort_IT+0x3bc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d031      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a63      	ldr	r2, [pc, #396]	@ (8006244 <HAL_DMA_Abort_IT+0x3c0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02c      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a62      	ldr	r2, [pc, #392]	@ (8006248 <HAL_DMA_Abort_IT+0x3c4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d027      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a60      	ldr	r2, [pc, #384]	@ (800624c <HAL_DMA_Abort_IT+0x3c8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d022      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a5f      	ldr	r2, [pc, #380]	@ (8006250 <HAL_DMA_Abort_IT+0x3cc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01d      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006254 <HAL_DMA_Abort_IT+0x3d0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a5c      	ldr	r2, [pc, #368]	@ (8006258 <HAL_DMA_Abort_IT+0x3d4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a5a      	ldr	r2, [pc, #360]	@ (800625c <HAL_DMA_Abort_IT+0x3d8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a59      	ldr	r2, [pc, #356]	@ (8006260 <HAL_DMA_Abort_IT+0x3dc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a57      	ldr	r2, [pc, #348]	@ (8006264 <HAL_DMA_Abort_IT+0x3e0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_DMA_Abort_IT+0x290>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a56      	ldr	r2, [pc, #344]	@ (8006268 <HAL_DMA_Abort_IT+0x3e4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d108      	bne.n	8006126 <HAL_DMA_Abort_IT+0x2a2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e007      	b.n	8006136 <HAL_DMA_Abort_IT+0x2b2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a3c      	ldr	r2, [pc, #240]	@ (800622c <HAL_DMA_Abort_IT+0x3a8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d072      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3a      	ldr	r2, [pc, #232]	@ (8006230 <HAL_DMA_Abort_IT+0x3ac>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d06d      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a39      	ldr	r2, [pc, #228]	@ (8006234 <HAL_DMA_Abort_IT+0x3b0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d068      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a37      	ldr	r2, [pc, #220]	@ (8006238 <HAL_DMA_Abort_IT+0x3b4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d063      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a36      	ldr	r2, [pc, #216]	@ (800623c <HAL_DMA_Abort_IT+0x3b8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d05e      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a34      	ldr	r2, [pc, #208]	@ (8006240 <HAL_DMA_Abort_IT+0x3bc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d059      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a33      	ldr	r2, [pc, #204]	@ (8006244 <HAL_DMA_Abort_IT+0x3c0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d054      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a31      	ldr	r2, [pc, #196]	@ (8006248 <HAL_DMA_Abort_IT+0x3c4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d04f      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a30      	ldr	r2, [pc, #192]	@ (800624c <HAL_DMA_Abort_IT+0x3c8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d04a      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a2e      	ldr	r2, [pc, #184]	@ (8006250 <HAL_DMA_Abort_IT+0x3cc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d045      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a2d      	ldr	r2, [pc, #180]	@ (8006254 <HAL_DMA_Abort_IT+0x3d0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d040      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006258 <HAL_DMA_Abort_IT+0x3d4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d03b      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a2a      	ldr	r2, [pc, #168]	@ (800625c <HAL_DMA_Abort_IT+0x3d8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d036      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a28      	ldr	r2, [pc, #160]	@ (8006260 <HAL_DMA_Abort_IT+0x3dc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d031      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a27      	ldr	r2, [pc, #156]	@ (8006264 <HAL_DMA_Abort_IT+0x3e0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d02c      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a25      	ldr	r2, [pc, #148]	@ (8006268 <HAL_DMA_Abort_IT+0x3e4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d027      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a24      	ldr	r2, [pc, #144]	@ (800626c <HAL_DMA_Abort_IT+0x3e8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d022      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <HAL_DMA_Abort_IT+0x3ec>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01d      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <HAL_DMA_Abort_IT+0x3f0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d018      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006278 <HAL_DMA_Abort_IT+0x3f4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1e      	ldr	r2, [pc, #120]	@ (800627c <HAL_DMA_Abort_IT+0x3f8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <HAL_DMA_Abort_IT+0x3fc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1b      	ldr	r2, [pc, #108]	@ (8006284 <HAL_DMA_Abort_IT+0x400>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_DMA_Abort_IT+0x3a2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <HAL_DMA_Abort_IT+0x404>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d132      	bne.n	800628c <HAL_DMA_Abort_IT+0x408>
 8006226:	2301      	movs	r3, #1
 8006228:	e031      	b.n	800628e <HAL_DMA_Abort_IT+0x40a>
 800622a:	bf00      	nop
 800622c:	40020010 	.word	0x40020010
 8006230:	40020028 	.word	0x40020028
 8006234:	40020040 	.word	0x40020040
 8006238:	40020058 	.word	0x40020058
 800623c:	40020070 	.word	0x40020070
 8006240:	40020088 	.word	0x40020088
 8006244:	400200a0 	.word	0x400200a0
 8006248:	400200b8 	.word	0x400200b8
 800624c:	40020410 	.word	0x40020410
 8006250:	40020428 	.word	0x40020428
 8006254:	40020440 	.word	0x40020440
 8006258:	40020458 	.word	0x40020458
 800625c:	40020470 	.word	0x40020470
 8006260:	40020488 	.word	0x40020488
 8006264:	400204a0 	.word	0x400204a0
 8006268:	400204b8 	.word	0x400204b8
 800626c:	58025408 	.word	0x58025408
 8006270:	5802541c 	.word	0x5802541c
 8006274:	58025430 	.word	0x58025430
 8006278:	58025444 	.word	0x58025444
 800627c:	58025458 	.word	0x58025458
 8006280:	5802546c 	.word	0x5802546c
 8006284:	58025480 	.word	0x58025480
 8006288:	58025494 	.word	0x58025494
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d028      	beq.n	80062e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800629c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2201      	movs	r2, #1
 80062b2:	409a      	lsls	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80062c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80062e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop

08006310 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	@ 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800631c:	4b67      	ldr	r3, [pc, #412]	@ (80064bc <HAL_DMA_IRQHandler+0x1ac>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a67      	ldr	r2, [pc, #412]	@ (80064c0 <HAL_DMA_IRQHandler+0x1b0>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	0a9b      	lsrs	r3, r3, #10
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006334:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a5f      	ldr	r2, [pc, #380]	@ (80064c4 <HAL_DMA_IRQHandler+0x1b4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d04a      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a5d      	ldr	r2, [pc, #372]	@ (80064c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d045      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a5c      	ldr	r2, [pc, #368]	@ (80064cc <HAL_DMA_IRQHandler+0x1bc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d040      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5a      	ldr	r2, [pc, #360]	@ (80064d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d03b      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a59      	ldr	r2, [pc, #356]	@ (80064d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d036      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a57      	ldr	r2, [pc, #348]	@ (80064d8 <HAL_DMA_IRQHandler+0x1c8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d031      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a56      	ldr	r2, [pc, #344]	@ (80064dc <HAL_DMA_IRQHandler+0x1cc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d02c      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a54      	ldr	r2, [pc, #336]	@ (80064e0 <HAL_DMA_IRQHandler+0x1d0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d027      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a53      	ldr	r2, [pc, #332]	@ (80064e4 <HAL_DMA_IRQHandler+0x1d4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d022      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a51      	ldr	r2, [pc, #324]	@ (80064e8 <HAL_DMA_IRQHandler+0x1d8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d01d      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a50      	ldr	r2, [pc, #320]	@ (80064ec <HAL_DMA_IRQHandler+0x1dc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d018      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a4e      	ldr	r2, [pc, #312]	@ (80064f0 <HAL_DMA_IRQHandler+0x1e0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a4d      	ldr	r2, [pc, #308]	@ (80064f4 <HAL_DMA_IRQHandler+0x1e4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00e      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a4b      	ldr	r2, [pc, #300]	@ (80064f8 <HAL_DMA_IRQHandler+0x1e8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d009      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a4a      	ldr	r2, [pc, #296]	@ (80064fc <HAL_DMA_IRQHandler+0x1ec>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d004      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xd2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a48      	ldr	r2, [pc, #288]	@ (8006500 <HAL_DMA_IRQHandler+0x1f0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d101      	bne.n	80063e6 <HAL_DMA_IRQHandler+0xd6>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <HAL_DMA_IRQHandler+0xd8>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 842b 	beq.w	8006c44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2208      	movs	r2, #8
 80063f8:	409a      	lsls	r2, r3
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80a2 	beq.w	8006548 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <HAL_DMA_IRQHandler+0x1b4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d04a      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a2d      	ldr	r2, [pc, #180]	@ (80064c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d045      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2b      	ldr	r2, [pc, #172]	@ (80064cc <HAL_DMA_IRQHandler+0x1bc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d040      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2a      	ldr	r2, [pc, #168]	@ (80064d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d03b      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a28      	ldr	r2, [pc, #160]	@ (80064d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d036      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a27      	ldr	r2, [pc, #156]	@ (80064d8 <HAL_DMA_IRQHandler+0x1c8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d031      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <HAL_DMA_IRQHandler+0x1cc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d02c      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a24      	ldr	r2, [pc, #144]	@ (80064e0 <HAL_DMA_IRQHandler+0x1d0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d027      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <HAL_DMA_IRQHandler+0x1d4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d022      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <HAL_DMA_IRQHandler+0x1d8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d01d      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <HAL_DMA_IRQHandler+0x1dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1e      	ldr	r2, [pc, #120]	@ (80064f0 <HAL_DMA_IRQHandler+0x1e0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <HAL_DMA_IRQHandler+0x1e4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1b      	ldr	r2, [pc, #108]	@ (80064f8 <HAL_DMA_IRQHandler+0x1e8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a19      	ldr	r2, [pc, #100]	@ (80064fc <HAL_DMA_IRQHandler+0x1ec>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x194>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a18      	ldr	r2, [pc, #96]	@ (8006500 <HAL_DMA_IRQHandler+0x1f0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d12f      	bne.n	8006504 <HAL_DMA_IRQHandler+0x1f4>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bf14      	ite	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	2300      	moveq	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	e02e      	b.n	8006518 <HAL_DMA_IRQHandler+0x208>
 80064ba:	bf00      	nop
 80064bc:	24000054 	.word	0x24000054
 80064c0:	1b4e81b5 	.word	0x1b4e81b5
 80064c4:	40020010 	.word	0x40020010
 80064c8:	40020028 	.word	0x40020028
 80064cc:	40020040 	.word	0x40020040
 80064d0:	40020058 	.word	0x40020058
 80064d4:	40020070 	.word	0x40020070
 80064d8:	40020088 	.word	0x40020088
 80064dc:	400200a0 	.word	0x400200a0
 80064e0:	400200b8 	.word	0x400200b8
 80064e4:	40020410 	.word	0x40020410
 80064e8:	40020428 	.word	0x40020428
 80064ec:	40020440 	.word	0x40020440
 80064f0:	40020458 	.word	0x40020458
 80064f4:	40020470 	.word	0x40020470
 80064f8:	40020488 	.word	0x40020488
 80064fc:	400204a0 	.word	0x400204a0
 8006500:	400204b8 	.word	0x400204b8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0204 	bic.w	r2, r2, #4
 800652a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2208      	movs	r2, #8
 8006536:	409a      	lsls	r2, r3
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006540:	f043 0201 	orr.w	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	fa22 f303 	lsr.w	r3, r2, r3
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d06e      	beq.n	800663c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a69      	ldr	r2, [pc, #420]	@ (8006708 <HAL_DMA_IRQHandler+0x3f8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d04a      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a67      	ldr	r2, [pc, #412]	@ (800670c <HAL_DMA_IRQHandler+0x3fc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d045      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a66      	ldr	r2, [pc, #408]	@ (8006710 <HAL_DMA_IRQHandler+0x400>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d040      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a64      	ldr	r2, [pc, #400]	@ (8006714 <HAL_DMA_IRQHandler+0x404>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d03b      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a63      	ldr	r2, [pc, #396]	@ (8006718 <HAL_DMA_IRQHandler+0x408>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d036      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a61      	ldr	r2, [pc, #388]	@ (800671c <HAL_DMA_IRQHandler+0x40c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d031      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a60      	ldr	r2, [pc, #384]	@ (8006720 <HAL_DMA_IRQHandler+0x410>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d02c      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006724 <HAL_DMA_IRQHandler+0x414>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d027      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a5d      	ldr	r2, [pc, #372]	@ (8006728 <HAL_DMA_IRQHandler+0x418>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d022      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5b      	ldr	r2, [pc, #364]	@ (800672c <HAL_DMA_IRQHandler+0x41c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01d      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a5a      	ldr	r2, [pc, #360]	@ (8006730 <HAL_DMA_IRQHandler+0x420>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a58      	ldr	r2, [pc, #352]	@ (8006734 <HAL_DMA_IRQHandler+0x424>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a57      	ldr	r2, [pc, #348]	@ (8006738 <HAL_DMA_IRQHandler+0x428>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a55      	ldr	r2, [pc, #340]	@ (800673c <HAL_DMA_IRQHandler+0x42c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a54      	ldr	r2, [pc, #336]	@ (8006740 <HAL_DMA_IRQHandler+0x430>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_DMA_IRQHandler+0x2ee>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a52      	ldr	r2, [pc, #328]	@ (8006744 <HAL_DMA_IRQHandler+0x434>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d10a      	bne.n	8006614 <HAL_DMA_IRQHandler+0x304>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	bf14      	ite	ne
 800660c:	2301      	movne	r3, #1
 800660e:	2300      	moveq	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	e003      	b.n	800661c <HAL_DMA_IRQHandler+0x30c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006634:	f043 0202 	orr.w	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	2204      	movs	r2, #4
 8006646:	409a      	lsls	r2, r3
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 808f 	beq.w	8006770 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2c      	ldr	r2, [pc, #176]	@ (8006708 <HAL_DMA_IRQHandler+0x3f8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d04a      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2a      	ldr	r2, [pc, #168]	@ (800670c <HAL_DMA_IRQHandler+0x3fc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d045      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a29      	ldr	r2, [pc, #164]	@ (8006710 <HAL_DMA_IRQHandler+0x400>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d040      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a27      	ldr	r2, [pc, #156]	@ (8006714 <HAL_DMA_IRQHandler+0x404>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d03b      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a26      	ldr	r2, [pc, #152]	@ (8006718 <HAL_DMA_IRQHandler+0x408>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d036      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a24      	ldr	r2, [pc, #144]	@ (800671c <HAL_DMA_IRQHandler+0x40c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d031      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a23      	ldr	r2, [pc, #140]	@ (8006720 <HAL_DMA_IRQHandler+0x410>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d02c      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a21      	ldr	r2, [pc, #132]	@ (8006724 <HAL_DMA_IRQHandler+0x414>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d027      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a20      	ldr	r2, [pc, #128]	@ (8006728 <HAL_DMA_IRQHandler+0x418>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1e      	ldr	r2, [pc, #120]	@ (800672c <HAL_DMA_IRQHandler+0x41c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006730 <HAL_DMA_IRQHandler+0x420>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006734 <HAL_DMA_IRQHandler+0x424>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006738 <HAL_DMA_IRQHandler+0x428>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a18      	ldr	r2, [pc, #96]	@ (800673c <HAL_DMA_IRQHandler+0x42c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <HAL_DMA_IRQHandler+0x430>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x3e2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a15      	ldr	r2, [pc, #84]	@ (8006744 <HAL_DMA_IRQHandler+0x434>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d12a      	bne.n	8006748 <HAL_DMA_IRQHandler+0x438>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e023      	b.n	8006750 <HAL_DMA_IRQHandler+0x440>
 8006708:	40020010 	.word	0x40020010
 800670c:	40020028 	.word	0x40020028
 8006710:	40020040 	.word	0x40020040
 8006714:	40020058 	.word	0x40020058
 8006718:	40020070 	.word	0x40020070
 800671c:	40020088 	.word	0x40020088
 8006720:	400200a0 	.word	0x400200a0
 8006724:	400200b8 	.word	0x400200b8
 8006728:	40020410 	.word	0x40020410
 800672c:	40020428 	.word	0x40020428
 8006730:	40020440 	.word	0x40020440
 8006734:	40020458 	.word	0x40020458
 8006738:	40020470 	.word	0x40020470
 800673c:	40020488 	.word	0x40020488
 8006740:	400204a0 	.word	0x400204a0
 8006744:	400204b8 	.word	0x400204b8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2300      	movs	r3, #0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00d      	beq.n	8006770 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2204      	movs	r2, #4
 800675e:	409a      	lsls	r2, r3
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f043 0204 	orr.w	r2, r3, #4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2210      	movs	r2, #16
 800677a:	409a      	lsls	r2, r3
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80a6 	beq.w	80068d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a85      	ldr	r2, [pc, #532]	@ (80069a0 <HAL_DMA_IRQHandler+0x690>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d04a      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a83      	ldr	r2, [pc, #524]	@ (80069a4 <HAL_DMA_IRQHandler+0x694>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d045      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a82      	ldr	r2, [pc, #520]	@ (80069a8 <HAL_DMA_IRQHandler+0x698>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d040      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a80      	ldr	r2, [pc, #512]	@ (80069ac <HAL_DMA_IRQHandler+0x69c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d03b      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a7f      	ldr	r2, [pc, #508]	@ (80069b0 <HAL_DMA_IRQHandler+0x6a0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d036      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a7d      	ldr	r2, [pc, #500]	@ (80069b4 <HAL_DMA_IRQHandler+0x6a4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d031      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7c      	ldr	r2, [pc, #496]	@ (80069b8 <HAL_DMA_IRQHandler+0x6a8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d02c      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a7a      	ldr	r2, [pc, #488]	@ (80069bc <HAL_DMA_IRQHandler+0x6ac>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d027      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a79      	ldr	r2, [pc, #484]	@ (80069c0 <HAL_DMA_IRQHandler+0x6b0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a77      	ldr	r2, [pc, #476]	@ (80069c4 <HAL_DMA_IRQHandler+0x6b4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01d      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a76      	ldr	r2, [pc, #472]	@ (80069c8 <HAL_DMA_IRQHandler+0x6b8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a74      	ldr	r2, [pc, #464]	@ (80069cc <HAL_DMA_IRQHandler+0x6bc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a73      	ldr	r2, [pc, #460]	@ (80069d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a71      	ldr	r2, [pc, #452]	@ (80069d4 <HAL_DMA_IRQHandler+0x6c4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a70      	ldr	r2, [pc, #448]	@ (80069d8 <HAL_DMA_IRQHandler+0x6c8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_DMA_IRQHandler+0x516>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a6e      	ldr	r2, [pc, #440]	@ (80069dc <HAL_DMA_IRQHandler+0x6cc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d10a      	bne.n	800683c <HAL_DMA_IRQHandler+0x52c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e009      	b.n	8006850 <HAL_DMA_IRQHandler+0x540>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	bf14      	ite	ne
 800684a:	2301      	movne	r3, #1
 800684c:	2300      	moveq	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d03e      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	2210      	movs	r2, #16
 800685e:	409a      	lsls	r2, r3
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d018      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d108      	bne.n	8006892 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	d024      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	e01f      	b.n	80068d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01b      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
 80068a2:	e016      	b.n	80068d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0208 	bic.w	r2, r2, #8
 80068c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2220      	movs	r2, #32
 80068dc:	409a      	lsls	r2, r3
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8110 	beq.w	8006b08 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a2c      	ldr	r2, [pc, #176]	@ (80069a0 <HAL_DMA_IRQHandler+0x690>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d04a      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2b      	ldr	r2, [pc, #172]	@ (80069a4 <HAL_DMA_IRQHandler+0x694>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d045      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a29      	ldr	r2, [pc, #164]	@ (80069a8 <HAL_DMA_IRQHandler+0x698>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d040      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a28      	ldr	r2, [pc, #160]	@ (80069ac <HAL_DMA_IRQHandler+0x69c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d03b      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a26      	ldr	r2, [pc, #152]	@ (80069b0 <HAL_DMA_IRQHandler+0x6a0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d036      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a25      	ldr	r2, [pc, #148]	@ (80069b4 <HAL_DMA_IRQHandler+0x6a4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d031      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a23      	ldr	r2, [pc, #140]	@ (80069b8 <HAL_DMA_IRQHandler+0x6a8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d02c      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a22      	ldr	r2, [pc, #136]	@ (80069bc <HAL_DMA_IRQHandler+0x6ac>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d027      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a20      	ldr	r2, [pc, #128]	@ (80069c0 <HAL_DMA_IRQHandler+0x6b0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d022      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <HAL_DMA_IRQHandler+0x6b4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d01d      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <HAL_DMA_IRQHandler+0x6b8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d018      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1c      	ldr	r2, [pc, #112]	@ (80069cc <HAL_DMA_IRQHandler+0x6bc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1a      	ldr	r2, [pc, #104]	@ (80069d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00e      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a19      	ldr	r2, [pc, #100]	@ (80069d4 <HAL_DMA_IRQHandler+0x6c4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d009      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a17      	ldr	r2, [pc, #92]	@ (80069d8 <HAL_DMA_IRQHandler+0x6c8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_DMA_IRQHandler+0x678>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <HAL_DMA_IRQHandler+0x6cc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d12b      	bne.n	80069e0 <HAL_DMA_IRQHandler+0x6d0>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	bf14      	ite	ne
 8006996:	2301      	movne	r3, #1
 8006998:	2300      	moveq	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	e02a      	b.n	80069f4 <HAL_DMA_IRQHandler+0x6e4>
 800699e:	bf00      	nop
 80069a0:	40020010 	.word	0x40020010
 80069a4:	40020028 	.word	0x40020028
 80069a8:	40020040 	.word	0x40020040
 80069ac:	40020058 	.word	0x40020058
 80069b0:	40020070 	.word	0x40020070
 80069b4:	40020088 	.word	0x40020088
 80069b8:	400200a0 	.word	0x400200a0
 80069bc:	400200b8 	.word	0x400200b8
 80069c0:	40020410 	.word	0x40020410
 80069c4:	40020428 	.word	0x40020428
 80069c8:	40020440 	.word	0x40020440
 80069cc:	40020458 	.word	0x40020458
 80069d0:	40020470 	.word	0x40020470
 80069d4:	40020488 	.word	0x40020488
 80069d8:	400204a0 	.word	0x400204a0
 80069dc:	400204b8 	.word	0x400204b8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bf14      	ite	ne
 80069ee:	2301      	movne	r3, #1
 80069f0:	2300      	moveq	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 8087 	beq.w	8006b08 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	2220      	movs	r2, #32
 8006a04:	409a      	lsls	r2, r3
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d139      	bne.n	8006a8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0216 	bic.w	r2, r2, #22
 8006a24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <HAL_DMA_IRQHandler+0x736>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0208 	bic.w	r2, r2, #8
 8006a54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	223f      	movs	r2, #63	@ 0x3f
 8006a60:	409a      	lsls	r2, r3
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 834a 	beq.w	8007114 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
          }
          return;
 8006a88:	e344      	b.n	8007114 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d018      	beq.n	8006aca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d108      	bne.n	8006ab8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d02c      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
 8006ab6:	e027      	b.n	8006b08 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d023      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
 8006ac8:	e01e      	b.n	8006b08 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10f      	bne.n	8006af8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0210 	bic.w	r2, r2, #16
 8006ae6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8306 	beq.w	800711e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 8088 	beq.w	8006c30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2204      	movs	r2, #4
 8006b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a7a      	ldr	r2, [pc, #488]	@ (8006d18 <HAL_DMA_IRQHandler+0xa08>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d04a      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a79      	ldr	r2, [pc, #484]	@ (8006d1c <HAL_DMA_IRQHandler+0xa0c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d045      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a77      	ldr	r2, [pc, #476]	@ (8006d20 <HAL_DMA_IRQHandler+0xa10>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d040      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a76      	ldr	r2, [pc, #472]	@ (8006d24 <HAL_DMA_IRQHandler+0xa14>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d03b      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a74      	ldr	r2, [pc, #464]	@ (8006d28 <HAL_DMA_IRQHandler+0xa18>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d036      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a73      	ldr	r2, [pc, #460]	@ (8006d2c <HAL_DMA_IRQHandler+0xa1c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d031      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a71      	ldr	r2, [pc, #452]	@ (8006d30 <HAL_DMA_IRQHandler+0xa20>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d02c      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a70      	ldr	r2, [pc, #448]	@ (8006d34 <HAL_DMA_IRQHandler+0xa24>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d027      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8006d38 <HAL_DMA_IRQHandler+0xa28>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d022      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6d      	ldr	r2, [pc, #436]	@ (8006d3c <HAL_DMA_IRQHandler+0xa2c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d01d      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a6b      	ldr	r2, [pc, #428]	@ (8006d40 <HAL_DMA_IRQHandler+0xa30>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d018      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8006d44 <HAL_DMA_IRQHandler+0xa34>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d013      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a68      	ldr	r2, [pc, #416]	@ (8006d48 <HAL_DMA_IRQHandler+0xa38>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00e      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a67      	ldr	r2, [pc, #412]	@ (8006d4c <HAL_DMA_IRQHandler+0xa3c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d009      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a65      	ldr	r2, [pc, #404]	@ (8006d50 <HAL_DMA_IRQHandler+0xa40>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x8b8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a64      	ldr	r2, [pc, #400]	@ (8006d54 <HAL_DMA_IRQHandler+0xa44>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d108      	bne.n	8006bda <HAL_DMA_IRQHandler+0x8ca>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	e007      	b.n	8006bea <HAL_DMA_IRQHandler+0x8da>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d307      	bcc.n	8006c06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f2      	bne.n	8006bea <HAL_DMA_IRQHandler+0x8da>
 8006c04:	e000      	b.n	8006c08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c06:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006c1e:	e003      	b.n	8006c28 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8272 	beq.w	800711e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
 8006c42:	e26c      	b.n	800711e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a43      	ldr	r2, [pc, #268]	@ (8006d58 <HAL_DMA_IRQHandler+0xa48>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d022      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x984>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a42      	ldr	r2, [pc, #264]	@ (8006d5c <HAL_DMA_IRQHandler+0xa4c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d01d      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x984>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a40      	ldr	r2, [pc, #256]	@ (8006d60 <HAL_DMA_IRQHandler+0xa50>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d018      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x984>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3f      	ldr	r2, [pc, #252]	@ (8006d64 <HAL_DMA_IRQHandler+0xa54>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x984>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a3d      	ldr	r2, [pc, #244]	@ (8006d68 <HAL_DMA_IRQHandler+0xa58>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x984>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006d6c <HAL_DMA_IRQHandler+0xa5c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x984>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a3a      	ldr	r2, [pc, #232]	@ (8006d70 <HAL_DMA_IRQHandler+0xa60>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x984>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a39      	ldr	r2, [pc, #228]	@ (8006d74 <HAL_DMA_IRQHandler+0xa64>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d101      	bne.n	8006c98 <HAL_DMA_IRQHandler+0x988>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <HAL_DMA_IRQHandler+0x98a>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 823f 	beq.w	800711e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	409a      	lsls	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80cd 	beq.w	8006e58 <HAL_DMA_IRQHandler+0xb48>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80c7 	beq.w	8006e58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	409a      	lsls	r2, r3
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d049      	beq.n	8006d78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8210 	beq.w	8007118 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d00:	e20a      	b.n	8007118 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8206 	beq.w	8007118 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d14:	e200      	b.n	8007118 <HAL_DMA_IRQHandler+0xe08>
 8006d16:	bf00      	nop
 8006d18:	40020010 	.word	0x40020010
 8006d1c:	40020028 	.word	0x40020028
 8006d20:	40020040 	.word	0x40020040
 8006d24:	40020058 	.word	0x40020058
 8006d28:	40020070 	.word	0x40020070
 8006d2c:	40020088 	.word	0x40020088
 8006d30:	400200a0 	.word	0x400200a0
 8006d34:	400200b8 	.word	0x400200b8
 8006d38:	40020410 	.word	0x40020410
 8006d3c:	40020428 	.word	0x40020428
 8006d40:	40020440 	.word	0x40020440
 8006d44:	40020458 	.word	0x40020458
 8006d48:	40020470 	.word	0x40020470
 8006d4c:	40020488 	.word	0x40020488
 8006d50:	400204a0 	.word	0x400204a0
 8006d54:	400204b8 	.word	0x400204b8
 8006d58:	58025408 	.word	0x58025408
 8006d5c:	5802541c 	.word	0x5802541c
 8006d60:	58025430 	.word	0x58025430
 8006d64:	58025444 	.word	0x58025444
 8006d68:	58025458 	.word	0x58025458
 8006d6c:	5802546c 	.word	0x5802546c
 8006d70:	58025480 	.word	0x58025480
 8006d74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d160      	bne.n	8006e44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a7f      	ldr	r2, [pc, #508]	@ (8006f84 <HAL_DMA_IRQHandler+0xc74>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a7d      	ldr	r2, [pc, #500]	@ (8006f88 <HAL_DMA_IRQHandler+0xc78>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8006f8c <HAL_DMA_IRQHandler+0xc7c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a7a      	ldr	r2, [pc, #488]	@ (8006f90 <HAL_DMA_IRQHandler+0xc80>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a79      	ldr	r2, [pc, #484]	@ (8006f94 <HAL_DMA_IRQHandler+0xc84>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a77      	ldr	r2, [pc, #476]	@ (8006f98 <HAL_DMA_IRQHandler+0xc88>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a76      	ldr	r2, [pc, #472]	@ (8006f9c <HAL_DMA_IRQHandler+0xc8c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a74      	ldr	r2, [pc, #464]	@ (8006fa0 <HAL_DMA_IRQHandler+0xc90>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a73      	ldr	r2, [pc, #460]	@ (8006fa4 <HAL_DMA_IRQHandler+0xc94>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a71      	ldr	r2, [pc, #452]	@ (8006fa8 <HAL_DMA_IRQHandler+0xc98>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a70      	ldr	r2, [pc, #448]	@ (8006fac <HAL_DMA_IRQHandler+0xc9c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a6e      	ldr	r2, [pc, #440]	@ (8006fb0 <HAL_DMA_IRQHandler+0xca0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8006fb4 <HAL_DMA_IRQHandler+0xca4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a6b      	ldr	r2, [pc, #428]	@ (8006fb8 <HAL_DMA_IRQHandler+0xca8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a6a      	ldr	r2, [pc, #424]	@ (8006fbc <HAL_DMA_IRQHandler+0xcac>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb12>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a68      	ldr	r2, [pc, #416]	@ (8006fc0 <HAL_DMA_IRQHandler+0xcb0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d108      	bne.n	8006e34 <HAL_DMA_IRQHandler+0xb24>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0208 	bic.w	r2, r2, #8
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e007      	b.n	8006e44 <HAL_DMA_IRQHandler+0xb34>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0204 	bic.w	r2, r2, #4
 8006e42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8165 	beq.w	8007118 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e56:	e15f      	b.n	8007118 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2202      	movs	r2, #2
 8006e62:	409a      	lsls	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80c5 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xce8>
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80bf 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2202      	movs	r2, #2
 8006e84:	409a      	lsls	r2, r3
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d018      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 813a 	beq.w	800711c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb0:	e134      	b.n	800711c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8130 	beq.w	800711c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec4:	e12a      	b.n	800711c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f040 8089 	bne.w	8006fe4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8006f84 <HAL_DMA_IRQHandler+0xc74>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d04a      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a29      	ldr	r2, [pc, #164]	@ (8006f88 <HAL_DMA_IRQHandler+0xc78>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d045      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a28      	ldr	r2, [pc, #160]	@ (8006f8c <HAL_DMA_IRQHandler+0xc7c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d040      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a26      	ldr	r2, [pc, #152]	@ (8006f90 <HAL_DMA_IRQHandler+0xc80>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d03b      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a25      	ldr	r2, [pc, #148]	@ (8006f94 <HAL_DMA_IRQHandler+0xc84>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d036      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a23      	ldr	r2, [pc, #140]	@ (8006f98 <HAL_DMA_IRQHandler+0xc88>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d031      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a22      	ldr	r2, [pc, #136]	@ (8006f9c <HAL_DMA_IRQHandler+0xc8c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d02c      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a20      	ldr	r2, [pc, #128]	@ (8006fa0 <HAL_DMA_IRQHandler+0xc90>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d027      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1f      	ldr	r2, [pc, #124]	@ (8006fa4 <HAL_DMA_IRQHandler+0xc94>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa8 <HAL_DMA_IRQHandler+0xc98>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01d      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006fac <HAL_DMA_IRQHandler+0xc9c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb0 <HAL_DMA_IRQHandler+0xca0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a19      	ldr	r2, [pc, #100]	@ (8006fb4 <HAL_DMA_IRQHandler+0xca4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a17      	ldr	r2, [pc, #92]	@ (8006fb8 <HAL_DMA_IRQHandler+0xca8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a16      	ldr	r2, [pc, #88]	@ (8006fbc <HAL_DMA_IRQHandler+0xcac>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xc62>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a14      	ldr	r2, [pc, #80]	@ (8006fc0 <HAL_DMA_IRQHandler+0xcb0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d128      	bne.n	8006fc4 <HAL_DMA_IRQHandler+0xcb4>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0214 	bic.w	r2, r2, #20
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e027      	b.n	8006fd4 <HAL_DMA_IRQHandler+0xcc4>
 8006f84:	40020010 	.word	0x40020010
 8006f88:	40020028 	.word	0x40020028
 8006f8c:	40020040 	.word	0x40020040
 8006f90:	40020058 	.word	0x40020058
 8006f94:	40020070 	.word	0x40020070
 8006f98:	40020088 	.word	0x40020088
 8006f9c:	400200a0 	.word	0x400200a0
 8006fa0:	400200b8 	.word	0x400200b8
 8006fa4:	40020410 	.word	0x40020410
 8006fa8:	40020428 	.word	0x40020428
 8006fac:	40020440 	.word	0x40020440
 8006fb0:	40020458 	.word	0x40020458
 8006fb4:	40020470 	.word	0x40020470
 8006fb8:	40020488 	.word	0x40020488
 8006fbc:	400204a0 	.word	0x400204a0
 8006fc0:	400204b8 	.word	0x400204b8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 020a 	bic.w	r2, r2, #10
 8006fd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8097 	beq.w	800711c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ff6:	e091      	b.n	800711c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2208      	movs	r2, #8
 8007002:	409a      	lsls	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8088 	beq.w	800711e <HAL_DMA_IRQHandler+0xe0e>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8082 	beq.w	800711e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a41      	ldr	r2, [pc, #260]	@ (8007124 <HAL_DMA_IRQHandler+0xe14>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d04a      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3f      	ldr	r2, [pc, #252]	@ (8007128 <HAL_DMA_IRQHandler+0xe18>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d045      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3e      	ldr	r2, [pc, #248]	@ (800712c <HAL_DMA_IRQHandler+0xe1c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d040      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3c      	ldr	r2, [pc, #240]	@ (8007130 <HAL_DMA_IRQHandler+0xe20>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d03b      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3b      	ldr	r2, [pc, #236]	@ (8007134 <HAL_DMA_IRQHandler+0xe24>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d036      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a39      	ldr	r2, [pc, #228]	@ (8007138 <HAL_DMA_IRQHandler+0xe28>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d031      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a38      	ldr	r2, [pc, #224]	@ (800713c <HAL_DMA_IRQHandler+0xe2c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d02c      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a36      	ldr	r2, [pc, #216]	@ (8007140 <HAL_DMA_IRQHandler+0xe30>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d027      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a35      	ldr	r2, [pc, #212]	@ (8007144 <HAL_DMA_IRQHandler+0xe34>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d022      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a33      	ldr	r2, [pc, #204]	@ (8007148 <HAL_DMA_IRQHandler+0xe38>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01d      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a32      	ldr	r2, [pc, #200]	@ (800714c <HAL_DMA_IRQHandler+0xe3c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d018      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a30      	ldr	r2, [pc, #192]	@ (8007150 <HAL_DMA_IRQHandler+0xe40>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d013      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2f      	ldr	r2, [pc, #188]	@ (8007154 <HAL_DMA_IRQHandler+0xe44>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00e      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007158 <HAL_DMA_IRQHandler+0xe48>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d009      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2c      	ldr	r2, [pc, #176]	@ (800715c <HAL_DMA_IRQHandler+0xe4c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d004      	beq.n	80070ba <HAL_DMA_IRQHandler+0xdaa>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007160 <HAL_DMA_IRQHandler+0xe50>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d108      	bne.n	80070cc <HAL_DMA_IRQHandler+0xdbc>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 021c 	bic.w	r2, r2, #28
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e007      	b.n	80070dc <HAL_DMA_IRQHandler+0xdcc>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 020e 	bic.w	r2, r2, #14
 80070da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	2201      	movs	r2, #1
 80070e6:	409a      	lsls	r2, r3
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
 8007112:	e004      	b.n	800711e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007114:	bf00      	nop
 8007116:	e002      	b.n	800711e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007118:	bf00      	nop
 800711a:	e000      	b.n	800711e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800711c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800711e:	3728      	adds	r7, #40	@ 0x28
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40020010 	.word	0x40020010
 8007128:	40020028 	.word	0x40020028
 800712c:	40020040 	.word	0x40020040
 8007130:	40020058 	.word	0x40020058
 8007134:	40020070 	.word	0x40020070
 8007138:	40020088 	.word	0x40020088
 800713c:	400200a0 	.word	0x400200a0
 8007140:	400200b8 	.word	0x400200b8
 8007144:	40020410 	.word	0x40020410
 8007148:	40020428 	.word	0x40020428
 800714c:	40020440 	.word	0x40020440
 8007150:	40020458 	.word	0x40020458
 8007154:	40020470 	.word	0x40020470
 8007158:	40020488 	.word	0x40020488
 800715c:	400204a0 	.word	0x400204a0
 8007160:	400204b8 	.word	0x400204b8

08007164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007176:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a7f      	ldr	r2, [pc, #508]	@ (8007380 <DMA_SetConfig+0x21c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d072      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a7d      	ldr	r2, [pc, #500]	@ (8007384 <DMA_SetConfig+0x220>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d06d      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a7c      	ldr	r2, [pc, #496]	@ (8007388 <DMA_SetConfig+0x224>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d068      	beq.n	800726e <DMA_SetConfig+0x10a>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a7a      	ldr	r2, [pc, #488]	@ (800738c <DMA_SetConfig+0x228>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d063      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a79      	ldr	r2, [pc, #484]	@ (8007390 <DMA_SetConfig+0x22c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d05e      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a77      	ldr	r2, [pc, #476]	@ (8007394 <DMA_SetConfig+0x230>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d059      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a76      	ldr	r2, [pc, #472]	@ (8007398 <DMA_SetConfig+0x234>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d054      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a74      	ldr	r2, [pc, #464]	@ (800739c <DMA_SetConfig+0x238>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d04f      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a73      	ldr	r2, [pc, #460]	@ (80073a0 <DMA_SetConfig+0x23c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04a      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a71      	ldr	r2, [pc, #452]	@ (80073a4 <DMA_SetConfig+0x240>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d045      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a70      	ldr	r2, [pc, #448]	@ (80073a8 <DMA_SetConfig+0x244>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d040      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a6e      	ldr	r2, [pc, #440]	@ (80073ac <DMA_SetConfig+0x248>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d03b      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a6d      	ldr	r2, [pc, #436]	@ (80073b0 <DMA_SetConfig+0x24c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d036      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a6b      	ldr	r2, [pc, #428]	@ (80073b4 <DMA_SetConfig+0x250>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d031      	beq.n	800726e <DMA_SetConfig+0x10a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a6a      	ldr	r2, [pc, #424]	@ (80073b8 <DMA_SetConfig+0x254>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d02c      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a68      	ldr	r2, [pc, #416]	@ (80073bc <DMA_SetConfig+0x258>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d027      	beq.n	800726e <DMA_SetConfig+0x10a>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a67      	ldr	r2, [pc, #412]	@ (80073c0 <DMA_SetConfig+0x25c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a65      	ldr	r2, [pc, #404]	@ (80073c4 <DMA_SetConfig+0x260>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a64      	ldr	r2, [pc, #400]	@ (80073c8 <DMA_SetConfig+0x264>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a62      	ldr	r2, [pc, #392]	@ (80073cc <DMA_SetConfig+0x268>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a61      	ldr	r2, [pc, #388]	@ (80073d0 <DMA_SetConfig+0x26c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5f      	ldr	r2, [pc, #380]	@ (80073d4 <DMA_SetConfig+0x270>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5e      	ldr	r2, [pc, #376]	@ (80073d8 <DMA_SetConfig+0x274>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a5c      	ldr	r2, [pc, #368]	@ (80073dc <DMA_SetConfig+0x278>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d101      	bne.n	8007272 <DMA_SetConfig+0x10e>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <DMA_SetConfig+0x110>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00d      	beq.n	8007294 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007280:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007292:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a39      	ldr	r2, [pc, #228]	@ (8007380 <DMA_SetConfig+0x21c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d04a      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a38      	ldr	r2, [pc, #224]	@ (8007384 <DMA_SetConfig+0x220>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d045      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a36      	ldr	r2, [pc, #216]	@ (8007388 <DMA_SetConfig+0x224>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d040      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a35      	ldr	r2, [pc, #212]	@ (800738c <DMA_SetConfig+0x228>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d03b      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a33      	ldr	r2, [pc, #204]	@ (8007390 <DMA_SetConfig+0x22c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d036      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a32      	ldr	r2, [pc, #200]	@ (8007394 <DMA_SetConfig+0x230>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d031      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a30      	ldr	r2, [pc, #192]	@ (8007398 <DMA_SetConfig+0x234>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d02c      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a2f      	ldr	r2, [pc, #188]	@ (800739c <DMA_SetConfig+0x238>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d027      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2d      	ldr	r2, [pc, #180]	@ (80073a0 <DMA_SetConfig+0x23c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d022      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2c      	ldr	r2, [pc, #176]	@ (80073a4 <DMA_SetConfig+0x240>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d01d      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2a      	ldr	r2, [pc, #168]	@ (80073a8 <DMA_SetConfig+0x244>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d018      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a29      	ldr	r2, [pc, #164]	@ (80073ac <DMA_SetConfig+0x248>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a27      	ldr	r2, [pc, #156]	@ (80073b0 <DMA_SetConfig+0x24c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00e      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a26      	ldr	r2, [pc, #152]	@ (80073b4 <DMA_SetConfig+0x250>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d009      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a24      	ldr	r2, [pc, #144]	@ (80073b8 <DMA_SetConfig+0x254>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a23      	ldr	r2, [pc, #140]	@ (80073bc <DMA_SetConfig+0x258>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d101      	bne.n	8007338 <DMA_SetConfig+0x1d4>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <DMA_SetConfig+0x1d6>
 8007338:	2300      	movs	r3, #0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d059      	beq.n	80073f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	223f      	movs	r2, #63	@ 0x3f
 8007348:	409a      	lsls	r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800735c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b40      	cmp	r3, #64	@ 0x40
 800736c:	d138      	bne.n	80073e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800737e:	e086      	b.n	800748e <DMA_SetConfig+0x32a>
 8007380:	40020010 	.word	0x40020010
 8007384:	40020028 	.word	0x40020028
 8007388:	40020040 	.word	0x40020040
 800738c:	40020058 	.word	0x40020058
 8007390:	40020070 	.word	0x40020070
 8007394:	40020088 	.word	0x40020088
 8007398:	400200a0 	.word	0x400200a0
 800739c:	400200b8 	.word	0x400200b8
 80073a0:	40020410 	.word	0x40020410
 80073a4:	40020428 	.word	0x40020428
 80073a8:	40020440 	.word	0x40020440
 80073ac:	40020458 	.word	0x40020458
 80073b0:	40020470 	.word	0x40020470
 80073b4:	40020488 	.word	0x40020488
 80073b8:	400204a0 	.word	0x400204a0
 80073bc:	400204b8 	.word	0x400204b8
 80073c0:	58025408 	.word	0x58025408
 80073c4:	5802541c 	.word	0x5802541c
 80073c8:	58025430 	.word	0x58025430
 80073cc:	58025444 	.word	0x58025444
 80073d0:	58025458 	.word	0x58025458
 80073d4:	5802546c 	.word	0x5802546c
 80073d8:	58025480 	.word	0x58025480
 80073dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	60da      	str	r2, [r3, #12]
}
 80073f0:	e04d      	b.n	800748e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a29      	ldr	r2, [pc, #164]	@ (800749c <DMA_SetConfig+0x338>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d022      	beq.n	8007442 <DMA_SetConfig+0x2de>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a27      	ldr	r2, [pc, #156]	@ (80074a0 <DMA_SetConfig+0x33c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01d      	beq.n	8007442 <DMA_SetConfig+0x2de>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a26      	ldr	r2, [pc, #152]	@ (80074a4 <DMA_SetConfig+0x340>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d018      	beq.n	8007442 <DMA_SetConfig+0x2de>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a24      	ldr	r2, [pc, #144]	@ (80074a8 <DMA_SetConfig+0x344>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <DMA_SetConfig+0x2de>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a23      	ldr	r2, [pc, #140]	@ (80074ac <DMA_SetConfig+0x348>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00e      	beq.n	8007442 <DMA_SetConfig+0x2de>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a21      	ldr	r2, [pc, #132]	@ (80074b0 <DMA_SetConfig+0x34c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d009      	beq.n	8007442 <DMA_SetConfig+0x2de>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a20      	ldr	r2, [pc, #128]	@ (80074b4 <DMA_SetConfig+0x350>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <DMA_SetConfig+0x2de>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1e      	ldr	r2, [pc, #120]	@ (80074b8 <DMA_SetConfig+0x354>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d101      	bne.n	8007446 <DMA_SetConfig+0x2e2>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <DMA_SetConfig+0x2e4>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d020      	beq.n	800748e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	2201      	movs	r2, #1
 8007456:	409a      	lsls	r2, r3
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b40      	cmp	r3, #64	@ 0x40
 800746a:	d108      	bne.n	800747e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	60da      	str	r2, [r3, #12]
}
 800747c:	e007      	b.n	800748e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	60da      	str	r2, [r3, #12]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	58025408 	.word	0x58025408
 80074a0:	5802541c 	.word	0x5802541c
 80074a4:	58025430 	.word	0x58025430
 80074a8:	58025444 	.word	0x58025444
 80074ac:	58025458 	.word	0x58025458
 80074b0:	5802546c 	.word	0x5802546c
 80074b4:	58025480 	.word	0x58025480
 80074b8:	58025494 	.word	0x58025494

080074bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a42      	ldr	r2, [pc, #264]	@ (80075d4 <DMA_CalcBaseAndBitshift+0x118>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d04a      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a41      	ldr	r2, [pc, #260]	@ (80075d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d045      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a3f      	ldr	r2, [pc, #252]	@ (80075dc <DMA_CalcBaseAndBitshift+0x120>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d040      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a3e      	ldr	r2, [pc, #248]	@ (80075e0 <DMA_CalcBaseAndBitshift+0x124>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d03b      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3c      	ldr	r2, [pc, #240]	@ (80075e4 <DMA_CalcBaseAndBitshift+0x128>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d036      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3b      	ldr	r2, [pc, #236]	@ (80075e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d031      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a39      	ldr	r2, [pc, #228]	@ (80075ec <DMA_CalcBaseAndBitshift+0x130>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d02c      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a38      	ldr	r2, [pc, #224]	@ (80075f0 <DMA_CalcBaseAndBitshift+0x134>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d027      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a36      	ldr	r2, [pc, #216]	@ (80075f4 <DMA_CalcBaseAndBitshift+0x138>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d022      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a35      	ldr	r2, [pc, #212]	@ (80075f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d01d      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a33      	ldr	r2, [pc, #204]	@ (80075fc <DMA_CalcBaseAndBitshift+0x140>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d018      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a32      	ldr	r2, [pc, #200]	@ (8007600 <DMA_CalcBaseAndBitshift+0x144>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d013      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a30      	ldr	r2, [pc, #192]	@ (8007604 <DMA_CalcBaseAndBitshift+0x148>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00e      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a2f      	ldr	r2, [pc, #188]	@ (8007608 <DMA_CalcBaseAndBitshift+0x14c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d009      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2d      	ldr	r2, [pc, #180]	@ (800760c <DMA_CalcBaseAndBitshift+0x150>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xa8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2c      	ldr	r2, [pc, #176]	@ (8007610 <DMA_CalcBaseAndBitshift+0x154>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d101      	bne.n	8007568 <DMA_CalcBaseAndBitshift+0xac>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <DMA_CalcBaseAndBitshift+0xae>
 8007568:	2300      	movs	r3, #0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d024      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	3b10      	subs	r3, #16
 8007576:	4a27      	ldr	r2, [pc, #156]	@ (8007614 <DMA_CalcBaseAndBitshift+0x158>)
 8007578:	fba2 2303 	umull	r2, r3, r2, r3
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	4a24      	ldr	r2, [pc, #144]	@ (8007618 <DMA_CalcBaseAndBitshift+0x15c>)
 8007588:	5cd3      	ldrb	r3, [r2, r3]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b03      	cmp	r3, #3
 8007594:	d908      	bls.n	80075a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	4b1f      	ldr	r3, [pc, #124]	@ (800761c <DMA_CalcBaseAndBitshift+0x160>)
 800759e:	4013      	ands	r3, r2
 80075a0:	1d1a      	adds	r2, r3, #4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80075a6:	e00d      	b.n	80075c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	4b1b      	ldr	r3, [pc, #108]	@ (800761c <DMA_CalcBaseAndBitshift+0x160>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80075b6:	e005      	b.n	80075c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	40020010 	.word	0x40020010
 80075d8:	40020028 	.word	0x40020028
 80075dc:	40020040 	.word	0x40020040
 80075e0:	40020058 	.word	0x40020058
 80075e4:	40020070 	.word	0x40020070
 80075e8:	40020088 	.word	0x40020088
 80075ec:	400200a0 	.word	0x400200a0
 80075f0:	400200b8 	.word	0x400200b8
 80075f4:	40020410 	.word	0x40020410
 80075f8:	40020428 	.word	0x40020428
 80075fc:	40020440 	.word	0x40020440
 8007600:	40020458 	.word	0x40020458
 8007604:	40020470 	.word	0x40020470
 8007608:	40020488 	.word	0x40020488
 800760c:	400204a0 	.word	0x400204a0
 8007610:	400204b8 	.word	0x400204b8
 8007614:	aaaaaaab 	.word	0xaaaaaaab
 8007618:	0800fc20 	.word	0x0800fc20
 800761c:	fffffc00 	.word	0xfffffc00

08007620 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d120      	bne.n	8007676 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	2b03      	cmp	r3, #3
 800763a:	d858      	bhi.n	80076ee <DMA_CheckFifoParam+0xce>
 800763c:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <DMA_CheckFifoParam+0x24>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	08007655 	.word	0x08007655
 8007648:	08007667 	.word	0x08007667
 800764c:	08007655 	.word	0x08007655
 8007650:	080076ef 	.word	0x080076ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d048      	beq.n	80076f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007664:	e045      	b.n	80076f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800766e:	d142      	bne.n	80076f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007674:	e03f      	b.n	80076f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800767e:	d123      	bne.n	80076c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	2b03      	cmp	r3, #3
 8007686:	d838      	bhi.n	80076fa <DMA_CheckFifoParam+0xda>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <DMA_CheckFifoParam+0x70>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076a7 	.word	0x080076a7
 8007698:	080076a1 	.word	0x080076a1
 800769c:	080076b9 	.word	0x080076b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
        break;
 80076a4:	e030      	b.n	8007708 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d025      	beq.n	80076fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076b6:	e022      	b.n	80076fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076c0:	d11f      	bne.n	8007702 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076c6:	e01c      	b.n	8007702 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d902      	bls.n	80076d6 <DMA_CheckFifoParam+0xb6>
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d003      	beq.n	80076dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80076d4:	e018      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
        break;
 80076da:	e015      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00e      	beq.n	8007706 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
    break;
 80076ec:	e00b      	b.n	8007706 <DMA_CheckFifoParam+0xe6>
        break;
 80076ee:	bf00      	nop
 80076f0:	e00a      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
        break;
 80076f2:	bf00      	nop
 80076f4:	e008      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
        break;
 80076f6:	bf00      	nop
 80076f8:	e006      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
        break;
 80076fa:	bf00      	nop
 80076fc:	e004      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
        break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
        break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
    break;
 8007706:	bf00      	nop
    }
  }

  return status;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop

08007718 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a38      	ldr	r2, [pc, #224]	@ (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d022      	beq.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a36      	ldr	r2, [pc, #216]	@ (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01d      	beq.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a35      	ldr	r2, [pc, #212]	@ (8007814 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d018      	beq.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a33      	ldr	r2, [pc, #204]	@ (8007818 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a32      	ldr	r2, [pc, #200]	@ (800781c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00e      	beq.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a30      	ldr	r2, [pc, #192]	@ (8007820 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d009      	beq.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2f      	ldr	r2, [pc, #188]	@ (8007824 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d004      	beq.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a2d      	ldr	r2, [pc, #180]	@ (8007828 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d101      	bne.n	800777a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800777a:	2300      	movs	r3, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01a      	beq.n	80077b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	3b08      	subs	r3, #8
 8007788:	4a28      	ldr	r2, [pc, #160]	@ (800782c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	091b      	lsrs	r3, r3, #4
 8007790:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4b26      	ldr	r3, [pc, #152]	@ (8007830 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a24      	ldr	r2, [pc, #144]	@ (8007834 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80077a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	2201      	movs	r2, #1
 80077ae:	409a      	lsls	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80077b4:	e024      	b.n	8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	3b10      	subs	r3, #16
 80077be:	4a1e      	ldr	r2, [pc, #120]	@ (8007838 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077c0:	fba2 2303 	umull	r2, r3, r2, r3
 80077c4:	091b      	lsrs	r3, r3, #4
 80077c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4a1c      	ldr	r2, [pc, #112]	@ (800783c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d806      	bhi.n	80077de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007840 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d902      	bls.n	80077de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3308      	adds	r3, #8
 80077dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4b18      	ldr	r3, [pc, #96]	@ (8007844 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	461a      	mov	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a16      	ldr	r2, [pc, #88]	@ (8007848 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f003 031f 	and.w	r3, r3, #31
 80077f8:	2201      	movs	r2, #1
 80077fa:	409a      	lsls	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	58025408 	.word	0x58025408
 8007810:	5802541c 	.word	0x5802541c
 8007814:	58025430 	.word	0x58025430
 8007818:	58025444 	.word	0x58025444
 800781c:	58025458 	.word	0x58025458
 8007820:	5802546c 	.word	0x5802546c
 8007824:	58025480 	.word	0x58025480
 8007828:	58025494 	.word	0x58025494
 800782c:	cccccccd 	.word	0xcccccccd
 8007830:	16009600 	.word	0x16009600
 8007834:	58025880 	.word	0x58025880
 8007838:	aaaaaaab 	.word	0xaaaaaaab
 800783c:	400204b8 	.word	0x400204b8
 8007840:	4002040f 	.word	0x4002040f
 8007844:	10008200 	.word	0x10008200
 8007848:	40020880 	.word	0x40020880

0800784c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d04a      	beq.n	80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d847      	bhi.n	80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a25      	ldr	r2, [pc, #148]	@ (8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d022      	beq.n	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a24      	ldr	r2, [pc, #144]	@ (8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d01d      	beq.n	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a22      	ldr	r2, [pc, #136]	@ (800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d018      	beq.n	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a21      	ldr	r2, [pc, #132]	@ (8007910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1f      	ldr	r2, [pc, #124]	@ (8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00e      	beq.n	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1e      	ldr	r2, [pc, #120]	@ (8007918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d009      	beq.n	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1c      	ldr	r2, [pc, #112]	@ (800791c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d101      	bne.n	80078bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078bc:	2300      	movs	r3, #0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a15      	ldr	r2, [pc, #84]	@ (8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80078d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80078d6:	e009      	b.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4b14      	ldr	r3, [pc, #80]	@ (800792c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	461a      	mov	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a11      	ldr	r2, [pc, #68]	@ (8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	2201      	movs	r2, #1
 80078f2:	409a      	lsls	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80078f8:	bf00      	nop
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	58025408 	.word	0x58025408
 8007908:	5802541c 	.word	0x5802541c
 800790c:	58025430 	.word	0x58025430
 8007910:	58025444 	.word	0x58025444
 8007914:	58025458 	.word	0x58025458
 8007918:	5802546c 	.word	0x5802546c
 800791c:	58025480 	.word	0x58025480
 8007920:	58025494 	.word	0x58025494
 8007924:	1600963f 	.word	0x1600963f
 8007928:	58025940 	.word	0x58025940
 800792c:	1000823f 	.word	0x1000823f
 8007930:	40020940 	.word	0x40020940

08007934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007934:	b480      	push	{r7}
 8007936:	b089      	sub	sp, #36	@ 0x24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800793e:	2300      	movs	r3, #0
 8007940:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007942:	4b86      	ldr	r3, [pc, #536]	@ (8007b5c <HAL_GPIO_Init+0x228>)
 8007944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007946:	e18c      	b.n	8007c62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	2101      	movs	r1, #1
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	fa01 f303 	lsl.w	r3, r1, r3
 8007954:	4013      	ands	r3, r2
 8007956:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 817e 	beq.w	8007c5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d005      	beq.n	8007978 <HAL_GPIO_Init+0x44>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d130      	bne.n	80079da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	2203      	movs	r2, #3
 8007984:	fa02 f303 	lsl.w	r3, r2, r3
 8007988:	43db      	mvns	r3, r3
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	4013      	ands	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	4313      	orrs	r3, r2
 80079a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079ae:	2201      	movs	r2, #1
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4013      	ands	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	091b      	lsrs	r3, r3, #4
 80079c4:	f003 0201 	and.w	r2, r3, #1
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d017      	beq.n	8007a16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	2203      	movs	r2, #3
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	43db      	mvns	r3, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4013      	ands	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d123      	bne.n	8007a6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	08da      	lsrs	r2, r3, #3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3208      	adds	r2, #8
 8007a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	220f      	movs	r2, #15
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	4013      	ands	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	691a      	ldr	r2, [r3, #16]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	08da      	lsrs	r2, r3, #3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3208      	adds	r2, #8
 8007a64:	69b9      	ldr	r1, [r7, #24]
 8007a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	2203      	movs	r2, #3
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f003 0203 	and.w	r2, r3, #3
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 80d8 	beq.w	8007c5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aac:	4b2c      	ldr	r3, [pc, #176]	@ (8007b60 <HAL_GPIO_Init+0x22c>)
 8007aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b60 <HAL_GPIO_Init+0x22c>)
 8007ab4:	f043 0302 	orr.w	r3, r3, #2
 8007ab8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007abc:	4b28      	ldr	r3, [pc, #160]	@ (8007b60 <HAL_GPIO_Init+0x22c>)
 8007abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aca:	4a26      	ldr	r2, [pc, #152]	@ (8007b64 <HAL_GPIO_Init+0x230>)
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	089b      	lsrs	r3, r3, #2
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	220f      	movs	r2, #15
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	4013      	ands	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b68 <HAL_GPIO_Init+0x234>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d04a      	beq.n	8007b8c <HAL_GPIO_Init+0x258>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a1c      	ldr	r2, [pc, #112]	@ (8007b6c <HAL_GPIO_Init+0x238>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d02b      	beq.n	8007b56 <HAL_GPIO_Init+0x222>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a1b      	ldr	r2, [pc, #108]	@ (8007b70 <HAL_GPIO_Init+0x23c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d025      	beq.n	8007b52 <HAL_GPIO_Init+0x21e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a1a      	ldr	r2, [pc, #104]	@ (8007b74 <HAL_GPIO_Init+0x240>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d01f      	beq.n	8007b4e <HAL_GPIO_Init+0x21a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a19      	ldr	r2, [pc, #100]	@ (8007b78 <HAL_GPIO_Init+0x244>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d019      	beq.n	8007b4a <HAL_GPIO_Init+0x216>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <HAL_GPIO_Init+0x248>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_GPIO_Init+0x212>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a17      	ldr	r2, [pc, #92]	@ (8007b80 <HAL_GPIO_Init+0x24c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00d      	beq.n	8007b42 <HAL_GPIO_Init+0x20e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a16      	ldr	r2, [pc, #88]	@ (8007b84 <HAL_GPIO_Init+0x250>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <HAL_GPIO_Init+0x20a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a15      	ldr	r2, [pc, #84]	@ (8007b88 <HAL_GPIO_Init+0x254>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d101      	bne.n	8007b3a <HAL_GPIO_Init+0x206>
 8007b36:	2309      	movs	r3, #9
 8007b38:	e029      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b3a:	230a      	movs	r3, #10
 8007b3c:	e027      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b3e:	2307      	movs	r3, #7
 8007b40:	e025      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b42:	2306      	movs	r3, #6
 8007b44:	e023      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b46:	2305      	movs	r3, #5
 8007b48:	e021      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	e01f      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e01d      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e01b      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e019      	b.n	8007b8e <HAL_GPIO_Init+0x25a>
 8007b5a:	bf00      	nop
 8007b5c:	58000080 	.word	0x58000080
 8007b60:	58024400 	.word	0x58024400
 8007b64:	58000400 	.word	0x58000400
 8007b68:	58020000 	.word	0x58020000
 8007b6c:	58020400 	.word	0x58020400
 8007b70:	58020800 	.word	0x58020800
 8007b74:	58020c00 	.word	0x58020c00
 8007b78:	58021000 	.word	0x58021000
 8007b7c:	58021400 	.word	0x58021400
 8007b80:	58021800 	.word	0x58021800
 8007b84:	58021c00 	.word	0x58021c00
 8007b88:	58022400 	.word	0x58022400
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	f002 0203 	and.w	r2, r2, #3
 8007b94:	0092      	lsls	r2, r2, #2
 8007b96:	4093      	lsls	r3, r2
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b9e:	4938      	ldr	r1, [pc, #224]	@ (8007c80 <HAL_GPIO_Init+0x34c>)
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	089b      	lsrs	r3, r3, #2
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	43db      	mvns	r3, r3
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	4013      	ands	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f47f ae6b 	bne.w	8007948 <HAL_GPIO_Init+0x14>
  }
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	3724      	adds	r7, #36	@ 0x24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	58000400 	.word	0x58000400

08007c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	807b      	strh	r3, [r7, #2]
 8007c90:	4613      	mov	r3, r2
 8007c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c94:	787b      	ldrb	r3, [r7, #1]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c9a:	887a      	ldrh	r2, [r7, #2]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ca0:	e003      	b.n	8007caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ca2:	887b      	ldrh	r3, [r7, #2]
 8007ca4:	041a      	lsls	r2, r3, #16
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	619a      	str	r2, [r3, #24]
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007cc8:	887a      	ldrh	r2, [r7, #2]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	041a      	lsls	r2, r3, #16
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	43d9      	mvns	r1, r3
 8007cd4:	887b      	ldrh	r3, [r7, #2]
 8007cd6:	400b      	ands	r3, r1
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	619a      	str	r2, [r3, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7f9 f92f 	bl	8000f74 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d28:	4b19      	ldr	r3, [pc, #100]	@ (8007d90 <HAL_PWREx_ConfigSupply+0x70>)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d00a      	beq.n	8007d4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d34:	4b16      	ldr	r3, [pc, #88]	@ (8007d90 <HAL_PWREx_ConfigSupply+0x70>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d001      	beq.n	8007d46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e01f      	b.n	8007d86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	e01d      	b.n	8007d86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d4a:	4b11      	ldr	r3, [pc, #68]	@ (8007d90 <HAL_PWREx_ConfigSupply+0x70>)
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f023 0207 	bic.w	r2, r3, #7
 8007d52:	490f      	ldr	r1, [pc, #60]	@ (8007d90 <HAL_PWREx_ConfigSupply+0x70>)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d5a:	f7fa fdb5 	bl	80028c8 <HAL_GetTick>
 8007d5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d60:	e009      	b.n	8007d76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d62:	f7fa fdb1 	bl	80028c8 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d70:	d901      	bls.n	8007d76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e007      	b.n	8007d86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d76:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <HAL_PWREx_ConfigSupply+0x70>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d82:	d1ee      	bne.n	8007d62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	58024800 	.word	0x58024800

08007d94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08c      	sub	sp, #48	@ 0x30
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e3c8      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8087 	beq.w	8007ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007db4:	4b88      	ldr	r3, [pc, #544]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dbe:	4b86      	ldr	r3, [pc, #536]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d007      	beq.n	8007dda <HAL_RCC_OscConfig+0x46>
 8007dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dcc:	2b18      	cmp	r3, #24
 8007dce:	d110      	bne.n	8007df2 <HAL_RCC_OscConfig+0x5e>
 8007dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d10b      	bne.n	8007df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dda:	4b7f      	ldr	r3, [pc, #508]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d06c      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x12c>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d168      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e3a2      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfa:	d106      	bne.n	8007e0a <HAL_RCC_OscConfig+0x76>
 8007dfc:	4b76      	ldr	r3, [pc, #472]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a75      	ldr	r2, [pc, #468]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e02e      	b.n	8007e68 <HAL_RCC_OscConfig+0xd4>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10c      	bne.n	8007e2c <HAL_RCC_OscConfig+0x98>
 8007e12:	4b71      	ldr	r3, [pc, #452]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a70      	ldr	r2, [pc, #448]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	4b6e      	ldr	r3, [pc, #440]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a6d      	ldr	r2, [pc, #436]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	e01d      	b.n	8007e68 <HAL_RCC_OscConfig+0xd4>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e34:	d10c      	bne.n	8007e50 <HAL_RCC_OscConfig+0xbc>
 8007e36:	4b68      	ldr	r3, [pc, #416]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a67      	ldr	r2, [pc, #412]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4b65      	ldr	r3, [pc, #404]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a64      	ldr	r2, [pc, #400]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e00b      	b.n	8007e68 <HAL_RCC_OscConfig+0xd4>
 8007e50:	4b61      	ldr	r3, [pc, #388]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a60      	ldr	r2, [pc, #384]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a5d      	ldr	r2, [pc, #372]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d013      	beq.n	8007e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e70:	f7fa fd2a 	bl	80028c8 <HAL_GetTick>
 8007e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e78:	f7fa fd26 	bl	80028c8 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b64      	cmp	r3, #100	@ 0x64
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e356      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e8a:	4b53      	ldr	r3, [pc, #332]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0f0      	beq.n	8007e78 <HAL_RCC_OscConfig+0xe4>
 8007e96:	e014      	b.n	8007ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e98:	f7fa fd16 	bl	80028c8 <HAL_GetTick>
 8007e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ea0:	f7fa fd12 	bl	80028c8 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b64      	cmp	r3, #100	@ 0x64
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e342      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eb2:	4b49      	ldr	r3, [pc, #292]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f0      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x10c>
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 808c 	beq.w	8007fe8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ed0:	4b41      	ldr	r3, [pc, #260]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ed8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007eda:	4b3f      	ldr	r3, [pc, #252]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ede:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x162>
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	2b18      	cmp	r3, #24
 8007eea:	d137      	bne.n	8007f5c <HAL_RCC_OscConfig+0x1c8>
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d132      	bne.n	8007f5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ef6:	4b38      	ldr	r3, [pc, #224]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <HAL_RCC_OscConfig+0x17a>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e314      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f0e:	4b32      	ldr	r3, [pc, #200]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f023 0219 	bic.w	r2, r3, #25
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	492f      	ldr	r1, [pc, #188]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fa fcd2 	bl	80028c8 <HAL_GetTick>
 8007f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f28:	f7fa fcce 	bl	80028c8 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e2fe      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f3a:	4b27      	ldr	r3, [pc, #156]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f46:	4b24      	ldr	r3, [pc, #144]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	061b      	lsls	r3, r3, #24
 8007f54:	4920      	ldr	r1, [pc, #128]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f5a:	e045      	b.n	8007fe8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d026      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f64:	4b1c      	ldr	r3, [pc, #112]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f023 0219 	bic.w	r2, r3, #25
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4919      	ldr	r1, [pc, #100]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f76:	f7fa fca7 	bl	80028c8 <HAL_GetTick>
 8007f7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f7c:	e008      	b.n	8007f90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f7e:	f7fa fca3 	bl	80028c8 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d901      	bls.n	8007f90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e2d3      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f90:	4b11      	ldr	r3, [pc, #68]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0f0      	beq.n	8007f7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	061b      	lsls	r3, r3, #24
 8007faa:	490b      	ldr	r1, [pc, #44]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	604b      	str	r3, [r1, #4]
 8007fb0:	e01a      	b.n	8007fe8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fb2:	4b09      	ldr	r3, [pc, #36]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a08      	ldr	r2, [pc, #32]	@ (8007fd8 <HAL_RCC_OscConfig+0x244>)
 8007fb8:	f023 0301 	bic.w	r3, r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fbe:	f7fa fc83 	bl	80028c8 <HAL_GetTick>
 8007fc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fc4:	e00a      	b.n	8007fdc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fc6:	f7fa fc7f 	bl	80028c8 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d903      	bls.n	8007fdc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e2af      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
 8007fd8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fdc:	4b96      	ldr	r3, [pc, #600]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1ee      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d06a      	beq.n	80080ca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ff4:	4b90      	ldr	r3, [pc, #576]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ffc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ffe:	4b8e      	ldr	r3, [pc, #568]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008002:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b08      	cmp	r3, #8
 8008008:	d007      	beq.n	800801a <HAL_RCC_OscConfig+0x286>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b18      	cmp	r3, #24
 800800e:	d11b      	bne.n	8008048 <HAL_RCC_OscConfig+0x2b4>
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	2b01      	cmp	r3, #1
 8008018:	d116      	bne.n	8008048 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800801a:	4b87      	ldr	r3, [pc, #540]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <HAL_RCC_OscConfig+0x29e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	2b80      	cmp	r3, #128	@ 0x80
 800802c:	d001      	beq.n	8008032 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e282      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008032:	4b81      	ldr	r3, [pc, #516]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	497d      	ldr	r1, [pc, #500]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008046:	e040      	b.n	80080ca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d023      	beq.n	8008098 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008050:	4b79      	ldr	r3, [pc, #484]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a78      	ldr	r2, [pc, #480]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805c:	f7fa fc34 	bl	80028c8 <HAL_GetTick>
 8008060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008064:	f7fa fc30 	bl	80028c8 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e260      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008076:	4b70      	ldr	r3, [pc, #448]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008082:	4b6d      	ldr	r3, [pc, #436]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	4969      	ldr	r1, [pc, #420]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008092:	4313      	orrs	r3, r2
 8008094:	60cb      	str	r3, [r1, #12]
 8008096:	e018      	b.n	80080ca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008098:	4b67      	ldr	r3, [pc, #412]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a66      	ldr	r2, [pc, #408]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800809e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a4:	f7fa fc10 	bl	80028c8 <HAL_GetTick>
 80080a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080ac:	f7fa fc0c 	bl	80028c8 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e23c      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080be:	4b5e      	ldr	r3, [pc, #376]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f0      	bne.n	80080ac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d036      	beq.n	8008144 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d019      	beq.n	8008112 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080de:	4b56      	ldr	r3, [pc, #344]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 80080e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e2:	4a55      	ldr	r2, [pc, #340]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 80080e4:	f043 0301 	orr.w	r3, r3, #1
 80080e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ea:	f7fa fbed 	bl	80028c8 <HAL_GetTick>
 80080ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080f2:	f7fa fbe9 	bl	80028c8 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e219      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008104:	4b4c      	ldr	r3, [pc, #304]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0f0      	beq.n	80080f2 <HAL_RCC_OscConfig+0x35e>
 8008110:	e018      	b.n	8008144 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008112:	4b49      	ldr	r3, [pc, #292]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008116:	4a48      	ldr	r2, [pc, #288]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800811e:	f7fa fbd3 	bl	80028c8 <HAL_GetTick>
 8008122:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008124:	e008      	b.n	8008138 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008126:	f7fa fbcf 	bl	80028c8 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e1ff      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008138:	4b3f      	ldr	r3, [pc, #252]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800813a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f0      	bne.n	8008126 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d036      	beq.n	80081be <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d019      	beq.n	800818c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008158:	4b37      	ldr	r3, [pc, #220]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a36      	ldr	r2, [pc, #216]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800815e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008162:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008164:	f7fa fbb0 	bl	80028c8 <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800816c:	f7fa fbac 	bl	80028c8 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e1dc      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800817e:	4b2e      	ldr	r3, [pc, #184]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f0      	beq.n	800816c <HAL_RCC_OscConfig+0x3d8>
 800818a:	e018      	b.n	80081be <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800818c:	4b2a      	ldr	r3, [pc, #168]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a29      	ldr	r2, [pc, #164]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008196:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008198:	f7fa fb96 	bl	80028c8 <HAL_GetTick>
 800819c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081a0:	f7fa fb92 	bl	80028c8 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e1c2      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081b2:	4b21      	ldr	r3, [pc, #132]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f0      	bne.n	80081a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 8086 	beq.w	80082d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081cc:	4b1b      	ldr	r3, [pc, #108]	@ (800823c <HAL_RCC_OscConfig+0x4a8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a1a      	ldr	r2, [pc, #104]	@ (800823c <HAL_RCC_OscConfig+0x4a8>)
 80081d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081d8:	f7fa fb76 	bl	80028c8 <HAL_GetTick>
 80081dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081de:	e008      	b.n	80081f2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081e0:	f7fa fb72 	bl	80028c8 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b64      	cmp	r3, #100	@ 0x64
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e1a2      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081f2:	4b12      	ldr	r3, [pc, #72]	@ (800823c <HAL_RCC_OscConfig+0x4a8>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0f0      	beq.n	80081e0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d106      	bne.n	8008214 <HAL_RCC_OscConfig+0x480>
 8008206:	4b0c      	ldr	r3, [pc, #48]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820a:	4a0b      	ldr	r2, [pc, #44]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6713      	str	r3, [r2, #112]	@ 0x70
 8008212:	e032      	b.n	800827a <HAL_RCC_OscConfig+0x4e6>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d111      	bne.n	8008240 <HAL_RCC_OscConfig+0x4ac>
 800821c:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800821e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008220:	4a05      	ldr	r2, [pc, #20]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 8008222:	f023 0301 	bic.w	r3, r3, #1
 8008226:	6713      	str	r3, [r2, #112]	@ 0x70
 8008228:	4b03      	ldr	r3, [pc, #12]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800822a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822c:	4a02      	ldr	r2, [pc, #8]	@ (8008238 <HAL_RCC_OscConfig+0x4a4>)
 800822e:	f023 0304 	bic.w	r3, r3, #4
 8008232:	6713      	str	r3, [r2, #112]	@ 0x70
 8008234:	e021      	b.n	800827a <HAL_RCC_OscConfig+0x4e6>
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400
 800823c:	58024800 	.word	0x58024800
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b05      	cmp	r3, #5
 8008246:	d10c      	bne.n	8008262 <HAL_RCC_OscConfig+0x4ce>
 8008248:	4b83      	ldr	r3, [pc, #524]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800824a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824c:	4a82      	ldr	r2, [pc, #520]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800824e:	f043 0304 	orr.w	r3, r3, #4
 8008252:	6713      	str	r3, [r2, #112]	@ 0x70
 8008254:	4b80      	ldr	r3, [pc, #512]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008258:	4a7f      	ldr	r2, [pc, #508]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008260:	e00b      	b.n	800827a <HAL_RCC_OscConfig+0x4e6>
 8008262:	4b7d      	ldr	r3, [pc, #500]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008266:	4a7c      	ldr	r2, [pc, #496]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008268:	f023 0301 	bic.w	r3, r3, #1
 800826c:	6713      	str	r3, [r2, #112]	@ 0x70
 800826e:	4b7a      	ldr	r3, [pc, #488]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008272:	4a79      	ldr	r2, [pc, #484]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008274:	f023 0304 	bic.w	r3, r3, #4
 8008278:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d015      	beq.n	80082ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008282:	f7fa fb21 	bl	80028c8 <HAL_GetTick>
 8008286:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008288:	e00a      	b.n	80082a0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800828a:	f7fa fb1d 	bl	80028c8 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008298:	4293      	cmp	r3, r2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e14b      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082a0:	4b6d      	ldr	r3, [pc, #436]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80082a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0ee      	beq.n	800828a <HAL_RCC_OscConfig+0x4f6>
 80082ac:	e014      	b.n	80082d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ae:	f7fa fb0b 	bl	80028c8 <HAL_GetTick>
 80082b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082b4:	e00a      	b.n	80082cc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b6:	f7fa fb07 	bl	80028c8 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e135      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082cc:	4b62      	ldr	r3, [pc, #392]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80082ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1ee      	bne.n	80082b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 812a 	beq.w	8008536 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082e2:	4b5d      	ldr	r3, [pc, #372]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082ea:	2b18      	cmp	r3, #24
 80082ec:	f000 80ba 	beq.w	8008464 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f040 8095 	bne.w	8008424 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082fa:	4b57      	ldr	r3, [pc, #348]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a56      	ldr	r2, [pc, #344]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008300:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008306:	f7fa fadf 	bl	80028c8 <HAL_GetTick>
 800830a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800830c:	e008      	b.n	8008320 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800830e:	f7fa fadb 	bl	80028c8 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e10b      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008320:	4b4d      	ldr	r3, [pc, #308]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f0      	bne.n	800830e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800832c:	4b4a      	ldr	r3, [pc, #296]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800832e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008330:	4b4a      	ldr	r3, [pc, #296]	@ (800845c <HAL_RCC_OscConfig+0x6c8>)
 8008332:	4013      	ands	r3, r2
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800833c:	0112      	lsls	r2, r2, #4
 800833e:	430a      	orrs	r2, r1
 8008340:	4945      	ldr	r1, [pc, #276]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008342:	4313      	orrs	r3, r2
 8008344:	628b      	str	r3, [r1, #40]	@ 0x28
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	3b01      	subs	r3, #1
 800834c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008354:	3b01      	subs	r3, #1
 8008356:	025b      	lsls	r3, r3, #9
 8008358:	b29b      	uxth	r3, r3
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008360:	3b01      	subs	r3, #1
 8008362:	041b      	lsls	r3, r3, #16
 8008364:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836e:	3b01      	subs	r3, #1
 8008370:	061b      	lsls	r3, r3, #24
 8008372:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008376:	4938      	ldr	r1, [pc, #224]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008378:	4313      	orrs	r3, r2
 800837a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800837c:	4b36      	ldr	r3, [pc, #216]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	4a35      	ldr	r2, [pc, #212]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008382:	f023 0301 	bic.w	r3, r3, #1
 8008386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008388:	4b33      	ldr	r3, [pc, #204]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800838a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800838c:	4b34      	ldr	r3, [pc, #208]	@ (8008460 <HAL_RCC_OscConfig+0x6cc>)
 800838e:	4013      	ands	r3, r2
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008394:	00d2      	lsls	r2, r2, #3
 8008396:	4930      	ldr	r1, [pc, #192]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008398:	4313      	orrs	r3, r2
 800839a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800839c:	4b2e      	ldr	r3, [pc, #184]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	f023 020c 	bic.w	r2, r3, #12
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a8:	492b      	ldr	r1, [pc, #172]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	f023 0202 	bic.w	r2, r3, #2
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ba:	4927      	ldr	r1, [pc, #156]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083c0:	4b25      	ldr	r3, [pc, #148]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	4a24      	ldr	r2, [pc, #144]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083cc:	4b22      	ldr	r3, [pc, #136]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	4a21      	ldr	r2, [pc, #132]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083f0:	4b19      	ldr	r3, [pc, #100]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a18      	ldr	r2, [pc, #96]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 80083f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083fc:	f7fa fa64 	bl	80028c8 <HAL_GetTick>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008404:	f7fa fa60 	bl	80028c8 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e090      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008416:	4b10      	ldr	r3, [pc, #64]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f0      	beq.n	8008404 <HAL_RCC_OscConfig+0x670>
 8008422:	e088      	b.n	8008536 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008424:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a0b      	ldr	r2, [pc, #44]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800842a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800842e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fa fa4a 	bl	80028c8 <HAL_GetTick>
 8008434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008438:	f7fa fa46 	bl	80028c8 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e076      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800844a:	4b03      	ldr	r3, [pc, #12]	@ (8008458 <HAL_RCC_OscConfig+0x6c4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1f0      	bne.n	8008438 <HAL_RCC_OscConfig+0x6a4>
 8008456:	e06e      	b.n	8008536 <HAL_RCC_OscConfig+0x7a2>
 8008458:	58024400 	.word	0x58024400
 800845c:	fffffc0c 	.word	0xfffffc0c
 8008460:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008464:	4b36      	ldr	r3, [pc, #216]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800846a:	4b35      	ldr	r3, [pc, #212]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 800846c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008474:	2b01      	cmp	r3, #1
 8008476:	d031      	beq.n	80084dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f003 0203 	and.w	r2, r3, #3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008482:	429a      	cmp	r2, r3
 8008484:	d12a      	bne.n	80084dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	091b      	lsrs	r3, r3, #4
 800848a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d122      	bne.n	80084dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d11a      	bne.n	80084dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	0a5b      	lsrs	r3, r3, #9
 80084aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d111      	bne.n	80084dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d108      	bne.n	80084dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	0e1b      	lsrs	r3, r3, #24
 80084ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084d8:	429a      	cmp	r2, r3
 80084da:	d001      	beq.n	80084e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e02b      	b.n	8008538 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084e0:	4b17      	ldr	r3, [pc, #92]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 80084e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e4:	08db      	lsrs	r3, r3, #3
 80084e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d01f      	beq.n	8008536 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084f6:	4b12      	ldr	r3, [pc, #72]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 80084f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fa:	4a11      	ldr	r2, [pc, #68]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 80084fc:	f023 0301 	bic.w	r3, r3, #1
 8008500:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008502:	f7fa f9e1 	bl	80028c8 <HAL_GetTick>
 8008506:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008508:	bf00      	nop
 800850a:	f7fa f9dd 	bl	80028c8 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	4293      	cmp	r3, r2
 8008514:	d0f9      	beq.n	800850a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008516:	4b0a      	ldr	r3, [pc, #40]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 8008518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800851a:	4b0a      	ldr	r3, [pc, #40]	@ (8008544 <HAL_RCC_OscConfig+0x7b0>)
 800851c:	4013      	ands	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008522:	00d2      	lsls	r2, r2, #3
 8008524:	4906      	ldr	r1, [pc, #24]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 8008526:	4313      	orrs	r3, r2
 8008528:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800852a:	4b05      	ldr	r3, [pc, #20]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 800852c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852e:	4a04      	ldr	r2, [pc, #16]	@ (8008540 <HAL_RCC_OscConfig+0x7ac>)
 8008530:	f043 0301 	orr.w	r3, r3, #1
 8008534:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3730      	adds	r7, #48	@ 0x30
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	58024400 	.word	0x58024400
 8008544:	ffff0007 	.word	0xffff0007

08008548 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e19c      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800855c:	4b8a      	ldr	r3, [pc, #552]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d910      	bls.n	800858c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800856a:	4b87      	ldr	r3, [pc, #540]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f023 020f 	bic.w	r2, r3, #15
 8008572:	4985      	ldr	r1, [pc, #532]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	4313      	orrs	r3, r2
 8008578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800857a:	4b83      	ldr	r3, [pc, #524]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d001      	beq.n	800858c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e184      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d010      	beq.n	80085ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691a      	ldr	r2, [r3, #16]
 800859c:	4b7b      	ldr	r3, [pc, #492]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d908      	bls.n	80085ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085a8:	4b78      	ldr	r3, [pc, #480]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	4975      	ldr	r1, [pc, #468]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d010      	beq.n	80085e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695a      	ldr	r2, [r3, #20]
 80085ca:	4b70      	ldr	r3, [pc, #448]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d908      	bls.n	80085e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085d6:	4b6d      	ldr	r3, [pc, #436]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	496a      	ldr	r1, [pc, #424]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0310 	and.w	r3, r3, #16
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d010      	beq.n	8008616 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	4b64      	ldr	r3, [pc, #400]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008600:	429a      	cmp	r2, r3
 8008602:	d908      	bls.n	8008616 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008604:	4b61      	ldr	r3, [pc, #388]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	495e      	ldr	r1, [pc, #376]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008612:	4313      	orrs	r3, r2
 8008614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d010      	beq.n	8008644 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69da      	ldr	r2, [r3, #28]
 8008626:	4b59      	ldr	r3, [pc, #356]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800862e:	429a      	cmp	r2, r3
 8008630:	d908      	bls.n	8008644 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008632:	4b56      	ldr	r3, [pc, #344]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	4953      	ldr	r1, [pc, #332]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008640:	4313      	orrs	r3, r2
 8008642:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d010      	beq.n	8008672 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	4b4d      	ldr	r3, [pc, #308]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	429a      	cmp	r2, r3
 800865e:	d908      	bls.n	8008672 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008660:	4b4a      	ldr	r3, [pc, #296]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f023 020f 	bic.w	r2, r3, #15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	4947      	ldr	r1, [pc, #284]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 800866e:	4313      	orrs	r3, r2
 8008670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d055      	beq.n	800872a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800867e:	4b43      	ldr	r3, [pc, #268]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	4940      	ldr	r1, [pc, #256]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 800868c:	4313      	orrs	r3, r2
 800868e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d107      	bne.n	80086a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008698:	4b3c      	ldr	r3, [pc, #240]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d121      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e0f6      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d107      	bne.n	80086c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086b0:	4b36      	ldr	r3, [pc, #216]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d115      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e0ea      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d107      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086c8:	4b30      	ldr	r3, [pc, #192]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0de      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d8:	4b2c      	ldr	r3, [pc, #176]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0d6      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086e8:	4b28      	ldr	r3, [pc, #160]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f023 0207 	bic.w	r2, r3, #7
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	4925      	ldr	r1, [pc, #148]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086fa:	f7fa f8e5 	bl	80028c8 <HAL_GetTick>
 80086fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008700:	e00a      	b.n	8008718 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008702:	f7fa f8e1 	bl	80028c8 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008710:	4293      	cmp	r3, r2
 8008712:	d901      	bls.n	8008718 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e0be      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008718:	4b1c      	ldr	r3, [pc, #112]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	429a      	cmp	r2, r3
 8008728:	d1eb      	bne.n	8008702 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d010      	beq.n	8008758 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	4b14      	ldr	r3, [pc, #80]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	429a      	cmp	r2, r3
 8008744:	d208      	bcs.n	8008758 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008746:	4b11      	ldr	r3, [pc, #68]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f023 020f 	bic.w	r2, r3, #15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	490e      	ldr	r1, [pc, #56]	@ (800878c <HAL_RCC_ClockConfig+0x244>)
 8008754:	4313      	orrs	r3, r2
 8008756:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008758:	4b0b      	ldr	r3, [pc, #44]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d214      	bcs.n	8008790 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008766:	4b08      	ldr	r3, [pc, #32]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f023 020f 	bic.w	r2, r3, #15
 800876e:	4906      	ldr	r1, [pc, #24]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	4313      	orrs	r3, r2
 8008774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008776:	4b04      	ldr	r3, [pc, #16]	@ (8008788 <HAL_RCC_ClockConfig+0x240>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d005      	beq.n	8008790 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e086      	b.n	8008896 <HAL_RCC_ClockConfig+0x34e>
 8008788:	52002000 	.word	0x52002000
 800878c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d010      	beq.n	80087be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691a      	ldr	r2, [r3, #16]
 80087a0:	4b3f      	ldr	r3, [pc, #252]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d208      	bcs.n	80087be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087ac:	4b3c      	ldr	r3, [pc, #240]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	4939      	ldr	r1, [pc, #228]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d010      	beq.n	80087ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695a      	ldr	r2, [r3, #20]
 80087ce:	4b34      	ldr	r3, [pc, #208]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d208      	bcs.n	80087ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087da:	4b31      	ldr	r3, [pc, #196]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	492e      	ldr	r1, [pc, #184]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d010      	beq.n	800881a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	4b28      	ldr	r3, [pc, #160]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008804:	429a      	cmp	r2, r3
 8008806:	d208      	bcs.n	800881a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008808:	4b25      	ldr	r3, [pc, #148]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	4922      	ldr	r1, [pc, #136]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 8008816:	4313      	orrs	r3, r2
 8008818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0320 	and.w	r3, r3, #32
 8008822:	2b00      	cmp	r3, #0
 8008824:	d010      	beq.n	8008848 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	4b1d      	ldr	r3, [pc, #116]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008832:	429a      	cmp	r2, r3
 8008834:	d208      	bcs.n	8008848 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008836:	4b1a      	ldr	r3, [pc, #104]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	4917      	ldr	r1, [pc, #92]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 8008844:	4313      	orrs	r3, r2
 8008846:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008848:	f000 f834 	bl	80088b4 <HAL_RCC_GetSysClockFreq>
 800884c:	4602      	mov	r2, r0
 800884e:	4b14      	ldr	r3, [pc, #80]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	4912      	ldr	r1, [pc, #72]	@ (80088a4 <HAL_RCC_ClockConfig+0x35c>)
 800885a:	5ccb      	ldrb	r3, [r1, r3]
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	fa22 f303 	lsr.w	r3, r2, r3
 8008864:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008866:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <HAL_RCC_ClockConfig+0x358>)
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	4a0d      	ldr	r2, [pc, #52]	@ (80088a4 <HAL_RCC_ClockConfig+0x35c>)
 8008870:	5cd3      	ldrb	r3, [r2, r3]
 8008872:	f003 031f 	and.w	r3, r3, #31
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
 800887c:	4a0a      	ldr	r2, [pc, #40]	@ (80088a8 <HAL_RCC_ClockConfig+0x360>)
 800887e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008880:	4a0a      	ldr	r2, [pc, #40]	@ (80088ac <HAL_RCC_ClockConfig+0x364>)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008886:	4b0a      	ldr	r3, [pc, #40]	@ (80088b0 <HAL_RCC_ClockConfig+0x368>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f7f9 ffd2 	bl	8002834 <HAL_InitTick>
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	58024400 	.word	0x58024400
 80088a4:	0800fc10 	.word	0x0800fc10
 80088a8:	24000058 	.word	0x24000058
 80088ac:	24000054 	.word	0x24000054
 80088b0:	2400005c 	.word	0x2400005c

080088b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b089      	sub	sp, #36	@ 0x24
 80088b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088ba:	4bb3      	ldr	r3, [pc, #716]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088c2:	2b18      	cmp	r3, #24
 80088c4:	f200 8155 	bhi.w	8008b72 <HAL_RCC_GetSysClockFreq+0x2be>
 80088c8:	a201      	add	r2, pc, #4	@ (adr r2, 80088d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008b73 	.word	0x08008b73
 80088d8:	08008b73 	.word	0x08008b73
 80088dc:	08008b73 	.word	0x08008b73
 80088e0:	08008b73 	.word	0x08008b73
 80088e4:	08008b73 	.word	0x08008b73
 80088e8:	08008b73 	.word	0x08008b73
 80088ec:	08008b73 	.word	0x08008b73
 80088f0:	0800895b 	.word	0x0800895b
 80088f4:	08008b73 	.word	0x08008b73
 80088f8:	08008b73 	.word	0x08008b73
 80088fc:	08008b73 	.word	0x08008b73
 8008900:	08008b73 	.word	0x08008b73
 8008904:	08008b73 	.word	0x08008b73
 8008908:	08008b73 	.word	0x08008b73
 800890c:	08008b73 	.word	0x08008b73
 8008910:	08008961 	.word	0x08008961
 8008914:	08008b73 	.word	0x08008b73
 8008918:	08008b73 	.word	0x08008b73
 800891c:	08008b73 	.word	0x08008b73
 8008920:	08008b73 	.word	0x08008b73
 8008924:	08008b73 	.word	0x08008b73
 8008928:	08008b73 	.word	0x08008b73
 800892c:	08008b73 	.word	0x08008b73
 8008930:	08008967 	.word	0x08008967
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008934:	4b94      	ldr	r3, [pc, #592]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b00      	cmp	r3, #0
 800893e:	d009      	beq.n	8008954 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008940:	4b91      	ldr	r3, [pc, #580]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	08db      	lsrs	r3, r3, #3
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	4a90      	ldr	r2, [pc, #576]	@ (8008b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
 8008950:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008952:	e111      	b.n	8008b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008954:	4b8d      	ldr	r3, [pc, #564]	@ (8008b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008956:	61bb      	str	r3, [r7, #24]
      break;
 8008958:	e10e      	b.n	8008b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800895a:	4b8d      	ldr	r3, [pc, #564]	@ (8008b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800895c:	61bb      	str	r3, [r7, #24]
      break;
 800895e:	e10b      	b.n	8008b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008960:	4b8c      	ldr	r3, [pc, #560]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008962:	61bb      	str	r3, [r7, #24]
      break;
 8008964:	e108      	b.n	8008b78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008966:	4b88      	ldr	r3, [pc, #544]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008970:	4b85      	ldr	r3, [pc, #532]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	091b      	lsrs	r3, r3, #4
 8008976:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800897a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800897c:	4b82      	ldr	r3, [pc, #520]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008986:	4b80      	ldr	r3, [pc, #512]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	fb02 f303 	mul.w	r3, r2, r3
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 80e1 	beq.w	8008b6c <HAL_RCC_GetSysClockFreq+0x2b8>
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	f000 8083 	beq.w	8008ab8 <HAL_RCC_GetSysClockFreq+0x204>
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	f200 80a1 	bhi.w	8008afc <HAL_RCC_GetSysClockFreq+0x248>
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_RCC_GetSysClockFreq+0x114>
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d056      	beq.n	8008a74 <HAL_RCC_GetSysClockFreq+0x1c0>
 80089c6:	e099      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d02d      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089d4:	4b6c      	ldr	r3, [pc, #432]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	08db      	lsrs	r3, r3, #3
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	4a6b      	ldr	r2, [pc, #428]	@ (8008b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
 80089e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b62      	ldr	r3, [pc, #392]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a2e:	e087      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008b9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b51      	ldr	r3, [pc, #324]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a72:	e065      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b40      	ldr	r3, [pc, #256]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ab6:	e043      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008ba4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b2f      	ldr	r3, [pc, #188]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ade:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008afa:	e021      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b40:	4b11      	ldr	r3, [pc, #68]	@ (8008b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b44:	0a5b      	lsrs	r3, r3, #9
 8008b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	ee07 3a90 	vmov	s15, r3
 8008b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b64:	ee17 3a90 	vmov	r3, s15
 8008b68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b6a:	e005      	b.n	8008b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61bb      	str	r3, [r7, #24]
      break;
 8008b70:	e002      	b.n	8008b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b72:	4b07      	ldr	r3, [pc, #28]	@ (8008b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b74:	61bb      	str	r3, [r7, #24]
      break;
 8008b76:	bf00      	nop
  }

  return sysclockfreq;
 8008b78:	69bb      	ldr	r3, [r7, #24]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3724      	adds	r7, #36	@ 0x24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	58024400 	.word	0x58024400
 8008b8c:	03d09000 	.word	0x03d09000
 8008b90:	003d0900 	.word	0x003d0900
 8008b94:	017d7840 	.word	0x017d7840
 8008b98:	46000000 	.word	0x46000000
 8008b9c:	4c742400 	.word	0x4c742400
 8008ba0:	4a742400 	.word	0x4a742400
 8008ba4:	4bbebc20 	.word	0x4bbebc20

08008ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bae:	f7ff fe81 	bl	80088b4 <HAL_RCC_GetSysClockFreq>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b10      	ldr	r3, [pc, #64]	@ (8008bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	0a1b      	lsrs	r3, r3, #8
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	490f      	ldr	r1, [pc, #60]	@ (8008bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8008bc0:	5ccb      	ldrb	r3, [r1, r3]
 8008bc2:	f003 031f 	and.w	r3, r3, #31
 8008bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	f003 030f 	and.w	r3, r3, #15
 8008bd4:	4a09      	ldr	r2, [pc, #36]	@ (8008bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8008bd6:	5cd3      	ldrb	r3, [r2, r3]
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	fa22 f303 	lsr.w	r3, r2, r3
 8008be2:	4a07      	ldr	r2, [pc, #28]	@ (8008c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8008be4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008be6:	4a07      	ldr	r2, [pc, #28]	@ (8008c04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bec:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bee:	681b      	ldr	r3, [r3, #0]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	58024400 	.word	0x58024400
 8008bfc:	0800fc10 	.word	0x0800fc10
 8008c00:	24000058 	.word	0x24000058
 8008c04:	24000054 	.word	0x24000054

08008c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c0c:	f7ff ffcc 	bl	8008ba8 <HAL_RCC_GetHCLKFreq>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	091b      	lsrs	r3, r3, #4
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	4904      	ldr	r1, [pc, #16]	@ (8008c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c1e:	5ccb      	ldrb	r3, [r1, r3]
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	58024400 	.word	0x58024400
 8008c30:	0800fc10 	.word	0x0800fc10

08008c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c38:	f7ff ffb6 	bl	8008ba8 <HAL_RCC_GetHCLKFreq>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	4904      	ldr	r1, [pc, #16]	@ (8008c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c4a:	5ccb      	ldrb	r3, [r1, r3]
 8008c4c:	f003 031f 	and.w	r3, r3, #31
 8008c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	0800fc10 	.word	0x0800fc10

08008c60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c64:	b0c6      	sub	sp, #280	@ 0x118
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008c84:	2500      	movs	r5, #0
 8008c86:	ea54 0305 	orrs.w	r3, r4, r5
 8008c8a:	d049      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c96:	d02f      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008c98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c9c:	d828      	bhi.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ca2:	d01a      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ca8:	d822      	bhi.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cb2:	d007      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cb4:	e01c      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb6:	4bab      	ldr	r3, [pc, #684]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cba:	4aaa      	ldr	r2, [pc, #680]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cc2:	e01a      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc8:	3308      	adds	r3, #8
 8008cca:	2102      	movs	r1, #2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f002 fa49 	bl	800b164 <RCCEx_PLL2_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cd8:	e00f      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cde:	3328      	adds	r3, #40	@ 0x28
 8008ce0:	2102      	movs	r1, #2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f002 faf0 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cee:	e004      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cf6:	e000      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10a      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d02:	4b98      	ldr	r3, [pc, #608]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d10:	4a94      	ldr	r2, [pc, #592]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d12:	430b      	orrs	r3, r1
 8008d14:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d16:	e003      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008d2c:	f04f 0900 	mov.w	r9, #0
 8008d30:	ea58 0309 	orrs.w	r3, r8, r9
 8008d34:	d047      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d82a      	bhi.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d40:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d5d 	.word	0x08008d5d
 8008d4c:	08008d6b 	.word	0x08008d6b
 8008d50:	08008d81 	.word	0x08008d81
 8008d54:	08008d9f 	.word	0x08008d9f
 8008d58:	08008d9f 	.word	0x08008d9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d5c:	4b81      	ldr	r3, [pc, #516]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	4a80      	ldr	r2, [pc, #512]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d68:	e01a      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6e:	3308      	adds	r3, #8
 8008d70:	2100      	movs	r1, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f002 f9f6 	bl	800b164 <RCCEx_PLL2_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d7e:	e00f      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d84:	3328      	adds	r3, #40	@ 0x28
 8008d86:	2100      	movs	r1, #0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f002 fa9d 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d94:	e004      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d9c:	e000      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008da8:	4b6e      	ldr	r3, [pc, #440]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dac:	f023 0107 	bic.w	r1, r3, #7
 8008db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db6:	4a6b      	ldr	r2, [pc, #428]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008db8:	430b      	orrs	r3, r1
 8008dba:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dbc:	e003      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008dd2:	f04f 0b00 	mov.w	fp, #0
 8008dd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8008dda:	d05b      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008de4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008de8:	d03b      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008dea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008dee:	d834      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008df0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008df4:	d037      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008df6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008dfa:	d82e      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008dfc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e00:	d033      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e06:	d828      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e0c:	d01a      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e12:	d822      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e1c:	d007      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e1e:	e01c      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e20:	4b50      	ldr	r3, [pc, #320]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	4a4f      	ldr	r2, [pc, #316]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e2c:	e01e      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e32:	3308      	adds	r3, #8
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f002 f994 	bl	800b164 <RCCEx_PLL2_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e42:	e013      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e48:	3328      	adds	r3, #40	@ 0x28
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f002 fa3b 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e58:	e008      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e60:	e004      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e62:	bf00      	nop
 8008e64:	e002      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e66:	bf00      	nop
 8008e68:	e000      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e74:	4b3b      	ldr	r3, [pc, #236]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e78:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e84:	4a37      	ldr	r2, [pc, #220]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e86:	430b      	orrs	r3, r1
 8008e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e8a:	e003      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008eaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	d05d      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ebc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ec0:	d03b      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008ec2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ec6:	d834      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ec8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ecc:	d037      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008ece:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ed2:	d82e      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ed4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ed8:	d033      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008eda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ede:	d828      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ee0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ee4:	d01a      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008eea:	d822      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ef4:	d007      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008ef6:	e01c      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efc:	4a19      	ldr	r2, [pc, #100]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f04:	e01e      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f002 f928 	bl	800b164 <RCCEx_PLL2_Config>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f1a:	e013      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	3328      	adds	r3, #40	@ 0x28
 8008f22:	2100      	movs	r1, #0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f002 f9cf 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f30:	e008      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f38:	e004      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f3a:	bf00      	nop
 8008f3c:	e002      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f3e:	bf00      	nop
 8008f40:	e000      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10d      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f4c:	4b05      	ldr	r3, [pc, #20]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f5c:	4a01      	ldr	r2, [pc, #4]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f62:	e005      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008f7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	d03a      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f96:	2b30      	cmp	r3, #48	@ 0x30
 8008f98:	d01f      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008f9a:	2b30      	cmp	r3, #48	@ 0x30
 8008f9c:	d819      	bhi.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d00c      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008fa2:	2b20      	cmp	r3, #32
 8008fa4:	d815      	bhi.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d019      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008faa:	2b10      	cmp	r3, #16
 8008fac:	d111      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fae:	4baa      	ldr	r3, [pc, #680]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb2:	4aa9      	ldr	r2, [pc, #676]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008fba:	e011      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	2102      	movs	r1, #2
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 f8cd 	bl	800b164 <RCCEx_PLL2_Config>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008fd0:	e006      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fd8:	e002      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008fda:	bf00      	nop
 8008fdc:	e000      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008fe8:	4b9b      	ldr	r3, [pc, #620]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff6:	4a98      	ldr	r2, [pc, #608]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ffc:	e003      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009002:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009016:	2300      	movs	r3, #0
 8009018:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800901c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009020:	460b      	mov	r3, r1
 8009022:	4313      	orrs	r3, r2
 8009024:	d051      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800902a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800902c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009030:	d035      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009036:	d82e      	bhi.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009038:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800903c:	d031      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800903e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009042:	d828      	bhi.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009048:	d01a      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800904a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800904e:	d822      	bhi.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009058:	d007      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800905a:	e01c      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905c:	4b7e      	ldr	r3, [pc, #504]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800905e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009060:	4a7d      	ldr	r2, [pc, #500]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009068:	e01c      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800906a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906e:	3308      	adds	r3, #8
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f002 f876 	bl	800b164 <RCCEx_PLL2_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800907e:	e011      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009084:	3328      	adds	r3, #40	@ 0x28
 8009086:	2100      	movs	r1, #0
 8009088:	4618      	mov	r0, r3
 800908a:	f002 f91d 	bl	800b2c8 <RCCEx_PLL3_Config>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009094:	e006      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800909c:	e002      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800909e:	bf00      	nop
 80090a0:	e000      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090ac:	4b6a      	ldr	r3, [pc, #424]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80090b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090ba:	4a67      	ldr	r2, [pc, #412]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090bc:	430b      	orrs	r3, r1
 80090be:	6513      	str	r3, [r2, #80]	@ 0x50
 80090c0:	e003      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80090d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090da:	2300      	movs	r3, #0
 80090dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4313      	orrs	r3, r2
 80090e8:	d053      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80090ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090f4:	d033      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80090f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090fa:	d82c      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009100:	d02f      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009102:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009106:	d826      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009108:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800910c:	d02b      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800910e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009112:	d820      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009118:	d012      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800911a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800911e:	d81a      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d022      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009128:	d115      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912e:	3308      	adds	r3, #8
 8009130:	2101      	movs	r1, #1
 8009132:	4618      	mov	r0, r3
 8009134:	f002 f816 	bl	800b164 <RCCEx_PLL2_Config>
 8009138:	4603      	mov	r3, r0
 800913a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800913e:	e015      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009144:	3328      	adds	r3, #40	@ 0x28
 8009146:	2101      	movs	r1, #1
 8009148:	4618      	mov	r0, r3
 800914a:	f002 f8bd 	bl	800b2c8 <RCCEx_PLL3_Config>
 800914e:	4603      	mov	r3, r0
 8009150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009154:	e00a      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800915c:	e006      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800915e:	bf00      	nop
 8009160:	e004      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009162:	bf00      	nop
 8009164:	e002      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800916a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800916c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009174:	4b38      	ldr	r3, [pc, #224]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009178:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009182:	4a35      	ldr	r2, [pc, #212]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009184:	430b      	orrs	r3, r1
 8009186:	6513      	str	r3, [r2, #80]	@ 0x50
 8009188:	e003      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800918e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800919e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091a2:	2300      	movs	r3, #0
 80091a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091ac:	460b      	mov	r3, r1
 80091ae:	4313      	orrs	r3, r2
 80091b0:	d058      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091be:	d033      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80091c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091c4:	d82c      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ca:	d02f      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d0:	d826      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091d6:	d02b      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80091d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091dc:	d820      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e2:	d012      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80091e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e8:	d81a      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d022      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80091ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091f2:	d115      	bne.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f8:	3308      	adds	r3, #8
 80091fa:	2101      	movs	r1, #1
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 ffb1 	bl	800b164 <RCCEx_PLL2_Config>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009208:	e015      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800920a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800920e:	3328      	adds	r3, #40	@ 0x28
 8009210:	2101      	movs	r1, #1
 8009212:	4618      	mov	r0, r3
 8009214:	f002 f858 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800921e:	e00a      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009226:	e006      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009228:	bf00      	nop
 800922a:	e004      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800922c:	bf00      	nop
 800922e:	e002      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009230:	bf00      	nop
 8009232:	e000      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009236:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10e      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800923e:	4b06      	ldr	r3, [pc, #24]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009242:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800924e:	4a02      	ldr	r2, [pc, #8]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009250:	430b      	orrs	r3, r1
 8009252:	6593      	str	r3, [r2, #88]	@ 0x58
 8009254:	e006      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009274:	2300      	movs	r3, #0
 8009276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800927a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800927e:	460b      	mov	r3, r1
 8009280:	4313      	orrs	r3, r2
 8009282:	d037      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800928a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800928e:	d00e      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009294:	d816      	bhi.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009296:	2b00      	cmp	r3, #0
 8009298:	d018      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800929a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800929e:	d111      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a0:	4bc4      	ldr	r3, [pc, #784]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	4ac3      	ldr	r2, [pc, #780]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092ac:	e00f      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b2:	3308      	adds	r3, #8
 80092b4:	2101      	movs	r1, #1
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 ff54 	bl	800b164 <RCCEx_PLL2_Config>
 80092bc:	4603      	mov	r3, r0
 80092be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092c2:	e004      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092ca:	e000      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80092cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092d6:	4bb7      	ldr	r3, [pc, #732]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80092de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092e4:	4ab3      	ldr	r2, [pc, #716]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092e6:	430b      	orrs	r3, r1
 80092e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80092ea:	e003      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800930a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800930e:	460b      	mov	r3, r1
 8009310:	4313      	orrs	r3, r2
 8009312:	d039      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800931a:	2b03      	cmp	r3, #3
 800931c:	d81c      	bhi.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800931e:	a201      	add	r2, pc, #4	@ (adr r2, 8009324 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	08009361 	.word	0x08009361
 8009328:	08009335 	.word	0x08009335
 800932c:	08009343 	.word	0x08009343
 8009330:	08009361 	.word	0x08009361
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009334:	4b9f      	ldr	r3, [pc, #636]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	4a9e      	ldr	r2, [pc, #632]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800933a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800933e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009340:	e00f      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009346:	3308      	adds	r3, #8
 8009348:	2102      	movs	r1, #2
 800934a:	4618      	mov	r0, r3
 800934c:	f001 ff0a 	bl	800b164 <RCCEx_PLL2_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009356:	e004      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800935e:	e000      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009362:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800936a:	4b92      	ldr	r3, [pc, #584]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800936c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800936e:	f023 0103 	bic.w	r1, r3, #3
 8009372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009378:	4a8e      	ldr	r2, [pc, #568]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800937a:	430b      	orrs	r3, r1
 800937c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800937e:	e003      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009398:	2300      	movs	r3, #0
 800939a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800939e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4313      	orrs	r3, r2
 80093a6:	f000 8099 	beq.w	80094dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093aa:	4b83      	ldr	r3, [pc, #524]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a82      	ldr	r2, [pc, #520]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093b6:	f7f9 fa87 	bl	80028c8 <HAL_GetTick>
 80093ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093be:	e00b      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093c0:	f7f9 fa82 	bl	80028c8 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	2b64      	cmp	r3, #100	@ 0x64
 80093ce:	d903      	bls.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093d6:	e005      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093d8:	4b77      	ldr	r3, [pc, #476]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0ed      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80093e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d173      	bne.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80093ec:	4b71      	ldr	r3, [pc, #452]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093f8:	4053      	eors	r3, r2
 80093fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d015      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009402:	4b6c      	ldr	r3, [pc, #432]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800940a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800940e:	4b69      	ldr	r3, [pc, #420]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009412:	4a68      	ldr	r2, [pc, #416]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009418:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800941a:	4b66      	ldr	r3, [pc, #408]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800941c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800941e:	4a65      	ldr	r2, [pc, #404]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009420:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009424:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009426:	4a63      	ldr	r2, [pc, #396]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800942c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800943a:	d118      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943c:	f7f9 fa44 	bl	80028c8 <HAL_GetTick>
 8009440:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009444:	e00d      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009446:	f7f9 fa3f 	bl	80028c8 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009450:	1ad2      	subs	r2, r2, r3
 8009452:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009456:	429a      	cmp	r2, r3
 8009458:	d903      	bls.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009460:	e005      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009462:	4b54      	ldr	r3, [pc, #336]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0eb      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800946e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009472:	2b00      	cmp	r3, #0
 8009474:	d129      	bne.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800947e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009486:	d10e      	bne.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009488:	4b4a      	ldr	r3, [pc, #296]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009494:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009498:	091a      	lsrs	r2, r3, #4
 800949a:	4b48      	ldr	r3, [pc, #288]	@ (80095bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800949c:	4013      	ands	r3, r2
 800949e:	4a45      	ldr	r2, [pc, #276]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a0:	430b      	orrs	r3, r1
 80094a2:	6113      	str	r3, [r2, #16]
 80094a4:	e005      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80094a6:	4b43      	ldr	r3, [pc, #268]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	4a42      	ldr	r2, [pc, #264]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80094b0:	6113      	str	r3, [r2, #16]
 80094b2:	4b40      	ldr	r3, [pc, #256]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094c2:	4a3c      	ldr	r2, [pc, #240]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094c4:	430b      	orrs	r3, r1
 80094c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80094c8:	e008      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80094d2:	e003      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	f002 0301 	and.w	r3, r2, #1
 80094e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094ec:	2300      	movs	r3, #0
 80094ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80094f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80094f6:	460b      	mov	r3, r1
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f000 808f 	beq.w	800961c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009502:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009504:	2b28      	cmp	r3, #40	@ 0x28
 8009506:	d871      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009508:	a201      	add	r2, pc, #4	@ (adr r2, 8009510 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800950a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950e:	bf00      	nop
 8009510:	080095f5 	.word	0x080095f5
 8009514:	080095ed 	.word	0x080095ed
 8009518:	080095ed 	.word	0x080095ed
 800951c:	080095ed 	.word	0x080095ed
 8009520:	080095ed 	.word	0x080095ed
 8009524:	080095ed 	.word	0x080095ed
 8009528:	080095ed 	.word	0x080095ed
 800952c:	080095ed 	.word	0x080095ed
 8009530:	080095c1 	.word	0x080095c1
 8009534:	080095ed 	.word	0x080095ed
 8009538:	080095ed 	.word	0x080095ed
 800953c:	080095ed 	.word	0x080095ed
 8009540:	080095ed 	.word	0x080095ed
 8009544:	080095ed 	.word	0x080095ed
 8009548:	080095ed 	.word	0x080095ed
 800954c:	080095ed 	.word	0x080095ed
 8009550:	080095d7 	.word	0x080095d7
 8009554:	080095ed 	.word	0x080095ed
 8009558:	080095ed 	.word	0x080095ed
 800955c:	080095ed 	.word	0x080095ed
 8009560:	080095ed 	.word	0x080095ed
 8009564:	080095ed 	.word	0x080095ed
 8009568:	080095ed 	.word	0x080095ed
 800956c:	080095ed 	.word	0x080095ed
 8009570:	080095f5 	.word	0x080095f5
 8009574:	080095ed 	.word	0x080095ed
 8009578:	080095ed 	.word	0x080095ed
 800957c:	080095ed 	.word	0x080095ed
 8009580:	080095ed 	.word	0x080095ed
 8009584:	080095ed 	.word	0x080095ed
 8009588:	080095ed 	.word	0x080095ed
 800958c:	080095ed 	.word	0x080095ed
 8009590:	080095f5 	.word	0x080095f5
 8009594:	080095ed 	.word	0x080095ed
 8009598:	080095ed 	.word	0x080095ed
 800959c:	080095ed 	.word	0x080095ed
 80095a0:	080095ed 	.word	0x080095ed
 80095a4:	080095ed 	.word	0x080095ed
 80095a8:	080095ed 	.word	0x080095ed
 80095ac:	080095ed 	.word	0x080095ed
 80095b0:	080095f5 	.word	0x080095f5
 80095b4:	58024400 	.word	0x58024400
 80095b8:	58024800 	.word	0x58024800
 80095bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c4:	3308      	adds	r3, #8
 80095c6:	2101      	movs	r1, #1
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 fdcb 	bl	800b164 <RCCEx_PLL2_Config>
 80095ce:	4603      	mov	r3, r0
 80095d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095d4:	e00f      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095da:	3328      	adds	r3, #40	@ 0x28
 80095dc:	2101      	movs	r1, #1
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fe72 	bl	800b2c8 <RCCEx_PLL3_Config>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095ea:	e004      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095f2:	e000      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80095f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80095fe:	4bbf      	ldr	r3, [pc, #764]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009602:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800960c:	4abb      	ldr	r2, [pc, #748]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800960e:	430b      	orrs	r3, r1
 8009610:	6553      	str	r3, [r2, #84]	@ 0x54
 8009612:	e003      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009614:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009618:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	f002 0302 	and.w	r3, r2, #2
 8009628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800962c:	2300      	movs	r3, #0
 800962e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009632:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009636:	460b      	mov	r3, r1
 8009638:	4313      	orrs	r3, r2
 800963a:	d041      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800963c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009642:	2b05      	cmp	r3, #5
 8009644:	d824      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009646:	a201      	add	r2, pc, #4	@ (adr r2, 800964c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	08009699 	.word	0x08009699
 8009650:	08009665 	.word	0x08009665
 8009654:	0800967b 	.word	0x0800967b
 8009658:	08009699 	.word	0x08009699
 800965c:	08009699 	.word	0x08009699
 8009660:	08009699 	.word	0x08009699
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009668:	3308      	adds	r3, #8
 800966a:	2101      	movs	r1, #1
 800966c:	4618      	mov	r0, r3
 800966e:	f001 fd79 	bl	800b164 <RCCEx_PLL2_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009678:	e00f      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800967a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800967e:	3328      	adds	r3, #40	@ 0x28
 8009680:	2101      	movs	r1, #1
 8009682:	4618      	mov	r0, r3
 8009684:	f001 fe20 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800968e:	e004      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009696:	e000      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800969a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096a2:	4b96      	ldr	r3, [pc, #600]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a6:	f023 0107 	bic.w	r1, r3, #7
 80096aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b0:	4a92      	ldr	r2, [pc, #584]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096b2:	430b      	orrs	r3, r1
 80096b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80096b6:	e003      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f002 0304 	and.w	r3, r2, #4
 80096cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096d0:	2300      	movs	r3, #0
 80096d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096da:	460b      	mov	r3, r1
 80096dc:	4313      	orrs	r3, r2
 80096de:	d044      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80096e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e8:	2b05      	cmp	r3, #5
 80096ea:	d825      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80096ec:	a201      	add	r2, pc, #4	@ (adr r2, 80096f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80096ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f2:	bf00      	nop
 80096f4:	08009741 	.word	0x08009741
 80096f8:	0800970d 	.word	0x0800970d
 80096fc:	08009723 	.word	0x08009723
 8009700:	08009741 	.word	0x08009741
 8009704:	08009741 	.word	0x08009741
 8009708:	08009741 	.word	0x08009741
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009710:	3308      	adds	r3, #8
 8009712:	2101      	movs	r1, #1
 8009714:	4618      	mov	r0, r3
 8009716:	f001 fd25 	bl	800b164 <RCCEx_PLL2_Config>
 800971a:	4603      	mov	r3, r0
 800971c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009720:	e00f      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009726:	3328      	adds	r3, #40	@ 0x28
 8009728:	2101      	movs	r1, #1
 800972a:	4618      	mov	r0, r3
 800972c:	f001 fdcc 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009736:	e004      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800973e:	e000      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10b      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800974a:	4b6c      	ldr	r3, [pc, #432]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800974c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800974e:	f023 0107 	bic.w	r1, r3, #7
 8009752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800975a:	4a68      	ldr	r2, [pc, #416]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800975c:	430b      	orrs	r3, r1
 800975e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009760:	e003      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009762:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009766:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f002 0320 	and.w	r3, r2, #32
 8009776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800977a:	2300      	movs	r3, #0
 800977c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009780:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009784:	460b      	mov	r3, r1
 8009786:	4313      	orrs	r3, r2
 8009788:	d055      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800978a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009796:	d033      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800979c:	d82c      	bhi.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800979e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a2:	d02f      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80097a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a8:	d826      	bhi.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097ae:	d02b      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80097b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097b4:	d820      	bhi.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ba:	d012      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80097bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c0:	d81a      	bhi.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d022      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80097c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ca:	d115      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d0:	3308      	adds	r3, #8
 80097d2:	2100      	movs	r1, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 fcc5 	bl	800b164 <RCCEx_PLL2_Config>
 80097da:	4603      	mov	r3, r0
 80097dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80097e0:	e015      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e6:	3328      	adds	r3, #40	@ 0x28
 80097e8:	2102      	movs	r1, #2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 fd6c 	bl	800b2c8 <RCCEx_PLL3_Config>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80097f6:	e00a      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097fe:	e006      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009800:	bf00      	nop
 8009802:	e004      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009804:	bf00      	nop
 8009806:	e002      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009808:	bf00      	nop
 800980a:	e000      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800980c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800980e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009816:	4b39      	ldr	r3, [pc, #228]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800981a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009826:	4a35      	ldr	r2, [pc, #212]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009828:	430b      	orrs	r3, r1
 800982a:	6553      	str	r3, [r2, #84]	@ 0x54
 800982c:	e003      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009832:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009842:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009846:	2300      	movs	r3, #0
 8009848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800984c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009850:	460b      	mov	r3, r1
 8009852:	4313      	orrs	r3, r2
 8009854:	d058      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800985e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009862:	d033      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009864:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009868:	d82c      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800986a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800986e:	d02f      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009874:	d826      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009876:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800987a:	d02b      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800987c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009880:	d820      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009886:	d012      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800988c:	d81a      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d022      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009896:	d115      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989c:	3308      	adds	r3, #8
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f001 fc5f 	bl	800b164 <RCCEx_PLL2_Config>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098ac:	e015      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b2:	3328      	adds	r3, #40	@ 0x28
 80098b4:	2102      	movs	r1, #2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 fd06 	bl	800b2c8 <RCCEx_PLL3_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098c2:	e00a      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098ca:	e006      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098cc:	bf00      	nop
 80098ce:	e004      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098d0:	bf00      	nop
 80098d2:	e002      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098d4:	bf00      	nop
 80098d6:	e000      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10e      	bne.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098e2:	4b06      	ldr	r3, [pc, #24]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098f2:	4a02      	ldr	r2, [pc, #8]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80098f8:	e006      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80098fa:	bf00      	nop
 80098fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009918:	2300      	movs	r3, #0
 800991a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800991e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009922:	460b      	mov	r3, r1
 8009924:	4313      	orrs	r3, r2
 8009926:	d055      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009930:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009934:	d033      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009936:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800993a:	d82c      	bhi.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800993c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009940:	d02f      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009946:	d826      	bhi.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009948:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800994c:	d02b      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800994e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009952:	d820      	bhi.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009958:	d012      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800995a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800995e:	d81a      	bhi.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009960:	2b00      	cmp	r3, #0
 8009962:	d022      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009968:	d115      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	3308      	adds	r3, #8
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f001 fbf6 	bl	800b164 <RCCEx_PLL2_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800997e:	e015      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009984:	3328      	adds	r3, #40	@ 0x28
 8009986:	2102      	movs	r1, #2
 8009988:	4618      	mov	r0, r3
 800998a:	f001 fc9d 	bl	800b2c8 <RCCEx_PLL3_Config>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009994:	e00a      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800999c:	e006      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800999e:	bf00      	nop
 80099a0:	e004      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099a2:	bf00      	nop
 80099a4:	e002      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099a6:	bf00      	nop
 80099a8:	e000      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10b      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099b4:	4ba0      	ldr	r3, [pc, #640]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80099bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099c4:	4a9c      	ldr	r2, [pc, #624]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099c6:	430b      	orrs	r3, r1
 80099c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80099ca:	e003      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f002 0308 	and.w	r3, r2, #8
 80099e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80099e4:	2300      	movs	r3, #0
 80099e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80099ee:	460b      	mov	r3, r1
 80099f0:	4313      	orrs	r3, r2
 80099f2:	d01e      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80099f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a00:	d10c      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a06:	3328      	adds	r3, #40	@ 0x28
 8009a08:	2102      	movs	r1, #2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 fc5c 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a1c:	4b86      	ldr	r3, [pc, #536]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2c:	4a82      	ldr	r2, [pc, #520]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f002 0310 	and.w	r3, r2, #16
 8009a3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a42:	2300      	movs	r3, #0
 8009a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a48:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	d01e      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a5e:	d10c      	bne.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a64:	3328      	adds	r3, #40	@ 0x28
 8009a66:	2102      	movs	r1, #2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 fc2d 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a8a:	4a6b      	ldr	r2, [pc, #428]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009aa2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	d03e      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ab8:	d022      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009abe:	d81b      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d003      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ac8:	d00b      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009aca:	e015      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f001 fb45 	bl	800b164 <RCCEx_PLL2_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ae0:	e00f      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae6:	3328      	adds	r3, #40	@ 0x28
 8009ae8:	2102      	movs	r1, #2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f001 fbec 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009af6:	e004      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009afe:	e000      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10b      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b1a:	4a47      	ldr	r2, [pc, #284]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b20:	e003      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b36:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b38:	2300      	movs	r3, #0
 8009b3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b40:	460b      	mov	r3, r1
 8009b42:	4313      	orrs	r3, r2
 8009b44:	d03b      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b52:	d01f      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009b54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b58:	d818      	bhi.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b5e:	d003      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009b60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b64:	d007      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009b66:	e011      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b68:	4b33      	ldr	r3, [pc, #204]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6c:	4a32      	ldr	r2, [pc, #200]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b74:	e00f      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7a:	3328      	adds	r3, #40	@ 0x28
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 fba2 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009b84:	4603      	mov	r3, r0
 8009b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b8a:	e004      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b92:	e000      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10b      	bne.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b9e:	4b26      	ldr	r3, [pc, #152]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bae:	4a22      	ldr	r2, [pc, #136]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bb4:	e003      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009bca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bcc:	2300      	movs	r3, #0
 8009bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bd0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	d034      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009be8:	d007      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009bea:	e011      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bec:	4b12      	ldr	r3, [pc, #72]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf0:	4a11      	ldr	r2, [pc, #68]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009bf8:	e00e      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bfe:	3308      	adds	r3, #8
 8009c00:	2102      	movs	r1, #2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 faae 	bl	800b164 <RCCEx_PLL2_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c0e:	e003      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10d      	bne.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c20:	4b05      	ldr	r3, [pc, #20]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c2e:	4a02      	ldr	r2, [pc, #8]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c30:	430b      	orrs	r3, r1
 8009c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c34:	e006      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c36:	bf00      	nop
 8009c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c52:	2300      	movs	r3, #0
 8009c54:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c56:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	d00c      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c64:	3328      	adds	r3, #40	@ 0x28
 8009c66:	2102      	movs	r1, #2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fb2d 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009c86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c88:	2300      	movs	r3, #0
 8009c8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009c90:	460b      	mov	r3, r1
 8009c92:	4313      	orrs	r3, r2
 8009c94:	d036      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca0:	d018      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca6:	d811      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cac:	d014      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cb2:	d80b      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d011      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cbc:	d106      	bne.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cbe:	4bb7      	ldr	r3, [pc, #732]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc2:	4ab6      	ldr	r2, [pc, #728]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009cca:	e008      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cd2:	e004      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cd4:	bf00      	nop
 8009cd6:	e002      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cd8:	bf00      	nop
 8009cda:	e000      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10a      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ce6:	4bad      	ldr	r3, [pc, #692]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cf4:	4aa9      	ldr	r2, [pc, #676]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cf6:	430b      	orrs	r3, r1
 8009cf8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009cfa:	e003      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d12:	2300      	movs	r3, #0
 8009d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	d009      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d20:	4b9e      	ldr	r3, [pc, #632]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d2e:	4a9b      	ldr	r2, [pc, #620]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d30:	430b      	orrs	r3, r1
 8009d32:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009d40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d42:	2300      	movs	r3, #0
 8009d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	d009      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d50:	4b92      	ldr	r3, [pc, #584]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d54:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d5e:	4a8f      	ldr	r2, [pc, #572]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d60:	430b      	orrs	r3, r1
 8009d62:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009d70:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d72:	2300      	movs	r3, #0
 8009d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	d00e      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d80:	4b86      	ldr	r3, [pc, #536]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	4a85      	ldr	r2, [pc, #532]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d8a:	6113      	str	r3, [r2, #16]
 8009d8c:	4b83      	ldr	r3, [pc, #524]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d8e:	6919      	ldr	r1, [r3, #16]
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d98:	4a80      	ldr	r2, [pc, #512]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d9a:	430b      	orrs	r3, r1
 8009d9c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009daa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dac:	2300      	movs	r3, #0
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009db4:	460b      	mov	r3, r1
 8009db6:	4313      	orrs	r3, r2
 8009db8:	d009      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009dba:	4b78      	ldr	r3, [pc, #480]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dc8:	4a74      	ldr	r2, [pc, #464]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dca:	430b      	orrs	r3, r1
 8009dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ddc:	2300      	movs	r3, #0
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009de0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009de4:	460b      	mov	r3, r1
 8009de6:	4313      	orrs	r3, r2
 8009de8:	d00a      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009dea:	4b6c      	ldr	r3, [pc, #432]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dfa:	4a68      	ldr	r2, [pc, #416]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	2100      	movs	r1, #0
 8009e0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e12:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009e16:	460b      	mov	r3, r1
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	d011      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e20:	3308      	adds	r3, #8
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f99d 	bl	800b164 <RCCEx_PLL2_Config>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	6239      	str	r1, [r7, #32]
 8009e4c:	f003 0302 	and.w	r3, r3, #2
 8009e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e56:	460b      	mov	r3, r1
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	d011      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e60:	3308      	adds	r3, #8
 8009e62:	2101      	movs	r1, #1
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 f97d 	bl	800b164 <RCCEx_PLL2_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	2100      	movs	r1, #0
 8009e8a:	61b9      	str	r1, [r7, #24]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e96:	460b      	mov	r3, r1
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	d011      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	2102      	movs	r1, #2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 f95d 	bl	800b164 <RCCEx_PLL2_Config>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	6139      	str	r1, [r7, #16]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	d011      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee0:	3328      	adds	r3, #40	@ 0x28
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 f9ef 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	f003 0310 	and.w	r3, r3, #16
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f16:	460b      	mov	r3, r1
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	d011      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f20:	3328      	adds	r3, #40	@ 0x28
 8009f22:	2101      	movs	r1, #1
 8009f24:	4618      	mov	r0, r3
 8009f26:	f001 f9cf 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6039      	str	r1, [r7, #0]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	607b      	str	r3, [r7, #4]
 8009f52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f56:	460b      	mov	r3, r1
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	d011      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f60:	3328      	adds	r3, #40	@ 0x28
 8009f62:	2102      	movs	r1, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 f9af 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009f80:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e000      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009f94:	46bd      	mov	sp, r7
 8009f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f9a:	bf00      	nop
 8009f9c:	58024400 	.word	0x58024400

08009fa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b090      	sub	sp, #64	@ 0x40
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009fb2:	430b      	orrs	r3, r1
 8009fb4:	f040 8094 	bne.w	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009fb8:	4b9b      	ldr	r3, [pc, #620]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	f200 8087 	bhi.w	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009fca:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	08009fe5 	.word	0x08009fe5
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a035 	.word	0x0800a035
 8009fdc:	0800a0d1 	.word	0x0800a0d1
 8009fe0:	0800a05d 	.word	0x0800a05d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fe4:	4b90      	ldr	r3, [pc, #576]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ff0:	d108      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 ff62 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a000:	f000 bc93 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a008:	f000 bc8f 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a00c:	4b86      	ldr	r3, [pc, #536]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a014:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a018:	d108      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a01a:	f107 0318 	add.w	r3, r7, #24
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fca6 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a028:	f000 bc7f 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a030:	f000 bc7b 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a034:	4b7c      	ldr	r3, [pc, #496]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a03c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a040:	d108      	bne.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a042:	f107 030c 	add.w	r3, r7, #12
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fde6 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a050:	f000 bc6b 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a058:	f000 bc67 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a05c:	4b72      	ldr	r3, [pc, #456]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a060:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a066:	4b70      	ldr	r3, [pc, #448]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0304 	and.w	r3, r3, #4
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d10c      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a074:	2b00      	cmp	r3, #0
 800a076:	d109      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a078:	4b6b      	ldr	r3, [pc, #428]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	08db      	lsrs	r3, r3, #3
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	4a6a      	ldr	r2, [pc, #424]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a084:	fa22 f303 	lsr.w	r3, r2, r3
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a08a:	e01f      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a08c:	4b66      	ldr	r3, [pc, #408]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a098:	d106      	bne.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a09c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0a0:	d102      	bne.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0a2:	4b63      	ldr	r3, [pc, #396]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0a6:	e011      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0a8:	4b5f      	ldr	r3, [pc, #380]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0b4:	d106      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0bc:	d102      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0be:	4b5d      	ldr	r3, [pc, #372]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0c2:	e003      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0c8:	f000 bc2f 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a0cc:	f000 bc2d 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0d0:	4b59      	ldr	r3, [pc, #356]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d4:	f000 bc29 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0dc:	f000 bc25 	b.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	f040 80a7 	bne.w	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a0ee:	4b4e      	ldr	r3, [pc, #312]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a0f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0fe:	d054      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a106:	f200 808b 	bhi.w	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a110:	f000 8083 	beq.w	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a116:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a11a:	f200 8081 	bhi.w	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a124:	d02f      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a12c:	d878      	bhi.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	2b00      	cmp	r3, #0
 800a132:	d004      	beq.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a13a:	d012      	beq.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a13c:	e070      	b.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a13e:	4b3a      	ldr	r3, [pc, #232]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a146:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a14a:	d107      	bne.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a14c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a150:	4618      	mov	r0, r3
 800a152:	f000 feb5 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a15a:	e3e6      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a160:	e3e3      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a162:	4b31      	ldr	r3, [pc, #196]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a16a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a16e:	d107      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a170:	f107 0318 	add.w	r3, r7, #24
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fbfb 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a17e:	e3d4      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a184:	e3d1      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a186:	4b28      	ldr	r3, [pc, #160]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a18e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a192:	d107      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a194:	f107 030c 	add.w	r3, r7, #12
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fd3d 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1a2:	e3c2      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a8:	e3bf      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d10c      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d109      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1c6:	4b18      	ldr	r3, [pc, #96]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	08db      	lsrs	r3, r3, #3
 800a1cc:	f003 0303 	and.w	r3, r3, #3
 800a1d0:	4a16      	ldr	r2, [pc, #88]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1d8:	e01e      	b.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1da:	4b13      	ldr	r3, [pc, #76]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e6:	d106      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1ee:	d102      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1f4:	e010      	b.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a202:	d106      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a20a:	d102      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a20c:	4b09      	ldr	r3, [pc, #36]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a210:	e002      	b.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a216:	e388      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a218:	e387      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a21a:	4b07      	ldr	r3, [pc, #28]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a21e:	e384      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a224:	e381      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a226:	bf00      	nop
 800a228:	58024400 	.word	0x58024400
 800a22c:	03d09000 	.word	0x03d09000
 800a230:	003d0900 	.word	0x003d0900
 800a234:	017d7840 	.word	0x017d7840
 800a238:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a23c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a240:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a244:	430b      	orrs	r3, r1
 800a246:	f040 809c 	bne.w	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a24a:	4b9e      	ldr	r3, [pc, #632]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a24c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a24e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a252:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a25a:	d054      	beq.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a262:	f200 808b 	bhi.w	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a26c:	f000 8083 	beq.w	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a272:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a276:	f200 8081 	bhi.w	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a280:	d02f      	beq.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a288:	d878      	bhi.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d004      	beq.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a292:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a296:	d012      	beq.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a298:	e070      	b.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a29a:	4b8a      	ldr	r3, [pc, #552]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2a6:	d107      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fe07 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2b6:	e338      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2bc:	e335      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2be:	4b81      	ldr	r3, [pc, #516]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2ca:	d107      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2cc:	f107 0318 	add.w	r3, r7, #24
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 fb4d 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2da:	e326      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e0:	e323      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2e2:	4b78      	ldr	r3, [pc, #480]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ee:	d107      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2f0:	f107 030c 	add.w	r3, r7, #12
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fc8f 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2fe:	e314      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a304:	e311      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a306:	4b6f      	ldr	r3, [pc, #444]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a30a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a30e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a310:	4b6c      	ldr	r3, [pc, #432]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	2b04      	cmp	r3, #4
 800a31a:	d10c      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d109      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a322:	4b68      	ldr	r3, [pc, #416]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	08db      	lsrs	r3, r3, #3
 800a328:	f003 0303 	and.w	r3, r3, #3
 800a32c:	4a66      	ldr	r2, [pc, #408]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a32e:	fa22 f303 	lsr.w	r3, r2, r3
 800a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a334:	e01e      	b.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a336:	4b63      	ldr	r3, [pc, #396]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a33e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a342:	d106      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a34a:	d102      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a34c:	4b5f      	ldr	r3, [pc, #380]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a350:	e010      	b.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a352:	4b5c      	ldr	r3, [pc, #368]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a35a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a35e:	d106      	bne.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a366:	d102      	bne.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a368:	4b59      	ldr	r3, [pc, #356]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a36c:	e002      	b.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a372:	e2da      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a374:	e2d9      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a376:	4b57      	ldr	r3, [pc, #348]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a37a:	e2d6      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a380:	e2d3      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a382:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a386:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a38a:	430b      	orrs	r3, r1
 800a38c:	f040 80a7 	bne.w	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a390:	4b4c      	ldr	r3, [pc, #304]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a394:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a398:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3a0:	d055      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3a8:	f200 8096 	bhi.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3b2:	f000 8084 	beq.w	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3bc:	f200 808c 	bhi.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3c6:	d030      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ce:	f200 8083 	bhi.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3de:	d012      	beq.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a3e0:	e07a      	b.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3e2:	4b38      	ldr	r3, [pc, #224]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3ee:	d107      	bne.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fd63 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3fe:	e294      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a404:	e291      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a406:	4b2f      	ldr	r3, [pc, #188]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a40e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a412:	d107      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a414:	f107 0318 	add.w	r3, r7, #24
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 faa9 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a422:	e282      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a428:	e27f      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a42a:	4b26      	ldr	r3, [pc, #152]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a436:	d107      	bne.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a438:	f107 030c 	add.w	r3, r7, #12
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fbeb 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a446:	e270      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	e26d      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a44e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a452:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a456:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a458:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b04      	cmp	r3, #4
 800a462:	d10c      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a46a:	4b16      	ldr	r3, [pc, #88]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	08db      	lsrs	r3, r3, #3
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	4a14      	ldr	r2, [pc, #80]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a476:	fa22 f303 	lsr.w	r3, r2, r3
 800a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a47c:	e01e      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a47e:	4b11      	ldr	r3, [pc, #68]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a48a:	d106      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a492:	d102      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a494:	4b0d      	ldr	r3, [pc, #52]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a498:	e010      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a49a:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4a6:	d106      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ae:	d102      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4b0:	4b07      	ldr	r3, [pc, #28]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4b4:	e002      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4ba:	e236      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4bc:	e235      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4be:	4b05      	ldr	r3, [pc, #20]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c2:	e232      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4c4:	58024400 	.word	0x58024400
 800a4c8:	03d09000 	.word	0x03d09000
 800a4cc:	003d0900 	.word	0x003d0900
 800a4d0:	017d7840 	.word	0x017d7840
 800a4d4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4dc:	e225      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a4de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4e2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a4e6:	430b      	orrs	r3, r1
 800a4e8:	f040 8085 	bne.w	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a4ec:	4b9c      	ldr	r3, [pc, #624]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a4f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4fc:	d06b      	beq.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a504:	d874      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a508:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a50c:	d056      	beq.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a510:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a514:	d86c      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a518:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a51c:	d03b      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a524:	d864      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a52c:	d021      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a534:	d85c      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a542:	d004      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a544:	e054      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a546:	f7fe fb5f 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800a54a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a54c:	e1ed      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a54e:	4b84      	ldr	r3, [pc, #528]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a55a:	d107      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a55c:	f107 0318 	add.w	r3, r7, #24
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fa05 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a56a:	e1de      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a570:	e1db      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a572:	4b7b      	ldr	r3, [pc, #492]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a57a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a57e:	d107      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a580:	f107 030c 	add.w	r3, r7, #12
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fb47 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58e:	e1cc      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a594:	e1c9      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a596:	4b72      	ldr	r3, [pc, #456]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d109      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a2:	4b6f      	ldr	r3, [pc, #444]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	08db      	lsrs	r3, r3, #3
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	4a6d      	ldr	r2, [pc, #436]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b4:	e1b9      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ba:	e1b6      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5bc:	4b68      	ldr	r3, [pc, #416]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c8:	d102      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a5ca:	4b67      	ldr	r3, [pc, #412]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ce:	e1ac      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d4:	e1a9      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5d6:	4b62      	ldr	r3, [pc, #392]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e2:	d102      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a5e4:	4b61      	ldr	r3, [pc, #388]	@ (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e8:	e19f      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ee:	e19c      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f4:	e199      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a5f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5fa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a5fe:	430b      	orrs	r3, r1
 800a600:	d173      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a602:	4b57      	ldr	r3, [pc, #348]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a60a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a612:	d02f      	beq.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a61a:	d863      	bhi.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d004      	beq.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a628:	d012      	beq.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a62a:	e05b      	b.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a62c:	4b4c      	ldr	r3, [pc, #304]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a638:	d107      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a63a:	f107 0318 	add.w	r3, r7, #24
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f996 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a648:	e16f      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64e:	e16c      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a650:	4b43      	ldr	r3, [pc, #268]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a65c:	d107      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a65e:	f107 030c 	add.w	r3, r7, #12
 800a662:	4618      	mov	r0, r3
 800a664:	f000 fad8 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66c:	e15d      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	e15a      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a674:	4b3a      	ldr	r3, [pc, #232]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a678:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a67c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a67e:	4b38      	ldr	r3, [pc, #224]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b04      	cmp	r3, #4
 800a688:	d10c      	bne.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d109      	bne.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a690:	4b33      	ldr	r3, [pc, #204]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	08db      	lsrs	r3, r3, #3
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	4a32      	ldr	r2, [pc, #200]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a2:	e01e      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6a4:	4b2e      	ldr	r3, [pc, #184]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6b0:	d106      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6b8:	d102      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6ba:	4b2b      	ldr	r3, [pc, #172]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6be:	e010      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6c0:	4b27      	ldr	r3, [pc, #156]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6cc:	d106      	bne.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6d4:	d102      	bne.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6d6:	4b25      	ldr	r3, [pc, #148]	@ (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6da:	e002      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6e0:	e123      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6e2:	e122      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e8:	e11f      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a6ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a6f2:	430b      	orrs	r3, r1
 800a6f4:	d13c      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a70c:	d012      	beq.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a70e:	e023      	b.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a710:	4b13      	ldr	r3, [pc, #76]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a71c:	d107      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a71e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fbcc 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a72c:	e0fd      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a732:	e0fa      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a734:	4b0a      	ldr	r3, [pc, #40]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a73c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a740:	d107      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a742:	f107 0318 	add.w	r3, r7, #24
 800a746:	4618      	mov	r0, r3
 800a748:	f000 f912 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a750:	e0eb      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a756:	e0e8      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75c:	e0e5      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a75e:	bf00      	nop
 800a760:	58024400 	.word	0x58024400
 800a764:	03d09000 	.word	0x03d09000
 800a768:	003d0900 	.word	0x003d0900
 800a76c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a774:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a778:	430b      	orrs	r3, r1
 800a77a:	f040 8085 	bne.w	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a77e:	4b6d      	ldr	r3, [pc, #436]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a782:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a786:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a78e:	d06b      	beq.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a796:	d874      	bhi.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a79e:	d056      	beq.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7a6:	d86c      	bhi.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7ae:	d03b      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7b6:	d864      	bhi.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7be:	d021      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c6:	d85c      	bhi.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d004      	beq.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7d4:	d004      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a7d6:	e054      	b.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a7d8:	f000 f8b4 	bl	800a944 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7de:	e0a4      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7e0:	4b54      	ldr	r3, [pc, #336]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7ec:	d107      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ee:	f107 0318 	add.w	r3, r7, #24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f8bc 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fc:	e095      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a802:	e092      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a804:	4b4b      	ldr	r3, [pc, #300]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a80c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a810:	d107      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a812:	f107 030c 	add.w	r3, r7, #12
 800a816:	4618      	mov	r0, r3
 800a818:	f000 f9fe 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a820:	e083      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a826:	e080      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a828:	4b42      	ldr	r3, [pc, #264]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b04      	cmp	r3, #4
 800a832:	d109      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a834:	4b3f      	ldr	r3, [pc, #252]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	08db      	lsrs	r3, r3, #3
 800a83a:	f003 0303 	and.w	r3, r3, #3
 800a83e:	4a3e      	ldr	r2, [pc, #248]	@ (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a840:	fa22 f303 	lsr.w	r3, r2, r3
 800a844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a846:	e070      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84c:	e06d      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a84e:	4b39      	ldr	r3, [pc, #228]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a85a:	d102      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a85c:	4b37      	ldr	r3, [pc, #220]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a860:	e063      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a866:	e060      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a868:	4b32      	ldr	r3, [pc, #200]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a874:	d102      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a876:	4b32      	ldr	r3, [pc, #200]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87a:	e056      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a880:	e053      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a886:	e050      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a88c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a890:	430b      	orrs	r3, r1
 800a892:	d148      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a894:	4b27      	ldr	r3, [pc, #156]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a898:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a89c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8a4:	d02a      	beq.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ac:	d838      	bhi.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d004      	beq.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ba:	d00d      	beq.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a8bc:	e030      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8be:	4b1d      	ldr	r3, [pc, #116]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8ca:	d102      	bne.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a8cc:	4b1c      	ldr	r3, [pc, #112]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d0:	e02b      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d6:	e028      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8d8:	4b16      	ldr	r3, [pc, #88]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8e4:	d107      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 fae8 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f4:	e019      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8fa:	e016      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a908:	d107      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a90a:	f107 0318 	add.w	r3, r7, #24
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 f82e 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a918:	e007      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91e:	e004      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e001      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a92a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3740      	adds	r7, #64	@ 0x40
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	58024400 	.word	0x58024400
 800a938:	03d09000 	.word	0x03d09000
 800a93c:	003d0900 	.word	0x003d0900
 800a940:	017d7840 	.word	0x017d7840

0800a944 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a948:	f7fe f92e 	bl	8008ba8 <HAL_RCC_GetHCLKFreq>
 800a94c:	4602      	mov	r2, r0
 800a94e:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	091b      	lsrs	r3, r3, #4
 800a954:	f003 0307 	and.w	r3, r3, #7
 800a958:	4904      	ldr	r1, [pc, #16]	@ (800a96c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a95a:	5ccb      	ldrb	r3, [r1, r3]
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a964:	4618      	mov	r0, r3
 800a966:	bd80      	pop	{r7, pc}
 800a968:	58024400 	.word	0x58024400
 800a96c:	0800fc10 	.word	0x0800fc10

0800a970 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a970:	b480      	push	{r7}
 800a972:	b089      	sub	sp, #36	@ 0x24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a978:	4ba1      	ldr	r3, [pc, #644]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a982:	4b9f      	ldr	r3, [pc, #636]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a986:	0b1b      	lsrs	r3, r3, #12
 800a988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a98c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a98e:	4b9c      	ldr	r3, [pc, #624]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a992:	091b      	lsrs	r3, r3, #4
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a99a:	4b99      	ldr	r3, [pc, #612]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a99e:	08db      	lsrs	r3, r3, #3
 800a9a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	fb02 f303 	mul.w	r3, r2, r3
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 8111 	beq.w	800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	f000 8083 	beq.w	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	f200 80a1 	bhi.w	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d056      	beq.n	800aa88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9da:	e099      	b.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9dc:	4b88      	ldr	r3, [pc, #544]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0320 	and.w	r3, r3, #32
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d02d      	beq.n	800aa44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9e8:	4b85      	ldr	r3, [pc, #532]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	08db      	lsrs	r3, r3, #3
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	4a84      	ldr	r2, [pc, #528]	@ (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	ee07 3a90 	vmov	s15, r3
 800aa00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa12:	4b7b      	ldr	r3, [pc, #492]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa22:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa42:	e087      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa56:	4b6a      	ldr	r3, [pc, #424]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa66:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa86:	e065      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9a:	4b59      	ldr	r3, [pc, #356]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaca:	e043      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aade:	4b48      	ldr	r3, [pc, #288]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaee:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab0e:	e021      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab22:	4b37      	ldr	r3, [pc, #220]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab54:	4b2a      	ldr	r3, [pc, #168]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab58:	0a5b      	lsrs	r3, r3, #9
 800ab5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab7a:	ee17 2a90 	vmov	r2, s15
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab82:	4b1f      	ldr	r3, [pc, #124]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab86:	0c1b      	lsrs	r3, r3, #16
 800ab88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab8c:	ee07 3a90 	vmov	s15, r3
 800ab90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba8:	ee17 2a90 	vmov	r2, s15
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800abb0:	4b13      	ldr	r3, [pc, #76]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb4:	0e1b      	lsrs	r3, r3, #24
 800abb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abca:	edd7 6a07 	vldr	s13, [r7, #28]
 800abce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd6:	ee17 2a90 	vmov	r2, s15
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abde:	e008      	b.n	800abf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
}
 800abf2:	bf00      	nop
 800abf4:	3724      	adds	r7, #36	@ 0x24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	58024400 	.word	0x58024400
 800ac04:	03d09000 	.word	0x03d09000
 800ac08:	46000000 	.word	0x46000000
 800ac0c:	4c742400 	.word	0x4c742400
 800ac10:	4a742400 	.word	0x4a742400
 800ac14:	4bbebc20 	.word	0x4bbebc20

0800ac18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b089      	sub	sp, #36	@ 0x24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac20:	4ba1      	ldr	r3, [pc, #644]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac2a:	4b9f      	ldr	r3, [pc, #636]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac2e:	0d1b      	lsrs	r3, r3, #20
 800ac30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac36:	4b9c      	ldr	r3, [pc, #624]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3a:	0a1b      	lsrs	r3, r3, #8
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac42:	4b99      	ldr	r3, [pc, #612]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac46:	08db      	lsrs	r3, r3, #3
 800ac48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	fb02 f303 	mul.w	r3, r2, r3
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 8111 	beq.w	800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	f000 8083 	beq.w	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	f200 80a1 	bhi.w	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d056      	beq.n	800ad30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac82:	e099      	b.n	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac84:	4b88      	ldr	r3, [pc, #544]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0320 	and.w	r3, r3, #32
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d02d      	beq.n	800acec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac90:	4b85      	ldr	r3, [pc, #532]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	08db      	lsrs	r3, r3, #3
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	4a84      	ldr	r2, [pc, #528]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aca0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	ee07 3a90 	vmov	s15, r3
 800acb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acba:	4b7b      	ldr	r3, [pc, #492]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acca:	ed97 6a03 	vldr	s12, [r7, #12]
 800acce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acea:	e087      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b6a      	ldr	r3, [pc, #424]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2e:	e065      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b59      	ldr	r3, [pc, #356]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad72:	e043      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b48      	ldr	r3, [pc, #288]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb6:	e021      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adca:	4b37      	ldr	r3, [pc, #220]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adda:	ed97 6a03 	vldr	s12, [r7, #12]
 800adde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ade2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800adfc:	4b2a      	ldr	r3, [pc, #168]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae00:	0a5b      	lsrs	r3, r3, #9
 800ae02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae22:	ee17 2a90 	vmov	r2, s15
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae2a:	4b1f      	ldr	r3, [pc, #124]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae2e:	0c1b      	lsrs	r3, r3, #16
 800ae30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae50:	ee17 2a90 	vmov	r2, s15
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae58:	4b13      	ldr	r3, [pc, #76]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5c:	0e1b      	lsrs	r3, r3, #24
 800ae5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae7e:	ee17 2a90 	vmov	r2, s15
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae86:	e008      	b.n	800ae9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	609a      	str	r2, [r3, #8]
}
 800ae9a:	bf00      	nop
 800ae9c:	3724      	adds	r7, #36	@ 0x24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	58024400 	.word	0x58024400
 800aeac:	03d09000 	.word	0x03d09000
 800aeb0:	46000000 	.word	0x46000000
 800aeb4:	4c742400 	.word	0x4c742400
 800aeb8:	4a742400 	.word	0x4a742400
 800aebc:	4bbebc20 	.word	0x4bbebc20

0800aec0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b089      	sub	sp, #36	@ 0x24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aec8:	4ba0      	ldr	r3, [pc, #640]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aed2:	4b9e      	ldr	r3, [pc, #632]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed6:	091b      	lsrs	r3, r3, #4
 800aed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aedc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aede:	4b9b      	ldr	r3, [pc, #620]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aee8:	4b98      	ldr	r3, [pc, #608]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeec:	08db      	lsrs	r3, r3, #3
 800aeee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	fb02 f303 	mul.w	r3, r2, r3
 800aef8:	ee07 3a90 	vmov	s15, r3
 800aefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 8111 	beq.w	800b12e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	f000 8083 	beq.w	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b02      	cmp	r3, #2
 800af18:	f200 80a1 	bhi.w	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d056      	beq.n	800afd6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af28:	e099      	b.n	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af2a:	4b88      	ldr	r3, [pc, #544]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b00      	cmp	r3, #0
 800af34:	d02d      	beq.n	800af92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af36:	4b85      	ldr	r3, [pc, #532]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	08db      	lsrs	r3, r3, #3
 800af3c:	f003 0303 	and.w	r3, r3, #3
 800af40:	4a83      	ldr	r2, [pc, #524]	@ (800b150 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af42:	fa22 f303 	lsr.w	r3, r2, r3
 800af46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	ee07 3a90 	vmov	s15, r3
 800af58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af60:	4b7a      	ldr	r3, [pc, #488]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af70:	ed97 6a03 	vldr	s12, [r7, #12]
 800af74:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af90:	e087      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b158 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa4:	4b69      	ldr	r3, [pc, #420]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afac:	ee07 3a90 	vmov	s15, r3
 800afb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afd4:	e065      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b15c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800afe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe8:	4b58      	ldr	r3, [pc, #352]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff8:	ed97 6a03 	vldr	s12, [r7, #12]
 800affc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b018:	e043      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b024:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02c:	4b47      	ldr	r3, [pc, #284]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b040:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b05c:	e021      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b068:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b158 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b06c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b070:	4b36      	ldr	r3, [pc, #216]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b078:	ee07 3a90 	vmov	s15, r3
 800b07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b080:	ed97 6a03 	vldr	s12, [r7, #12]
 800b084:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b08c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a6:	0a5b      	lsrs	r3, r3, #9
 800b0a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c8:	ee17 2a90 	vmov	r2, s15
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d4:	0c1b      	lsrs	r3, r3, #16
 800b0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f6:	ee17 2a90 	vmov	r2, s15
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b0fe:	4b13      	ldr	r3, [pc, #76]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b102:	0e1b      	lsrs	r3, r3, #24
 800b104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b114:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b118:	edd7 6a07 	vldr	s13, [r7, #28]
 800b11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b124:	ee17 2a90 	vmov	r2, s15
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b12c:	e008      	b.n	800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	609a      	str	r2, [r3, #8]
}
 800b140:	bf00      	nop
 800b142:	3724      	adds	r7, #36	@ 0x24
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	58024400 	.word	0x58024400
 800b150:	03d09000 	.word	0x03d09000
 800b154:	46000000 	.word	0x46000000
 800b158:	4c742400 	.word	0x4c742400
 800b15c:	4a742400 	.word	0x4a742400
 800b160:	4bbebc20 	.word	0x4bbebc20

0800b164 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b172:	4b53      	ldr	r3, [pc, #332]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d101      	bne.n	800b182 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e099      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b182:	4b4f      	ldr	r3, [pc, #316]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a4e      	ldr	r2, [pc, #312]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b188:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b18e:	f7f7 fb9b 	bl	80028c8 <HAL_GetTick>
 800b192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b194:	e008      	b.n	800b1a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b196:	f7f7 fb97 	bl	80028c8 <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d901      	bls.n	800b1a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e086      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1a8:	4b45      	ldr	r3, [pc, #276]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1f0      	bne.n	800b196 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1b4:	4b42      	ldr	r3, [pc, #264]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	031b      	lsls	r3, r3, #12
 800b1c2:	493f      	ldr	r1, [pc, #252]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	025b      	lsls	r3, r3, #9
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	061b      	lsls	r3, r3, #24
 800b1f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1f8:	4931      	ldr	r1, [pc, #196]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1fe:	4b30      	ldr	r3, [pc, #192]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	492d      	ldr	r1, [pc, #180]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b210:	4b2b      	ldr	r3, [pc, #172]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b214:	f023 0220 	bic.w	r2, r3, #32
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	4928      	ldr	r1, [pc, #160]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b222:	4b27      	ldr	r3, [pc, #156]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b226:	4a26      	ldr	r2, [pc, #152]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b228:	f023 0310 	bic.w	r3, r3, #16
 800b22c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b22e:	4b24      	ldr	r3, [pc, #144]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b232:	4b24      	ldr	r3, [pc, #144]	@ (800b2c4 <RCCEx_PLL2_Config+0x160>)
 800b234:	4013      	ands	r3, r2
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	69d2      	ldr	r2, [r2, #28]
 800b23a:	00d2      	lsls	r2, r2, #3
 800b23c:	4920      	ldr	r1, [pc, #128]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b242:	4b1f      	ldr	r3, [pc, #124]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	4a1e      	ldr	r2, [pc, #120]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b248:	f043 0310 	orr.w	r3, r3, #16
 800b24c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d106      	bne.n	800b262 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b254:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b258:	4a19      	ldr	r2, [pc, #100]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b25a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b25e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b260:	e00f      	b.n	800b282 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d106      	bne.n	800b276 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b268:	4b15      	ldr	r3, [pc, #84]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26c:	4a14      	ldr	r2, [pc, #80]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b26e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b272:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b274:	e005      	b.n	800b282 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b276:	4b12      	ldr	r3, [pc, #72]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27a:	4a11      	ldr	r2, [pc, #68]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b27c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b280:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b282:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a0e      	ldr	r2, [pc, #56]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28e:	f7f7 fb1b 	bl	80028c8 <HAL_GetTick>
 800b292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b294:	e008      	b.n	800b2a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b296:	f7f7 fb17 	bl	80028c8 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d901      	bls.n	800b2a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e006      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2a8:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0f0      	beq.n	800b296 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	58024400 	.word	0x58024400
 800b2c4:	ffff0007 	.word	0xffff0007

0800b2c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2d6:	4b53      	ldr	r3, [pc, #332]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d101      	bne.n	800b2e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e099      	b.n	800b41a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2e6:	4b4f      	ldr	r3, [pc, #316]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a4e      	ldr	r2, [pc, #312]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2f2:	f7f7 fae9 	bl	80028c8 <HAL_GetTick>
 800b2f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2f8:	e008      	b.n	800b30c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2fa:	f7f7 fae5 	bl	80028c8 <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e086      	b.n	800b41a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b30c:	4b45      	ldr	r3, [pc, #276]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1f0      	bne.n	800b2fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b318:	4b42      	ldr	r3, [pc, #264]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b31c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	051b      	lsls	r3, r3, #20
 800b326:	493f      	ldr	r1, [pc, #252]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b328:	4313      	orrs	r3, r2
 800b32a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	3b01      	subs	r3, #1
 800b332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	025b      	lsls	r3, r3, #9
 800b33e:	b29b      	uxth	r3, r3
 800b340:	431a      	orrs	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	3b01      	subs	r3, #1
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b34e:	431a      	orrs	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	3b01      	subs	r3, #1
 800b356:	061b      	lsls	r3, r3, #24
 800b358:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b35c:	4931      	ldr	r1, [pc, #196]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b362:	4b30      	ldr	r3, [pc, #192]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b366:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	492d      	ldr	r1, [pc, #180]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b370:	4313      	orrs	r3, r2
 800b372:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b374:	4b2b      	ldr	r3, [pc, #172]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b378:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	4928      	ldr	r1, [pc, #160]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b382:	4313      	orrs	r3, r2
 800b384:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b386:	4b27      	ldr	r3, [pc, #156]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38a:	4a26      	ldr	r2, [pc, #152]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b38c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b392:	4b24      	ldr	r3, [pc, #144]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b396:	4b24      	ldr	r3, [pc, #144]	@ (800b428 <RCCEx_PLL3_Config+0x160>)
 800b398:	4013      	ands	r3, r2
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	69d2      	ldr	r2, [r2, #28]
 800b39e:	00d2      	lsls	r2, r2, #3
 800b3a0:	4920      	ldr	r1, [pc, #128]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d106      	bne.n	800b3c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	4a19      	ldr	r2, [pc, #100]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3c4:	e00f      	b.n	800b3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d106      	bne.n	800b3da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3cc:	4b15      	ldr	r3, [pc, #84]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d0:	4a14      	ldr	r2, [pc, #80]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3d8:	e005      	b.n	800b3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3da:	4b12      	ldr	r3, [pc, #72]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3de:	4a11      	ldr	r2, [pc, #68]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a0e      	ldr	r2, [pc, #56]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f2:	f7f7 fa69 	bl	80028c8 <HAL_GetTick>
 800b3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3f8:	e008      	b.n	800b40c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3fa:	f7f7 fa65 	bl	80028c8 <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	2b02      	cmp	r3, #2
 800b406:	d901      	bls.n	800b40c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e006      	b.n	800b41a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b40c:	4b05      	ldr	r3, [pc, #20]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0f0      	beq.n	800b3fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	ffff0007 	.word	0xffff0007

0800b42c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e10f      	b.n	800b65e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a87      	ldr	r2, [pc, #540]	@ (800b668 <HAL_SPI_Init+0x23c>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d00f      	beq.n	800b46e <HAL_SPI_Init+0x42>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a86      	ldr	r2, [pc, #536]	@ (800b66c <HAL_SPI_Init+0x240>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00a      	beq.n	800b46e <HAL_SPI_Init+0x42>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a84      	ldr	r2, [pc, #528]	@ (800b670 <HAL_SPI_Init+0x244>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d005      	beq.n	800b46e <HAL_SPI_Init+0x42>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	2b0f      	cmp	r3, #15
 800b468:	d901      	bls.n	800b46e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e0f7      	b.n	800b65e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fe3c 	bl	800c0ec <SPI_GetPacketSize>
 800b474:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a7b      	ldr	r2, [pc, #492]	@ (800b668 <HAL_SPI_Init+0x23c>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d00c      	beq.n	800b49a <HAL_SPI_Init+0x6e>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a79      	ldr	r2, [pc, #484]	@ (800b66c <HAL_SPI_Init+0x240>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d007      	beq.n	800b49a <HAL_SPI_Init+0x6e>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a78      	ldr	r2, [pc, #480]	@ (800b670 <HAL_SPI_Init+0x244>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d002      	beq.n	800b49a <HAL_SPI_Init+0x6e>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b08      	cmp	r3, #8
 800b498:	d811      	bhi.n	800b4be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b49e:	4a72      	ldr	r2, [pc, #456]	@ (800b668 <HAL_SPI_Init+0x23c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d009      	beq.n	800b4b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a70      	ldr	r2, [pc, #448]	@ (800b66c <HAL_SPI_Init+0x240>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d004      	beq.n	800b4b8 <HAL_SPI_Init+0x8c>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a6f      	ldr	r2, [pc, #444]	@ (800b670 <HAL_SPI_Init+0x244>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d104      	bne.n	800b4c2 <HAL_SPI_Init+0x96>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b10      	cmp	r3, #16
 800b4bc:	d901      	bls.n	800b4c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e0cd      	b.n	800b65e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7f6 feee 	bl	80022b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f022 0201 	bic.w	r2, r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b4fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b508:	d119      	bne.n	800b53e <HAL_SPI_Init+0x112>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b512:	d103      	bne.n	800b51c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d008      	beq.n	800b52e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10c      	bne.n	800b53e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b52c:	d107      	bne.n	800b53e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b53c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00f      	beq.n	800b56a <HAL_SPI_Init+0x13e>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	2b06      	cmp	r3, #6
 800b550:	d90b      	bls.n	800b56a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	430a      	orrs	r2, r1
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	e007      	b.n	800b57a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b578:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	69da      	ldr	r2, [r3, #28]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b582:	431a      	orrs	r2, r3
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b58c:	ea42 0103 	orr.w	r1, r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68da      	ldr	r2, [r3, #12]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	430a      	orrs	r2, r1
 800b59a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a4:	431a      	orrs	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	431a      	orrs	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	431a      	orrs	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	431a      	orrs	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5da:	ea42 0103 	orr.w	r1, r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	430a      	orrs	r2, r1
 800b5e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d113      	bne.n	800b61a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b604:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b618:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0201 	bic.w	r2, r2, #1
 800b628:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	430a      	orrs	r2, r1
 800b64a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	40013000 	.word	0x40013000
 800b66c:	40003800 	.word	0x40003800
 800b670:	40003c00 	.word	0x40003c00

0800b674 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	4613      	mov	r3, r2
 800b682:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	3320      	adds	r3, #32
 800b68a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b68c:	f7f7 f91c 	bl	80028c8 <HAL_GetTick>
 800b690:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d001      	beq.n	800b6a2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e1d1      	b.n	800ba46 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d002      	beq.n	800b6ae <HAL_SPI_Transmit+0x3a>
 800b6a8:	88fb      	ldrh	r3, [r7, #6]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e1c9      	b.n	800ba46 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d101      	bne.n	800b6c0 <HAL_SPI_Transmit+0x4c>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e1c2      	b.n	800ba46 <HAL_SPI_Transmit+0x3d2>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	88fa      	ldrh	r2, [r7, #6]
 800b6e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	88fa      	ldrh	r2, [r7, #6]
 800b6ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b718:	d108      	bne.n	800b72c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	e009      	b.n	800b740 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b73e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	4b96      	ldr	r3, [pc, #600]	@ (800b9a0 <HAL_SPI_Transmit+0x32c>)
 800b748:	4013      	ands	r3, r2
 800b74a:	88f9      	ldrh	r1, [r7, #6]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	6812      	ldr	r2, [r2, #0]
 800b750:	430b      	orrs	r3, r1
 800b752:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b76c:	d107      	bne.n	800b77e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b77c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	2b0f      	cmp	r3, #15
 800b784:	d947      	bls.n	800b816 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b786:	e03f      	b.n	800b808 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	f003 0302 	and.w	r3, r3, #2
 800b792:	2b02      	cmp	r3, #2
 800b794:	d114      	bne.n	800b7c0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6812      	ldr	r2, [r2, #0]
 800b7a0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7a6:	1d1a      	adds	r2, r3, #4
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7be:	e023      	b.n	800b808 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7c0:	f7f7 f882 	bl	80028c8 <HAL_GetTick>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d803      	bhi.n	800b7d8 <HAL_SPI_Transmit+0x164>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d102      	bne.n	800b7de <HAL_SPI_Transmit+0x16a>
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d114      	bne.n	800b808 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 fbb6 	bl	800bf50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	e11e      	b.n	800ba46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b80e:	b29b      	uxth	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1b9      	bne.n	800b788 <HAL_SPI_Transmit+0x114>
 800b814:	e0f1      	b.n	800b9fa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	2b07      	cmp	r3, #7
 800b81c:	f240 80e6 	bls.w	800b9ec <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b820:	e05d      	b.n	800b8de <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	f003 0302 	and.w	r3, r3, #2
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d132      	bne.n	800b896 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b836:	b29b      	uxth	r3, r3
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d918      	bls.n	800b86e <HAL_SPI_Transmit+0x1fa>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b840:	2b00      	cmp	r3, #0
 800b842:	d014      	beq.n	800b86e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6812      	ldr	r2, [r2, #0]
 800b84e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b854:	1d1a      	adds	r2, r3, #4
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b860:	b29b      	uxth	r3, r3
 800b862:	3b02      	subs	r3, #2
 800b864:	b29a      	uxth	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b86c:	e037      	b.n	800b8de <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b872:	881a      	ldrh	r2, [r3, #0]
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b87c:	1c9a      	adds	r2, r3, #2
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b888:	b29b      	uxth	r3, r3
 800b88a:	3b01      	subs	r3, #1
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b894:	e023      	b.n	800b8de <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b896:	f7f7 f817 	bl	80028c8 <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d803      	bhi.n	800b8ae <HAL_SPI_Transmit+0x23a>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ac:	d102      	bne.n	800b8b4 <HAL_SPI_Transmit+0x240>
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d114      	bne.n	800b8de <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f000 fb4b 	bl	800bf50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e0b3      	b.n	800ba46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d19b      	bne.n	800b822 <HAL_SPI_Transmit+0x1ae>
 800b8ea:	e086      	b.n	800b9fa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d154      	bne.n	800b9a4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b900:	b29b      	uxth	r3, r3
 800b902:	2b03      	cmp	r3, #3
 800b904:	d918      	bls.n	800b938 <HAL_SPI_Transmit+0x2c4>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b90a:	2b40      	cmp	r3, #64	@ 0x40
 800b90c:	d914      	bls.n	800b938 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	6812      	ldr	r2, [r2, #0]
 800b918:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b91e:	1d1a      	adds	r2, r3, #4
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	3b04      	subs	r3, #4
 800b92e:	b29a      	uxth	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b936:	e059      	b.n	800b9ec <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b93e:	b29b      	uxth	r3, r3
 800b940:	2b01      	cmp	r3, #1
 800b942:	d917      	bls.n	800b974 <HAL_SPI_Transmit+0x300>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d013      	beq.n	800b974 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b950:	881a      	ldrh	r2, [r3, #0]
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b95a:	1c9a      	adds	r2, r3, #2
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b966:	b29b      	uxth	r3, r3
 800b968:	3b02      	subs	r3, #2
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b972:	e03b      	b.n	800b9ec <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3320      	adds	r3, #32
 800b97e:	7812      	ldrb	r2, [r2, #0]
 800b980:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b992:	b29b      	uxth	r3, r3
 800b994:	3b01      	subs	r3, #1
 800b996:	b29a      	uxth	r2, r3
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b99e:	e025      	b.n	800b9ec <HAL_SPI_Transmit+0x378>
 800b9a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9a4:	f7f6 ff90 	bl	80028c8 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d803      	bhi.n	800b9bc <HAL_SPI_Transmit+0x348>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ba:	d102      	bne.n	800b9c2 <HAL_SPI_Transmit+0x34e>
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d114      	bne.n	800b9ec <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f000 fac4 	bl	800bf50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e02c      	b.n	800ba46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f47f af79 	bne.w	800b8ec <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2200      	movs	r2, #0
 800ba02:	2108      	movs	r1, #8
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fb43 	bl	800c090 <SPI_WaitOnFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d007      	beq.n	800ba20 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba16:	f043 0220 	orr.w	r2, r3, #32
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 fa95 	bl	800bf50 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e000      	b.n	800ba46 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ba44:	2300      	movs	r3, #0
  }
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop

0800ba50 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba64:	095b      	lsrs	r3, r3, #5
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	3301      	adds	r3, #1
 800ba6a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3330      	adds	r3, #48	@ 0x30
 800ba72:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba74:	f7f6 ff28 	bl	80028c8 <HAL_GetTick>
 800ba78:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d001      	beq.n	800ba8a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ba86:	2302      	movs	r3, #2
 800ba88:	e250      	b.n	800bf2c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <HAL_SPI_Receive+0x46>
 800ba90:	88fb      	ldrh	r3, [r7, #6]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e248      	b.n	800bf2c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d101      	bne.n	800baa8 <HAL_SPI_Receive+0x58>
 800baa4:	2302      	movs	r3, #2
 800baa6:	e241      	b.n	800bf2c <HAL_SPI_Receive+0x4dc>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2204      	movs	r2, #4
 800bab4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	88fa      	ldrh	r2, [r7, #6]
 800baca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	88fa      	ldrh	r2, [r7, #6]
 800bad2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bb00:	d108      	bne.n	800bb14 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	e009      	b.n	800bb28 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bb26:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	4b95      	ldr	r3, [pc, #596]	@ (800bd84 <HAL_SPI_Receive+0x334>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	88f9      	ldrh	r1, [r7, #6]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	6812      	ldr	r2, [r2, #0]
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f042 0201 	orr.w	r2, r2, #1
 800bb4a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb54:	d107      	bne.n	800bb66 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb64:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	2b0f      	cmp	r3, #15
 800bb6c:	d96c      	bls.n	800bc48 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bb6e:	e064      	b.n	800bc3a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d114      	bne.n	800bbb0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb90:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb96:	1d1a      	adds	r2, r3, #4
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bbae:	e044      	b.n	800bc3a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	8bfa      	ldrh	r2, [r7, #30]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d919      	bls.n	800bbf2 <HAL_SPI_Receive+0x1a2>
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d014      	beq.n	800bbf2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bbd2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbd8:	1d1a      	adds	r2, r3, #4
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bbf0:	e023      	b.n	800bc3a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbf2:	f7f6 fe69 	bl	80028c8 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d803      	bhi.n	800bc0a <HAL_SPI_Receive+0x1ba>
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc08:	d102      	bne.n	800bc10 <HAL_SPI_Receive+0x1c0>
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d114      	bne.n	800bc3a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f000 f99d 	bl	800bf50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc36:	2303      	movs	r3, #3
 800bc38:	e178      	b.n	800bf2c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d194      	bne.n	800bb70 <HAL_SPI_Receive+0x120>
 800bc46:	e15e      	b.n	800bf06 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	2b07      	cmp	r3, #7
 800bc4e:	f240 8153 	bls.w	800bef8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc52:	e08f      	b.n	800bd74 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d114      	bne.n	800bc94 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc6e:	69ba      	ldr	r2, [r7, #24]
 800bc70:	8812      	ldrh	r2, [r2, #0]
 800bc72:	b292      	uxth	r2, r2
 800bc74:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc7a:	1c9a      	adds	r2, r3, #2
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc92:	e06f      	b.n	800bd74 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	8bfa      	ldrh	r2, [r7, #30]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d924      	bls.n	800bcec <HAL_SPI_Receive+0x29c>
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d01f      	beq.n	800bcec <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcb0:	69ba      	ldr	r2, [r7, #24]
 800bcb2:	8812      	ldrh	r2, [r2, #0]
 800bcb4:	b292      	uxth	r2, r2
 800bcb6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcbc:	1c9a      	adds	r2, r3, #2
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcc6:	69ba      	ldr	r2, [r7, #24]
 800bcc8:	8812      	ldrh	r2, [r2, #0]
 800bcca:	b292      	uxth	r2, r2
 800bccc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd2:	1c9a      	adds	r2, r3, #2
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	3b02      	subs	r3, #2
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bcea:	e043      	b.n	800bd74 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d119      	bne.n	800bd2c <HAL_SPI_Receive+0x2dc>
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d014      	beq.n	800bd2c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	8812      	ldrh	r2, [r2, #0]
 800bd0a:	b292      	uxth	r2, r2
 800bd0c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd12:	1c9a      	adds	r2, r3, #2
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	3b01      	subs	r3, #1
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd2a:	e023      	b.n	800bd74 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd2c:	f7f6 fdcc 	bl	80028c8 <HAL_GetTick>
 800bd30:	4602      	mov	r2, r0
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d803      	bhi.n	800bd44 <HAL_SPI_Receive+0x2f4>
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd42:	d102      	bne.n	800bd4a <HAL_SPI_Receive+0x2fa>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d114      	bne.n	800bd74 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 f900 	bl	800bf50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e0db      	b.n	800bf2c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f47f af69 	bne.w	800bc54 <HAL_SPI_Receive+0x204>
 800bd82:	e0c0      	b.n	800bf06 <HAL_SPI_Receive+0x4b6>
 800bd84:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d117      	bne.n	800bdce <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdaa:	7812      	ldrb	r2, [r2, #0]
 800bdac:	b2d2      	uxtb	r2, r2
 800bdae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bdcc:	e094      	b.n	800bef8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	8bfa      	ldrh	r2, [r7, #30]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d946      	bls.n	800be6a <HAL_SPI_Receive+0x41a>
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d041      	beq.n	800be6a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdf2:	7812      	ldrb	r2, [r2, #0]
 800bdf4:	b2d2      	uxtb	r2, r2
 800bdf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdfc:	1c5a      	adds	r2, r3, #1
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be0e:	7812      	ldrb	r2, [r2, #0]
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be2a:	7812      	ldrb	r2, [r2, #0]
 800be2c:	b2d2      	uxtb	r2, r2
 800be2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be34:	1c5a      	adds	r2, r3, #1
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be46:	7812      	ldrb	r2, [r2, #0]
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be50:	1c5a      	adds	r2, r3, #1
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	3b04      	subs	r3, #4
 800be60:	b29a      	uxth	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be68:	e046      	b.n	800bef8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be70:	b29b      	uxth	r3, r3
 800be72:	2b03      	cmp	r3, #3
 800be74:	d81c      	bhi.n	800beb0 <HAL_SPI_Receive+0x460>
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d017      	beq.n	800beb0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be8c:	7812      	ldrb	r2, [r2, #0]
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	3b01      	subs	r3, #1
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800beae:	e023      	b.n	800bef8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beb0:	f7f6 fd0a 	bl	80028c8 <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d803      	bhi.n	800bec8 <HAL_SPI_Receive+0x478>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec6:	d102      	bne.n	800bece <HAL_SPI_Receive+0x47e>
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d114      	bne.n	800bef8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f000 f83e 	bl	800bf50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800beda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bef4:	2303      	movs	r3, #3
 800bef6:	e019      	b.n	800bf2c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800befe:	b29b      	uxth	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f47f af41 	bne.w	800bd88 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 f822 	bl	800bf50 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e000      	b.n	800bf2c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
  }
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf42:	b2db      	uxtb	r3, r3
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	699a      	ldr	r2, [r3, #24]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f042 0208 	orr.w	r2, r2, #8
 800bf6e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	699a      	ldr	r2, [r3, #24]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f042 0210 	orr.w	r2, r2, #16
 800bf7e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f022 0201 	bic.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6919      	ldr	r1, [r3, #16]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	4b3c      	ldr	r3, [pc, #240]	@ (800c08c <SPI_CloseTransfer+0x13c>)
 800bf9c:	400b      	ands	r3, r1
 800bf9e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bfae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b04      	cmp	r3, #4
 800bfba:	d014      	beq.n	800bfe6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f003 0320 	and.w	r3, r3, #32
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00f      	beq.n	800bfe6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfcc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f042 0220 	orr.w	r2, r2, #32
 800bfe4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d014      	beq.n	800c01c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00f      	beq.n	800c01c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c002:	f043 0204 	orr.w	r2, r3, #4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	699a      	ldr	r2, [r3, #24]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c01a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00f      	beq.n	800c046 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c02c:	f043 0201 	orr.w	r2, r3, #1
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	699a      	ldr	r2, [r3, #24]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c044:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00f      	beq.n	800c070 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c056:	f043 0208 	orr.w	r2, r3, #8
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	699a      	ldr	r2, [r3, #24]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c06e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c080:	bf00      	nop
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	fffffc90 	.word	0xfffffc90

0800c090 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	603b      	str	r3, [r7, #0]
 800c09c:	4613      	mov	r3, r2
 800c09e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0a0:	e010      	b.n	800c0c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0a2:	f7f6 fc11 	bl	80028c8 <HAL_GetTick>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d803      	bhi.n	800c0ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b8:	d102      	bne.n	800c0c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e00f      	b.n	800c0e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	695a      	ldr	r2, [r3, #20]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	bf0c      	ite	eq
 800c0d4:	2301      	moveq	r3, #1
 800c0d6:	2300      	movne	r3, #0
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	461a      	mov	r2, r3
 800c0dc:	79fb      	ldrb	r3, [r7, #7]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d0df      	beq.n	800c0a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0f8:	095b      	lsrs	r3, r3, #5
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	3301      	adds	r3, #1
 800c104:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	3307      	adds	r3, #7
 800c10a:	08db      	lsrs	r3, r3, #3
 800c10c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	fb02 f303 	mul.w	r3, r2, r3
}
 800c116:	4618      	mov	r0, r3
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b082      	sub	sp, #8
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e049      	b.n	800c1c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7f6 f945 	bl	80023d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2202      	movs	r2, #2
 800c152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f000 fa65 	bl	800c630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d109      	bne.n	800c1f4 <HAL_TIM_PWM_Start+0x24>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	bf14      	ite	ne
 800c1ec:	2301      	movne	r3, #1
 800c1ee:	2300      	moveq	r3, #0
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	e03c      	b.n	800c26e <HAL_TIM_PWM_Start+0x9e>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b04      	cmp	r3, #4
 800c1f8:	d109      	bne.n	800c20e <HAL_TIM_PWM_Start+0x3e>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b01      	cmp	r3, #1
 800c204:	bf14      	ite	ne
 800c206:	2301      	movne	r3, #1
 800c208:	2300      	moveq	r3, #0
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	e02f      	b.n	800c26e <HAL_TIM_PWM_Start+0x9e>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b08      	cmp	r3, #8
 800c212:	d109      	bne.n	800c228 <HAL_TIM_PWM_Start+0x58>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	bf14      	ite	ne
 800c220:	2301      	movne	r3, #1
 800c222:	2300      	moveq	r3, #0
 800c224:	b2db      	uxtb	r3, r3
 800c226:	e022      	b.n	800c26e <HAL_TIM_PWM_Start+0x9e>
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b0c      	cmp	r3, #12
 800c22c:	d109      	bne.n	800c242 <HAL_TIM_PWM_Start+0x72>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b01      	cmp	r3, #1
 800c238:	bf14      	ite	ne
 800c23a:	2301      	movne	r3, #1
 800c23c:	2300      	moveq	r3, #0
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	e015      	b.n	800c26e <HAL_TIM_PWM_Start+0x9e>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b10      	cmp	r3, #16
 800c246:	d109      	bne.n	800c25c <HAL_TIM_PWM_Start+0x8c>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b01      	cmp	r3, #1
 800c252:	bf14      	ite	ne
 800c254:	2301      	movne	r3, #1
 800c256:	2300      	moveq	r3, #0
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	e008      	b.n	800c26e <HAL_TIM_PWM_Start+0x9e>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b01      	cmp	r3, #1
 800c266:	bf14      	ite	ne
 800c268:	2301      	movne	r3, #1
 800c26a:	2300      	moveq	r3, #0
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e0ab      	b.n	800c3ce <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d104      	bne.n	800c286 <HAL_TIM_PWM_Start+0xb6>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2202      	movs	r2, #2
 800c280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c284:	e023      	b.n	800c2ce <HAL_TIM_PWM_Start+0xfe>
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d104      	bne.n	800c296 <HAL_TIM_PWM_Start+0xc6>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c294:	e01b      	b.n	800c2ce <HAL_TIM_PWM_Start+0xfe>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b08      	cmp	r3, #8
 800c29a:	d104      	bne.n	800c2a6 <HAL_TIM_PWM_Start+0xd6>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2a4:	e013      	b.n	800c2ce <HAL_TIM_PWM_Start+0xfe>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2b0c      	cmp	r3, #12
 800c2aa:	d104      	bne.n	800c2b6 <HAL_TIM_PWM_Start+0xe6>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2b4:	e00b      	b.n	800c2ce <HAL_TIM_PWM_Start+0xfe>
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	2b10      	cmp	r3, #16
 800c2ba:	d104      	bne.n	800c2c6 <HAL_TIM_PWM_Start+0xf6>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2c4:	e003      	b.n	800c2ce <HAL_TIM_PWM_Start+0xfe>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fd32 	bl	800cd40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a3d      	ldr	r2, [pc, #244]	@ (800c3d8 <HAL_TIM_PWM_Start+0x208>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d013      	beq.n	800c30e <HAL_TIM_PWM_Start+0x13e>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a3c      	ldr	r2, [pc, #240]	@ (800c3dc <HAL_TIM_PWM_Start+0x20c>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d00e      	beq.n	800c30e <HAL_TIM_PWM_Start+0x13e>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a3a      	ldr	r2, [pc, #232]	@ (800c3e0 <HAL_TIM_PWM_Start+0x210>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d009      	beq.n	800c30e <HAL_TIM_PWM_Start+0x13e>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a39      	ldr	r2, [pc, #228]	@ (800c3e4 <HAL_TIM_PWM_Start+0x214>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d004      	beq.n	800c30e <HAL_TIM_PWM_Start+0x13e>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a37      	ldr	r2, [pc, #220]	@ (800c3e8 <HAL_TIM_PWM_Start+0x218>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d101      	bne.n	800c312 <HAL_TIM_PWM_Start+0x142>
 800c30e:	2301      	movs	r3, #1
 800c310:	e000      	b.n	800c314 <HAL_TIM_PWM_Start+0x144>
 800c312:	2300      	movs	r3, #0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d007      	beq.n	800c328 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c326:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a2a      	ldr	r2, [pc, #168]	@ (800c3d8 <HAL_TIM_PWM_Start+0x208>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d02c      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c33a:	d027      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a2a      	ldr	r2, [pc, #168]	@ (800c3ec <HAL_TIM_PWM_Start+0x21c>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d022      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a29      	ldr	r2, [pc, #164]	@ (800c3f0 <HAL_TIM_PWM_Start+0x220>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d01d      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a27      	ldr	r2, [pc, #156]	@ (800c3f4 <HAL_TIM_PWM_Start+0x224>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d018      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a1f      	ldr	r2, [pc, #124]	@ (800c3dc <HAL_TIM_PWM_Start+0x20c>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d013      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a23      	ldr	r2, [pc, #140]	@ (800c3f8 <HAL_TIM_PWM_Start+0x228>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d00e      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a1b      	ldr	r2, [pc, #108]	@ (800c3e0 <HAL_TIM_PWM_Start+0x210>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d009      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a1f      	ldr	r2, [pc, #124]	@ (800c3fc <HAL_TIM_PWM_Start+0x22c>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d004      	beq.n	800c38c <HAL_TIM_PWM_Start+0x1bc>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a1e      	ldr	r2, [pc, #120]	@ (800c400 <HAL_TIM_PWM_Start+0x230>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d115      	bne.n	800c3b8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689a      	ldr	r2, [r3, #8]
 800c392:	4b1c      	ldr	r3, [pc, #112]	@ (800c404 <HAL_TIM_PWM_Start+0x234>)
 800c394:	4013      	ands	r3, r2
 800c396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2b06      	cmp	r3, #6
 800c39c:	d015      	beq.n	800c3ca <HAL_TIM_PWM_Start+0x1fa>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3a4:	d011      	beq.n	800c3ca <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f042 0201 	orr.w	r2, r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3b6:	e008      	b.n	800c3ca <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f042 0201 	orr.w	r2, r2, #1
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	e000      	b.n	800c3cc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	40010000 	.word	0x40010000
 800c3dc:	40010400 	.word	0x40010400
 800c3e0:	40014000 	.word	0x40014000
 800c3e4:	40014400 	.word	0x40014400
 800c3e8:	40014800 	.word	0x40014800
 800c3ec:	40000400 	.word	0x40000400
 800c3f0:	40000800 	.word	0x40000800
 800c3f4:	40000c00 	.word	0x40000c00
 800c3f8:	40001800 	.word	0x40001800
 800c3fc:	4000e000 	.word	0x4000e000
 800c400:	4000e400 	.word	0x4000e400
 800c404:	00010007 	.word	0x00010007

0800c408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d101      	bne.n	800c426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c422:	2302      	movs	r3, #2
 800c424:	e0ff      	b.n	800c626 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b14      	cmp	r3, #20
 800c432:	f200 80f0 	bhi.w	800c616 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c436:	a201      	add	r2, pc, #4	@ (adr r2, 800c43c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c491 	.word	0x0800c491
 800c440:	0800c617 	.word	0x0800c617
 800c444:	0800c617 	.word	0x0800c617
 800c448:	0800c617 	.word	0x0800c617
 800c44c:	0800c4d1 	.word	0x0800c4d1
 800c450:	0800c617 	.word	0x0800c617
 800c454:	0800c617 	.word	0x0800c617
 800c458:	0800c617 	.word	0x0800c617
 800c45c:	0800c513 	.word	0x0800c513
 800c460:	0800c617 	.word	0x0800c617
 800c464:	0800c617 	.word	0x0800c617
 800c468:	0800c617 	.word	0x0800c617
 800c46c:	0800c553 	.word	0x0800c553
 800c470:	0800c617 	.word	0x0800c617
 800c474:	0800c617 	.word	0x0800c617
 800c478:	0800c617 	.word	0x0800c617
 800c47c:	0800c595 	.word	0x0800c595
 800c480:	0800c617 	.word	0x0800c617
 800c484:	0800c617 	.word	0x0800c617
 800c488:	0800c617 	.word	0x0800c617
 800c48c:	0800c5d5 	.word	0x0800c5d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68b9      	ldr	r1, [r7, #8]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 f97c 	bl	800c794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	699a      	ldr	r2, [r3, #24]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 0208 	orr.w	r2, r2, #8
 800c4aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	699a      	ldr	r2, [r3, #24]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f022 0204 	bic.w	r2, r2, #4
 800c4ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6999      	ldr	r1, [r3, #24]
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	691a      	ldr	r2, [r3, #16]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	430a      	orrs	r2, r1
 800c4cc:	619a      	str	r2, [r3, #24]
      break;
 800c4ce:	e0a5      	b.n	800c61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f9ec 	bl	800c8b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	699a      	ldr	r2, [r3, #24]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6999      	ldr	r1, [r3, #24]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	021a      	lsls	r2, r3, #8
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	430a      	orrs	r2, r1
 800c50e:	619a      	str	r2, [r3, #24]
      break;
 800c510:	e084      	b.n	800c61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68b9      	ldr	r1, [r7, #8]
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 fa55 	bl	800c9c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69da      	ldr	r2, [r3, #28]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f042 0208 	orr.w	r2, r2, #8
 800c52c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	69da      	ldr	r2, [r3, #28]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f022 0204 	bic.w	r2, r2, #4
 800c53c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	69d9      	ldr	r1, [r3, #28]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	691a      	ldr	r2, [r3, #16]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	430a      	orrs	r2, r1
 800c54e:	61da      	str	r2, [r3, #28]
      break;
 800c550:	e064      	b.n	800c61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68b9      	ldr	r1, [r7, #8]
 800c558:	4618      	mov	r0, r3
 800c55a:	f000 fabd 	bl	800cad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	69da      	ldr	r2, [r3, #28]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c56c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	69da      	ldr	r2, [r3, #28]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c57c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	69d9      	ldr	r1, [r3, #28]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	021a      	lsls	r2, r3, #8
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	430a      	orrs	r2, r1
 800c590:	61da      	str	r2, [r3, #28]
      break;
 800c592:	e043      	b.n	800c61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68b9      	ldr	r1, [r7, #8]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 fb06 	bl	800cbac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f042 0208 	orr.w	r2, r2, #8
 800c5ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f022 0204 	bic.w	r2, r2, #4
 800c5be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	691a      	ldr	r2, [r3, #16]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c5d2:	e023      	b.n	800c61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68b9      	ldr	r1, [r7, #8]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 fb4a 	bl	800cc74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	021a      	lsls	r2, r3, #8
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	430a      	orrs	r2, r1
 800c612:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c614:	e002      	b.n	800c61c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	75fb      	strb	r3, [r7, #23]
      break;
 800c61a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c624:	7dfb      	ldrb	r3, [r7, #23]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop

0800c630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a4a      	ldr	r2, [pc, #296]	@ (800c76c <TIM_Base_SetConfig+0x13c>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d013      	beq.n	800c670 <TIM_Base_SetConfig+0x40>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c64e:	d00f      	beq.n	800c670 <TIM_Base_SetConfig+0x40>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a47      	ldr	r2, [pc, #284]	@ (800c770 <TIM_Base_SetConfig+0x140>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d00b      	beq.n	800c670 <TIM_Base_SetConfig+0x40>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a46      	ldr	r2, [pc, #280]	@ (800c774 <TIM_Base_SetConfig+0x144>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d007      	beq.n	800c670 <TIM_Base_SetConfig+0x40>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a45      	ldr	r2, [pc, #276]	@ (800c778 <TIM_Base_SetConfig+0x148>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d003      	beq.n	800c670 <TIM_Base_SetConfig+0x40>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a44      	ldr	r2, [pc, #272]	@ (800c77c <TIM_Base_SetConfig+0x14c>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d108      	bne.n	800c682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a39      	ldr	r2, [pc, #228]	@ (800c76c <TIM_Base_SetConfig+0x13c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d027      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c690:	d023      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a36      	ldr	r2, [pc, #216]	@ (800c770 <TIM_Base_SetConfig+0x140>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d01f      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a35      	ldr	r2, [pc, #212]	@ (800c774 <TIM_Base_SetConfig+0x144>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d01b      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a34      	ldr	r2, [pc, #208]	@ (800c778 <TIM_Base_SetConfig+0x148>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d017      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a33      	ldr	r2, [pc, #204]	@ (800c77c <TIM_Base_SetConfig+0x14c>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d013      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a32      	ldr	r2, [pc, #200]	@ (800c780 <TIM_Base_SetConfig+0x150>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d00f      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a31      	ldr	r2, [pc, #196]	@ (800c784 <TIM_Base_SetConfig+0x154>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d00b      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a30      	ldr	r2, [pc, #192]	@ (800c788 <TIM_Base_SetConfig+0x158>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d007      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a2f      	ldr	r2, [pc, #188]	@ (800c78c <TIM_Base_SetConfig+0x15c>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d003      	beq.n	800c6da <TIM_Base_SetConfig+0xaa>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a2e      	ldr	r2, [pc, #184]	@ (800c790 <TIM_Base_SetConfig+0x160>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d108      	bne.n	800c6ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a16      	ldr	r2, [pc, #88]	@ (800c76c <TIM_Base_SetConfig+0x13c>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d00f      	beq.n	800c738 <TIM_Base_SetConfig+0x108>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a18      	ldr	r2, [pc, #96]	@ (800c77c <TIM_Base_SetConfig+0x14c>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d00b      	beq.n	800c738 <TIM_Base_SetConfig+0x108>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a17      	ldr	r2, [pc, #92]	@ (800c780 <TIM_Base_SetConfig+0x150>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d007      	beq.n	800c738 <TIM_Base_SetConfig+0x108>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a16      	ldr	r2, [pc, #88]	@ (800c784 <TIM_Base_SetConfig+0x154>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d003      	beq.n	800c738 <TIM_Base_SetConfig+0x108>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a15      	ldr	r2, [pc, #84]	@ (800c788 <TIM_Base_SetConfig+0x158>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d103      	bne.n	800c740 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	691a      	ldr	r2, [r3, #16]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d105      	bne.n	800c75e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	f023 0201 	bic.w	r2, r3, #1
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	611a      	str	r2, [r3, #16]
  }
}
 800c75e:	bf00      	nop
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	40010000 	.word	0x40010000
 800c770:	40000400 	.word	0x40000400
 800c774:	40000800 	.word	0x40000800
 800c778:	40000c00 	.word	0x40000c00
 800c77c:	40010400 	.word	0x40010400
 800c780:	40014000 	.word	0x40014000
 800c784:	40014400 	.word	0x40014400
 800c788:	40014800 	.word	0x40014800
 800c78c:	4000e000 	.word	0x4000e000
 800c790:	4000e400 	.word	0x4000e400

0800c794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c794:	b480      	push	{r7}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a1b      	ldr	r3, [r3, #32]
 800c7a8:	f023 0201 	bic.w	r2, r3, #1
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	4b37      	ldr	r3, [pc, #220]	@ (800c89c <TIM_OC1_SetConfig+0x108>)
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f023 0303 	bic.w	r3, r3, #3
 800c7ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	f023 0302 	bic.w	r3, r3, #2
 800c7dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c8a0 <TIM_OC1_SetConfig+0x10c>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d00f      	beq.n	800c810 <TIM_OC1_SetConfig+0x7c>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a2c      	ldr	r2, [pc, #176]	@ (800c8a4 <TIM_OC1_SetConfig+0x110>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d00b      	beq.n	800c810 <TIM_OC1_SetConfig+0x7c>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a2b      	ldr	r2, [pc, #172]	@ (800c8a8 <TIM_OC1_SetConfig+0x114>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d007      	beq.n	800c810 <TIM_OC1_SetConfig+0x7c>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a2a      	ldr	r2, [pc, #168]	@ (800c8ac <TIM_OC1_SetConfig+0x118>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d003      	beq.n	800c810 <TIM_OC1_SetConfig+0x7c>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a29      	ldr	r2, [pc, #164]	@ (800c8b0 <TIM_OC1_SetConfig+0x11c>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d10c      	bne.n	800c82a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f023 0308 	bic.w	r3, r3, #8
 800c816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	4313      	orrs	r3, r2
 800c820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f023 0304 	bic.w	r3, r3, #4
 800c828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a1c      	ldr	r2, [pc, #112]	@ (800c8a0 <TIM_OC1_SetConfig+0x10c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d00f      	beq.n	800c852 <TIM_OC1_SetConfig+0xbe>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a1b      	ldr	r2, [pc, #108]	@ (800c8a4 <TIM_OC1_SetConfig+0x110>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d00b      	beq.n	800c852 <TIM_OC1_SetConfig+0xbe>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a1a      	ldr	r2, [pc, #104]	@ (800c8a8 <TIM_OC1_SetConfig+0x114>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d007      	beq.n	800c852 <TIM_OC1_SetConfig+0xbe>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a19      	ldr	r2, [pc, #100]	@ (800c8ac <TIM_OC1_SetConfig+0x118>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d003      	beq.n	800c852 <TIM_OC1_SetConfig+0xbe>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a18      	ldr	r2, [pc, #96]	@ (800c8b0 <TIM_OC1_SetConfig+0x11c>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d111      	bne.n	800c876 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	4313      	orrs	r3, r2
 800c86a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	4313      	orrs	r3, r2
 800c874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	693a      	ldr	r2, [r7, #16]
 800c87a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	685a      	ldr	r2, [r3, #4]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	621a      	str	r2, [r3, #32]
}
 800c890:	bf00      	nop
 800c892:	371c      	adds	r7, #28
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	fffeff8f 	.word	0xfffeff8f
 800c8a0:	40010000 	.word	0x40010000
 800c8a4:	40010400 	.word	0x40010400
 800c8a8:	40014000 	.word	0x40014000
 800c8ac:	40014400 	.word	0x40014400
 800c8b0:	40014800 	.word	0x40014800

0800c8b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a1b      	ldr	r3, [r3, #32]
 800c8c8:	f023 0210 	bic.w	r2, r3, #16
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	4b34      	ldr	r3, [pc, #208]	@ (800c9b0 <TIM_OC2_SetConfig+0xfc>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	021b      	lsls	r3, r3, #8
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f023 0320 	bic.w	r3, r3, #32
 800c8fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	011b      	lsls	r3, r3, #4
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	4313      	orrs	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a29      	ldr	r2, [pc, #164]	@ (800c9b4 <TIM_OC2_SetConfig+0x100>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d003      	beq.n	800c91c <TIM_OC2_SetConfig+0x68>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a28      	ldr	r2, [pc, #160]	@ (800c9b8 <TIM_OC2_SetConfig+0x104>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d10d      	bne.n	800c938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	011b      	lsls	r3, r3, #4
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a1e      	ldr	r2, [pc, #120]	@ (800c9b4 <TIM_OC2_SetConfig+0x100>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d00f      	beq.n	800c960 <TIM_OC2_SetConfig+0xac>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a1d      	ldr	r2, [pc, #116]	@ (800c9b8 <TIM_OC2_SetConfig+0x104>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d00b      	beq.n	800c960 <TIM_OC2_SetConfig+0xac>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a1c      	ldr	r2, [pc, #112]	@ (800c9bc <TIM_OC2_SetConfig+0x108>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d007      	beq.n	800c960 <TIM_OC2_SetConfig+0xac>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a1b      	ldr	r2, [pc, #108]	@ (800c9c0 <TIM_OC2_SetConfig+0x10c>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d003      	beq.n	800c960 <TIM_OC2_SetConfig+0xac>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a1a      	ldr	r2, [pc, #104]	@ (800c9c4 <TIM_OC2_SetConfig+0x110>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d113      	bne.n	800c988 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c96e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	4313      	orrs	r3, r2
 800c97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	4313      	orrs	r3, r2
 800c986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	621a      	str	r2, [r3, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	371c      	adds	r7, #28
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	feff8fff 	.word	0xfeff8fff
 800c9b4:	40010000 	.word	0x40010000
 800c9b8:	40010400 	.word	0x40010400
 800c9bc:	40014000 	.word	0x40014000
 800c9c0:	40014400 	.word	0x40014400
 800c9c4:	40014800 	.word	0x40014800

0800c9c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b087      	sub	sp, #28
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a1b      	ldr	r3, [r3, #32]
 800c9d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	4b33      	ldr	r3, [pc, #204]	@ (800cac0 <TIM_OC3_SetConfig+0xf8>)
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	021b      	lsls	r3, r3, #8
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a28      	ldr	r2, [pc, #160]	@ (800cac4 <TIM_OC3_SetConfig+0xfc>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d003      	beq.n	800ca2e <TIM_OC3_SetConfig+0x66>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a27      	ldr	r2, [pc, #156]	@ (800cac8 <TIM_OC3_SetConfig+0x100>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d10d      	bne.n	800ca4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	021b      	lsls	r3, r3, #8
 800ca3c:	697a      	ldr	r2, [r7, #20]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a1d      	ldr	r2, [pc, #116]	@ (800cac4 <TIM_OC3_SetConfig+0xfc>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d00f      	beq.n	800ca72 <TIM_OC3_SetConfig+0xaa>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a1c      	ldr	r2, [pc, #112]	@ (800cac8 <TIM_OC3_SetConfig+0x100>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00b      	beq.n	800ca72 <TIM_OC3_SetConfig+0xaa>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a1b      	ldr	r2, [pc, #108]	@ (800cacc <TIM_OC3_SetConfig+0x104>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d007      	beq.n	800ca72 <TIM_OC3_SetConfig+0xaa>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a1a      	ldr	r2, [pc, #104]	@ (800cad0 <TIM_OC3_SetConfig+0x108>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d003      	beq.n	800ca72 <TIM_OC3_SetConfig+0xaa>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a19      	ldr	r2, [pc, #100]	@ (800cad4 <TIM_OC3_SetConfig+0x10c>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d113      	bne.n	800ca9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	011b      	lsls	r3, r3, #4
 800ca88:	693a      	ldr	r2, [r7, #16]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	011b      	lsls	r3, r3, #4
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	621a      	str	r2, [r3, #32]
}
 800cab4:	bf00      	nop
 800cab6:	371c      	adds	r7, #28
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	fffeff8f 	.word	0xfffeff8f
 800cac4:	40010000 	.word	0x40010000
 800cac8:	40010400 	.word	0x40010400
 800cacc:	40014000 	.word	0x40014000
 800cad0:	40014400 	.word	0x40014400
 800cad4:	40014800 	.word	0x40014800

0800cad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cad8:	b480      	push	{r7}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a1b      	ldr	r3, [r3, #32]
 800caec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	4b24      	ldr	r3, [pc, #144]	@ (800cb94 <TIM_OC4_SetConfig+0xbc>)
 800cb04:	4013      	ands	r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	021b      	lsls	r3, r3, #8
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	031b      	lsls	r3, r3, #12
 800cb2a:	693a      	ldr	r2, [r7, #16]
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a19      	ldr	r2, [pc, #100]	@ (800cb98 <TIM_OC4_SetConfig+0xc0>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d00f      	beq.n	800cb58 <TIM_OC4_SetConfig+0x80>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a18      	ldr	r2, [pc, #96]	@ (800cb9c <TIM_OC4_SetConfig+0xc4>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d00b      	beq.n	800cb58 <TIM_OC4_SetConfig+0x80>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a17      	ldr	r2, [pc, #92]	@ (800cba0 <TIM_OC4_SetConfig+0xc8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d007      	beq.n	800cb58 <TIM_OC4_SetConfig+0x80>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a16      	ldr	r2, [pc, #88]	@ (800cba4 <TIM_OC4_SetConfig+0xcc>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d003      	beq.n	800cb58 <TIM_OC4_SetConfig+0x80>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a15      	ldr	r2, [pc, #84]	@ (800cba8 <TIM_OC4_SetConfig+0xd0>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d109      	bne.n	800cb6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	019b      	lsls	r3, r3, #6
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	697a      	ldr	r2, [r7, #20]
 800cb70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	621a      	str	r2, [r3, #32]
}
 800cb86:	bf00      	nop
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	feff8fff 	.word	0xfeff8fff
 800cb98:	40010000 	.word	0x40010000
 800cb9c:	40010400 	.word	0x40010400
 800cba0:	40014000 	.word	0x40014000
 800cba4:	40014400 	.word	0x40014400
 800cba8:	40014800 	.word	0x40014800

0800cbac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	4b21      	ldr	r3, [pc, #132]	@ (800cc5c <TIM_OC5_SetConfig+0xb0>)
 800cbd8:	4013      	ands	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cbec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	041b      	lsls	r3, r3, #16
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a18      	ldr	r2, [pc, #96]	@ (800cc60 <TIM_OC5_SetConfig+0xb4>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d00f      	beq.n	800cc22 <TIM_OC5_SetConfig+0x76>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a17      	ldr	r2, [pc, #92]	@ (800cc64 <TIM_OC5_SetConfig+0xb8>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d00b      	beq.n	800cc22 <TIM_OC5_SetConfig+0x76>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a16      	ldr	r2, [pc, #88]	@ (800cc68 <TIM_OC5_SetConfig+0xbc>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d007      	beq.n	800cc22 <TIM_OC5_SetConfig+0x76>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a15      	ldr	r2, [pc, #84]	@ (800cc6c <TIM_OC5_SetConfig+0xc0>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d003      	beq.n	800cc22 <TIM_OC5_SetConfig+0x76>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a14      	ldr	r2, [pc, #80]	@ (800cc70 <TIM_OC5_SetConfig+0xc4>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d109      	bne.n	800cc36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	695b      	ldr	r3, [r3, #20]
 800cc2e:	021b      	lsls	r3, r3, #8
 800cc30:	697a      	ldr	r2, [r7, #20]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	621a      	str	r2, [r3, #32]
}
 800cc50:	bf00      	nop
 800cc52:	371c      	adds	r7, #28
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	fffeff8f 	.word	0xfffeff8f
 800cc60:	40010000 	.word	0x40010000
 800cc64:	40010400 	.word	0x40010400
 800cc68:	40014000 	.word	0x40014000
 800cc6c:	40014400 	.word	0x40014400
 800cc70:	40014800 	.word	0x40014800

0800cc74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6a1b      	ldr	r3, [r3, #32]
 800cc88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	4b22      	ldr	r3, [pc, #136]	@ (800cd28 <TIM_OC6_SetConfig+0xb4>)
 800cca0:	4013      	ands	r3, r2
 800cca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	021b      	lsls	r3, r3, #8
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	4313      	orrs	r3, r2
 800ccae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ccb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	051b      	lsls	r3, r3, #20
 800ccbe:	693a      	ldr	r2, [r7, #16]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a19      	ldr	r2, [pc, #100]	@ (800cd2c <TIM_OC6_SetConfig+0xb8>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d00f      	beq.n	800ccec <TIM_OC6_SetConfig+0x78>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a18      	ldr	r2, [pc, #96]	@ (800cd30 <TIM_OC6_SetConfig+0xbc>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d00b      	beq.n	800ccec <TIM_OC6_SetConfig+0x78>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4a17      	ldr	r2, [pc, #92]	@ (800cd34 <TIM_OC6_SetConfig+0xc0>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d007      	beq.n	800ccec <TIM_OC6_SetConfig+0x78>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a16      	ldr	r2, [pc, #88]	@ (800cd38 <TIM_OC6_SetConfig+0xc4>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d003      	beq.n	800ccec <TIM_OC6_SetConfig+0x78>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a15      	ldr	r2, [pc, #84]	@ (800cd3c <TIM_OC6_SetConfig+0xc8>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d109      	bne.n	800cd00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ccf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	029b      	lsls	r3, r3, #10
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	693a      	ldr	r2, [r7, #16]
 800cd18:	621a      	str	r2, [r3, #32]
}
 800cd1a:	bf00      	nop
 800cd1c:	371c      	adds	r7, #28
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	feff8fff 	.word	0xfeff8fff
 800cd2c:	40010000 	.word	0x40010000
 800cd30:	40010400 	.word	0x40010400
 800cd34:	40014000 	.word	0x40014000
 800cd38:	40014400 	.word	0x40014400
 800cd3c:	40014800 	.word	0x40014800

0800cd40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b087      	sub	sp, #28
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	f003 031f 	and.w	r3, r3, #31
 800cd52:	2201      	movs	r2, #1
 800cd54:	fa02 f303 	lsl.w	r3, r2, r3
 800cd58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6a1a      	ldr	r2, [r3, #32]
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	43db      	mvns	r3, r3
 800cd62:	401a      	ands	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6a1a      	ldr	r2, [r3, #32]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	f003 031f 	and.w	r3, r3, #31
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	fa01 f303 	lsl.w	r3, r1, r3
 800cd78:	431a      	orrs	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	621a      	str	r2, [r3, #32]
}
 800cd7e:	bf00      	nop
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
	...

0800cd8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d101      	bne.n	800cda4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cda0:	2302      	movs	r3, #2
 800cda2:	e077      	b.n	800ce94 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a35      	ldr	r2, [pc, #212]	@ (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d004      	beq.n	800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a34      	ldr	r2, [pc, #208]	@ (800cea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d108      	bne.n	800cdea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cdde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a25      	ldr	r2, [pc, #148]	@ (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d02c      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce16:	d027      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a22      	ldr	r2, [pc, #136]	@ (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d022      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a21      	ldr	r2, [pc, #132]	@ (800ceac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d01d      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a1f      	ldr	r2, [pc, #124]	@ (800ceb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d018      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a1a      	ldr	r2, [pc, #104]	@ (800cea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d013      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a1b      	ldr	r2, [pc, #108]	@ (800ceb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d00e      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a1a      	ldr	r2, [pc, #104]	@ (800ceb8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d009      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a18      	ldr	r2, [pc, #96]	@ (800cebc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d004      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a17      	ldr	r2, [pc, #92]	@ (800cec0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d10c      	bne.n	800ce82 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	40010000 	.word	0x40010000
 800cea4:	40010400 	.word	0x40010400
 800cea8:	40000400 	.word	0x40000400
 800ceac:	40000800 	.word	0x40000800
 800ceb0:	40000c00 	.word	0x40000c00
 800ceb4:	40001800 	.word	0x40001800
 800ceb8:	40014000 	.word	0x40014000
 800cebc:	4000e000 	.word	0x4000e000
 800cec0:	4000e400 	.word	0x4000e400

0800cec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e042      	b.n	800cf5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d106      	bne.n	800ceee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f5 facd 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2224      	movs	r2, #36	@ 0x24
 800cef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0201 	bic.w	r2, r2, #1
 800cf04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d002      	beq.n	800cf14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f001 fafa 	bl	800e508 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fc8b 	bl	800d830 <UART_SetConfig>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d101      	bne.n	800cf24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e01b      	b.n	800cf5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cf32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cf42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f042 0201 	orr.w	r2, r2, #1
 800cf52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f001 fb79 	bl	800e64c <UART_CheckIdleState>
 800cf5a:	4603      	mov	r3, r0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b08a      	sub	sp, #40	@ 0x28
 800cf68:	af02      	add	r7, sp, #8
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	603b      	str	r3, [r7, #0]
 800cf70:	4613      	mov	r3, r2
 800cf72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf7a:	2b20      	cmp	r3, #32
 800cf7c:	d17b      	bne.n	800d076 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <HAL_UART_Transmit+0x26>
 800cf84:	88fb      	ldrh	r3, [r7, #6]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e074      	b.n	800d078 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2221      	movs	r2, #33	@ 0x21
 800cf9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf9e:	f7f5 fc93 	bl	80028c8 <HAL_GetTick>
 800cfa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	88fa      	ldrh	r2, [r7, #6]
 800cfa8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	88fa      	ldrh	r2, [r7, #6]
 800cfb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfbc:	d108      	bne.n	800cfd0 <HAL_UART_Transmit+0x6c>
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d104      	bne.n	800cfd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	61bb      	str	r3, [r7, #24]
 800cfce:	e003      	b.n	800cfd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cfd8:	e030      	b.n	800d03c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2180      	movs	r1, #128	@ 0x80
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f001 fbdb 	bl	800e7a0 <UART_WaitOnFlagUntilTimeout>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e03d      	b.n	800d078 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d002:	69bb      	ldr	r3, [r7, #24]
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	461a      	mov	r2, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d010:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	3302      	adds	r3, #2
 800d016:	61bb      	str	r3, [r7, #24]
 800d018:	e007      	b.n	800d02a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	781a      	ldrb	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	3301      	adds	r3, #1
 800d028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d030:	b29b      	uxth	r3, r3
 800d032:	3b01      	subs	r3, #1
 800d034:	b29a      	uxth	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d042:	b29b      	uxth	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1c8      	bne.n	800cfda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2200      	movs	r2, #0
 800d050:	2140      	movs	r1, #64	@ 0x40
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f001 fba4 	bl	800e7a0 <UART_WaitOnFlagUntilTimeout>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2220      	movs	r2, #32
 800d062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d066:	2303      	movs	r3, #3
 800d068:	e006      	b.n	800d078 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2220      	movs	r2, #32
 800d06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	e000      	b.n	800d078 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d076:	2302      	movs	r3, #2
  }
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3720      	adds	r7, #32
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b0ba      	sub	sp, #232	@ 0xe8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	69db      	ldr	r3, [r3, #28]
 800d08e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d0a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d0aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d0b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d11b      	bne.n	800d0f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0c0:	f003 0320 	and.w	r3, r3, #32
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d015      	beq.n	800d0f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d105      	bne.n	800d0e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d009      	beq.n	800d0f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f000 8377 	beq.w	800d7d8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	4798      	blx	r3
      }
      return;
 800d0f2:	e371      	b.n	800d7d8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d0f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 8123 	beq.w	800d344 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d0fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d102:	4b8d      	ldr	r3, [pc, #564]	@ (800d338 <HAL_UART_IRQHandler+0x2b8>)
 800d104:	4013      	ands	r3, r2
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d10a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d10e:	4b8b      	ldr	r3, [pc, #556]	@ (800d33c <HAL_UART_IRQHandler+0x2bc>)
 800d110:	4013      	ands	r3, r2
 800d112:	2b00      	cmp	r3, #0
 800d114:	f000 8116 	beq.w	800d344 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d11c:	f003 0301 	and.w	r3, r3, #1
 800d120:	2b00      	cmp	r3, #0
 800d122:	d011      	beq.n	800d148 <HAL_UART_IRQHandler+0xc8>
 800d124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2201      	movs	r2, #1
 800d136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d13e:	f043 0201 	orr.w	r2, r3, #1
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d011      	beq.n	800d178 <HAL_UART_IRQHandler+0xf8>
 800d154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2202      	movs	r2, #2
 800d166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d16e:	f043 0204 	orr.w	r2, r3, #4
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d17c:	f003 0304 	and.w	r3, r3, #4
 800d180:	2b00      	cmp	r3, #0
 800d182:	d011      	beq.n	800d1a8 <HAL_UART_IRQHandler+0x128>
 800d184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00b      	beq.n	800d1a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2204      	movs	r2, #4
 800d196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d19e:	f043 0202 	orr.w	r2, r3, #2
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1ac:	f003 0308 	and.w	r3, r3, #8
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d017      	beq.n	800d1e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1b8:	f003 0320 	and.w	r3, r3, #32
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d105      	bne.n	800d1cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d1c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d1c4:	4b5c      	ldr	r3, [pc, #368]	@ (800d338 <HAL_UART_IRQHandler+0x2b8>)
 800d1c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00b      	beq.n	800d1e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2208      	movs	r2, #8
 800d1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1da:	f043 0208 	orr.w	r2, r3, #8
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d012      	beq.n	800d216 <HAL_UART_IRQHandler+0x196>
 800d1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00c      	beq.n	800d216 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d20c:	f043 0220 	orr.w	r2, r3, #32
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 82dd 	beq.w	800d7dc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d226:	f003 0320 	and.w	r3, r3, #32
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d013      	beq.n	800d256 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d22e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d232:	f003 0320 	and.w	r3, r3, #32
 800d236:	2b00      	cmp	r3, #0
 800d238:	d105      	bne.n	800d246 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d23a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d23e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d242:	2b00      	cmp	r3, #0
 800d244:	d007      	beq.n	800d256 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d003      	beq.n	800d256 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d25c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d26a:	2b40      	cmp	r3, #64	@ 0x40
 800d26c:	d005      	beq.n	800d27a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d26e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d272:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d276:	2b00      	cmp	r3, #0
 800d278:	d054      	beq.n	800d324 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f001 fc20 	bl	800eac0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d28a:	2b40      	cmp	r3, #64	@ 0x40
 800d28c:	d146      	bne.n	800d31c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3308      	adds	r3, #8
 800d294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d29c:	e853 3f00 	ldrex	r3, [r3]
 800d2a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d2a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d2ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d2be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d2c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d2ca:	e841 2300 	strex	r3, r2, [r1]
 800d2ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d2d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1d9      	bne.n	800d28e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d017      	beq.n	800d314 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ea:	4a15      	ldr	r2, [pc, #84]	@ (800d340 <HAL_UART_IRQHandler+0x2c0>)
 800d2ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7f8 fdc5 	bl	8005e84 <HAL_DMA_Abort_IT>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d019      	beq.n	800d334 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d30e:	4610      	mov	r0, r2
 800d310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d312:	e00f      	b.n	800d334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fa81 	bl	800d81c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d31a:	e00b      	b.n	800d334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 fa7d 	bl	800d81c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d322:	e007      	b.n	800d334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fa79 	bl	800d81c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d332:	e253      	b.n	800d7dc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d334:	bf00      	nop
    return;
 800d336:	e251      	b.n	800d7dc <HAL_UART_IRQHandler+0x75c>
 800d338:	10000001 	.word	0x10000001
 800d33c:	04000120 	.word	0x04000120
 800d340:	0800eb8d 	.word	0x0800eb8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d348:	2b01      	cmp	r3, #1
 800d34a:	f040 81e7 	bne.w	800d71c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d352:	f003 0310 	and.w	r3, r3, #16
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 81e0 	beq.w	800d71c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d360:	f003 0310 	and.w	r3, r3, #16
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 81d9 	beq.w	800d71c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2210      	movs	r2, #16
 800d370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d37c:	2b40      	cmp	r3, #64	@ 0x40
 800d37e:	f040 8151 	bne.w	800d624 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a96      	ldr	r2, [pc, #600]	@ (800d5e4 <HAL_UART_IRQHandler+0x564>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d068      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a93      	ldr	r2, [pc, #588]	@ (800d5e8 <HAL_UART_IRQHandler+0x568>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d061      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a91      	ldr	r2, [pc, #580]	@ (800d5ec <HAL_UART_IRQHandler+0x56c>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d05a      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a8e      	ldr	r2, [pc, #568]	@ (800d5f0 <HAL_UART_IRQHandler+0x570>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d053      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a8c      	ldr	r2, [pc, #560]	@ (800d5f4 <HAL_UART_IRQHandler+0x574>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d04c      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a89      	ldr	r2, [pc, #548]	@ (800d5f8 <HAL_UART_IRQHandler+0x578>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d045      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a87      	ldr	r2, [pc, #540]	@ (800d5fc <HAL_UART_IRQHandler+0x57c>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d03e      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a84      	ldr	r2, [pc, #528]	@ (800d600 <HAL_UART_IRQHandler+0x580>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d037      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a82      	ldr	r2, [pc, #520]	@ (800d604 <HAL_UART_IRQHandler+0x584>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d030      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a7f      	ldr	r2, [pc, #508]	@ (800d608 <HAL_UART_IRQHandler+0x588>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d029      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a7d      	ldr	r2, [pc, #500]	@ (800d60c <HAL_UART_IRQHandler+0x58c>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d022      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a7a      	ldr	r2, [pc, #488]	@ (800d610 <HAL_UART_IRQHandler+0x590>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d01b      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a78      	ldr	r2, [pc, #480]	@ (800d614 <HAL_UART_IRQHandler+0x594>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d014      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a75      	ldr	r2, [pc, #468]	@ (800d618 <HAL_UART_IRQHandler+0x598>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d00d      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a73      	ldr	r2, [pc, #460]	@ (800d61c <HAL_UART_IRQHandler+0x59c>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d006      	beq.n	800d462 <HAL_UART_IRQHandler+0x3e2>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a70      	ldr	r2, [pc, #448]	@ (800d620 <HAL_UART_IRQHandler+0x5a0>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d106      	bne.n	800d470 <HAL_UART_IRQHandler+0x3f0>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	e005      	b.n	800d47c <HAL_UART_IRQHandler+0x3fc>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 81ab 	beq.w	800d7e0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d490:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d494:	429a      	cmp	r2, r3
 800d496:	f080 81a3 	bcs.w	800d7e0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4aa:	69db      	ldr	r3, [r3, #28]
 800d4ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4b0:	f000 8087 	beq.w	800d5c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d4c0:	e853 3f00 	ldrex	r3, [r3]
 800d4c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d4c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d4cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d4e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d4ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d4ee:	e841 2300 	strex	r3, r2, [r1]
 800d4f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d4f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1da      	bne.n	800d4b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3308      	adds	r3, #8
 800d504:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d508:	e853 3f00 	ldrex	r3, [r3]
 800d50c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d50e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d510:	f023 0301 	bic.w	r3, r3, #1
 800d514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3308      	adds	r3, #8
 800d51e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d522:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d526:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d528:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d52a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d52e:	e841 2300 	strex	r3, r2, [r1]
 800d532:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1e1      	bne.n	800d4fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3308      	adds	r3, #8
 800d540:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d544:	e853 3f00 	ldrex	r3, [r3]
 800d548:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d54a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d54c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3308      	adds	r3, #8
 800d55a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d55e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d560:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d564:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d56c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e3      	bne.n	800d53a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d588:	e853 3f00 	ldrex	r3, [r3]
 800d58c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d58e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d590:	f023 0310 	bic.w	r3, r3, #16
 800d594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	461a      	mov	r2, r3
 800d59e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d5a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d5a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5aa:	e841 2300 	strex	r3, r2, [r1]
 800d5ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1e4      	bne.n	800d580 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f8 f943 	bl	8005848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	1ad3      	subs	r3, r2, r3
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	4619      	mov	r1, r3
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7f3 fd0f 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d5e2:	e0fd      	b.n	800d7e0 <HAL_UART_IRQHandler+0x760>
 800d5e4:	40020010 	.word	0x40020010
 800d5e8:	40020028 	.word	0x40020028
 800d5ec:	40020040 	.word	0x40020040
 800d5f0:	40020058 	.word	0x40020058
 800d5f4:	40020070 	.word	0x40020070
 800d5f8:	40020088 	.word	0x40020088
 800d5fc:	400200a0 	.word	0x400200a0
 800d600:	400200b8 	.word	0x400200b8
 800d604:	40020410 	.word	0x40020410
 800d608:	40020428 	.word	0x40020428
 800d60c:	40020440 	.word	0x40020440
 800d610:	40020458 	.word	0x40020458
 800d614:	40020470 	.word	0x40020470
 800d618:	40020488 	.word	0x40020488
 800d61c:	400204a0 	.word	0x400204a0
 800d620:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d630:	b29b      	uxth	r3, r3
 800d632:	1ad3      	subs	r3, r2, r3
 800d634:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d63e:	b29b      	uxth	r3, r3
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 80cf 	beq.w	800d7e4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 80ca 	beq.w	800d7e4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	e853 3f00 	ldrex	r3, [r3]
 800d65c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d664:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	461a      	mov	r2, r3
 800d66e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d672:	647b      	str	r3, [r7, #68]	@ 0x44
 800d674:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d676:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d67a:	e841 2300 	strex	r3, r2, [r1]
 800d67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1e4      	bne.n	800d650 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3308      	adds	r3, #8
 800d68c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d690:	e853 3f00 	ldrex	r3, [r3]
 800d694:	623b      	str	r3, [r7, #32]
   return(result);
 800d696:	6a3a      	ldr	r2, [r7, #32]
 800d698:	4b55      	ldr	r3, [pc, #340]	@ (800d7f0 <HAL_UART_IRQHandler+0x770>)
 800d69a:	4013      	ands	r3, r2
 800d69c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d6aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b2:	e841 2300 	strex	r3, r2, [r1]
 800d6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1e3      	bne.n	800d686 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2220      	movs	r2, #32
 800d6c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	e853 3f00 	ldrex	r3, [r3]
 800d6de:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f023 0310 	bic.w	r3, r3, #16
 800d6e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f8:	69b9      	ldr	r1, [r7, #24]
 800d6fa:	69fa      	ldr	r2, [r7, #28]
 800d6fc:	e841 2300 	strex	r3, r2, [r1]
 800d700:	617b      	str	r3, [r7, #20]
   return(result);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1e4      	bne.n	800d6d2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2202      	movs	r2, #2
 800d70c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d70e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7f3 fc73 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d71a:	e063      	b.n	800d7e4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00e      	beq.n	800d746 <HAL_UART_IRQHandler+0x6c6>
 800d728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d72c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d008      	beq.n	800d746 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d73c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f001 ff82 	bl	800f648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d744:	e051      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d014      	beq.n	800d77c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d105      	bne.n	800d76a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d75e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d008      	beq.n	800d77c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d03a      	beq.n	800d7e8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	4798      	blx	r3
    }
    return;
 800d77a:	e035      	b.n	800d7e8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d784:	2b00      	cmp	r3, #0
 800d786:	d009      	beq.n	800d79c <HAL_UART_IRQHandler+0x71c>
 800d788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d790:	2b00      	cmp	r3, #0
 800d792:	d003      	beq.n	800d79c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f001 fa0f 	bl	800ebb8 <UART_EndTransmit_IT>
    return;
 800d79a:	e026      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d009      	beq.n	800d7bc <HAL_UART_IRQHandler+0x73c>
 800d7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d003      	beq.n	800d7bc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f001 ff5b 	bl	800f670 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7ba:	e016      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d010      	beq.n	800d7ea <HAL_UART_IRQHandler+0x76a>
 800d7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	da0c      	bge.n	800d7ea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f001 ff43 	bl	800f65c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7d6:	e008      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
      return;
 800d7d8:	bf00      	nop
 800d7da:	e006      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
    return;
 800d7dc:	bf00      	nop
 800d7de:	e004      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
      return;
 800d7e0:	bf00      	nop
 800d7e2:	e002      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
      return;
 800d7e4:	bf00      	nop
 800d7e6:	e000      	b.n	800d7ea <HAL_UART_IRQHandler+0x76a>
    return;
 800d7e8:	bf00      	nop
  }
}
 800d7ea:	37e8      	adds	r7, #232	@ 0xe8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	effffffe 	.word	0xeffffffe

0800d7f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d834:	b092      	sub	sp, #72	@ 0x48
 800d836:	af00      	add	r7, sp, #0
 800d838:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	689a      	ldr	r2, [r3, #8]
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	431a      	orrs	r2, r3
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	431a      	orrs	r2, r3
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	4313      	orrs	r3, r2
 800d856:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	4bbe      	ldr	r3, [pc, #760]	@ (800db58 <UART_SetConfig+0x328>)
 800d860:	4013      	ands	r3, r2
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	6812      	ldr	r2, [r2, #0]
 800d866:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d868:	430b      	orrs	r3, r1
 800d86a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	68da      	ldr	r2, [r3, #12]
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	430a      	orrs	r2, r1
 800d880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4ab3      	ldr	r2, [pc, #716]	@ (800db5c <UART_SetConfig+0x32c>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d004      	beq.n	800d89c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d898:	4313      	orrs	r3, r2
 800d89a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	689a      	ldr	r2, [r3, #8]
 800d8a2:	4baf      	ldr	r3, [pc, #700]	@ (800db60 <UART_SetConfig+0x330>)
 800d8a4:	4013      	ands	r3, r2
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	6812      	ldr	r2, [r2, #0]
 800d8aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d8ac:	430b      	orrs	r3, r1
 800d8ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b6:	f023 010f 	bic.w	r1, r3, #15
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	430a      	orrs	r2, r1
 800d8c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4aa6      	ldr	r2, [pc, #664]	@ (800db64 <UART_SetConfig+0x334>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d177      	bne.n	800d9c0 <UART_SetConfig+0x190>
 800d8d0:	4ba5      	ldr	r3, [pc, #660]	@ (800db68 <UART_SetConfig+0x338>)
 800d8d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d8d8:	2b28      	cmp	r3, #40	@ 0x28
 800d8da:	d86d      	bhi.n	800d9b8 <UART_SetConfig+0x188>
 800d8dc:	a201      	add	r2, pc, #4	@ (adr r2, 800d8e4 <UART_SetConfig+0xb4>)
 800d8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e2:	bf00      	nop
 800d8e4:	0800d989 	.word	0x0800d989
 800d8e8:	0800d9b9 	.word	0x0800d9b9
 800d8ec:	0800d9b9 	.word	0x0800d9b9
 800d8f0:	0800d9b9 	.word	0x0800d9b9
 800d8f4:	0800d9b9 	.word	0x0800d9b9
 800d8f8:	0800d9b9 	.word	0x0800d9b9
 800d8fc:	0800d9b9 	.word	0x0800d9b9
 800d900:	0800d9b9 	.word	0x0800d9b9
 800d904:	0800d991 	.word	0x0800d991
 800d908:	0800d9b9 	.word	0x0800d9b9
 800d90c:	0800d9b9 	.word	0x0800d9b9
 800d910:	0800d9b9 	.word	0x0800d9b9
 800d914:	0800d9b9 	.word	0x0800d9b9
 800d918:	0800d9b9 	.word	0x0800d9b9
 800d91c:	0800d9b9 	.word	0x0800d9b9
 800d920:	0800d9b9 	.word	0x0800d9b9
 800d924:	0800d999 	.word	0x0800d999
 800d928:	0800d9b9 	.word	0x0800d9b9
 800d92c:	0800d9b9 	.word	0x0800d9b9
 800d930:	0800d9b9 	.word	0x0800d9b9
 800d934:	0800d9b9 	.word	0x0800d9b9
 800d938:	0800d9b9 	.word	0x0800d9b9
 800d93c:	0800d9b9 	.word	0x0800d9b9
 800d940:	0800d9b9 	.word	0x0800d9b9
 800d944:	0800d9a1 	.word	0x0800d9a1
 800d948:	0800d9b9 	.word	0x0800d9b9
 800d94c:	0800d9b9 	.word	0x0800d9b9
 800d950:	0800d9b9 	.word	0x0800d9b9
 800d954:	0800d9b9 	.word	0x0800d9b9
 800d958:	0800d9b9 	.word	0x0800d9b9
 800d95c:	0800d9b9 	.word	0x0800d9b9
 800d960:	0800d9b9 	.word	0x0800d9b9
 800d964:	0800d9a9 	.word	0x0800d9a9
 800d968:	0800d9b9 	.word	0x0800d9b9
 800d96c:	0800d9b9 	.word	0x0800d9b9
 800d970:	0800d9b9 	.word	0x0800d9b9
 800d974:	0800d9b9 	.word	0x0800d9b9
 800d978:	0800d9b9 	.word	0x0800d9b9
 800d97c:	0800d9b9 	.word	0x0800d9b9
 800d980:	0800d9b9 	.word	0x0800d9b9
 800d984:	0800d9b1 	.word	0x0800d9b1
 800d988:	2301      	movs	r3, #1
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e326      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d990:	2304      	movs	r3, #4
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d996:	e322      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d998:	2308      	movs	r3, #8
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99e:	e31e      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d9a0:	2310      	movs	r3, #16
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a6:	e31a      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d9a8:	2320      	movs	r3, #32
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ae:	e316      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d9b0:	2340      	movs	r3, #64	@ 0x40
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b6:	e312      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d9b8:	2380      	movs	r3, #128	@ 0x80
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9be:	e30e      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a69      	ldr	r2, [pc, #420]	@ (800db6c <UART_SetConfig+0x33c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d130      	bne.n	800da2c <UART_SetConfig+0x1fc>
 800d9ca:	4b67      	ldr	r3, [pc, #412]	@ (800db68 <UART_SetConfig+0x338>)
 800d9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ce:	f003 0307 	and.w	r3, r3, #7
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	d826      	bhi.n	800da24 <UART_SetConfig+0x1f4>
 800d9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9dc <UART_SetConfig+0x1ac>)
 800d9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9dc:	0800d9f5 	.word	0x0800d9f5
 800d9e0:	0800d9fd 	.word	0x0800d9fd
 800d9e4:	0800da05 	.word	0x0800da05
 800d9e8:	0800da0d 	.word	0x0800da0d
 800d9ec:	0800da15 	.word	0x0800da15
 800d9f0:	0800da1d 	.word	0x0800da1d
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fa:	e2f0      	b.n	800dfde <UART_SetConfig+0x7ae>
 800d9fc:	2304      	movs	r3, #4
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da02:	e2ec      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da04:	2308      	movs	r3, #8
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0a:	e2e8      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da0c:	2310      	movs	r3, #16
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da12:	e2e4      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da14:	2320      	movs	r3, #32
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1a:	e2e0      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da1c:	2340      	movs	r3, #64	@ 0x40
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e2dc      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da24:	2380      	movs	r3, #128	@ 0x80
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e2d8      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a4f      	ldr	r2, [pc, #316]	@ (800db70 <UART_SetConfig+0x340>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d130      	bne.n	800da98 <UART_SetConfig+0x268>
 800da36:	4b4c      	ldr	r3, [pc, #304]	@ (800db68 <UART_SetConfig+0x338>)
 800da38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da3a:	f003 0307 	and.w	r3, r3, #7
 800da3e:	2b05      	cmp	r3, #5
 800da40:	d826      	bhi.n	800da90 <UART_SetConfig+0x260>
 800da42:	a201      	add	r2, pc, #4	@ (adr r2, 800da48 <UART_SetConfig+0x218>)
 800da44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da48:	0800da61 	.word	0x0800da61
 800da4c:	0800da69 	.word	0x0800da69
 800da50:	0800da71 	.word	0x0800da71
 800da54:	0800da79 	.word	0x0800da79
 800da58:	0800da81 	.word	0x0800da81
 800da5c:	0800da89 	.word	0x0800da89
 800da60:	2300      	movs	r3, #0
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da66:	e2ba      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da68:	2304      	movs	r3, #4
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6e:	e2b6      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da70:	2308      	movs	r3, #8
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e2b2      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da78:	2310      	movs	r3, #16
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7e:	e2ae      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da80:	2320      	movs	r3, #32
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e2aa      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da88:	2340      	movs	r3, #64	@ 0x40
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e2a6      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da90:	2380      	movs	r3, #128	@ 0x80
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e2a2      	b.n	800dfde <UART_SetConfig+0x7ae>
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a35      	ldr	r2, [pc, #212]	@ (800db74 <UART_SetConfig+0x344>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d130      	bne.n	800db04 <UART_SetConfig+0x2d4>
 800daa2:	4b31      	ldr	r3, [pc, #196]	@ (800db68 <UART_SetConfig+0x338>)
 800daa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daa6:	f003 0307 	and.w	r3, r3, #7
 800daaa:	2b05      	cmp	r3, #5
 800daac:	d826      	bhi.n	800dafc <UART_SetConfig+0x2cc>
 800daae:	a201      	add	r2, pc, #4	@ (adr r2, 800dab4 <UART_SetConfig+0x284>)
 800dab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab4:	0800dacd 	.word	0x0800dacd
 800dab8:	0800dad5 	.word	0x0800dad5
 800dabc:	0800dadd 	.word	0x0800dadd
 800dac0:	0800dae5 	.word	0x0800dae5
 800dac4:	0800daed 	.word	0x0800daed
 800dac8:	0800daf5 	.word	0x0800daf5
 800dacc:	2300      	movs	r3, #0
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad2:	e284      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dad4:	2304      	movs	r3, #4
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dada:	e280      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dadc:	2308      	movs	r3, #8
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dae2:	e27c      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dae4:	2310      	movs	r3, #16
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daea:	e278      	b.n	800dfde <UART_SetConfig+0x7ae>
 800daec:	2320      	movs	r3, #32
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daf2:	e274      	b.n	800dfde <UART_SetConfig+0x7ae>
 800daf4:	2340      	movs	r3, #64	@ 0x40
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafa:	e270      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dafc:	2380      	movs	r3, #128	@ 0x80
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db02:	e26c      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a1b      	ldr	r2, [pc, #108]	@ (800db78 <UART_SetConfig+0x348>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d142      	bne.n	800db94 <UART_SetConfig+0x364>
 800db0e:	4b16      	ldr	r3, [pc, #88]	@ (800db68 <UART_SetConfig+0x338>)
 800db10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db12:	f003 0307 	and.w	r3, r3, #7
 800db16:	2b05      	cmp	r3, #5
 800db18:	d838      	bhi.n	800db8c <UART_SetConfig+0x35c>
 800db1a:	a201      	add	r2, pc, #4	@ (adr r2, 800db20 <UART_SetConfig+0x2f0>)
 800db1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db20:	0800db39 	.word	0x0800db39
 800db24:	0800db41 	.word	0x0800db41
 800db28:	0800db49 	.word	0x0800db49
 800db2c:	0800db51 	.word	0x0800db51
 800db30:	0800db7d 	.word	0x0800db7d
 800db34:	0800db85 	.word	0x0800db85
 800db38:	2300      	movs	r3, #0
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3e:	e24e      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db40:	2304      	movs	r3, #4
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db46:	e24a      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db48:	2308      	movs	r3, #8
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db4e:	e246      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db50:	2310      	movs	r3, #16
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db56:	e242      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db58:	cfff69f3 	.word	0xcfff69f3
 800db5c:	58000c00 	.word	0x58000c00
 800db60:	11fff4ff 	.word	0x11fff4ff
 800db64:	40011000 	.word	0x40011000
 800db68:	58024400 	.word	0x58024400
 800db6c:	40004400 	.word	0x40004400
 800db70:	40004800 	.word	0x40004800
 800db74:	40004c00 	.word	0x40004c00
 800db78:	40005000 	.word	0x40005000
 800db7c:	2320      	movs	r3, #32
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db82:	e22c      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db84:	2340      	movs	r3, #64	@ 0x40
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db8a:	e228      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db8c:	2380      	movs	r3, #128	@ 0x80
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db92:	e224      	b.n	800dfde <UART_SetConfig+0x7ae>
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4ab1      	ldr	r2, [pc, #708]	@ (800de60 <UART_SetConfig+0x630>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d176      	bne.n	800dc8c <UART_SetConfig+0x45c>
 800db9e:	4bb1      	ldr	r3, [pc, #708]	@ (800de64 <UART_SetConfig+0x634>)
 800dba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dba6:	2b28      	cmp	r3, #40	@ 0x28
 800dba8:	d86c      	bhi.n	800dc84 <UART_SetConfig+0x454>
 800dbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb0 <UART_SetConfig+0x380>)
 800dbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb0:	0800dc55 	.word	0x0800dc55
 800dbb4:	0800dc85 	.word	0x0800dc85
 800dbb8:	0800dc85 	.word	0x0800dc85
 800dbbc:	0800dc85 	.word	0x0800dc85
 800dbc0:	0800dc85 	.word	0x0800dc85
 800dbc4:	0800dc85 	.word	0x0800dc85
 800dbc8:	0800dc85 	.word	0x0800dc85
 800dbcc:	0800dc85 	.word	0x0800dc85
 800dbd0:	0800dc5d 	.word	0x0800dc5d
 800dbd4:	0800dc85 	.word	0x0800dc85
 800dbd8:	0800dc85 	.word	0x0800dc85
 800dbdc:	0800dc85 	.word	0x0800dc85
 800dbe0:	0800dc85 	.word	0x0800dc85
 800dbe4:	0800dc85 	.word	0x0800dc85
 800dbe8:	0800dc85 	.word	0x0800dc85
 800dbec:	0800dc85 	.word	0x0800dc85
 800dbf0:	0800dc65 	.word	0x0800dc65
 800dbf4:	0800dc85 	.word	0x0800dc85
 800dbf8:	0800dc85 	.word	0x0800dc85
 800dbfc:	0800dc85 	.word	0x0800dc85
 800dc00:	0800dc85 	.word	0x0800dc85
 800dc04:	0800dc85 	.word	0x0800dc85
 800dc08:	0800dc85 	.word	0x0800dc85
 800dc0c:	0800dc85 	.word	0x0800dc85
 800dc10:	0800dc6d 	.word	0x0800dc6d
 800dc14:	0800dc85 	.word	0x0800dc85
 800dc18:	0800dc85 	.word	0x0800dc85
 800dc1c:	0800dc85 	.word	0x0800dc85
 800dc20:	0800dc85 	.word	0x0800dc85
 800dc24:	0800dc85 	.word	0x0800dc85
 800dc28:	0800dc85 	.word	0x0800dc85
 800dc2c:	0800dc85 	.word	0x0800dc85
 800dc30:	0800dc75 	.word	0x0800dc75
 800dc34:	0800dc85 	.word	0x0800dc85
 800dc38:	0800dc85 	.word	0x0800dc85
 800dc3c:	0800dc85 	.word	0x0800dc85
 800dc40:	0800dc85 	.word	0x0800dc85
 800dc44:	0800dc85 	.word	0x0800dc85
 800dc48:	0800dc85 	.word	0x0800dc85
 800dc4c:	0800dc85 	.word	0x0800dc85
 800dc50:	0800dc7d 	.word	0x0800dc7d
 800dc54:	2301      	movs	r3, #1
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5a:	e1c0      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dc5c:	2304      	movs	r3, #4
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc62:	e1bc      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dc64:	2308      	movs	r3, #8
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6a:	e1b8      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dc6c:	2310      	movs	r3, #16
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc72:	e1b4      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dc74:	2320      	movs	r3, #32
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc7a:	e1b0      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dc7c:	2340      	movs	r3, #64	@ 0x40
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc82:	e1ac      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dc84:	2380      	movs	r3, #128	@ 0x80
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8a:	e1a8      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a75      	ldr	r2, [pc, #468]	@ (800de68 <UART_SetConfig+0x638>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d130      	bne.n	800dcf8 <UART_SetConfig+0x4c8>
 800dc96:	4b73      	ldr	r3, [pc, #460]	@ (800de64 <UART_SetConfig+0x634>)
 800dc98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc9a:	f003 0307 	and.w	r3, r3, #7
 800dc9e:	2b05      	cmp	r3, #5
 800dca0:	d826      	bhi.n	800dcf0 <UART_SetConfig+0x4c0>
 800dca2:	a201      	add	r2, pc, #4	@ (adr r2, 800dca8 <UART_SetConfig+0x478>)
 800dca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca8:	0800dcc1 	.word	0x0800dcc1
 800dcac:	0800dcc9 	.word	0x0800dcc9
 800dcb0:	0800dcd1 	.word	0x0800dcd1
 800dcb4:	0800dcd9 	.word	0x0800dcd9
 800dcb8:	0800dce1 	.word	0x0800dce1
 800dcbc:	0800dce9 	.word	0x0800dce9
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e18a      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dcc8:	2304      	movs	r3, #4
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcce:	e186      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dcd0:	2308      	movs	r3, #8
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd6:	e182      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dcd8:	2310      	movs	r3, #16
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcde:	e17e      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dce0:	2320      	movs	r3, #32
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dce6:	e17a      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dce8:	2340      	movs	r3, #64	@ 0x40
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcee:	e176      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dcf0:	2380      	movs	r3, #128	@ 0x80
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf6:	e172      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a5b      	ldr	r2, [pc, #364]	@ (800de6c <UART_SetConfig+0x63c>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d130      	bne.n	800dd64 <UART_SetConfig+0x534>
 800dd02:	4b58      	ldr	r3, [pc, #352]	@ (800de64 <UART_SetConfig+0x634>)
 800dd04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd06:	f003 0307 	and.w	r3, r3, #7
 800dd0a:	2b05      	cmp	r3, #5
 800dd0c:	d826      	bhi.n	800dd5c <UART_SetConfig+0x52c>
 800dd0e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd14 <UART_SetConfig+0x4e4>)
 800dd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd14:	0800dd2d 	.word	0x0800dd2d
 800dd18:	0800dd35 	.word	0x0800dd35
 800dd1c:	0800dd3d 	.word	0x0800dd3d
 800dd20:	0800dd45 	.word	0x0800dd45
 800dd24:	0800dd4d 	.word	0x0800dd4d
 800dd28:	0800dd55 	.word	0x0800dd55
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e154      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dd34:	2304      	movs	r3, #4
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e150      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dd3c:	2308      	movs	r3, #8
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e14c      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dd44:	2310      	movs	r3, #16
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4a:	e148      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dd4c:	2320      	movs	r3, #32
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd52:	e144      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dd54:	2340      	movs	r3, #64	@ 0x40
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd5a:	e140      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dd5c:	2380      	movs	r3, #128	@ 0x80
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd62:	e13c      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a41      	ldr	r2, [pc, #260]	@ (800de70 <UART_SetConfig+0x640>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	f040 8082 	bne.w	800de74 <UART_SetConfig+0x644>
 800dd70:	4b3c      	ldr	r3, [pc, #240]	@ (800de64 <UART_SetConfig+0x634>)
 800dd72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd78:	2b28      	cmp	r3, #40	@ 0x28
 800dd7a:	d86d      	bhi.n	800de58 <UART_SetConfig+0x628>
 800dd7c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd84 <UART_SetConfig+0x554>)
 800dd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd82:	bf00      	nop
 800dd84:	0800de29 	.word	0x0800de29
 800dd88:	0800de59 	.word	0x0800de59
 800dd8c:	0800de59 	.word	0x0800de59
 800dd90:	0800de59 	.word	0x0800de59
 800dd94:	0800de59 	.word	0x0800de59
 800dd98:	0800de59 	.word	0x0800de59
 800dd9c:	0800de59 	.word	0x0800de59
 800dda0:	0800de59 	.word	0x0800de59
 800dda4:	0800de31 	.word	0x0800de31
 800dda8:	0800de59 	.word	0x0800de59
 800ddac:	0800de59 	.word	0x0800de59
 800ddb0:	0800de59 	.word	0x0800de59
 800ddb4:	0800de59 	.word	0x0800de59
 800ddb8:	0800de59 	.word	0x0800de59
 800ddbc:	0800de59 	.word	0x0800de59
 800ddc0:	0800de59 	.word	0x0800de59
 800ddc4:	0800de39 	.word	0x0800de39
 800ddc8:	0800de59 	.word	0x0800de59
 800ddcc:	0800de59 	.word	0x0800de59
 800ddd0:	0800de59 	.word	0x0800de59
 800ddd4:	0800de59 	.word	0x0800de59
 800ddd8:	0800de59 	.word	0x0800de59
 800dddc:	0800de59 	.word	0x0800de59
 800dde0:	0800de59 	.word	0x0800de59
 800dde4:	0800de41 	.word	0x0800de41
 800dde8:	0800de59 	.word	0x0800de59
 800ddec:	0800de59 	.word	0x0800de59
 800ddf0:	0800de59 	.word	0x0800de59
 800ddf4:	0800de59 	.word	0x0800de59
 800ddf8:	0800de59 	.word	0x0800de59
 800ddfc:	0800de59 	.word	0x0800de59
 800de00:	0800de59 	.word	0x0800de59
 800de04:	0800de49 	.word	0x0800de49
 800de08:	0800de59 	.word	0x0800de59
 800de0c:	0800de59 	.word	0x0800de59
 800de10:	0800de59 	.word	0x0800de59
 800de14:	0800de59 	.word	0x0800de59
 800de18:	0800de59 	.word	0x0800de59
 800de1c:	0800de59 	.word	0x0800de59
 800de20:	0800de59 	.word	0x0800de59
 800de24:	0800de51 	.word	0x0800de51
 800de28:	2301      	movs	r3, #1
 800de2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2e:	e0d6      	b.n	800dfde <UART_SetConfig+0x7ae>
 800de30:	2304      	movs	r3, #4
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de36:	e0d2      	b.n	800dfde <UART_SetConfig+0x7ae>
 800de38:	2308      	movs	r3, #8
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de3e:	e0ce      	b.n	800dfde <UART_SetConfig+0x7ae>
 800de40:	2310      	movs	r3, #16
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de46:	e0ca      	b.n	800dfde <UART_SetConfig+0x7ae>
 800de48:	2320      	movs	r3, #32
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de4e:	e0c6      	b.n	800dfde <UART_SetConfig+0x7ae>
 800de50:	2340      	movs	r3, #64	@ 0x40
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de56:	e0c2      	b.n	800dfde <UART_SetConfig+0x7ae>
 800de58:	2380      	movs	r3, #128	@ 0x80
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de5e:	e0be      	b.n	800dfde <UART_SetConfig+0x7ae>
 800de60:	40011400 	.word	0x40011400
 800de64:	58024400 	.word	0x58024400
 800de68:	40007800 	.word	0x40007800
 800de6c:	40007c00 	.word	0x40007c00
 800de70:	40011800 	.word	0x40011800
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4aad      	ldr	r2, [pc, #692]	@ (800e130 <UART_SetConfig+0x900>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d176      	bne.n	800df6c <UART_SetConfig+0x73c>
 800de7e:	4bad      	ldr	r3, [pc, #692]	@ (800e134 <UART_SetConfig+0x904>)
 800de80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de86:	2b28      	cmp	r3, #40	@ 0x28
 800de88:	d86c      	bhi.n	800df64 <UART_SetConfig+0x734>
 800de8a:	a201      	add	r2, pc, #4	@ (adr r2, 800de90 <UART_SetConfig+0x660>)
 800de8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de90:	0800df35 	.word	0x0800df35
 800de94:	0800df65 	.word	0x0800df65
 800de98:	0800df65 	.word	0x0800df65
 800de9c:	0800df65 	.word	0x0800df65
 800dea0:	0800df65 	.word	0x0800df65
 800dea4:	0800df65 	.word	0x0800df65
 800dea8:	0800df65 	.word	0x0800df65
 800deac:	0800df65 	.word	0x0800df65
 800deb0:	0800df3d 	.word	0x0800df3d
 800deb4:	0800df65 	.word	0x0800df65
 800deb8:	0800df65 	.word	0x0800df65
 800debc:	0800df65 	.word	0x0800df65
 800dec0:	0800df65 	.word	0x0800df65
 800dec4:	0800df65 	.word	0x0800df65
 800dec8:	0800df65 	.word	0x0800df65
 800decc:	0800df65 	.word	0x0800df65
 800ded0:	0800df45 	.word	0x0800df45
 800ded4:	0800df65 	.word	0x0800df65
 800ded8:	0800df65 	.word	0x0800df65
 800dedc:	0800df65 	.word	0x0800df65
 800dee0:	0800df65 	.word	0x0800df65
 800dee4:	0800df65 	.word	0x0800df65
 800dee8:	0800df65 	.word	0x0800df65
 800deec:	0800df65 	.word	0x0800df65
 800def0:	0800df4d 	.word	0x0800df4d
 800def4:	0800df65 	.word	0x0800df65
 800def8:	0800df65 	.word	0x0800df65
 800defc:	0800df65 	.word	0x0800df65
 800df00:	0800df65 	.word	0x0800df65
 800df04:	0800df65 	.word	0x0800df65
 800df08:	0800df65 	.word	0x0800df65
 800df0c:	0800df65 	.word	0x0800df65
 800df10:	0800df55 	.word	0x0800df55
 800df14:	0800df65 	.word	0x0800df65
 800df18:	0800df65 	.word	0x0800df65
 800df1c:	0800df65 	.word	0x0800df65
 800df20:	0800df65 	.word	0x0800df65
 800df24:	0800df65 	.word	0x0800df65
 800df28:	0800df65 	.word	0x0800df65
 800df2c:	0800df65 	.word	0x0800df65
 800df30:	0800df5d 	.word	0x0800df5d
 800df34:	2301      	movs	r3, #1
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df3a:	e050      	b.n	800dfde <UART_SetConfig+0x7ae>
 800df3c:	2304      	movs	r3, #4
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df42:	e04c      	b.n	800dfde <UART_SetConfig+0x7ae>
 800df44:	2308      	movs	r3, #8
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df4a:	e048      	b.n	800dfde <UART_SetConfig+0x7ae>
 800df4c:	2310      	movs	r3, #16
 800df4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df52:	e044      	b.n	800dfde <UART_SetConfig+0x7ae>
 800df54:	2320      	movs	r3, #32
 800df56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df5a:	e040      	b.n	800dfde <UART_SetConfig+0x7ae>
 800df5c:	2340      	movs	r3, #64	@ 0x40
 800df5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df62:	e03c      	b.n	800dfde <UART_SetConfig+0x7ae>
 800df64:	2380      	movs	r3, #128	@ 0x80
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df6a:	e038      	b.n	800dfde <UART_SetConfig+0x7ae>
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a71      	ldr	r2, [pc, #452]	@ (800e138 <UART_SetConfig+0x908>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d130      	bne.n	800dfd8 <UART_SetConfig+0x7a8>
 800df76:	4b6f      	ldr	r3, [pc, #444]	@ (800e134 <UART_SetConfig+0x904>)
 800df78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df7a:	f003 0307 	and.w	r3, r3, #7
 800df7e:	2b05      	cmp	r3, #5
 800df80:	d826      	bhi.n	800dfd0 <UART_SetConfig+0x7a0>
 800df82:	a201      	add	r2, pc, #4	@ (adr r2, 800df88 <UART_SetConfig+0x758>)
 800df84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df88:	0800dfa1 	.word	0x0800dfa1
 800df8c:	0800dfa9 	.word	0x0800dfa9
 800df90:	0800dfb1 	.word	0x0800dfb1
 800df94:	0800dfb9 	.word	0x0800dfb9
 800df98:	0800dfc1 	.word	0x0800dfc1
 800df9c:	0800dfc9 	.word	0x0800dfc9
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa6:	e01a      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dfa8:	2304      	movs	r3, #4
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfae:	e016      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dfb0:	2308      	movs	r3, #8
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfb6:	e012      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dfb8:	2310      	movs	r3, #16
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfbe:	e00e      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dfc0:	2320      	movs	r3, #32
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfc6:	e00a      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dfc8:	2340      	movs	r3, #64	@ 0x40
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfce:	e006      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dfd0:	2380      	movs	r3, #128	@ 0x80
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfd6:	e002      	b.n	800dfde <UART_SetConfig+0x7ae>
 800dfd8:	2380      	movs	r3, #128	@ 0x80
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a55      	ldr	r2, [pc, #340]	@ (800e138 <UART_SetConfig+0x908>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	f040 80f8 	bne.w	800e1da <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dfee:	2b20      	cmp	r3, #32
 800dff0:	dc46      	bgt.n	800e080 <UART_SetConfig+0x850>
 800dff2:	2b02      	cmp	r3, #2
 800dff4:	db75      	blt.n	800e0e2 <UART_SetConfig+0x8b2>
 800dff6:	3b02      	subs	r3, #2
 800dff8:	2b1e      	cmp	r3, #30
 800dffa:	d872      	bhi.n	800e0e2 <UART_SetConfig+0x8b2>
 800dffc:	a201      	add	r2, pc, #4	@ (adr r2, 800e004 <UART_SetConfig+0x7d4>)
 800dffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e002:	bf00      	nop
 800e004:	0800e087 	.word	0x0800e087
 800e008:	0800e0e3 	.word	0x0800e0e3
 800e00c:	0800e08f 	.word	0x0800e08f
 800e010:	0800e0e3 	.word	0x0800e0e3
 800e014:	0800e0e3 	.word	0x0800e0e3
 800e018:	0800e0e3 	.word	0x0800e0e3
 800e01c:	0800e09f 	.word	0x0800e09f
 800e020:	0800e0e3 	.word	0x0800e0e3
 800e024:	0800e0e3 	.word	0x0800e0e3
 800e028:	0800e0e3 	.word	0x0800e0e3
 800e02c:	0800e0e3 	.word	0x0800e0e3
 800e030:	0800e0e3 	.word	0x0800e0e3
 800e034:	0800e0e3 	.word	0x0800e0e3
 800e038:	0800e0e3 	.word	0x0800e0e3
 800e03c:	0800e0af 	.word	0x0800e0af
 800e040:	0800e0e3 	.word	0x0800e0e3
 800e044:	0800e0e3 	.word	0x0800e0e3
 800e048:	0800e0e3 	.word	0x0800e0e3
 800e04c:	0800e0e3 	.word	0x0800e0e3
 800e050:	0800e0e3 	.word	0x0800e0e3
 800e054:	0800e0e3 	.word	0x0800e0e3
 800e058:	0800e0e3 	.word	0x0800e0e3
 800e05c:	0800e0e3 	.word	0x0800e0e3
 800e060:	0800e0e3 	.word	0x0800e0e3
 800e064:	0800e0e3 	.word	0x0800e0e3
 800e068:	0800e0e3 	.word	0x0800e0e3
 800e06c:	0800e0e3 	.word	0x0800e0e3
 800e070:	0800e0e3 	.word	0x0800e0e3
 800e074:	0800e0e3 	.word	0x0800e0e3
 800e078:	0800e0e3 	.word	0x0800e0e3
 800e07c:	0800e0d5 	.word	0x0800e0d5
 800e080:	2b40      	cmp	r3, #64	@ 0x40
 800e082:	d02a      	beq.n	800e0da <UART_SetConfig+0x8aa>
 800e084:	e02d      	b.n	800e0e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e086:	f7fc fc5d 	bl	800a944 <HAL_RCCEx_GetD3PCLK1Freq>
 800e08a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e08c:	e02f      	b.n	800e0ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e08e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e092:	4618      	mov	r0, r3
 800e094:	f7fc fc6c 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e09c:	e027      	b.n	800e0ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e09e:	f107 0318 	add.w	r3, r7, #24
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fc fdb8 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0ac:	e01f      	b.n	800e0ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0ae:	4b21      	ldr	r3, [pc, #132]	@ (800e134 <UART_SetConfig+0x904>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f003 0320 	and.w	r3, r3, #32
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ba:	4b1e      	ldr	r3, [pc, #120]	@ (800e134 <UART_SetConfig+0x904>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	08db      	lsrs	r3, r3, #3
 800e0c0:	f003 0303 	and.w	r3, r3, #3
 800e0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800e13c <UART_SetConfig+0x90c>)
 800e0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0cc:	e00f      	b.n	800e0ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e0ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e13c <UART_SetConfig+0x90c>)
 800e0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0d2:	e00c      	b.n	800e0ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0d4:	4b1a      	ldr	r3, [pc, #104]	@ (800e140 <UART_SetConfig+0x910>)
 800e0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0d8:	e009      	b.n	800e0ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0e0:	e005      	b.n	800e0ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e0ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 81ee 	beq.w	800e4d2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0fa:	4a12      	ldr	r2, [pc, #72]	@ (800e144 <UART_SetConfig+0x914>)
 800e0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e100:	461a      	mov	r2, r3
 800e102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e104:	fbb3 f3f2 	udiv	r3, r3, r2
 800e108:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	685a      	ldr	r2, [r3, #4]
 800e10e:	4613      	mov	r3, r2
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	4413      	add	r3, r2
 800e114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e116:	429a      	cmp	r2, r3
 800e118:	d305      	bcc.n	800e126 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e122:	429a      	cmp	r2, r3
 800e124:	d910      	bls.n	800e148 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e12c:	e1d1      	b.n	800e4d2 <UART_SetConfig+0xca2>
 800e12e:	bf00      	nop
 800e130:	40011c00 	.word	0x40011c00
 800e134:	58024400 	.word	0x58024400
 800e138:	58000c00 	.word	0x58000c00
 800e13c:	03d09000 	.word	0x03d09000
 800e140:	003d0900 	.word	0x003d0900
 800e144:	0800fc28 	.word	0x0800fc28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e14a:	2200      	movs	r2, #0
 800e14c:	60bb      	str	r3, [r7, #8]
 800e14e:	60fa      	str	r2, [r7, #12]
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e154:	4ac0      	ldr	r2, [pc, #768]	@ (800e458 <UART_SetConfig+0xc28>)
 800e156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	2200      	movs	r2, #0
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	607a      	str	r2, [r7, #4]
 800e162:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e16a:	f7f2 f8cf 	bl	800030c <__aeabi_uldivmod>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4610      	mov	r0, r2
 800e174:	4619      	mov	r1, r3
 800e176:	f04f 0200 	mov.w	r2, #0
 800e17a:	f04f 0300 	mov.w	r3, #0
 800e17e:	020b      	lsls	r3, r1, #8
 800e180:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e184:	0202      	lsls	r2, r0, #8
 800e186:	6979      	ldr	r1, [r7, #20]
 800e188:	6849      	ldr	r1, [r1, #4]
 800e18a:	0849      	lsrs	r1, r1, #1
 800e18c:	2000      	movs	r0, #0
 800e18e:	460c      	mov	r4, r1
 800e190:	4605      	mov	r5, r0
 800e192:	eb12 0804 	adds.w	r8, r2, r4
 800e196:	eb43 0905 	adc.w	r9, r3, r5
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	469a      	mov	sl, r3
 800e1a2:	4693      	mov	fp, r2
 800e1a4:	4652      	mov	r2, sl
 800e1a6:	465b      	mov	r3, fp
 800e1a8:	4640      	mov	r0, r8
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	f7f2 f8ae 	bl	800030c <__aeabi_uldivmod>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1be:	d308      	bcc.n	800e1d2 <UART_SetConfig+0x9a2>
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1c6:	d204      	bcs.n	800e1d2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1ce:	60da      	str	r2, [r3, #12]
 800e1d0:	e17f      	b.n	800e4d2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e1d8:	e17b      	b.n	800e4d2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	69db      	ldr	r3, [r3, #28]
 800e1de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1e2:	f040 80bd 	bne.w	800e360 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e1e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e1ea:	2b20      	cmp	r3, #32
 800e1ec:	dc48      	bgt.n	800e280 <UART_SetConfig+0xa50>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	db7b      	blt.n	800e2ea <UART_SetConfig+0xaba>
 800e1f2:	2b20      	cmp	r3, #32
 800e1f4:	d879      	bhi.n	800e2ea <UART_SetConfig+0xaba>
 800e1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e1fc <UART_SetConfig+0x9cc>)
 800e1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fc:	0800e287 	.word	0x0800e287
 800e200:	0800e28f 	.word	0x0800e28f
 800e204:	0800e2eb 	.word	0x0800e2eb
 800e208:	0800e2eb 	.word	0x0800e2eb
 800e20c:	0800e297 	.word	0x0800e297
 800e210:	0800e2eb 	.word	0x0800e2eb
 800e214:	0800e2eb 	.word	0x0800e2eb
 800e218:	0800e2eb 	.word	0x0800e2eb
 800e21c:	0800e2a7 	.word	0x0800e2a7
 800e220:	0800e2eb 	.word	0x0800e2eb
 800e224:	0800e2eb 	.word	0x0800e2eb
 800e228:	0800e2eb 	.word	0x0800e2eb
 800e22c:	0800e2eb 	.word	0x0800e2eb
 800e230:	0800e2eb 	.word	0x0800e2eb
 800e234:	0800e2eb 	.word	0x0800e2eb
 800e238:	0800e2eb 	.word	0x0800e2eb
 800e23c:	0800e2b7 	.word	0x0800e2b7
 800e240:	0800e2eb 	.word	0x0800e2eb
 800e244:	0800e2eb 	.word	0x0800e2eb
 800e248:	0800e2eb 	.word	0x0800e2eb
 800e24c:	0800e2eb 	.word	0x0800e2eb
 800e250:	0800e2eb 	.word	0x0800e2eb
 800e254:	0800e2eb 	.word	0x0800e2eb
 800e258:	0800e2eb 	.word	0x0800e2eb
 800e25c:	0800e2eb 	.word	0x0800e2eb
 800e260:	0800e2eb 	.word	0x0800e2eb
 800e264:	0800e2eb 	.word	0x0800e2eb
 800e268:	0800e2eb 	.word	0x0800e2eb
 800e26c:	0800e2eb 	.word	0x0800e2eb
 800e270:	0800e2eb 	.word	0x0800e2eb
 800e274:	0800e2eb 	.word	0x0800e2eb
 800e278:	0800e2eb 	.word	0x0800e2eb
 800e27c:	0800e2dd 	.word	0x0800e2dd
 800e280:	2b40      	cmp	r3, #64	@ 0x40
 800e282:	d02e      	beq.n	800e2e2 <UART_SetConfig+0xab2>
 800e284:	e031      	b.n	800e2ea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e286:	f7fa fcbf 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800e28a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e28c:	e033      	b.n	800e2f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e28e:	f7fa fcd1 	bl	8008c34 <HAL_RCC_GetPCLK2Freq>
 800e292:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e294:	e02f      	b.n	800e2f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fc fb68 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2a4:	e027      	b.n	800e2f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2a6:	f107 0318 	add.w	r3, r7, #24
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fc fcb4 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2b4:	e01f      	b.n	800e2f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2b6:	4b69      	ldr	r3, [pc, #420]	@ (800e45c <UART_SetConfig+0xc2c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f003 0320 	and.w	r3, r3, #32
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d009      	beq.n	800e2d6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2c2:	4b66      	ldr	r3, [pc, #408]	@ (800e45c <UART_SetConfig+0xc2c>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	08db      	lsrs	r3, r3, #3
 800e2c8:	f003 0303 	and.w	r3, r3, #3
 800e2cc:	4a64      	ldr	r2, [pc, #400]	@ (800e460 <UART_SetConfig+0xc30>)
 800e2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800e2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2d4:	e00f      	b.n	800e2f6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e2d6:	4b62      	ldr	r3, [pc, #392]	@ (800e460 <UART_SetConfig+0xc30>)
 800e2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2da:	e00c      	b.n	800e2f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2dc:	4b61      	ldr	r3, [pc, #388]	@ (800e464 <UART_SetConfig+0xc34>)
 800e2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2e0:	e009      	b.n	800e2f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2e8:	e005      	b.n	800e2f6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e2f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 80ea 	beq.w	800e4d2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e302:	4a55      	ldr	r2, [pc, #340]	@ (800e458 <UART_SetConfig+0xc28>)
 800e304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e308:	461a      	mov	r2, r3
 800e30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e30c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e310:	005a      	lsls	r2, r3, #1
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	085b      	lsrs	r3, r3, #1
 800e318:	441a      	add	r2, r3
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e322:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	2b0f      	cmp	r3, #15
 800e328:	d916      	bls.n	800e358 <UART_SetConfig+0xb28>
 800e32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e330:	d212      	bcs.n	800e358 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e334:	b29b      	uxth	r3, r3
 800e336:	f023 030f 	bic.w	r3, r3, #15
 800e33a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33e:	085b      	lsrs	r3, r3, #1
 800e340:	b29b      	uxth	r3, r3
 800e342:	f003 0307 	and.w	r3, r3, #7
 800e346:	b29a      	uxth	r2, r3
 800e348:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e34a:	4313      	orrs	r3, r2
 800e34c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e354:	60da      	str	r2, [r3, #12]
 800e356:	e0bc      	b.n	800e4d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e35e:	e0b8      	b.n	800e4d2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e360:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e364:	2b20      	cmp	r3, #32
 800e366:	dc4b      	bgt.n	800e400 <UART_SetConfig+0xbd0>
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f2c0 8087 	blt.w	800e47c <UART_SetConfig+0xc4c>
 800e36e:	2b20      	cmp	r3, #32
 800e370:	f200 8084 	bhi.w	800e47c <UART_SetConfig+0xc4c>
 800e374:	a201      	add	r2, pc, #4	@ (adr r2, 800e37c <UART_SetConfig+0xb4c>)
 800e376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37a:	bf00      	nop
 800e37c:	0800e407 	.word	0x0800e407
 800e380:	0800e40f 	.word	0x0800e40f
 800e384:	0800e47d 	.word	0x0800e47d
 800e388:	0800e47d 	.word	0x0800e47d
 800e38c:	0800e417 	.word	0x0800e417
 800e390:	0800e47d 	.word	0x0800e47d
 800e394:	0800e47d 	.word	0x0800e47d
 800e398:	0800e47d 	.word	0x0800e47d
 800e39c:	0800e427 	.word	0x0800e427
 800e3a0:	0800e47d 	.word	0x0800e47d
 800e3a4:	0800e47d 	.word	0x0800e47d
 800e3a8:	0800e47d 	.word	0x0800e47d
 800e3ac:	0800e47d 	.word	0x0800e47d
 800e3b0:	0800e47d 	.word	0x0800e47d
 800e3b4:	0800e47d 	.word	0x0800e47d
 800e3b8:	0800e47d 	.word	0x0800e47d
 800e3bc:	0800e437 	.word	0x0800e437
 800e3c0:	0800e47d 	.word	0x0800e47d
 800e3c4:	0800e47d 	.word	0x0800e47d
 800e3c8:	0800e47d 	.word	0x0800e47d
 800e3cc:	0800e47d 	.word	0x0800e47d
 800e3d0:	0800e47d 	.word	0x0800e47d
 800e3d4:	0800e47d 	.word	0x0800e47d
 800e3d8:	0800e47d 	.word	0x0800e47d
 800e3dc:	0800e47d 	.word	0x0800e47d
 800e3e0:	0800e47d 	.word	0x0800e47d
 800e3e4:	0800e47d 	.word	0x0800e47d
 800e3e8:	0800e47d 	.word	0x0800e47d
 800e3ec:	0800e47d 	.word	0x0800e47d
 800e3f0:	0800e47d 	.word	0x0800e47d
 800e3f4:	0800e47d 	.word	0x0800e47d
 800e3f8:	0800e47d 	.word	0x0800e47d
 800e3fc:	0800e46f 	.word	0x0800e46f
 800e400:	2b40      	cmp	r3, #64	@ 0x40
 800e402:	d037      	beq.n	800e474 <UART_SetConfig+0xc44>
 800e404:	e03a      	b.n	800e47c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e406:	f7fa fbff 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800e40a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e40c:	e03c      	b.n	800e488 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e40e:	f7fa fc11 	bl	8008c34 <HAL_RCC_GetPCLK2Freq>
 800e412:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e414:	e038      	b.n	800e488 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fc faa8 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e424:	e030      	b.n	800e488 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e426:	f107 0318 	add.w	r3, r7, #24
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fc fbf4 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e430:	69fb      	ldr	r3, [r7, #28]
 800e432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e434:	e028      	b.n	800e488 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e436:	4b09      	ldr	r3, [pc, #36]	@ (800e45c <UART_SetConfig+0xc2c>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f003 0320 	and.w	r3, r3, #32
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d012      	beq.n	800e468 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e442:	4b06      	ldr	r3, [pc, #24]	@ (800e45c <UART_SetConfig+0xc2c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	08db      	lsrs	r3, r3, #3
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	4a04      	ldr	r2, [pc, #16]	@ (800e460 <UART_SetConfig+0xc30>)
 800e44e:	fa22 f303 	lsr.w	r3, r2, r3
 800e452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e454:	e018      	b.n	800e488 <UART_SetConfig+0xc58>
 800e456:	bf00      	nop
 800e458:	0800fc28 	.word	0x0800fc28
 800e45c:	58024400 	.word	0x58024400
 800e460:	03d09000 	.word	0x03d09000
 800e464:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e468:	4b24      	ldr	r3, [pc, #144]	@ (800e4fc <UART_SetConfig+0xccc>)
 800e46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e46c:	e00c      	b.n	800e488 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e46e:	4b24      	ldr	r3, [pc, #144]	@ (800e500 <UART_SetConfig+0xcd0>)
 800e470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e472:	e009      	b.n	800e488 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e47a:	e005      	b.n	800e488 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e47c:	2300      	movs	r3, #0
 800e47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e486:	bf00      	nop
    }

    if (pclk != 0U)
 800e488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d021      	beq.n	800e4d2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e492:	4a1c      	ldr	r2, [pc, #112]	@ (800e504 <UART_SetConfig+0xcd4>)
 800e494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e498:	461a      	mov	r2, r3
 800e49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e49c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	085b      	lsrs	r3, r3, #1
 800e4a6:	441a      	add	r2, r3
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b4:	2b0f      	cmp	r3, #15
 800e4b6:	d909      	bls.n	800e4cc <UART_SetConfig+0xc9c>
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4be:	d205      	bcs.n	800e4cc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	60da      	str	r2, [r3, #12]
 800e4ca:	e002      	b.n	800e4d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e4ee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3748      	adds	r7, #72	@ 0x48
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4fc:	03d09000 	.word	0x03d09000
 800e500:	003d0900 	.word	0x003d0900
 800e504:	0800fc28 	.word	0x0800fc28

0800e508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e514:	f003 0308 	and.w	r3, r3, #8
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00a      	beq.n	800e532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	430a      	orrs	r2, r1
 800e530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e536:	f003 0301 	and.w	r3, r3, #1
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00a      	beq.n	800e554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	430a      	orrs	r2, r1
 800e552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e558:	f003 0302 	and.w	r3, r3, #2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00a      	beq.n	800e576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	430a      	orrs	r2, r1
 800e574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e57a:	f003 0304 	and.w	r3, r3, #4
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	430a      	orrs	r2, r1
 800e596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e59c:	f003 0310 	and.w	r3, r3, #16
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00a      	beq.n	800e5ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	430a      	orrs	r2, r1
 800e5b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5be:	f003 0320 	and.w	r3, r3, #32
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00a      	beq.n	800e5dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	430a      	orrs	r2, r1
 800e5da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d01a      	beq.n	800e61e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	430a      	orrs	r2, r1
 800e5fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e606:	d10a      	bne.n	800e61e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	430a      	orrs	r2, r1
 800e61c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00a      	beq.n	800e640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	430a      	orrs	r2, r1
 800e63e:	605a      	str	r2, [r3, #4]
  }
}
 800e640:	bf00      	nop
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b098      	sub	sp, #96	@ 0x60
 800e650:	af02      	add	r7, sp, #8
 800e652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e65c:	f7f4 f934 	bl	80028c8 <HAL_GetTick>
 800e660:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0308 	and.w	r3, r3, #8
 800e66c:	2b08      	cmp	r3, #8
 800e66e:	d12f      	bne.n	800e6d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e678:	2200      	movs	r2, #0
 800e67a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f88e 	bl	800e7a0 <UART_WaitOnFlagUntilTimeout>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d022      	beq.n	800e6d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e692:	e853 3f00 	ldrex	r3, [r3]
 800e696:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e69e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6b0:	e841 2300 	strex	r3, r2, [r1]
 800e6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1e6      	bne.n	800e68a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2220      	movs	r2, #32
 800e6c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	e063      	b.n	800e798 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f003 0304 	and.w	r3, r3, #4
 800e6da:	2b04      	cmp	r3, #4
 800e6dc:	d149      	bne.n	800e772 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f857 	bl	800e7a0 <UART_WaitOnFlagUntilTimeout>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d03c      	beq.n	800e772 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e700:	e853 3f00 	ldrex	r3, [r3]
 800e704:	623b      	str	r3, [r7, #32]
   return(result);
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e70c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	461a      	mov	r2, r3
 800e714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e716:	633b      	str	r3, [r7, #48]	@ 0x30
 800e718:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e71c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e71e:	e841 2300 	strex	r3, r2, [r1]
 800e722:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1e6      	bne.n	800e6f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3308      	adds	r3, #8
 800e730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	e853 3f00 	ldrex	r3, [r3]
 800e738:	60fb      	str	r3, [r7, #12]
   return(result);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f023 0301 	bic.w	r3, r3, #1
 800e740:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3308      	adds	r3, #8
 800e748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e74a:	61fa      	str	r2, [r7, #28]
 800e74c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74e:	69b9      	ldr	r1, [r7, #24]
 800e750:	69fa      	ldr	r2, [r7, #28]
 800e752:	e841 2300 	strex	r3, r2, [r1]
 800e756:	617b      	str	r3, [r7, #20]
   return(result);
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1e5      	bne.n	800e72a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2220      	movs	r2, #32
 800e762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e76e:	2303      	movs	r3, #3
 800e770:	e012      	b.n	800e798 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2220      	movs	r2, #32
 800e776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2220      	movs	r2, #32
 800e77e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3758      	adds	r7, #88	@ 0x58
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7b0:	e04f      	b.n	800e852 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b8:	d04b      	beq.n	800e852 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7ba:	f7f4 f885 	bl	80028c8 <HAL_GetTick>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	69ba      	ldr	r2, [r7, #24]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d302      	bcc.n	800e7d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d101      	bne.n	800e7d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	e04e      	b.n	800e872 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f003 0304 	and.w	r3, r3, #4
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d037      	beq.n	800e852 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	2b80      	cmp	r3, #128	@ 0x80
 800e7e6:	d034      	beq.n	800e852 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	2b40      	cmp	r3, #64	@ 0x40
 800e7ec:	d031      	beq.n	800e852 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	69db      	ldr	r3, [r3, #28]
 800e7f4:	f003 0308 	and.w	r3, r3, #8
 800e7f8:	2b08      	cmp	r3, #8
 800e7fa:	d110      	bne.n	800e81e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2208      	movs	r2, #8
 800e802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f000 f95b 	bl	800eac0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2208      	movs	r2, #8
 800e80e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2200      	movs	r2, #0
 800e816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e029      	b.n	800e872 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	69db      	ldr	r3, [r3, #28]
 800e824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e82c:	d111      	bne.n	800e852 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f000 f941 	bl	800eac0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2220      	movs	r2, #32
 800e842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2200      	movs	r2, #0
 800e84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e84e:	2303      	movs	r3, #3
 800e850:	e00f      	b.n	800e872 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	69da      	ldr	r2, [r3, #28]
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	4013      	ands	r3, r2
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	429a      	cmp	r2, r3
 800e860:	bf0c      	ite	eq
 800e862:	2301      	moveq	r3, #1
 800e864:	2300      	movne	r3, #0
 800e866:	b2db      	uxtb	r3, r3
 800e868:	461a      	mov	r2, r3
 800e86a:	79fb      	ldrb	r3, [r7, #7]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d0a0      	beq.n	800e7b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
	...

0800e87c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b0a3      	sub	sp, #140	@ 0x8c
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	4613      	mov	r3, r2
 800e888:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	88fa      	ldrh	r2, [r7, #6]
 800e894:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	88fa      	ldrh	r2, [r7, #6]
 800e89c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8ae:	d10e      	bne.n	800e8ce <UART_Start_Receive_IT+0x52>
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d105      	bne.n	800e8c4 <UART_Start_Receive_IT+0x48>
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e8be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8c2:	e02d      	b.n	800e920 <UART_Start_Receive_IT+0xa4>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	22ff      	movs	r2, #255	@ 0xff
 800e8c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8cc:	e028      	b.n	800e920 <UART_Start_Receive_IT+0xa4>
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d10d      	bne.n	800e8f2 <UART_Start_Receive_IT+0x76>
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	691b      	ldr	r3, [r3, #16]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d104      	bne.n	800e8e8 <UART_Start_Receive_IT+0x6c>
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	22ff      	movs	r2, #255	@ 0xff
 800e8e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8e6:	e01b      	b.n	800e920 <UART_Start_Receive_IT+0xa4>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	227f      	movs	r2, #127	@ 0x7f
 800e8ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8f0:	e016      	b.n	800e920 <UART_Start_Receive_IT+0xa4>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8fa:	d10d      	bne.n	800e918 <UART_Start_Receive_IT+0x9c>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	691b      	ldr	r3, [r3, #16]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d104      	bne.n	800e90e <UART_Start_Receive_IT+0x92>
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	227f      	movs	r2, #127	@ 0x7f
 800e908:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e90c:	e008      	b.n	800e920 <UART_Start_Receive_IT+0xa4>
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	223f      	movs	r2, #63	@ 0x3f
 800e912:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e916:	e003      	b.n	800e920 <UART_Start_Receive_IT+0xa4>
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2200      	movs	r2, #0
 800e924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2222      	movs	r2, #34	@ 0x22
 800e92c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3308      	adds	r3, #8
 800e936:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e93a:	e853 3f00 	ldrex	r3, [r3]
 800e93e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e940:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e942:	f043 0301 	orr.w	r3, r3, #1
 800e946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3308      	adds	r3, #8
 800e950:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e954:	673a      	str	r2, [r7, #112]	@ 0x70
 800e956:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e958:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e95a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e95c:	e841 2300 	strex	r3, r2, [r1]
 800e960:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1e3      	bne.n	800e930 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e970:	d14f      	bne.n	800ea12 <UART_Start_Receive_IT+0x196>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e978:	88fa      	ldrh	r2, [r7, #6]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d349      	bcc.n	800ea12 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e986:	d107      	bne.n	800e998 <UART_Start_Receive_IT+0x11c>
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d103      	bne.n	800e998 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	4a47      	ldr	r2, [pc, #284]	@ (800eab0 <UART_Start_Receive_IT+0x234>)
 800e994:	675a      	str	r2, [r3, #116]	@ 0x74
 800e996:	e002      	b.n	800e99e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4a46      	ldr	r2, [pc, #280]	@ (800eab4 <UART_Start_Receive_IT+0x238>)
 800e99c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d01a      	beq.n	800e9dc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9ae:	e853 3f00 	ldrex	r3, [r3]
 800e9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e9ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e9c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9ca:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e9ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e9d0:	e841 2300 	strex	r3, r2, [r1]
 800e9d4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e9d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1e4      	bne.n	800e9a6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3308      	adds	r3, #8
 800e9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9e6:	e853 3f00 	ldrex	r3, [r3]
 800e9ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	3308      	adds	r3, #8
 800e9fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e9fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e9fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea04:	e841 2300 	strex	r3, r2, [r1]
 800ea08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ea0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1e5      	bne.n	800e9dc <UART_Start_Receive_IT+0x160>
 800ea10:	e046      	b.n	800eaa0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea1a:	d107      	bne.n	800ea2c <UART_Start_Receive_IT+0x1b0>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d103      	bne.n	800ea2c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	4a24      	ldr	r2, [pc, #144]	@ (800eab8 <UART_Start_Receive_IT+0x23c>)
 800ea28:	675a      	str	r2, [r3, #116]	@ 0x74
 800ea2a:	e002      	b.n	800ea32 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	4a23      	ldr	r2, [pc, #140]	@ (800eabc <UART_Start_Receive_IT+0x240>)
 800ea30:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	691b      	ldr	r3, [r3, #16]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d019      	beq.n	800ea6e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea42:	e853 3f00 	ldrex	r3, [r3]
 800ea46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ea4e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	461a      	mov	r2, r3
 800ea56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea5a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea60:	e841 2300 	strex	r3, r2, [r1]
 800ea64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ea66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e6      	bne.n	800ea3a <UART_Start_Receive_IT+0x1be>
 800ea6c:	e018      	b.n	800eaa0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	e853 3f00 	ldrex	r3, [r3]
 800ea7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f043 0320 	orr.w	r3, r3, #32
 800ea82:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea8c:	623b      	str	r3, [r7, #32]
 800ea8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea90:	69f9      	ldr	r1, [r7, #28]
 800ea92:	6a3a      	ldr	r2, [r7, #32]
 800ea94:	e841 2300 	strex	r3, r2, [r1]
 800ea98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1e6      	bne.n	800ea6e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	378c      	adds	r7, #140	@ 0x8c
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	0800f2e1 	.word	0x0800f2e1
 800eab4:	0800ef81 	.word	0x0800ef81
 800eab8:	0800edc9 	.word	0x0800edc9
 800eabc:	0800ec11 	.word	0x0800ec11

0800eac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b095      	sub	sp, #84	@ 0x54
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ead0:	e853 3f00 	ldrex	r3, [r3]
 800ead4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ead6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eadc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eae6:	643b      	str	r3, [r7, #64]	@ 0x40
 800eae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eaec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eaee:	e841 2300 	strex	r3, r2, [r1]
 800eaf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e6      	bne.n	800eac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	3308      	adds	r3, #8
 800eb00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb02:	6a3b      	ldr	r3, [r7, #32]
 800eb04:	e853 3f00 	ldrex	r3, [r3]
 800eb08:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb0a:	69fa      	ldr	r2, [r7, #28]
 800eb0c:	4b1e      	ldr	r3, [pc, #120]	@ (800eb88 <UART_EndRxTransfer+0xc8>)
 800eb0e:	4013      	ands	r3, r2
 800eb10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	3308      	adds	r3, #8
 800eb18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e5      	bne.n	800eafa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d118      	bne.n	800eb68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	e853 3f00 	ldrex	r3, [r3]
 800eb42:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	f023 0310 	bic.w	r3, r3, #16
 800eb4a:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	461a      	mov	r2, r3
 800eb52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb54:	61bb      	str	r3, [r7, #24]
 800eb56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb58:	6979      	ldr	r1, [r7, #20]
 800eb5a:	69ba      	ldr	r2, [r7, #24]
 800eb5c:	e841 2300 	strex	r3, r2, [r1]
 800eb60:	613b      	str	r3, [r7, #16]
   return(result);
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1e6      	bne.n	800eb36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2220      	movs	r2, #32
 800eb6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eb7c:	bf00      	nop
 800eb7e:	3754      	adds	r7, #84	@ 0x54
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr
 800eb88:	effffffe 	.word	0xeffffffe

0800eb8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	f7fe fe36 	bl	800d81c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebb0:	bf00      	nop
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	e853 3f00 	ldrex	r3, [r3]
 800ebcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebd4:	61fb      	str	r3, [r7, #28]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	61bb      	str	r3, [r7, #24]
 800ebe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe2:	6979      	ldr	r1, [r7, #20]
 800ebe4:	69ba      	ldr	r2, [r7, #24]
 800ebe6:	e841 2300 	strex	r3, r2, [r1]
 800ebea:	613b      	str	r3, [r7, #16]
   return(result);
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1e6      	bne.n	800ebc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2220      	movs	r2, #32
 800ebf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7fe fdf7 	bl	800d7f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec06:	bf00      	nop
 800ec08:	3720      	adds	r7, #32
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b09c      	sub	sp, #112	@ 0x70
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec28:	2b22      	cmp	r3, #34	@ 0x22
 800ec2a:	f040 80be 	bne.w	800edaa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ec38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ec3c:	b2d9      	uxtb	r1, r3
 800ec3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec48:	400a      	ands	r2, r1
 800ec4a:	b2d2      	uxtb	r2, r2
 800ec4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	3b01      	subs	r3, #1
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	f040 80a1 	bne.w	800edba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec80:	e853 3f00 	ldrex	r3, [r3]
 800ec84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ec86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec96:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec9e:	e841 2300 	strex	r3, r2, [r1]
 800eca2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1e6      	bne.n	800ec78 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3308      	adds	r3, #8
 800ecb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecb4:	e853 3f00 	ldrex	r3, [r3]
 800ecb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ecba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecbc:	f023 0301 	bic.w	r3, r3, #1
 800ecc0:	667b      	str	r3, [r7, #100]	@ 0x64
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ecca:	647a      	str	r2, [r7, #68]	@ 0x44
 800eccc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ecd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecd2:	e841 2300 	strex	r3, r2, [r1]
 800ecd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ecd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1e5      	bne.n	800ecaa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2220      	movs	r2, #32
 800ece2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a33      	ldr	r2, [pc, #204]	@ (800edc4 <UART_RxISR_8BIT+0x1b4>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d01f      	beq.n	800ed3c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d018      	beq.n	800ed3c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed12:	e853 3f00 	ldrex	r3, [r3]
 800ed16:	623b      	str	r3, [r7, #32]
   return(result);
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ed1e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	461a      	mov	r2, r3
 800ed26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed28:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed30:	e841 2300 	strex	r3, r2, [r1]
 800ed34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1e6      	bne.n	800ed0a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d12e      	bne.n	800eda2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	e853 3f00 	ldrex	r3, [r3]
 800ed56:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f023 0310 	bic.w	r3, r3, #16
 800ed5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	461a      	mov	r2, r3
 800ed66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed68:	61fb      	str	r3, [r7, #28]
 800ed6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6c:	69b9      	ldr	r1, [r7, #24]
 800ed6e:	69fa      	ldr	r2, [r7, #28]
 800ed70:	e841 2300 	strex	r3, r2, [r1]
 800ed74:	617b      	str	r3, [r7, #20]
   return(result);
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1e6      	bne.n	800ed4a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	69db      	ldr	r3, [r3, #28]
 800ed82:	f003 0310 	and.w	r3, r3, #16
 800ed86:	2b10      	cmp	r3, #16
 800ed88:	d103      	bne.n	800ed92 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2210      	movs	r2, #16
 800ed90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7f2 f930 	bl	8001000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eda0:	e00b      	b.n	800edba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7fe fd30 	bl	800d808 <HAL_UART_RxCpltCallback>
}
 800eda8:	e007      	b.n	800edba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	699a      	ldr	r2, [r3, #24]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f042 0208 	orr.w	r2, r2, #8
 800edb8:	619a      	str	r2, [r3, #24]
}
 800edba:	bf00      	nop
 800edbc:	3770      	adds	r7, #112	@ 0x70
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	58000c00 	.word	0x58000c00

0800edc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b09c      	sub	sp, #112	@ 0x70
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edd6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ede0:	2b22      	cmp	r3, #34	@ 0x22
 800ede2:	f040 80be 	bne.w	800ef62 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edf4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800edf6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800edfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800edfe:	4013      	ands	r3, r2
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ee04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee0a:	1c9a      	adds	r2, r3, #2
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f040 80a1 	bne.w	800ef72 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee38:	e853 3f00 	ldrex	r3, [r3]
 800ee3c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ee3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee44:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee50:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee56:	e841 2300 	strex	r3, r2, [r1]
 800ee5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ee5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1e6      	bne.n	800ee30 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	3308      	adds	r3, #8
 800ee68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee6c:	e853 3f00 	ldrex	r3, [r3]
 800ee70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee74:	f023 0301 	bic.w	r3, r3, #1
 800ee78:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	3308      	adds	r3, #8
 800ee80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ee82:	643a      	str	r2, [r7, #64]	@ 0x40
 800ee84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee8a:	e841 2300 	strex	r3, r2, [r1]
 800ee8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1e5      	bne.n	800ee62 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2220      	movs	r2, #32
 800ee9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2200      	movs	r2, #0
 800eea2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a33      	ldr	r2, [pc, #204]	@ (800ef7c <UART_RxISR_16BIT+0x1b4>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d01f      	beq.n	800eef4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d018      	beq.n	800eef4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec8:	6a3b      	ldr	r3, [r7, #32]
 800eeca:	e853 3f00 	ldrex	r3, [r3]
 800eece:	61fb      	str	r3, [r7, #28]
   return(result);
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	461a      	mov	r2, r3
 800eede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eee2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eee8:	e841 2300 	strex	r3, r2, [r1]
 800eeec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1e6      	bne.n	800eec2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d12e      	bne.n	800ef5a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	e853 3f00 	ldrex	r3, [r3]
 800ef0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	f023 0310 	bic.w	r3, r3, #16
 800ef16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef20:	61bb      	str	r3, [r7, #24]
 800ef22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef24:	6979      	ldr	r1, [r7, #20]
 800ef26:	69ba      	ldr	r2, [r7, #24]
 800ef28:	e841 2300 	strex	r3, r2, [r1]
 800ef2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d1e6      	bne.n	800ef02 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	69db      	ldr	r3, [r3, #28]
 800ef3a:	f003 0310 	and.w	r3, r3, #16
 800ef3e:	2b10      	cmp	r3, #16
 800ef40:	d103      	bne.n	800ef4a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2210      	movs	r2, #16
 800ef48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7f2 f854 	bl	8001000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef58:	e00b      	b.n	800ef72 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f7fe fc54 	bl	800d808 <HAL_UART_RxCpltCallback>
}
 800ef60:	e007      	b.n	800ef72 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	699a      	ldr	r2, [r3, #24]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f042 0208 	orr.w	r2, r2, #8
 800ef70:	619a      	str	r2, [r3, #24]
}
 800ef72:	bf00      	nop
 800ef74:	3770      	adds	r7, #112	@ 0x70
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	58000c00 	.word	0x58000c00

0800ef80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b0ac      	sub	sp, #176	@ 0xb0
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef8e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	69db      	ldr	r3, [r3, #28]
 800ef98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efb6:	2b22      	cmp	r3, #34	@ 0x22
 800efb8:	f040 8180 	bne.w	800f2bc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800efc2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800efc6:	e123      	b.n	800f210 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800efd2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800efd6:	b2d9      	uxtb	r1, r3
 800efd8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efe2:	400a      	ands	r2, r1
 800efe4:	b2d2      	uxtb	r2, r2
 800efe6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efec:	1c5a      	adds	r2, r3, #1
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eff8:	b29b      	uxth	r3, r3
 800effa:	3b01      	subs	r3, #1
 800effc:	b29a      	uxth	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	69db      	ldr	r3, [r3, #28]
 800f00a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f00e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f012:	f003 0307 	and.w	r3, r3, #7
 800f016:	2b00      	cmp	r3, #0
 800f018:	d053      	beq.n	800f0c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f01e:	f003 0301 	and.w	r3, r3, #1
 800f022:	2b00      	cmp	r3, #0
 800f024:	d011      	beq.n	800f04a <UART_RxISR_8BIT_FIFOEN+0xca>
 800f026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f02a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00b      	beq.n	800f04a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2201      	movs	r2, #1
 800f038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f040:	f043 0201 	orr.w	r2, r3, #1
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f04a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f04e:	f003 0302 	and.w	r3, r3, #2
 800f052:	2b00      	cmp	r3, #0
 800f054:	d011      	beq.n	800f07a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00b      	beq.n	800f07a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2202      	movs	r2, #2
 800f068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f070:	f043 0204 	orr.w	r2, r3, #4
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f07a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f07e:	f003 0304 	and.w	r3, r3, #4
 800f082:	2b00      	cmp	r3, #0
 800f084:	d011      	beq.n	800f0aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00b      	beq.n	800f0aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2204      	movs	r2, #4
 800f098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0a0:	f043 0202 	orr.w	r2, r3, #2
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d006      	beq.n	800f0c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7fe fbb1 	bl	800d81c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f040 80a0 	bne.w	800f210 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f0d8:	e853 3f00 	ldrex	r3, [r3]
 800f0dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f0de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f0f4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f0f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f0fa:	e841 2300 	strex	r3, r2, [r1]
 800f0fe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f100:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1e4      	bne.n	800f0d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3308      	adds	r3, #8
 800f10c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f110:	e853 3f00 	ldrex	r3, [r3]
 800f114:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f118:	4b6e      	ldr	r3, [pc, #440]	@ (800f2d4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f11a:	4013      	ands	r3, r2
 800f11c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	3308      	adds	r3, #8
 800f126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f12a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f12c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f130:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f132:	e841 2300 	strex	r3, r2, [r1]
 800f136:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f138:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1e3      	bne.n	800f106 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2220      	movs	r2, #32
 800f142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2200      	movs	r2, #0
 800f14a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a60      	ldr	r2, [pc, #384]	@ (800f2d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d021      	beq.n	800f1a0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f166:	2b00      	cmp	r3, #0
 800f168:	d01a      	beq.n	800f1a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f172:	e853 3f00 	ldrex	r3, [r3]
 800f176:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f17a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f17e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f18c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f18e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f190:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f192:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f194:	e841 2300 	strex	r3, r2, [r1]
 800f198:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f19a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1e4      	bne.n	800f16a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d130      	bne.n	800f20a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b6:	e853 3f00 	ldrex	r3, [r3]
 800f1ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1be:	f023 0310 	bic.w	r3, r3, #16
 800f1c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f1d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f1d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1d8:	e841 2300 	strex	r3, r2, [r1]
 800f1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1e4      	bne.n	800f1ae <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	69db      	ldr	r3, [r3, #28]
 800f1ea:	f003 0310 	and.w	r3, r3, #16
 800f1ee:	2b10      	cmp	r3, #16
 800f1f0:	d103      	bne.n	800f1fa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2210      	movs	r2, #16
 800f1f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f200:	4619      	mov	r1, r3
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f7f1 fefc 	bl	8001000 <HAL_UARTEx_RxEventCallback>
 800f208:	e002      	b.n	800f210 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7fe fafc 	bl	800d808 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f210:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f214:	2b00      	cmp	r3, #0
 800f216:	d006      	beq.n	800f226 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f21c:	f003 0320 	and.w	r3, r3, #32
 800f220:	2b00      	cmp	r3, #0
 800f222:	f47f aed1 	bne.w	800efc8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f22c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f230:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f234:	2b00      	cmp	r3, #0
 800f236:	d049      	beq.n	800f2cc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f23e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f242:	429a      	cmp	r2, r3
 800f244:	d242      	bcs.n	800f2cc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	3308      	adds	r3, #8
 800f24c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f24e:	6a3b      	ldr	r3, [r7, #32]
 800f250:	e853 3f00 	ldrex	r3, [r3]
 800f254:	61fb      	str	r3, [r7, #28]
   return(result);
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f25c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3308      	adds	r3, #8
 800f266:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f26a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f26c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f26e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f272:	e841 2300 	strex	r3, r2, [r1]
 800f276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1e3      	bne.n	800f246 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4a16      	ldr	r2, [pc, #88]	@ (800f2dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f282:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	e853 3f00 	ldrex	r3, [r3]
 800f290:	60bb      	str	r3, [r7, #8]
   return(result);
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	f043 0320 	orr.w	r3, r3, #32
 800f298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f2a6:	61bb      	str	r3, [r7, #24]
 800f2a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	6979      	ldr	r1, [r7, #20]
 800f2ac:	69ba      	ldr	r2, [r7, #24]
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	613b      	str	r3, [r7, #16]
   return(result);
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e4      	bne.n	800f284 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f2ba:	e007      	b.n	800f2cc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	699a      	ldr	r2, [r3, #24]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f042 0208 	orr.w	r2, r2, #8
 800f2ca:	619a      	str	r2, [r3, #24]
}
 800f2cc:	bf00      	nop
 800f2ce:	37b0      	adds	r7, #176	@ 0xb0
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	effffffe 	.word	0xeffffffe
 800f2d8:	58000c00 	.word	0x58000c00
 800f2dc:	0800ec11 	.word	0x0800ec11

0800f2e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b0ae      	sub	sp, #184	@ 0xb8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f2ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	69db      	ldr	r3, [r3, #28]
 800f2f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f316:	2b22      	cmp	r3, #34	@ 0x22
 800f318:	f040 8184 	bne.w	800f624 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f322:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f326:	e127      	b.n	800f578 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f32e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f33a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f33e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f342:	4013      	ands	r3, r2
 800f344:	b29a      	uxth	r2, r3
 800f346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f34a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f350:	1c9a      	adds	r2, r3, #2
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	3b01      	subs	r3, #1
 800f360:	b29a      	uxth	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	69db      	ldr	r3, [r3, #28]
 800f36e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f376:	f003 0307 	and.w	r3, r3, #7
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d053      	beq.n	800f426 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f37e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	d011      	beq.n	800f3ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800f38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f38e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00b      	beq.n	800f3ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2201      	movs	r2, #1
 800f39c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3a4:	f043 0201 	orr.w	r2, r3, #1
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3b2:	f003 0302 	and.w	r3, r3, #2
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d011      	beq.n	800f3de <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f3ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f3be:	f003 0301 	and.w	r3, r3, #1
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00b      	beq.n	800f3de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	2202      	movs	r2, #2
 800f3cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3d4:	f043 0204 	orr.w	r2, r3, #4
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3e2:	f003 0304 	and.w	r3, r3, #4
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d011      	beq.n	800f40e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f3ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00b      	beq.n	800f40e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2204      	movs	r2, #4
 800f3fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f404:	f043 0202 	orr.w	r2, r3, #2
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f414:	2b00      	cmp	r3, #0
 800f416:	d006      	beq.n	800f426 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7fe f9ff 	bl	800d81c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f040 80a2 	bne.w	800f578 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f43a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f43c:	e853 3f00 	ldrex	r3, [r3]
 800f440:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f448:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	461a      	mov	r2, r3
 800f452:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f456:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f45a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f45c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f45e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f462:	e841 2300 	strex	r3, r2, [r1]
 800f466:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1e2      	bne.n	800f434 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	3308      	adds	r3, #8
 800f474:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f478:	e853 3f00 	ldrex	r3, [r3]
 800f47c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f47e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f480:	4b6e      	ldr	r3, [pc, #440]	@ (800f63c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f482:	4013      	ands	r3, r2
 800f484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	3308      	adds	r3, #8
 800f48e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f492:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f496:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f49a:	e841 2300 	strex	r3, r2, [r1]
 800f49e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f4a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1e3      	bne.n	800f46e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2220      	movs	r2, #32
 800f4aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a60      	ldr	r2, [pc, #384]	@ (800f640 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d021      	beq.n	800f508 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d01a      	beq.n	800f508 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4da:	e853 3f00 	ldrex	r3, [r3]
 800f4de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f4e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f4e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f4f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f4f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f4fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f4fc:	e841 2300 	strex	r3, r2, [r1]
 800f500:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e4      	bne.n	800f4d2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d130      	bne.n	800f572 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f51e:	e853 3f00 	ldrex	r3, [r3]
 800f522:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f526:	f023 0310 	bic.w	r3, r3, #16
 800f52a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	461a      	mov	r2, r3
 800f534:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f538:	647b      	str	r3, [r7, #68]	@ 0x44
 800f53a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f540:	e841 2300 	strex	r3, r2, [r1]
 800f544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1e4      	bne.n	800f516 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	69db      	ldr	r3, [r3, #28]
 800f552:	f003 0310 	and.w	r3, r3, #16
 800f556:	2b10      	cmp	r3, #16
 800f558:	d103      	bne.n	800f562 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2210      	movs	r2, #16
 800f560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f568:	4619      	mov	r1, r3
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7f1 fd48 	bl	8001000 <HAL_UARTEx_RxEventCallback>
 800f570:	e002      	b.n	800f578 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7fe f948 	bl	800d808 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f578:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d006      	beq.n	800f58e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f584:	f003 0320 	and.w	r3, r3, #32
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f47f aecd 	bne.w	800f328 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f594:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f598:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d049      	beq.n	800f634 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f5a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d242      	bcs.n	800f634 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	3308      	adds	r3, #8
 800f5b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b8:	e853 3f00 	ldrex	r3, [r3]
 800f5bc:	623b      	str	r3, [r7, #32]
   return(result);
 800f5be:	6a3b      	ldr	r3, [r7, #32]
 800f5c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f5c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f5d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800f5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5da:	e841 2300 	strex	r3, r2, [r1]
 800f5de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d1e3      	bne.n	800f5ae <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a16      	ldr	r2, [pc, #88]	@ (800f644 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f5ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	e853 3f00 	ldrex	r3, [r3]
 800f5f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f043 0320 	orr.w	r3, r3, #32
 800f600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	461a      	mov	r2, r3
 800f60a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f612:	69b9      	ldr	r1, [r7, #24]
 800f614:	69fa      	ldr	r2, [r7, #28]
 800f616:	e841 2300 	strex	r3, r2, [r1]
 800f61a:	617b      	str	r3, [r7, #20]
   return(result);
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1e4      	bne.n	800f5ec <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f622:	e007      	b.n	800f634 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	699a      	ldr	r2, [r3, #24]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f042 0208 	orr.w	r2, r2, #8
 800f632:	619a      	str	r2, [r3, #24]
}
 800f634:	bf00      	nop
 800f636:	37b8      	adds	r7, #184	@ 0xb8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	effffffe 	.word	0xeffffffe
 800f640:	58000c00 	.word	0x58000c00
 800f644:	0800edc9 	.word	0x0800edc9

0800f648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f650:	bf00      	nop
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f664:	bf00      	nop
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f678:	bf00      	nop
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f692:	2b01      	cmp	r3, #1
 800f694:	d101      	bne.n	800f69a <HAL_UARTEx_DisableFifoMode+0x16>
 800f696:	2302      	movs	r3, #2
 800f698:	e027      	b.n	800f6ea <HAL_UARTEx_DisableFifoMode+0x66>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2201      	movs	r2, #1
 800f69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2224      	movs	r2, #36	@ 0x24
 800f6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f022 0201 	bic.w	r2, r2, #1
 800f6c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f6c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2220      	movs	r2, #32
 800f6dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3714      	adds	r7, #20
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr

0800f6f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b084      	sub	sp, #16
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f706:	2b01      	cmp	r3, #1
 800f708:	d101      	bne.n	800f70e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f70a:	2302      	movs	r3, #2
 800f70c:	e02d      	b.n	800f76a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2201      	movs	r2, #1
 800f712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2224      	movs	r2, #36	@ 0x24
 800f71a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f022 0201 	bic.w	r2, r2, #1
 800f734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f8a0 	bl	800f890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2220      	movs	r2, #32
 800f75c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b084      	sub	sp, #16
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
 800f77a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f782:	2b01      	cmp	r3, #1
 800f784:	d101      	bne.n	800f78a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f786:	2302      	movs	r3, #2
 800f788:	e02d      	b.n	800f7e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2201      	movs	r2, #1
 800f78e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2224      	movs	r2, #36	@ 0x24
 800f796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f022 0201 	bic.w	r2, r2, #1
 800f7b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	683a      	ldr	r2, [r7, #0]
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 f862 	bl	800f890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7e4:	2300      	movs	r3, #0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b08c      	sub	sp, #48	@ 0x30
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	60f8      	str	r0, [r7, #12]
 800f7f6:	60b9      	str	r1, [r7, #8]
 800f7f8:	4613      	mov	r3, r2
 800f7fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f808:	2b20      	cmp	r3, #32
 800f80a:	d13b      	bne.n	800f884 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d002      	beq.n	800f818 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800f812:	88fb      	ldrh	r3, [r7, #6]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d101      	bne.n	800f81c <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800f818:	2301      	movs	r3, #1
 800f81a:	e034      	b.n	800f886 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2201      	movs	r2, #1
 800f820:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2200      	movs	r2, #0
 800f826:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800f828:	88fb      	ldrh	r3, [r7, #6]
 800f82a:	461a      	mov	r2, r3
 800f82c:	68b9      	ldr	r1, [r7, #8]
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f7ff f824 	bl	800e87c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d11d      	bne.n	800f878 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2210      	movs	r2, #16
 800f842:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	e853 3f00 	ldrex	r3, [r3]
 800f850:	617b      	str	r3, [r7, #20]
   return(result);
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f043 0310 	orr.w	r3, r3, #16
 800f858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	461a      	mov	r2, r3
 800f860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f862:	627b      	str	r3, [r7, #36]	@ 0x24
 800f864:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f866:	6a39      	ldr	r1, [r7, #32]
 800f868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f86a:	e841 2300 	strex	r3, r2, [r1]
 800f86e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1e6      	bne.n	800f844 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800f876:	e002      	b.n	800f87e <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800f878:	2301      	movs	r3, #1
 800f87a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800f87e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f882:	e000      	b.n	800f886 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800f884:	2302      	movs	r3, #2
  }
}
 800f886:	4618      	mov	r0, r3
 800f888:	3730      	adds	r7, #48	@ 0x30
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
	...

0800f890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d108      	bne.n	800f8b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f8b0:	e031      	b.n	800f916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f8b2:	2310      	movs	r3, #16
 800f8b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f8b6:	2310      	movs	r3, #16
 800f8b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	0e5b      	lsrs	r3, r3, #25
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	f003 0307 	and.w	r3, r3, #7
 800f8c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	0f5b      	lsrs	r3, r3, #29
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	f003 0307 	and.w	r3, r3, #7
 800f8d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8da:	7bbb      	ldrb	r3, [r7, #14]
 800f8dc:	7b3a      	ldrb	r2, [r7, #12]
 800f8de:	4911      	ldr	r1, [pc, #68]	@ (800f924 <UARTEx_SetNbDataToProcess+0x94>)
 800f8e0:	5c8a      	ldrb	r2, [r1, r2]
 800f8e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8e6:	7b3a      	ldrb	r2, [r7, #12]
 800f8e8:	490f      	ldr	r1, [pc, #60]	@ (800f928 <UARTEx_SetNbDataToProcess+0x98>)
 800f8ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
 800f8fa:	7b7a      	ldrb	r2, [r7, #13]
 800f8fc:	4909      	ldr	r1, [pc, #36]	@ (800f924 <UARTEx_SetNbDataToProcess+0x94>)
 800f8fe:	5c8a      	ldrb	r2, [r1, r2]
 800f900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f904:	7b7a      	ldrb	r2, [r7, #13]
 800f906:	4908      	ldr	r1, [pc, #32]	@ (800f928 <UARTEx_SetNbDataToProcess+0x98>)
 800f908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f90a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f90e:	b29a      	uxth	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f916:	bf00      	nop
 800f918:	3714      	adds	r7, #20
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	0800fc40 	.word	0x0800fc40
 800f928:	0800fc48 	.word	0x0800fc48

0800f92c <memset>:
 800f92c:	4402      	add	r2, r0
 800f92e:	4603      	mov	r3, r0
 800f930:	4293      	cmp	r3, r2
 800f932:	d100      	bne.n	800f936 <memset+0xa>
 800f934:	4770      	bx	lr
 800f936:	f803 1b01 	strb.w	r1, [r3], #1
 800f93a:	e7f9      	b.n	800f930 <memset+0x4>

0800f93c <__libc_init_array>:
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	4d0d      	ldr	r5, [pc, #52]	@ (800f974 <__libc_init_array+0x38>)
 800f940:	4c0d      	ldr	r4, [pc, #52]	@ (800f978 <__libc_init_array+0x3c>)
 800f942:	1b64      	subs	r4, r4, r5
 800f944:	10a4      	asrs	r4, r4, #2
 800f946:	2600      	movs	r6, #0
 800f948:	42a6      	cmp	r6, r4
 800f94a:	d109      	bne.n	800f960 <__libc_init_array+0x24>
 800f94c:	4d0b      	ldr	r5, [pc, #44]	@ (800f97c <__libc_init_array+0x40>)
 800f94e:	4c0c      	ldr	r4, [pc, #48]	@ (800f980 <__libc_init_array+0x44>)
 800f950:	f000 f826 	bl	800f9a0 <_init>
 800f954:	1b64      	subs	r4, r4, r5
 800f956:	10a4      	asrs	r4, r4, #2
 800f958:	2600      	movs	r6, #0
 800f95a:	42a6      	cmp	r6, r4
 800f95c:	d105      	bne.n	800f96a <__libc_init_array+0x2e>
 800f95e:	bd70      	pop	{r4, r5, r6, pc}
 800f960:	f855 3b04 	ldr.w	r3, [r5], #4
 800f964:	4798      	blx	r3
 800f966:	3601      	adds	r6, #1
 800f968:	e7ee      	b.n	800f948 <__libc_init_array+0xc>
 800f96a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f96e:	4798      	blx	r3
 800f970:	3601      	adds	r6, #1
 800f972:	e7f2      	b.n	800f95a <__libc_init_array+0x1e>
 800f974:	0800fc58 	.word	0x0800fc58
 800f978:	0800fc58 	.word	0x0800fc58
 800f97c:	0800fc58 	.word	0x0800fc58
 800f980:	0800fc5c 	.word	0x0800fc5c

0800f984 <memcpy>:
 800f984:	440a      	add	r2, r1
 800f986:	4291      	cmp	r1, r2
 800f988:	f100 33ff 	add.w	r3, r0, #4294967295
 800f98c:	d100      	bne.n	800f990 <memcpy+0xc>
 800f98e:	4770      	bx	lr
 800f990:	b510      	push	{r4, lr}
 800f992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f99a:	4291      	cmp	r1, r2
 800f99c:	d1f9      	bne.n	800f992 <memcpy+0xe>
 800f99e:	bd10      	pop	{r4, pc}

0800f9a0 <_init>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	bf00      	nop
 800f9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9a6:	bc08      	pop	{r3}
 800f9a8:	469e      	mov	lr, r3
 800f9aa:	4770      	bx	lr

0800f9ac <_fini>:
 800f9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ae:	bf00      	nop
 800f9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9b2:	bc08      	pop	{r3}
 800f9b4:	469e      	mov	lr, r3
 800f9b6:	4770      	bx	lr
