
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ea4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08011170  08011170  00012170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011408  08011408  00012408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011410  08011410  00012410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011414  08011414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011418  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000758  24000078  08011490  00013078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240007d0  08011490  000137d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020220  00000000  00000000  000130a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000348b  00000000  00000000  000332c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018f0  00000000  00000000  00036758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000137a  00000000  00000000  00038048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003632f  00000000  00000000  000393c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002295b  00000000  00000000  0006f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167521  00000000  00000000  0009204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f956d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c0c  00000000  00000000  001f95b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  002001bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08011158 	.word	0x08011158

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	08011158 	.word	0x08011158

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f008 fac4 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00b ffb4 	bl	800c6a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00c fc0e 	bl	800cf68 <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00c f991 	bl	800ca84 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00c fbfd 	bl	800cf68 <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f008 fa9a 	bl	8008cb8 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f008 fa86 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00b ff76 	bl	800c6a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00c fbd0 	bl	800cf68 <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00b ff65 	bl	800c6a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00c fbbf 	bl	800cf68 <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f008 fa5c 	bl	8008cb8 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f003 f865 	bl	8003914 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f010 fc68 	bl	801113c <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08011170 	.word	0x08011170

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f003 f817 	bl	8003914 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f003 f80b 	bl	8003914 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f003 f800 	bl	8003914 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 ffe4 	bl	8003914 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f002 ffd1 	bl	8003914 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f002 ffbb 	bl	8003914 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f002 ff7f 	bl	8003914 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 ff61 	bl	8003914 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fdb0 	bl	800064e <LoRa_gotoMode>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b089      	sub	sp, #36	@ 0x24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e007      	b.n	8000b1e <LoRa_receive+0x28>
		data[i]=0;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf3      	blt.n	8000b0e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd90 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	2112      	movs	r1, #18
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff92 	bl	8000a5a <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02f      	beq.n	8000ba4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	2112      	movs	r1, #18
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffa0 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b4e:	2113      	movs	r1, #19
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff82 	bl	8000a5a <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7c 	bl	8000a5a <LoRa_read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff8e 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b72:	7cba      	ldrb	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00b      	b.n	8000b9c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff ff64 	bl	8000a5a <LoRa_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbef      	blt.n	8000b84 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fd51 	bl	800064e <LoRa_gotoMode>
    return min;
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <LoRa_isvalid>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8096 	beq.w	8000cf8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd3d 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f002 fe9d 	bl	8003914 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff3c 	bl	8000a5a <LoRa_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f002 fe94 	bl	8003914 <HAL_Delay>
			data = read | 0x80;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff47 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f002 fe87 	bl	8003914 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe55 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feb0 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febd 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	210c      	movs	r1, #12
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff2b 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fef3 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe68 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c4c:	22ff      	movs	r2, #255	@ 0xff
 8000c4e:	211f      	movs	r1, #31
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1c 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	461a      	mov	r2, r3
 8000c76:	211d      	movs	r1, #29
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff08 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fde8 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2120      	movs	r1, #32
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fefb 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2121      	movs	r1, #33	@ 0x21
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef3 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fed5 	bl	8000a5a <LoRa_read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fee3 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fcbf 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f002 fe1c 	bl	8003914 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cdc:	2142      	movs	r1, #66	@ 0x42
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff febb 	bl	8000a5a <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d101      	bne.n	8000cf2 <LoRa_init+0x13c>
				return LORA_OK;
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	e004      	b.n	8000cfc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000cf2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000cf6:	e001      	b.n	8000cfc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000cf8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e025      	b.n	8000d64 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	441a      	add	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	b291      	uxth	r1, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3214      	adds	r2, #20
 8000d42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	8811      	ldrh	r1, [r2, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	331c      	adds	r3, #28
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d6      	bls.n	8000d18 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <Line_Sensor_Calculation>:

void Line_Sensor_Calculation(ir_array *ir_struct){
 8000dce:	b480      	push	{r7}
 8000dd0:	b08b      	sub	sp, #44	@ 0x2c
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    uint8_t i, on_line = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t avg = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    uint32_t sum = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    uint16_t value;
    uint8_t on_sensor_total_number = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	76fb      	strb	r3, [r7, #27]

    uint8_t middle_on_line = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	76bb      	strb	r3, [r7, #26]
    uint8_t left_on_line = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	767b      	strb	r3, [r7, #25]
    uint8_t right_on_line = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	763b      	strb	r3, [r7, #24]


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dfa:	e092      	b.n	8000f22 <Line_Sensor_Calculation+0x154>
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
 8000dfc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3214      	adds	r2, #20
 8000e04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e08:	827b      	strh	r3, [r7, #18]
        calmin = ir_struct->ir_sen_min_val[i];
 8000e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	331c      	adds	r3, #28
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	823b      	strh	r3, [r7, #16]

        denominator = calmax - calmin;
 8000e1a:	8a7a      	ldrh	r2, [r7, #18]
 8000e1c:	8a3b      	ldrh	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	81fb      	strh	r3, [r7, #14]

        int x = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
        if(denominator != 0){
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d010      	beq.n	8000e4e <Line_Sensor_Calculation+0x80>
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
 8000e2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	8a3b      	ldrh	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e42:	fb03 f202 	mul.w	r2, r3, r2
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
        }
        if(x <0){
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da01      	bge.n	8000e58 <Line_Sensor_Calculation+0x8a>
            x = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
        }
        if(x>1000){
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e5e:	dd02      	ble.n	8000e66 <Line_Sensor_Calculation+0x98>
            x = 1000;
 8000e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e64:	617b      	str	r3, [r7, #20]
        }
        value = (1000-x);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000e6e:	81bb      	strh	r3, [r7, #12]
        ir_struct->ir_sen_val_cal[i] = value;
 8000e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	3308      	adds	r3, #8
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	89ba      	ldrh	r2, [r7, #12]
 8000e7e:	809a      	strh	r2, [r3, #4]

        // start read line number section
        if(value > 600){
 8000e80:	89bb      	ldrh	r3, [r7, #12]
 8000e82:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e86:	d902      	bls.n	8000e8e <Line_Sensor_Calculation+0xc0>
            on_line = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        if(value > 200){
 8000e8e:	89bb      	ldrh	r3, [r7, #12]
 8000e90:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e92:	d910      	bls.n	8000eb6 <Line_Sensor_Calculation+0xe8>
            avg += (long)(value)*(i*1000);
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e9e:	fb01 f202 	mul.w	r2, r1, r2
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	4413      	add	r3, r2
 8000eac:	623b      	str	r3, [r7, #32]
            sum += value;
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	61fb      	str	r3, [r7, #28]
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000ebc:	89ba      	ldrh	r2, [r7, #12]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d923      	bls.n	8000f0a <Line_Sensor_Calculation+0x13c>
            on_sensor_total_number++;
 8000ec2:	7efb      	ldrb	r3, [r7, #27]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	76fb      	strb	r3, [r7, #27]
            ir_struct->ir_sen_val_cal_trig[i] = 0xff;
 8000ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	22ff      	movs	r2, #255	@ 0xff
 8000ed2:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
            if(i >= 2 && i <= 7){
 8000ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d906      	bls.n	8000eec <Line_Sensor_Calculation+0x11e>
 8000ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	d802      	bhi.n	8000eec <Line_Sensor_Calculation+0x11e>
                middle_on_line++;
 8000ee6:	7ebb      	ldrb	r3, [r7, #26]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	76bb      	strb	r3, [r7, #26]
            }
            if(i <= 2){
 8000eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d802      	bhi.n	8000efa <Line_Sensor_Calculation+0x12c>
            	left_on_line++;
 8000ef4:	7e7b      	ldrb	r3, [r7, #25]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	767b      	strb	r3, [r7, #25]
            }
            if(i >= 7){
 8000efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d90a      	bls.n	8000f18 <Line_Sensor_Calculation+0x14a>
            	right_on_line++;
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	3301      	adds	r3, #1
 8000f06:	763b      	strb	r3, [r7, #24]
 8000f08:	e006      	b.n	8000f18 <Line_Sensor_Calculation+0x14a>
            }
        }
        else{
        	ir_struct->ir_sen_val_cal_trig[i] = 0x00;
 8000f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f4ff af65 	bcc.w	8000dfc <Line_Sensor_Calculation+0x2e>
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
 8000f32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d120      	bne.n	8000f7c <Line_Sensor_Calculation+0x1ae>
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	da04      	bge.n	8000f5c <Line_Sensor_Calculation+0x18e>
            ir_struct->ir_sen_read_line_val = 0;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8000f5a:	e017      	b.n	8000f8c <Line_Sensor_Calculation+0x1be>
        }
        else{
            ir_struct->ir_sen_read_line_val = (ir_struct->ir_sen_channel_num - 1)*1000;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	0152      	lsls	r2, r2, #5
 8000f6a:	1ad2      	subs	r2, r2, r3
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8000f7a:	e007      	b.n	8000f8c <Line_Sensor_Calculation+0x1be>
        }
    }
    else{
        ir_struct->ir_sen_read_line_val = avg/sum;
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    }
    ir_struct->ir_sen_read_line_old_val = ir_struct->ir_sen_read_line_val;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	655a      	str	r2, [r3, #84]	@ 0x54
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = left_on_line;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7e7a      	ldrb	r2, [r7, #25]
 8000f9e:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = right_on_line;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7e3a      	ldrb	r2, [r7, #24]
 8000fa6:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7eba      	ldrb	r2, [r7, #26]
 8000fae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7efa      	ldrb	r2, [r7, #27]
 8000fb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
 8000fba:	bf00      	nop
 8000fbc:	372c      	adds	r7, #44	@ 0x2c
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <PID_control>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PID_control(volatile uint16_t *line_position,
				          uint16_t *motor_orientation){
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]

	pid_error = 4500 - *line_position;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f241 1394 	movw	r3, #4500	@ 0x1194
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	4b53      	ldr	r3, [pc, #332]	@ (8001138 <PID_control+0x170>)
 8000fea:	edc3 7a00 	vstr	s15, [r3]

	P = pid_error;
 8000fee:	4b52      	ldr	r3, [pc, #328]	@ (8001138 <PID_control+0x170>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a52      	ldr	r2, [pc, #328]	@ (800113c <PID_control+0x174>)
 8000ff4:	6013      	str	r3, [r2, #0]
	//I = error + I;
	I = 0;
 8000ff6:	4b52      	ldr	r3, [pc, #328]	@ (8001140 <PID_control+0x178>)
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
	D = pid_error - pid_last_error;
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8001138 <PID_control+0x170>)
 8001000:	ed93 7a00 	vldr	s14, [r3]
 8001004:	4b4f      	ldr	r3, [pc, #316]	@ (8001144 <PID_control+0x17c>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	4b4e      	ldr	r3, [pc, #312]	@ (8001148 <PID_control+0x180>)
 8001010:	edc3 7a00 	vstr	s15, [r3]
	pid_last_error = pid_error;
 8001014:	4b48      	ldr	r3, [pc, #288]	@ (8001138 <PID_control+0x170>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a4a      	ldr	r2, [pc, #296]	@ (8001144 <PID_control+0x17c>)
 800101a:	6013      	str	r3, [r2, #0]

	pid_motor_speed_change = P*Kp + I*Ki + D*Kd;
 800101c:	4b47      	ldr	r3, [pc, #284]	@ (800113c <PID_control+0x174>)
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	4b4a      	ldr	r3, [pc, #296]	@ (800114c <PID_control+0x184>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800102c:	4b44      	ldr	r3, [pc, #272]	@ (8001140 <PID_control+0x178>)
 800102e:	edd3 6a00 	vldr	s13, [r3]
 8001032:	4b47      	ldr	r3, [pc, #284]	@ (8001150 <PID_control+0x188>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001040:	4b41      	ldr	r3, [pc, #260]	@ (8001148 <PID_control+0x180>)
 8001042:	edd3 6a00 	vldr	s13, [r3]
 8001046:	4b43      	ldr	r3, [pc, #268]	@ (8001154 <PID_control+0x18c>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <PID_control+0x190>)
 8001056:	edc3 7a00 	vstr	s15, [r3]

	if(*motor_orientation == 0xF11F){
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001062:	4293      	cmp	r3, r2
 8001064:	d123      	bne.n	80010ae <PID_control+0xe6>
		pid_motor_speed_A = pid_motor_base_speed + pid_motor_speed_change;
 8001066:	4b3d      	ldr	r3, [pc, #244]	@ (800115c <PID_control+0x194>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001072:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <PID_control+0x190>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001080:	ee17 3a90 	vmov	r3, s15
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b36      	ldr	r3, [pc, #216]	@ (8001160 <PID_control+0x198>)
 8001088:	801a      	strh	r2, [r3, #0]
		pid_motor_speed_B = pid_motor_base_speed - pid_motor_speed_change;
 800108a:	4b34      	ldr	r3, [pc, #208]	@ (800115c <PID_control+0x194>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001096:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <PID_control+0x190>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a4:	ee17 3a90 	vmov	r3, s15
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <PID_control+0x19c>)
 80010ac:	801a      	strh	r2, [r3, #0]
	}
	if(*motor_orientation == 0xF00F){
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d123      	bne.n	8001102 <PID_control+0x13a>
		pid_motor_speed_A = pid_motor_base_speed - pid_motor_speed_change;
 80010ba:	4b28      	ldr	r3, [pc, #160]	@ (800115c <PID_control+0x194>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <PID_control+0x190>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d4:	ee17 3a90 	vmov	r3, s15
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <PID_control+0x198>)
 80010dc:	801a      	strh	r2, [r3, #0]
		pid_motor_speed_B = pid_motor_base_speed + pid_motor_speed_change;
 80010de:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <PID_control+0x194>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <PID_control+0x190>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f8:	ee17 3a90 	vmov	r3, s15
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <PID_control+0x19c>)
 8001100:	801a      	strh	r2, [r3, #0]
	}


	if(pid_motor_speed_A > max_rs485_speed){
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <PID_control+0x198>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	2b64      	cmp	r3, #100	@ 0x64
 800110a:	d902      	bls.n	8001112 <PID_control+0x14a>
		pid_motor_speed_A = max_rs485_speed;
 800110c:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <PID_control+0x198>)
 800110e:	2264      	movs	r2, #100	@ 0x64
 8001110:	801a      	strh	r2, [r3, #0]
	}
	if(pid_motor_speed_A < 0){
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <PID_control+0x198>)
 8001114:	881b      	ldrh	r3, [r3, #0]
		pid_motor_speed_A = 0;
	}
	if(pid_motor_speed_B > max_rs485_speed){
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <PID_control+0x19c>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	2b64      	cmp	r3, #100	@ 0x64
 800111e:	d902      	bls.n	8001126 <PID_control+0x15e>
		pid_motor_speed_B = max_rs485_speed;
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <PID_control+0x19c>)
 8001122:	2264      	movs	r2, #100	@ 0x64
 8001124:	801a      	strh	r2, [r3, #0]
	}
	if(pid_motor_speed_B < 0){
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <PID_control+0x19c>)
 8001128:	881b      	ldrh	r3, [r3, #0]
		pid_motor_speed_B = 0;
	}

}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	24000688 	.word	0x24000688
 800113c:	24000674 	.word	0x24000674
 8001140:	24000678 	.word	0x24000678
 8001144:	24000684 	.word	0x24000684
 8001148:	2400067c 	.word	0x2400067c
 800114c:	24000054 	.word	0x24000054
 8001150:	24000680 	.word	0x24000680
 8001154:	24000058 	.word	0x24000058
 8001158:	2400068c 	.word	0x2400068c
 800115c:	2400005c 	.word	0x2400005c
 8001160:	24000690 	.word	0x24000690
 8001164:	24000692 	.word	0x24000692

08001168 <PID_Forward_Rotation>:
		pid_motor_speed_B = 0;
	}

}

void PID_Forward_Rotation(uint16_t enableA, uint16_t enableB, uint16_t *orientation){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	603a      	str	r2, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	460b      	mov	r3, r1
 8001176:	80bb      	strh	r3, [r7, #4]

	if(*orientation == 0xF11F){
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001180:	4293      	cmp	r3, r2
 8001182:	d11b      	bne.n	80011bc <PID_Forward_Rotation+0x54>
		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	481f      	ldr	r0, [pc, #124]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 800118a:	f007 fd95 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2110      	movs	r1, #16
 8001192:	481d      	ldr	r0, [pc, #116]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 8001194:	f007 fd90 	bl	8008cb8 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2104      	movs	r1, #4
 800119c:	481a      	ldr	r0, [pc, #104]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 800119e:	f007 fd8b 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2108      	movs	r1, #8
 80011a6:	4818      	ldr	r0, [pc, #96]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011a8:	f007 fd86 	bl	8008cb8 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	88ba      	ldrh	r2, [r7, #4]
 80011ba:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, enableB, 0);
//		set_speed(0x02, enableA, 1);
	}

	if(*orientation == 0xF00F){
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d11b      	bne.n	8001200 <PID_Forward_Rotation+0x98>

		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2120      	movs	r1, #32
 80011cc:	480e      	ldr	r0, [pc, #56]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011ce:	f007 fd73 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2110      	movs	r1, #16
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011d8:	f007 fd6e 	bl	8008cb8 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2104      	movs	r1, #4
 80011e0:	4809      	ldr	r0, [pc, #36]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011e2:	f007 fd69 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011ec:	f007 fd64 	bl	8008cb8 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	639a      	str	r2, [r3, #56]	@ 0x38

	}



}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58020000 	.word	0x58020000
 800120c:	240002ec 	.word	0x240002ec

08001210 <PID_Motor_Turn_Left>:

void PID_Motor_Turn_Left(uint16_t _speed, uint16_t *orientation){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
	if(*orientation == 0xF11F){
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001224:	4293      	cmp	r3, r2
 8001226:	d11b      	bne.n	8001260 <PID_Motor_Turn_Left+0x50>
		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2120      	movs	r1, #32
 800122c:	481f      	ldr	r0, [pc, #124]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 800122e:	f007 fd43 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	481d      	ldr	r0, [pc, #116]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001238:	f007 fd3e 	bl	8008cb8 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2104      	movs	r1, #4
 8001240:	481a      	ldr	r0, [pc, #104]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001242:	f007 fd39 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	4818      	ldr	r0, [pc, #96]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 800124c:	f007 fd34 	bl	8008cb8 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, _speed, 0);
//		set_speed(0x02, _speed, 0);
	}

	if(*orientation == 0xF00F){
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001268:	4293      	cmp	r3, r2
 800126a:	d11b      	bne.n	80012a4 <PID_Motor_Turn_Left+0x94>

		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2120      	movs	r1, #32
 8001270:	480e      	ldr	r0, [pc, #56]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001272:	f007 fd21 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2110      	movs	r1, #16
 800127a:	480c      	ldr	r0, [pc, #48]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 800127c:	f007 fd1c 	bl	8008cb8 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2104      	movs	r1, #4
 8001284:	4809      	ldr	r0, [pc, #36]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001286:	f007 fd17 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2108      	movs	r1, #8
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001290:	f007 fd12 	bl	8008cb8 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, _speed, 0);
//		set_speed(0x02, _speed, 0);

	}
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58020000 	.word	0x58020000
 80012b0:	240002ec 	.word	0x240002ec

080012b4 <PID_Motor_Turn_Right>:

void PID_Motor_Turn_Right(uint16_t _speed, uint16_t *orientation){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	80fb      	strh	r3, [r7, #6]
	if(*orientation == 0xF11F){
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d11b      	bne.n	8001304 <PID_Motor_Turn_Right+0x50>
		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2120      	movs	r1, #32
 80012d0:	481f      	ldr	r0, [pc, #124]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012d2:	f007 fcf1 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2110      	movs	r1, #16
 80012da:	481d      	ldr	r0, [pc, #116]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012dc:	f007 fcec 	bl	8008cb8 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2104      	movs	r1, #4
 80012e4:	481a      	ldr	r0, [pc, #104]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012e6:	f007 fce7 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2108      	movs	r1, #8
 80012ee:	4818      	ldr	r0, [pc, #96]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012f0:	f007 fce2 	bl	8008cb8 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	88fa      	ldrh	r2, [r7, #6]
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	88fa      	ldrh	r2, [r7, #6]
 8001302:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, _speed, 1);
//		set_speed(0x02, _speed, 1);
	}

	if(*orientation == 0xF00F){
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800130c:	4293      	cmp	r3, r2
 800130e:	d11b      	bne.n	8001348 <PID_Motor_Turn_Right+0x94>

		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2120      	movs	r1, #32
 8001314:	480e      	ldr	r0, [pc, #56]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 8001316:	f007 fccf 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2110      	movs	r1, #16
 800131e:	480c      	ldr	r0, [pc, #48]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 8001320:	f007 fcca 	bl	8008cb8 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2104      	movs	r1, #4
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 800132a:	f007 fcc5 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2108      	movs	r1, #8
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 8001334:	f007 fcc0 	bl	8008cb8 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	88fa      	ldrh	r2, [r7, #6]
 8001346:	639a      	str	r2, [r3, #56]	@ 0x38
//		set_speed(0x01, _speed, 1);
//		set_speed(0x02, _speed, 1);

	}

}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58020000 	.word	0x58020000
 8001354:	240002ec 	.word	0x240002ec

08001358 <PID_Motor_All_Break>:


void PID_Motor_All_Break(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	//LEFT
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2120      	movs	r1, #32
 8001360:	480d      	ldr	r0, [pc, #52]	@ (8001398 <PID_Motor_All_Break+0x40>)
 8001362:	f007 fca9 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2110      	movs	r1, #16
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <PID_Motor_All_Break+0x40>)
 800136c:	f007 fca4 	bl	8008cb8 <HAL_GPIO_WritePin>

	//RIGHT
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	4808      	ldr	r0, [pc, #32]	@ (8001398 <PID_Motor_All_Break+0x40>)
 8001376:	f007 fc9f 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2108      	movs	r1, #8
 800137e:	4806      	ldr	r0, [pc, #24]	@ (8001398 <PID_Motor_All_Break+0x40>)
 8001380:	f007 fc9a 	bl	8008cb8 <HAL_GPIO_WritePin>

	//Right
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <PID_Motor_All_Break+0x44>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	635a      	str	r2, [r3, #52]	@ 0x34

	//Left
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <PID_Motor_All_Break+0x44>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	639a      	str	r2, [r3, #56]	@ 0x38
//	motor_enable_velocity_mode(0x01);
//	motor_enable_velocity_mode(0x02);
//	set_speed(0x01, 0, 1);
//	set_speed(0x02, 0, 0);

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	58020000 	.word	0x58020000
 800139c:	240002ec 	.word	0x240002ec

080013a0 <AGV_waiting>:

void AGV_waiting(){
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	if(Target_Station == Current_Station){
 80013a4:	4b8c      	ldr	r3, [pc, #560]	@ (80015d8 <AGV_waiting+0x238>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	4b8c      	ldr	r3, [pc, #560]	@ (80015dc <AGV_waiting+0x23c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	f040 8103 	bne.w	80015b8 <AGV_waiting+0x218>
		On_Task = 0xF00F;
 80013b2:	4b8b      	ldr	r3, [pc, #556]	@ (80015e0 <AGV_waiting+0x240>)
 80013b4:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80013b8:	801a      	strh	r2, [r3, #0]
		if(Target_Station != Station){
 80013ba:	4b87      	ldr	r3, [pc, #540]	@ (80015d8 <AGV_waiting+0x238>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	4b89      	ldr	r3, [pc, #548]	@ (80015e4 <AGV_waiting+0x244>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f000 80f8 	beq.w	80015b8 <AGV_waiting+0x218>
			Target_Station = Station;
 80013c8:	4b86      	ldr	r3, [pc, #536]	@ (80015e4 <AGV_waiting+0x244>)
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	4b82      	ldr	r3, [pc, #520]	@ (80015d8 <AGV_waiting+0x238>)
 80013ce:	701a      	strb	r2, [r3, #0]
			if(Current_Station == 0){
 80013d0:	4b82      	ldr	r3, [pc, #520]	@ (80015dc <AGV_waiting+0x23c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d138      	bne.n	800144a <AGV_waiting+0xaa>
				if(Target_Station == 1){
 80013d8:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <AGV_waiting+0x238>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10e      	bne.n	80013fe <AGV_waiting+0x5e>
					on_task_decisions[0] = 'L';
 80013e0:	4b81      	ldr	r3, [pc, #516]	@ (80015e8 <AGV_waiting+0x248>)
 80013e2:	224c      	movs	r2, #76	@ 0x4c
 80013e4:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 80013e6:	4b80      	ldr	r3, [pc, #512]	@ (80015e8 <AGV_waiting+0x248>)
 80013e8:	224c      	movs	r2, #76	@ 0x4c
 80013ea:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 80013ec:	4b7e      	ldr	r3, [pc, #504]	@ (80015e8 <AGV_waiting+0x248>)
 80013ee:	2245      	movs	r2, #69	@ 0x45
 80013f0:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80013f2:	4b7d      	ldr	r3, [pc, #500]	@ (80015e8 <AGV_waiting+0x248>)
 80013f4:	2245      	movs	r2, #69	@ 0x45
 80013f6:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80013f8:	4b7b      	ldr	r3, [pc, #492]	@ (80015e8 <AGV_waiting+0x248>)
 80013fa:	2245      	movs	r2, #69	@ 0x45
 80013fc:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 80013fe:	4b76      	ldr	r3, [pc, #472]	@ (80015d8 <AGV_waiting+0x238>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d10e      	bne.n	8001424 <AGV_waiting+0x84>
					on_task_decisions[0] = 'L';
 8001406:	4b78      	ldr	r3, [pc, #480]	@ (80015e8 <AGV_waiting+0x248>)
 8001408:	224c      	movs	r2, #76	@ 0x4c
 800140a:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 800140c:	4b76      	ldr	r3, [pc, #472]	@ (80015e8 <AGV_waiting+0x248>)
 800140e:	2246      	movs	r2, #70	@ 0x46
 8001410:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'L';
 8001412:	4b75      	ldr	r3, [pc, #468]	@ (80015e8 <AGV_waiting+0x248>)
 8001414:	224c      	movs	r2, #76	@ 0x4c
 8001416:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001418:	4b73      	ldr	r3, [pc, #460]	@ (80015e8 <AGV_waiting+0x248>)
 800141a:	2245      	movs	r2, #69	@ 0x45
 800141c:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 800141e:	4b72      	ldr	r3, [pc, #456]	@ (80015e8 <AGV_waiting+0x248>)
 8001420:	2245      	movs	r2, #69	@ 0x45
 8001422:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 3){
 8001424:	4b6c      	ldr	r3, [pc, #432]	@ (80015d8 <AGV_waiting+0x238>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d10e      	bne.n	800144a <AGV_waiting+0xaa>
					on_task_decisions[0] = 'L';
 800142c:	4b6e      	ldr	r3, [pc, #440]	@ (80015e8 <AGV_waiting+0x248>)
 800142e:	224c      	movs	r2, #76	@ 0x4c
 8001430:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 8001432:	4b6d      	ldr	r3, [pc, #436]	@ (80015e8 <AGV_waiting+0x248>)
 8001434:	2246      	movs	r2, #70	@ 0x46
 8001436:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'F';
 8001438:	4b6b      	ldr	r3, [pc, #428]	@ (80015e8 <AGV_waiting+0x248>)
 800143a:	2246      	movs	r2, #70	@ 0x46
 800143c:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'L';
 800143e:	4b6a      	ldr	r3, [pc, #424]	@ (80015e8 <AGV_waiting+0x248>)
 8001440:	224c      	movs	r2, #76	@ 0x4c
 8001442:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001444:	4b68      	ldr	r3, [pc, #416]	@ (80015e8 <AGV_waiting+0x248>)
 8001446:	2245      	movs	r2, #69	@ 0x45
 8001448:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 1){
 800144a:	4b64      	ldr	r3, [pc, #400]	@ (80015dc <AGV_waiting+0x23c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d138      	bne.n	80014c4 <AGV_waiting+0x124>
				if(Target_Station == 0){
 8001452:	4b61      	ldr	r3, [pc, #388]	@ (80015d8 <AGV_waiting+0x238>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10e      	bne.n	8001478 <AGV_waiting+0xd8>
					on_task_decisions[0] = 'R';
 800145a:	4b63      	ldr	r3, [pc, #396]	@ (80015e8 <AGV_waiting+0x248>)
 800145c:	2252      	movs	r2, #82	@ 0x52
 800145e:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 8001460:	4b61      	ldr	r3, [pc, #388]	@ (80015e8 <AGV_waiting+0x248>)
 8001462:	2252      	movs	r2, #82	@ 0x52
 8001464:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 8001466:	4b60      	ldr	r3, [pc, #384]	@ (80015e8 <AGV_waiting+0x248>)
 8001468:	2245      	movs	r2, #69	@ 0x45
 800146a:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 800146c:	4b5e      	ldr	r3, [pc, #376]	@ (80015e8 <AGV_waiting+0x248>)
 800146e:	2245      	movs	r2, #69	@ 0x45
 8001470:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001472:	4b5d      	ldr	r3, [pc, #372]	@ (80015e8 <AGV_waiting+0x248>)
 8001474:	2245      	movs	r2, #69	@ 0x45
 8001476:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 8001478:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <AGV_waiting+0x238>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d10e      	bne.n	800149e <AGV_waiting+0xfe>
					on_task_decisions[0] = 'L';
 8001480:	4b59      	ldr	r3, [pc, #356]	@ (80015e8 <AGV_waiting+0x248>)
 8001482:	224c      	movs	r2, #76	@ 0x4c
 8001484:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 8001486:	4b58      	ldr	r3, [pc, #352]	@ (80015e8 <AGV_waiting+0x248>)
 8001488:	224c      	movs	r2, #76	@ 0x4c
 800148a:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 800148c:	4b56      	ldr	r3, [pc, #344]	@ (80015e8 <AGV_waiting+0x248>)
 800148e:	2245      	movs	r2, #69	@ 0x45
 8001490:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001492:	4b55      	ldr	r3, [pc, #340]	@ (80015e8 <AGV_waiting+0x248>)
 8001494:	2245      	movs	r2, #69	@ 0x45
 8001496:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <AGV_waiting+0x248>)
 800149a:	2245      	movs	r2, #69	@ 0x45
 800149c:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 3){
 800149e:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <AGV_waiting+0x238>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d10e      	bne.n	80014c4 <AGV_waiting+0x124>
					on_task_decisions[0] = 'L';
 80014a6:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <AGV_waiting+0x248>)
 80014a8:	224c      	movs	r2, #76	@ 0x4c
 80014aa:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 80014ac:	4b4e      	ldr	r3, [pc, #312]	@ (80015e8 <AGV_waiting+0x248>)
 80014ae:	2246      	movs	r2, #70	@ 0x46
 80014b0:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'L';
 80014b2:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <AGV_waiting+0x248>)
 80014b4:	224c      	movs	r2, #76	@ 0x4c
 80014b6:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80014b8:	4b4b      	ldr	r3, [pc, #300]	@ (80015e8 <AGV_waiting+0x248>)
 80014ba:	2245      	movs	r2, #69	@ 0x45
 80014bc:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80014be:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <AGV_waiting+0x248>)
 80014c0:	2245      	movs	r2, #69	@ 0x45
 80014c2:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 2){
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <AGV_waiting+0x23c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d138      	bne.n	800153e <AGV_waiting+0x19e>
				if(Target_Station == 0){
 80014cc:	4b42      	ldr	r3, [pc, #264]	@ (80015d8 <AGV_waiting+0x238>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10e      	bne.n	80014f2 <AGV_waiting+0x152>
					on_task_decisions[0] = 'R';
 80014d4:	4b44      	ldr	r3, [pc, #272]	@ (80015e8 <AGV_waiting+0x248>)
 80014d6:	2252      	movs	r2, #82	@ 0x52
 80014d8:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 80014da:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <AGV_waiting+0x248>)
 80014dc:	2246      	movs	r2, #70	@ 0x46
 80014de:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'R';
 80014e0:	4b41      	ldr	r3, [pc, #260]	@ (80015e8 <AGV_waiting+0x248>)
 80014e2:	2252      	movs	r2, #82	@ 0x52
 80014e4:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80014e6:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <AGV_waiting+0x248>)
 80014e8:	2245      	movs	r2, #69	@ 0x45
 80014ea:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80014ec:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <AGV_waiting+0x248>)
 80014ee:	2245      	movs	r2, #69	@ 0x45
 80014f0:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 1){
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <AGV_waiting+0x238>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d10e      	bne.n	8001518 <AGV_waiting+0x178>
					on_task_decisions[0] = 'R';
 80014fa:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <AGV_waiting+0x248>)
 80014fc:	2252      	movs	r2, #82	@ 0x52
 80014fe:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 8001500:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <AGV_waiting+0x248>)
 8001502:	2252      	movs	r2, #82	@ 0x52
 8001504:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 8001506:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <AGV_waiting+0x248>)
 8001508:	2245      	movs	r2, #69	@ 0x45
 800150a:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 800150c:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <AGV_waiting+0x248>)
 800150e:	2245      	movs	r2, #69	@ 0x45
 8001510:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001512:	4b35      	ldr	r3, [pc, #212]	@ (80015e8 <AGV_waiting+0x248>)
 8001514:	2245      	movs	r2, #69	@ 0x45
 8001516:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 3){
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <AGV_waiting+0x238>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d10e      	bne.n	800153e <AGV_waiting+0x19e>
					on_task_decisions[0] = 'L';
 8001520:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <AGV_waiting+0x248>)
 8001522:	224c      	movs	r2, #76	@ 0x4c
 8001524:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 8001526:	4b30      	ldr	r3, [pc, #192]	@ (80015e8 <AGV_waiting+0x248>)
 8001528:	224c      	movs	r2, #76	@ 0x4c
 800152a:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <AGV_waiting+0x248>)
 800152e:	2245      	movs	r2, #69	@ 0x45
 8001530:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <AGV_waiting+0x248>)
 8001534:	2245      	movs	r2, #69	@ 0x45
 8001536:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001538:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <AGV_waiting+0x248>)
 800153a:	2245      	movs	r2, #69	@ 0x45
 800153c:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 3){
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <AGV_waiting+0x23c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d138      	bne.n	80015b8 <AGV_waiting+0x218>
				if(Target_Station == 0){
 8001546:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <AGV_waiting+0x238>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10e      	bne.n	800156c <AGV_waiting+0x1cc>
					on_task_decisions[0] = 'R';
 800154e:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <AGV_waiting+0x248>)
 8001550:	2252      	movs	r2, #82	@ 0x52
 8001552:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <AGV_waiting+0x248>)
 8001556:	2246      	movs	r2, #70	@ 0x46
 8001558:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'F';
 800155a:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <AGV_waiting+0x248>)
 800155c:	2246      	movs	r2, #70	@ 0x46
 800155e:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'R';
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <AGV_waiting+0x248>)
 8001562:	2252      	movs	r2, #82	@ 0x52
 8001564:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <AGV_waiting+0x248>)
 8001568:	2245      	movs	r2, #69	@ 0x45
 800156a:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 1){
 800156c:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <AGV_waiting+0x238>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10e      	bne.n	8001592 <AGV_waiting+0x1f2>
					on_task_decisions[0] = 'R';
 8001574:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <AGV_waiting+0x248>)
 8001576:	2252      	movs	r2, #82	@ 0x52
 8001578:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <AGV_waiting+0x248>)
 800157c:	2246      	movs	r2, #70	@ 0x46
 800157e:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'R';
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <AGV_waiting+0x248>)
 8001582:	2252      	movs	r2, #82	@ 0x52
 8001584:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <AGV_waiting+0x248>)
 8001588:	2245      	movs	r2, #69	@ 0x45
 800158a:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <AGV_waiting+0x248>)
 800158e:	2245      	movs	r2, #69	@ 0x45
 8001590:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <AGV_waiting+0x238>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d10e      	bne.n	80015b8 <AGV_waiting+0x218>
					on_task_decisions[0] = 'R';
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <AGV_waiting+0x248>)
 800159c:	2252      	movs	r2, #82	@ 0x52
 800159e:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <AGV_waiting+0x248>)
 80015a2:	2252      	movs	r2, #82	@ 0x52
 80015a4:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <AGV_waiting+0x248>)
 80015a8:	2245      	movs	r2, #69	@ 0x45
 80015aa:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <AGV_waiting+0x248>)
 80015ae:	2245      	movs	r2, #69	@ 0x45
 80015b0:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <AGV_waiting+0x248>)
 80015b4:	2245      	movs	r2, #69	@ 0x45
 80015b6:	711a      	strb	r2, [r3, #4]
				}
			}

		}
	}
	if(Target_Station != Current_Station){
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <AGV_waiting+0x238>)
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <AGV_waiting+0x23c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d003      	beq.n	80015cc <AGV_waiting+0x22c>
		On_Task = 0xF11F;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <AGV_waiting+0x240>)
 80015c6:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80015ca:	801a      	strh	r2, [r3, #0]
	}
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	24000697 	.word	0x24000697
 80015dc:	24000696 	.word	0x24000696
 80015e0:	2400005e 	.word	0x2400005e
 80015e4:	24000695 	.word	0x24000695
 80015e8:	24000060 	.word	0x24000060

080015ec <AGV_Turn_Detection_Completion>:

void AGV_Turn_Detection_Completion(volatile uint16_t *sensor_calibrated_values,
								   volatile uint8_t  *sensor_middle_on_line_number,
								   volatile uint8_t  *sensor_total_on_line_number,
								   	   	   	uint8_t  *decision_array,
											uint16_t *orientation){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
#define first_timer_buffer 600
#define second_timer_buffer 300
#define skip_turn_timer_buffer 200
#define base_speed 50

	uint8_t _turn_decide = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	75fb      	strb	r3, [r7, #23]

	if((*sensor_middle_on_line_number >= 3) && (*sensor_middle_on_line_number <= 6)){
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	f240 80d0 	bls.w	80017aa <AGV_Turn_Detection_Completion+0x1be>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b06      	cmp	r3, #6
 8001612:	f200 80ca 	bhi.w	80017aa <AGV_Turn_Detection_Completion+0x1be>
		if(((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold)) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3310      	adds	r3, #16
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001622:	d906      	bls.n	8001632 <AGV_Turn_Detection_Completion+0x46>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3312      	adds	r3, #18
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001630:	d80e      	bhi.n	8001650 <AGV_Turn_Detection_Completion+0x64>
			((sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold))){
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
		if(((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold)) ||
 8001638:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800163c:	f240 80b5 	bls.w	80017aa <AGV_Turn_Detection_Completion+0x1be>
			((sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold))){
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3302      	adds	r3, #2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800164c:	f240 80ad 	bls.w	80017aa <AGV_Turn_Detection_Completion+0x1be>

			HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001656:	4886      	ldr	r0, [pc, #536]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 8001658:	f007 fb2e 	bl	8008cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001662:	4883      	ldr	r0, [pc, #524]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 8001664:	f007 fb28 	bl	8008cb8 <HAL_GPIO_WritePin>

			PID_Forward_Rotation(base_speed, base_speed, orientation);
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	2132      	movs	r1, #50	@ 0x32
 800166c:	2032      	movs	r0, #50	@ 0x32
 800166e:	f7ff fd7b 	bl	8001168 <PID_Forward_Rotation>
			HAL_Delay(first_timer_buffer);
 8001672:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001676:	f002 f94d 	bl	8003914 <HAL_Delay>
			PID_Motor_All_Break();
 800167a:	f7ff fe6d 	bl	8001358 <PID_Motor_All_Break>

			HAL_Delay(1000);
 800167e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001682:	f002 f947 	bl	8003914 <HAL_Delay>

			agv_turn_count += 1;
 8001686:	4b7b      	ldr	r3, [pc, #492]	@ (8001874 <AGV_Turn_Detection_Completion+0x288>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b79      	ldr	r3, [pc, #484]	@ (8001874 <AGV_Turn_Detection_Completion+0x288>)
 8001690:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8001692:	2180      	movs	r1, #128	@ 0x80
 8001694:	4878      	ldr	r0, [pc, #480]	@ (8001878 <AGV_Turn_Detection_Completion+0x28c>)
 8001696:	f007 fb28 	bl	8008cea <HAL_GPIO_TogglePin>

			if(decision_array[agv_turn_count - 1] == 'L'){
 800169a:	4b76      	ldr	r3, [pc, #472]	@ (8001874 <AGV_Turn_Detection_Completion+0x288>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	3b01      	subs	r3, #1
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b4c      	cmp	r3, #76	@ 0x4c
 80016a8:	d110      	bne.n	80016cc <AGV_Turn_Detection_Completion+0xe0>

				PID_Motor_Turn_Left(base_speed, orientation);
 80016aa:	6a39      	ldr	r1, [r7, #32]
 80016ac:	2032      	movs	r0, #50	@ 0x32
 80016ae:	f7ff fdaf 	bl	8001210 <PID_Motor_Turn_Left>
				HAL_Delay(second_timer_buffer);
 80016b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016b6:	f002 f92d 	bl	8003914 <HAL_Delay>
				PID_Motor_All_Break();
 80016ba:	f7ff fe4d 	bl	8001358 <PID_Motor_All_Break>

				HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c2:	f002 f927 	bl	8003914 <HAL_Delay>

				_turn_decide = 'L';
 80016c6:	234c      	movs	r3, #76	@ 0x4c
 80016c8:	75fb      	strb	r3, [r7, #23]
 80016ca:	e036      	b.n	800173a <AGV_Turn_Detection_Completion+0x14e>
			}
			else if(decision_array[agv_turn_count - 1] == 'R'){
 80016cc:	4b69      	ldr	r3, [pc, #420]	@ (8001874 <AGV_Turn_Detection_Completion+0x288>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b52      	cmp	r3, #82	@ 0x52
 80016da:	d110      	bne.n	80016fe <AGV_Turn_Detection_Completion+0x112>

				PID_Motor_Turn_Right(base_speed, orientation);
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	2032      	movs	r0, #50	@ 0x32
 80016e0:	f7ff fde8 	bl	80012b4 <PID_Motor_Turn_Right>
				HAL_Delay(second_timer_buffer);
 80016e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016e8:	f002 f914 	bl	8003914 <HAL_Delay>
				PID_Motor_All_Break();
 80016ec:	f7ff fe34 	bl	8001358 <PID_Motor_All_Break>

				HAL_Delay(1000);
 80016f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016f4:	f002 f90e 	bl	8003914 <HAL_Delay>

				_turn_decide = 'R';
 80016f8:	2352      	movs	r3, #82	@ 0x52
 80016fa:	75fb      	strb	r3, [r7, #23]
 80016fc:	e01d      	b.n	800173a <AGV_Turn_Detection_Completion+0x14e>
			}

			else if(decision_array[agv_turn_count - 1] == 'F'){
 80016fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001874 <AGV_Turn_Detection_Completion+0x288>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b46      	cmp	r3, #70	@ 0x46
 800170c:	d115      	bne.n	800173a <AGV_Turn_Detection_Completion+0x14e>

				PID_Forward_Rotation(base_speed, base_speed, orientation);
 800170e:	6a3a      	ldr	r2, [r7, #32]
 8001710:	2132      	movs	r1, #50	@ 0x32
 8001712:	2032      	movs	r0, #50	@ 0x32
 8001714:	f7ff fd28 	bl	8001168 <PID_Forward_Rotation>
				HAL_Delay(skip_turn_timer_buffer);
 8001718:	20c8      	movs	r0, #200	@ 0xc8
 800171a:	f002 f8fb 	bl	8003914 <HAL_Delay>
				_turn_decide = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
				HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001728:	4851      	ldr	r0, [pc, #324]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 800172a:	f007 fac5 	bl	8008cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001734:	484e      	ldr	r0, [pc, #312]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 8001736:	f007 fabf 	bl	8008cb8 <HAL_GPIO_WritePin>
			}
			if(decision_array[agv_turn_count - 1] == 'E'){
 800173a:	4b4e      	ldr	r3, [pc, #312]	@ (8001874 <AGV_Turn_Detection_Completion+0x288>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b45      	cmp	r3, #69	@ 0x45
 8001748:	d12f      	bne.n	80017aa <AGV_Turn_Detection_Completion+0x1be>


				PID_Motor_All_Break();
 800174a:	f7ff fe05 	bl	8001358 <PID_Motor_All_Break>

				Current_Station = Target_Station;
 800174e:	4b4b      	ldr	r3, [pc, #300]	@ (800187c <AGV_Turn_Detection_Completion+0x290>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	4b4b      	ldr	r3, [pc, #300]	@ (8001880 <AGV_Turn_Detection_Completion+0x294>)
 8001754:	701a      	strb	r2, [r3, #0]

				On_Task = 0xF00F;
 8001756:	4b4b      	ldr	r3, [pc, #300]	@ (8001884 <AGV_Turn_Detection_Completion+0x298>)
 8001758:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800175c:	801a      	strh	r2, [r3, #0]

				if(agv_orientation == 0xF00F){
 800175e:	4b4a      	ldr	r3, [pc, #296]	@ (8001888 <AGV_Turn_Detection_Completion+0x29c>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001766:	4293      	cmp	r3, r2
 8001768:	d104      	bne.n	8001774 <AGV_Turn_Detection_Completion+0x188>
					agv_orientation = 0xF11F;
 800176a:	4b47      	ldr	r3, [pc, #284]	@ (8001888 <AGV_Turn_Detection_Completion+0x29c>)
 800176c:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	e009      	b.n	8001788 <AGV_Turn_Detection_Completion+0x19c>
				}
				else if(agv_orientation == 0xF11F){
 8001774:	4b44      	ldr	r3, [pc, #272]	@ (8001888 <AGV_Turn_Detection_Completion+0x29c>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 800177c:	4293      	cmp	r3, r2
 800177e:	d103      	bne.n	8001788 <AGV_Turn_Detection_Completion+0x19c>
					agv_orientation = 0xF00F;
 8001780:	4b41      	ldr	r3, [pc, #260]	@ (8001888 <AGV_Turn_Detection_Completion+0x29c>)
 8001782:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001786:	801a      	strh	r2, [r3, #0]
				}

				_turn_decide = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	75fb      	strb	r3, [r7, #23]
				agv_turn_count = 0;
 800178c:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <AGV_Turn_Detection_Completion+0x288>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001798:	4835      	ldr	r0, [pc, #212]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 800179a:	f007 fa8d 	bl	8008cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a4:	4832      	ldr	r0, [pc, #200]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 80017a6:	f007 fa87 	bl	8008cb8 <HAL_GPIO_WritePin>

		}
	}


	Line_Sensor_Calculation(&front_array);
 80017aa:	4838      	ldr	r0, [pc, #224]	@ (800188c <AGV_Turn_Detection_Completion+0x2a0>)
 80017ac:	f7ff fb0f 	bl	8000dce <Line_Sensor_Calculation>
	Line_Sensor_Calculation(&back_array);
 80017b0:	4837      	ldr	r0, [pc, #220]	@ (8001890 <AGV_Turn_Detection_Completion+0x2a4>)
 80017b2:	f7ff fb0c 	bl	8000dce <Line_Sensor_Calculation>

	if(_turn_decide == 'L'){
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b4c      	cmp	r3, #76	@ 0x4c
 80017ba:	d129      	bne.n	8001810 <AGV_Turn_Detection_Completion+0x224>
		while((sensor_calibrated_values[5] < white_detection_thresh_hold) || (sensor_calibrated_values[6] < white_detection_thresh_hold)){
 80017bc:	e009      	b.n	80017d2 <AGV_Turn_Detection_Completion+0x1e6>
			  Line_Sensor_Calculation(&front_array);
 80017be:	4833      	ldr	r0, [pc, #204]	@ (800188c <AGV_Turn_Detection_Completion+0x2a0>)
 80017c0:	f7ff fb05 	bl	8000dce <Line_Sensor_Calculation>
			  Line_Sensor_Calculation(&back_array);
 80017c4:	4832      	ldr	r0, [pc, #200]	@ (8001890 <AGV_Turn_Detection_Completion+0x2a4>)
 80017c6:	f7ff fb02 	bl	8000dce <Line_Sensor_Calculation>

			PID_Motor_Turn_Left(base_speed, orientation);
 80017ca:	6a39      	ldr	r1, [r7, #32]
 80017cc:	2032      	movs	r0, #50	@ 0x32
 80017ce:	f7ff fd1f 	bl	8001210 <PID_Motor_Turn_Left>
		while((sensor_calibrated_values[5] < white_detection_thresh_hold) || (sensor_calibrated_values[6] < white_detection_thresh_hold)){
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	330a      	adds	r3, #10
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017de:	d3ee      	bcc.n	80017be <AGV_Turn_Detection_Completion+0x1d2>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	330c      	adds	r3, #12
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017ec:	d3e7      	bcc.n	80017be <AGV_Turn_Detection_Completion+0x1d2>
		}
		PID_Motor_All_Break();
 80017ee:	f7ff fdb3 	bl	8001358 <PID_Motor_All_Break>
		_turn_decide = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017fc:	481c      	ldr	r0, [pc, #112]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 80017fe:	f007 fa5b 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001808:	4819      	ldr	r0, [pc, #100]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 800180a:	f007 fa55 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
		HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
	}


}
 800180e:	e02b      	b.n	8001868 <AGV_Turn_Detection_Completion+0x27c>
	else if(_turn_decide == 'R'){
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b52      	cmp	r3, #82	@ 0x52
 8001814:	d128      	bne.n	8001868 <AGV_Turn_Detection_Completion+0x27c>
		while((sensor_calibrated_values[6] < white_detection_thresh_hold) || (sensor_calibrated_values[5] < white_detection_thresh_hold)){
 8001816:	e009      	b.n	800182c <AGV_Turn_Detection_Completion+0x240>
			  Line_Sensor_Calculation(&front_array);
 8001818:	481c      	ldr	r0, [pc, #112]	@ (800188c <AGV_Turn_Detection_Completion+0x2a0>)
 800181a:	f7ff fad8 	bl	8000dce <Line_Sensor_Calculation>
			  Line_Sensor_Calculation(&back_array);
 800181e:	481c      	ldr	r0, [pc, #112]	@ (8001890 <AGV_Turn_Detection_Completion+0x2a4>)
 8001820:	f7ff fad5 	bl	8000dce <Line_Sensor_Calculation>
			PID_Motor_Turn_Right(base_speed, orientation);
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	2032      	movs	r0, #50	@ 0x32
 8001828:	f7ff fd44 	bl	80012b4 <PID_Motor_Turn_Right>
		while((sensor_calibrated_values[6] < white_detection_thresh_hold) || (sensor_calibrated_values[5] < white_detection_thresh_hold)){
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	330c      	adds	r3, #12
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001838:	d3ee      	bcc.n	8001818 <AGV_Turn_Detection_Completion+0x22c>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	330a      	adds	r3, #10
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001846:	d3e7      	bcc.n	8001818 <AGV_Turn_Detection_Completion+0x22c>
		PID_Motor_All_Break();
 8001848:	f7ff fd86 	bl	8001358 <PID_Motor_All_Break>
		_turn_decide = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 8001858:	f007 fa2e 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001862:	4803      	ldr	r0, [pc, #12]	@ (8001870 <AGV_Turn_Detection_Completion+0x284>)
 8001864:	f007 fa28 	bl	8008cb8 <HAL_GPIO_WritePin>
}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	58020c00 	.word	0x58020c00
 8001874:	24000694 	.word	0x24000694
 8001878:	58021800 	.word	0x58021800
 800187c:	24000697 	.word	0x24000697
 8001880:	24000696 	.word	0x24000696
 8001884:	2400005e 	.word	0x2400005e
 8001888:	24000050 	.word	0x24000050
 800188c:	240005a4 	.word	0x240005a4
 8001890:	2400060c 	.word	0x2400060c

08001894 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d102      	bne.n	80018aa <HAL_GPIO_EXTI_Callback+0x16>
		Station = 1;
 80018a4:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x74>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d102      	bne.n	80018b6 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 2;
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x74>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d102      	bne.n	80018c2 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 3;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x74>)
 80018be:	2203      	movs	r2, #3
 80018c0:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d102      	bne.n	80018ce <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 0;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2b10      	cmp	r3, #16
 80018d2:	d103      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 80018d4:	2180      	movs	r1, #128	@ 0x80
 80018d6:	480d      	ldr	r0, [pc, #52]	@ (800190c <HAL_GPIO_EXTI_Callback+0x78>)
 80018d8:	f007 fa07 	bl	8008cea <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018de:	8a9b      	ldrh	r3, [r3, #20]
 80018e0:	88fa      	ldrh	r2, [r7, #6]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d10b      	bne.n	80018fe <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	490a      	ldr	r1, [pc, #40]	@ (8001914 <HAL_GPIO_EXTI_Callback+0x80>)
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018ec:	f7ff f903 	bl	8000af6 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 80018f0:	2140      	movs	r1, #64	@ 0x40
 80018f2:	4809      	ldr	r0, [pc, #36]	@ (8001918 <HAL_GPIO_EXTI_Callback+0x84>)
 80018f4:	f007 f9f9 	bl	8008cea <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <HAL_GPIO_EXTI_Callback+0x88>)
 80018fa:	22ff      	movs	r2, #255	@ 0xff
 80018fc:	701a      	strb	r2, [r3, #0]

	}
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24000695 	.word	0x24000695
 800190c:	58021800 	.word	0x58021800
 8001910:	24000698 	.word	0x24000698
 8001914:	24000748 	.word	0x24000748
 8001918:	58020c00 	.word	0x58020c00
 800191c:	240007c8 	.word	0x240007c8

08001920 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;

//	rs485_fail_check = 0;
	if(huart->Instance == USART1){
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_UARTEx_RxEventCallback+0x34>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <HAL_UARTEx_RxEventCallback+0x1c>
		rs485_UART_receive_handler(&m1_driver);
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <HAL_UARTEx_RxEventCallback+0x38>)
 8001938:	f001 fa39 	bl	8002dae <rs485_UART_receive_handler>
	}
	if(huart->Instance == USART3){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a06      	ldr	r2, [pc, #24]	@ (800195c <HAL_UARTEx_RxEventCallback+0x3c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d102      	bne.n	800194c <HAL_UARTEx_RxEventCallback+0x2c>
		rs485_UART_receive_handler(&m2_driver);
 8001946:	4806      	ldr	r0, [pc, #24]	@ (8001960 <HAL_UARTEx_RxEventCallback+0x40>)
 8001948:	f001 fa31 	bl	8002dae <rs485_UART_receive_handler>
	}
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40011000 	.word	0x40011000
 8001958:	240004f8 	.word	0x240004f8
 800195c:	40004800 	.word	0x40004800
 8001960:	24000530 	.word	0x24000530

08001964 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3){
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d102      	bne.n	800197c <HAL_TIM_PeriodElapsedCallback+0x18>
    	rs485_connection_lost_handler(&m1_driver);
 8001976:	4808      	ldr	r0, [pc, #32]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001978:	f001 fa3e 	bl	8002df8 <rs485_connection_lost_handler>

    }
    if(htim->Instance == TIM4){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a06      	ldr	r2, [pc, #24]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <HAL_TIM_PeriodElapsedCallback+0x28>
    	rs485_connection_lost_handler(&m2_driver);
 8001986:	4806      	ldr	r0, [pc, #24]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001988:	f001 fa36 	bl	8002df8 <rs485_connection_lost_handler>

    }
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40000400 	.word	0x40000400
 8001998:	240004f8 	.word	0x240004f8
 800199c:	40000800 	.word	0x40000800
 80019a0:	24000530 	.word	0x24000530

080019a4 <debug_led>:

void debug_led(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	if(agv_orientation == 0xF00F){
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <debug_led+0x9c>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10c      	bne.n	80019ce <debug_led+0x2a>
		HAL_GPIO_WritePin(ORIENTATION_LED_GREEN_GPIO_Port, ORIENTATION_LED_GREEN_Pin, SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ba:	4822      	ldr	r0, [pc, #136]	@ (8001a44 <debug_led+0xa0>)
 80019bc:	f007 f97c 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORIENTATION_LED_RED_GPIO_Port, ORIENTATION_LED_RED_Pin, RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019c6:	481f      	ldr	r0, [pc, #124]	@ (8001a44 <debug_led+0xa0>)
 80019c8:	f007 f976 	bl	8008cb8 <HAL_GPIO_WritePin>
 80019cc:	e011      	b.n	80019f2 <debug_led+0x4e>
	}
	else if(agv_orientation == 0xF11F){
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <debug_led+0x9c>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10b      	bne.n	80019f2 <debug_led+0x4e>
		HAL_GPIO_WritePin(ORIENTATION_LED_GREEN_GPIO_Port, ORIENTATION_LED_GREEN_Pin, RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e0:	4818      	ldr	r0, [pc, #96]	@ (8001a44 <debug_led+0xa0>)
 80019e2:	f007 f969 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORIENTATION_LED_RED_GPIO_Port, ORIENTATION_LED_RED_Pin, SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019ec:	4815      	ldr	r0, [pc, #84]	@ (8001a44 <debug_led+0xa0>)
 80019ee:	f007 f963 	bl	8008cb8 <HAL_GPIO_WritePin>
	}

	if(On_Task == 0xF11F){
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <debug_led+0xa4>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10c      	bne.n	8001a18 <debug_led+0x74>
		HAL_GPIO_WritePin(ONTASK_LED_GREEN_GPIO_Port, ONTASK_LED_GREEN_Pin, SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a04:	480f      	ldr	r0, [pc, #60]	@ (8001a44 <debug_led+0xa0>)
 8001a06:	f007 f957 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ONTASK_LED_RED_GPIO_Port, ONTASK_LED_RED_Pin, RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <debug_led+0xa0>)
 8001a12:	f007 f951 	bl	8008cb8 <HAL_GPIO_WritePin>
	}
	else if(On_Task == 0xF00F){
		HAL_GPIO_WritePin(ONTASK_LED_GREEN_GPIO_Port, ONTASK_LED_GREEN_Pin, RESET);
		HAL_GPIO_WritePin(ONTASK_LED_RED_GPIO_Port, ONTASK_LED_RED_Pin, SET);
	}
}
 8001a16:	e011      	b.n	8001a3c <debug_led+0x98>
	else if(On_Task == 0xF00F){
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <debug_led+0xa4>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d10b      	bne.n	8001a3c <debug_led+0x98>
		HAL_GPIO_WritePin(ONTASK_LED_GREEN_GPIO_Port, ONTASK_LED_GREEN_Pin, RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a2a:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <debug_led+0xa0>)
 8001a2c:	f007 f944 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ONTASK_LED_RED_GPIO_Port, ONTASK_LED_RED_Pin, SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a36:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <debug_led+0xa0>)
 8001a38:	f007 f93e 	bl	8008cb8 <HAL_GPIO_WritePin>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	24000050 	.word	0x24000050
 8001a44:	58020c00 	.word	0x58020c00
 8001a48:	2400005e 	.word	0x2400005e

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b094      	sub	sp, #80	@ 0x50
 8001a50:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a52:	f001 fecd 	bl	80037f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a56:	f000 f9eb 	bl	8001e30 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a5a:	f000 fa5b 	bl	8001f14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5e:	f000 fecf 	bl	8002800 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a62:	f000 fea5 	bl	80027b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a66:	f000 fa89 	bl	8001f7c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001a6a:	f000 fb99 	bl	80021a0 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001a6e:	f000 fe07 	bl	8002680 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001a72:	f000 fcf1 	bl	8002458 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001a76:	f000 fc99 	bl	80023ac <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001a7a:	f000 fe4d 	bl	8002718 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001a7e:	f000 fd5f 	bl	8002540 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a82:	f000 fdad 	bl	80025e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  m1_driver.rs485_id = 0x01;
 8001a86:	4ba1      	ldr	r3, [pc, #644]	@ (8001d0c <main+0x2c0>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
  m1_driver.rs485_huart = &huart1;
 8001a8c:	4b9f      	ldr	r3, [pc, #636]	@ (8001d0c <main+0x2c0>)
 8001a8e:	4aa0      	ldr	r2, [pc, #640]	@ (8001d10 <main+0x2c4>)
 8001a90:	615a      	str	r2, [r3, #20]
  m1_driver.rs485_timer = &htim3;
 8001a92:	4b9e      	ldr	r3, [pc, #632]	@ (8001d0c <main+0x2c0>)
 8001a94:	4a9f      	ldr	r2, [pc, #636]	@ (8001d14 <main+0x2c8>)
 8001a96:	619a      	str	r2, [r3, #24]
  m1_driver.rs485_enable_port = RS485_M1_TX_EN_GPIO_Port;
 8001a98:	4b9c      	ldr	r3, [pc, #624]	@ (8001d0c <main+0x2c0>)
 8001a9a:	4a9f      	ldr	r2, [pc, #636]	@ (8001d18 <main+0x2cc>)
 8001a9c:	605a      	str	r2, [r3, #4]
  m1_driver.rs485_enable_pin = RS485_M1_TX_EN_Pin;
 8001a9e:	4b9b      	ldr	r3, [pc, #620]	@ (8001d0c <main+0x2c0>)
 8001aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa4:	811a      	strh	r2, [r3, #8]
  m1_driver.rs485_rx_led_port = RS485_M1_RX_LED_GPIO_Port;
 8001aa6:	4b99      	ldr	r3, [pc, #612]	@ (8001d0c <main+0x2c0>)
 8001aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d1c <main+0x2d0>)
 8001aaa:	60da      	str	r2, [r3, #12]
  m1_driver.rs485_rx_led_pin = RS485_M1_RX_LED_Pin;
 8001aac:	4b97      	ldr	r3, [pc, #604]	@ (8001d0c <main+0x2c0>)
 8001aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ab2:	821a      	strh	r2, [r3, #16]

  m2_driver.rs485_id = 0x02;
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	@ (8001d20 <main+0x2d4>)
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	701a      	strb	r2, [r3, #0]
  m2_driver.rs485_huart = &huart3;
 8001aba:	4b99      	ldr	r3, [pc, #612]	@ (8001d20 <main+0x2d4>)
 8001abc:	4a99      	ldr	r2, [pc, #612]	@ (8001d24 <main+0x2d8>)
 8001abe:	615a      	str	r2, [r3, #20]
  m2_driver.rs485_timer = &htim4;
 8001ac0:	4b97      	ldr	r3, [pc, #604]	@ (8001d20 <main+0x2d4>)
 8001ac2:	4a99      	ldr	r2, [pc, #612]	@ (8001d28 <main+0x2dc>)
 8001ac4:	619a      	str	r2, [r3, #24]
  m2_driver.rs485_enable_port = RS485_M2_TX_EN_GPIO_Port;
 8001ac6:	4b96      	ldr	r3, [pc, #600]	@ (8001d20 <main+0x2d4>)
 8001ac8:	4a98      	ldr	r2, [pc, #608]	@ (8001d2c <main+0x2e0>)
 8001aca:	605a      	str	r2, [r3, #4]
  m2_driver.rs485_enable_pin = RS485_M2_TX_EN_Pin;
 8001acc:	4b94      	ldr	r3, [pc, #592]	@ (8001d20 <main+0x2d4>)
 8001ace:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad2:	811a      	strh	r2, [r3, #8]
  m2_driver.rs485_rx_led_port = RS485_M2_RX_LED_GPIO_Port;
 8001ad4:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <main+0x2d4>)
 8001ad6:	4a90      	ldr	r2, [pc, #576]	@ (8001d18 <main+0x2cc>)
 8001ad8:	60da      	str	r2, [r3, #12]
  m2_driver.rs485_rx_led_pin = RS485_M2_RX_LED_Pin;
 8001ada:	4b91      	ldr	r3, [pc, #580]	@ (8001d20 <main+0x2d4>)
 8001adc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ae0:	821a      	strh	r2, [r3, #16]

  rs485_init(&m1_driver);
 8001ae2:	488a      	ldr	r0, [pc, #552]	@ (8001d0c <main+0x2c0>)
 8001ae4:	f001 f846 	bl	8002b74 <rs485_init>
  rs485_init(&m2_driver);
 8001ae8:	488d      	ldr	r0, [pc, #564]	@ (8001d20 <main+0x2d4>)
 8001aea:	f001 f843 	bl	8002b74 <rs485_init>

  rs485_enable_velocity_mode(&m1_driver);
 8001aee:	4887      	ldr	r0, [pc, #540]	@ (8001d0c <main+0x2c0>)
 8001af0:	f001 f8ef 	bl	8002cd2 <rs485_enable_velocity_mode>
  rs485_enable_velocity_mode(&m2_driver);
 8001af4:	488a      	ldr	r0, [pc, #552]	@ (8001d20 <main+0x2d4>)
 8001af6:	f001 f8ec 	bl	8002cd2 <rs485_enable_velocity_mode>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001afa:	2100      	movs	r1, #0
 8001afc:	488c      	ldr	r0, [pc, #560]	@ (8001d30 <main+0x2e4>)
 8001afe:	f00b fc5f 	bl	800d3c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001b02:	2104      	movs	r1, #4
 8001b04:	488a      	ldr	r0, [pc, #552]	@ (8001d30 <main+0x2e4>)
 8001b06:	f00b fc5b 	bl	800d3c0 <HAL_TIM_PWM_Start>




  myLoRa = newLoRa();
 8001b0a:	4c8a      	ldr	r4, [pc, #552]	@ (8001d34 <main+0x2e8>)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd74 	bl	80005fc <newLoRa>
 8001b14:	4625      	mov	r5, r4
 8001b16:	463c      	mov	r4, r7
 8001b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b24:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001b28:	4b82      	ldr	r3, [pc, #520]	@ (8001d34 <main+0x2e8>)
 8001b2a:	4a83      	ldr	r2, [pc, #524]	@ (8001d38 <main+0x2ec>)
 8001b2c:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8001b2e:	4b81      	ldr	r3, [pc, #516]	@ (8001d34 <main+0x2e8>)
 8001b30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b34:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001b36:	4b7f      	ldr	r3, [pc, #508]	@ (8001d34 <main+0x2e8>)
 8001b38:	4a7f      	ldr	r2, [pc, #508]	@ (8001d38 <main+0x2ec>)
 8001b3a:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8001b3c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d34 <main+0x2e8>)
 8001b3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b42:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 8001b44:	4b7b      	ldr	r3, [pc, #492]	@ (8001d34 <main+0x2e8>)
 8001b46:	4a7c      	ldr	r2, [pc, #496]	@ (8001d38 <main+0x2ec>)
 8001b48:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d34 <main+0x2e8>)
 8001b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b50:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001b52:	4b78      	ldr	r3, [pc, #480]	@ (8001d34 <main+0x2e8>)
 8001b54:	4a79      	ldr	r2, [pc, #484]	@ (8001d3c <main+0x2f0>)
 8001b56:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8001b58:	4b76      	ldr	r3, [pc, #472]	@ (8001d34 <main+0x2e8>)
 8001b5a:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001b5e:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001b60:	4b74      	ldr	r3, [pc, #464]	@ (8001d34 <main+0x2e8>)
 8001b62:	2207      	movs	r2, #7
 8001b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001b68:	4b72      	ldr	r3, [pc, #456]	@ (8001d34 <main+0x2e8>)
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001b70:	4b70      	ldr	r3, [pc, #448]	@ (8001d34 <main+0x2e8>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001b78:	4b6e      	ldr	r3, [pc, #440]	@ (8001d34 <main+0x2e8>)
 8001b7a:	22ff      	movs	r2, #255	@ 0xff
 8001b7c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8001b80:	4b6c      	ldr	r3, [pc, #432]	@ (8001d34 <main+0x2e8>)
 8001b82:	2264      	movs	r2, #100	@ 0x64
 8001b84:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001b88:	4b6a      	ldr	r3, [pc, #424]	@ (8001d34 <main+0x2e8>)
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001b8e:	4869      	ldr	r0, [pc, #420]	@ (8001d34 <main+0x2e8>)
 8001b90:	f7ff f811 	bl	8000bb6 <LoRa_init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b98:	d102      	bne.n	8001ba0 <main+0x154>
	  LoRa_stat = 1;
 8001b9a:	4b69      	ldr	r3, [pc, #420]	@ (8001d40 <main+0x2f4>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8001ba0:	4864      	ldr	r0, [pc, #400]	@ (8001d34 <main+0x2e8>)
 8001ba2:	f7fe ff9c 	bl	8000ade <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8001ba6:	4b67      	ldr	r3, [pc, #412]	@ (8001d44 <main+0x2f8>)
 8001ba8:	22aa      	movs	r2, #170	@ 0xaa
 8001baa:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8001bac:	4b65      	ldr	r3, [pc, #404]	@ (8001d44 <main+0x2f8>)
 8001bae:	22bb      	movs	r2, #187	@ 0xbb
 8001bb0:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 8001bb2:	4b64      	ldr	r3, [pc, #400]	@ (8001d44 <main+0x2f8>)
 8001bb4:	22cc      	movs	r2, #204	@ 0xcc
 8001bb6:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 8001bb8:	230a      	movs	r3, #10
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4962      	ldr	r1, [pc, #392]	@ (8001d48 <main+0x2fc>)
 8001bbe:	4863      	ldr	r0, [pc, #396]	@ (8001d4c <main+0x300>)
 8001bc0:	f002 fbd6 	bl	8004370 <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 8001bc4:	4b62      	ldr	r3, [pc, #392]	@ (8001d50 <main+0x304>)
 8001bc6:	9307      	str	r3, [sp, #28]
 8001bc8:	4b62      	ldr	r3, [pc, #392]	@ (8001d54 <main+0x308>)
 8001bca:	9306      	str	r3, [sp, #24]
 8001bcc:	4b62      	ldr	r3, [pc, #392]	@ (8001d58 <main+0x30c>)
 8001bce:	9305      	str	r3, [sp, #20]
 8001bd0:	4b62      	ldr	r3, [pc, #392]	@ (8001d5c <main+0x310>)
 8001bd2:	9304      	str	r3, [sp, #16]
 8001bd4:	4b62      	ldr	r3, [pc, #392]	@ (8001d60 <main+0x314>)
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	4b62      	ldr	r3, [pc, #392]	@ (8001d64 <main+0x318>)
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	4b62      	ldr	r3, [pc, #392]	@ (8001d68 <main+0x31c>)
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	4b62      	ldr	r3, [pc, #392]	@ (8001d6c <main+0x320>)
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b62      	ldr	r3, [pc, #392]	@ (8001d70 <main+0x324>)
 8001be6:	4a63      	ldr	r2, [pc, #396]	@ (8001d74 <main+0x328>)
 8001be8:	4963      	ldr	r1, [pc, #396]	@ (8001d78 <main+0x32c>)
 8001bea:	4857      	ldr	r0, [pc, #348]	@ (8001d48 <main+0x2fc>)
 8001bec:	f7ff f88a 	bl	8000d04 <ir_array_init>
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4961      	ldr	r1, [pc, #388]	@ (8001d7c <main+0x330>)
 8001bf6:	4862      	ldr	r0, [pc, #392]	@ (8001d80 <main+0x334>)
 8001bf8:	f002 fbba 	bl	8004370 <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 8001bfc:	4b61      	ldr	r3, [pc, #388]	@ (8001d84 <main+0x338>)
 8001bfe:	9307      	str	r3, [sp, #28]
 8001c00:	4b61      	ldr	r3, [pc, #388]	@ (8001d88 <main+0x33c>)
 8001c02:	9306      	str	r3, [sp, #24]
 8001c04:	4b61      	ldr	r3, [pc, #388]	@ (8001d8c <main+0x340>)
 8001c06:	9305      	str	r3, [sp, #20]
 8001c08:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <main+0x344>)
 8001c0a:	9304      	str	r3, [sp, #16]
 8001c0c:	4b61      	ldr	r3, [pc, #388]	@ (8001d94 <main+0x348>)
 8001c0e:	9303      	str	r3, [sp, #12]
 8001c10:	4b61      	ldr	r3, [pc, #388]	@ (8001d98 <main+0x34c>)
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	4b61      	ldr	r3, [pc, #388]	@ (8001d9c <main+0x350>)
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	4b61      	ldr	r3, [pc, #388]	@ (8001da0 <main+0x354>)
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	4b61      	ldr	r3, [pc, #388]	@ (8001da4 <main+0x358>)
 8001c1e:	4a62      	ldr	r2, [pc, #392]	@ (8001da8 <main+0x35c>)
 8001c20:	4962      	ldr	r1, [pc, #392]	@ (8001dac <main+0x360>)
 8001c22:	4856      	ldr	r0, [pc, #344]	@ (8001d7c <main+0x330>)
 8001c24:	f7ff f86e 	bl	8000d04 <ir_array_init>
                &line_sensor_back_on_line_middle_number,
                &line_sensor_back_on_line_left_number,
                &line_sensor_back_on_line_right_number,
                &line_sensor_back_threshold);

  Line_Sensor_Calculation(&front_array);
 8001c28:	4847      	ldr	r0, [pc, #284]	@ (8001d48 <main+0x2fc>)
 8001c2a:	f7ff f8d0 	bl	8000dce <Line_Sensor_Calculation>
  Line_Sensor_Calculation(&back_array);
 8001c2e:	4853      	ldr	r0, [pc, #332]	@ (8001d7c <main+0x330>)
 8001c30:	f7ff f8cd 	bl	8000dce <Line_Sensor_Calculation>

  if((back_array.ir_sen_on_line_total_num >= 9) &&(front_array.ir_sen_on_line_total_num >= 1)){
 8001c34:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <main+0x330>)
 8001c36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d909      	bls.n	8001c54 <main+0x208>
 8001c40:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <main+0x2fc>)
 8001c42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <main+0x208>
	  agv_orientation = 0xF00F;
 8001c4c:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <main+0x364>)
 8001c4e:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001c52:	801a      	strh	r2, [r3, #0]
  }
  if((front_array.ir_sen_on_line_total_num >= 9) && (back_array.ir_sen_on_line_total_num >= 1)){
 8001c54:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <main+0x2fc>)
 8001c56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d909      	bls.n	8001c74 <main+0x228>
 8001c60:	4b46      	ldr	r3, [pc, #280]	@ (8001d7c <main+0x330>)
 8001c62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <main+0x228>
	  agv_orientation = 0xF11F;
 8001c6c:	4b50      	ldr	r3, [pc, #320]	@ (8001db0 <main+0x364>)
 8001c6e:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001c72:	801a      	strh	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c7a:	4828      	ldr	r0, [pc, #160]	@ (8001d1c <main+0x2d0>)
 8001c7c:	f007 f81c 	bl	8008cb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c86:	4825      	ldr	r0, [pc, #148]	@ (8001d1c <main+0x2d0>)
 8001c88:	f007 f816 	bl	8008cb8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  debug_led();
 8001c8c:	f7ff fe8a 	bl	80019a4 <debug_led>

//	  motor_enable_velocity_mode(0x01);
//	  motor_enable_velocity_mode(0x02);

//
	  rs485_set_speed(&m1_driver, 100, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2164      	movs	r1, #100	@ 0x64
 8001c94:	481d      	ldr	r0, [pc, #116]	@ (8001d0c <main+0x2c0>)
 8001c96:	f000 ffc4 	bl	8002c22 <rs485_set_speed>
	  rs485_set_speed(&m2_driver, 10, 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	210a      	movs	r1, #10
 8001c9e:	4820      	ldr	r0, [pc, #128]	@ (8001d20 <main+0x2d4>)
 8001ca0:	f000 ffbf 	bl	8002c22 <rs485_set_speed>
//	  PID_Motor_All_Break();
//	  HAL_Delay(2000);



	  	  if(On_Task == 0xF11F){
 8001ca4:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <main+0x368>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001cac:	4293      	cmp	r3, r2
 8001cae:	f040 80a5 	bne.w	8001dfc <main+0x3b0>
	 		  if(agv_orientation == 0xF00F){
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001db0 <main+0x364>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d118      	bne.n	8001cf0 <main+0x2a4>

	 			  Line_Sensor_Calculation(&front_array);
 8001cbe:	4822      	ldr	r0, [pc, #136]	@ (8001d48 <main+0x2fc>)
 8001cc0:	f7ff f885 	bl	8000dce <Line_Sensor_Calculation>

				  AGV_Turn_Detection_Completion(front_array.ir_sen_val_cal,
 8001cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001db0 <main+0x364>)
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <main+0x36c>)
 8001cca:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <main+0x370>)
 8001ccc:	493c      	ldr	r1, [pc, #240]	@ (8001dc0 <main+0x374>)
 8001cce:	483d      	ldr	r0, [pc, #244]	@ (8001dc4 <main+0x378>)
 8001cd0:	f7ff fc8c 	bl	80015ec <AGV_Turn_Detection_Completion>
											   &front_array.ir_sen_on_line_mid_num,
											   &front_array.ir_sen_on_line_total_num,
												on_task_decisions,
											   &agv_orientation);

				  PID_control(&front_array.ir_sen_read_line_val, &agv_orientation);
 8001cd4:	4936      	ldr	r1, [pc, #216]	@ (8001db0 <main+0x364>)
 8001cd6:	483c      	ldr	r0, [pc, #240]	@ (8001dc8 <main+0x37c>)
 8001cd8:	f7ff f976 	bl	8000fc8 <PID_control>

				  PID_Forward_Rotation(pid_motor_speed_A, pid_motor_speed_B, &agv_orientation);
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <main+0x380>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd0 <main+0x384>)
 8001ce4:	8812      	ldrh	r2, [r2, #0]
 8001ce6:	b291      	uxth	r1, r2
 8001ce8:	4a31      	ldr	r2, [pc, #196]	@ (8001db0 <main+0x364>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fa3c 	bl	8001168 <PID_Forward_Rotation>


	  		  }
	  		  if(agv_orientation == 0xF11F){
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8001db0 <main+0x364>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d17f      	bne.n	8001dfc <main+0x3b0>

	  			  Line_Sensor_Calculation(&back_array);
 8001cfc:	481f      	ldr	r0, [pc, #124]	@ (8001d7c <main+0x330>)
 8001cfe:	f7ff f866 	bl	8000dce <Line_Sensor_Calculation>

				  AGV_Turn_Detection_Completion(back_array.ir_sen_val_cal,
 8001d02:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <main+0x364>)
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4b2c      	ldr	r3, [pc, #176]	@ (8001db8 <main+0x36c>)
 8001d08:	4a32      	ldr	r2, [pc, #200]	@ (8001dd4 <main+0x388>)
 8001d0a:	e065      	b.n	8001dd8 <main+0x38c>
 8001d0c:	240004f8 	.word	0x240004f8
 8001d10:	240003d0 	.word	0x240003d0
 8001d14:	24000338 	.word	0x24000338
 8001d18:	58020400 	.word	0x58020400
 8001d1c:	58020c00 	.word	0x58020c00
 8001d20:	24000530 	.word	0x24000530
 8001d24:	24000464 	.word	0x24000464
 8001d28:	24000384 	.word	0x24000384
 8001d2c:	58021000 	.word	0x58021000
 8001d30:	240002ec 	.word	0x240002ec
 8001d34:	24000698 	.word	0x24000698
 8001d38:	58021800 	.word	0x58021800
 8001d3c:	24000264 	.word	0x24000264
 8001d40:	240006c4 	.word	0x240006c4
 8001d44:	240006c8 	.word	0x240006c8
 8001d48:	240005a4 	.word	0x240005a4
 8001d4c:	24000094 	.word	0x24000094
 8001d50:	080111c2 	.word	0x080111c2
 8001d54:	2400059a 	.word	0x2400059a
 8001d58:	24000598 	.word	0x24000598
 8001d5c:	24000599 	.word	0x24000599
 8001d60:	2400059b 	.word	0x2400059b
 8001d64:	24000568 	.word	0x24000568
 8001d68:	240005a0 	.word	0x240005a0
 8001d6c:	080111c0 	.word	0x080111c0
 8001d70:	24000014 	.word	0x24000014
 8001d74:	24000000 	.word	0x24000000
 8001d78:	24000570 	.word	0x24000570
 8001d7c:	2400060c 	.word	0x2400060c
 8001d80:	24000104 	.word	0x24000104
 8001d84:	080111c4 	.word	0x080111c4
 8001d88:	2400059e 	.word	0x2400059e
 8001d8c:	2400059c 	.word	0x2400059c
 8001d90:	2400059d 	.word	0x2400059d
 8001d94:	2400059f 	.word	0x2400059f
 8001d98:	2400056c 	.word	0x2400056c
 8001d9c:	240005a2 	.word	0x240005a2
 8001da0:	080111c1 	.word	0x080111c1
 8001da4:	2400003c 	.word	0x2400003c
 8001da8:	24000028 	.word	0x24000028
 8001dac:	24000584 	.word	0x24000584
 8001db0:	24000050 	.word	0x24000050
 8001db4:	2400005e 	.word	0x2400005e
 8001db8:	24000060 	.word	0x24000060
 8001dbc:	240005fc 	.word	0x240005fc
 8001dc0:	240005fd 	.word	0x240005fd
 8001dc4:	240005b8 	.word	0x240005b8
 8001dc8:	240005f6 	.word	0x240005f6
 8001dcc:	24000690 	.word	0x24000690
 8001dd0:	24000692 	.word	0x24000692
 8001dd4:	24000664 	.word	0x24000664
 8001dd8:	490e      	ldr	r1, [pc, #56]	@ (8001e14 <main+0x3c8>)
 8001dda:	480f      	ldr	r0, [pc, #60]	@ (8001e18 <main+0x3cc>)
 8001ddc:	f7ff fc06 	bl	80015ec <AGV_Turn_Detection_Completion>
											   &back_array.ir_sen_on_line_mid_num,
											   &back_array.ir_sen_on_line_total_num,
												on_task_decisions,
											   &agv_orientation);

				  PID_control(&back_array.ir_sen_read_line_val, &agv_orientation);
 8001de0:	490e      	ldr	r1, [pc, #56]	@ (8001e1c <main+0x3d0>)
 8001de2:	480f      	ldr	r0, [pc, #60]	@ (8001e20 <main+0x3d4>)
 8001de4:	f7ff f8f0 	bl	8000fc8 <PID_control>

				  PID_Forward_Rotation(pid_motor_speed_A, pid_motor_speed_B, &agv_orientation);
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <main+0x3d8>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <main+0x3dc>)
 8001df0:	8812      	ldrh	r2, [r2, #0]
 8001df2:	b291      	uxth	r1, r2
 8001df4:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <main+0x3d0>)
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f9b6 	bl	8001168 <PID_Forward_Rotation>

	  		  }

	  	  }
	  	  if(On_Task == 0xF00F){
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <main+0x3e0>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001e04:	4293      	cmp	r3, r2
 8001e06:	f47f af41 	bne.w	8001c8c <main+0x240>
	  		  AGV_waiting();
 8001e0a:	f7ff fac9 	bl	80013a0 <AGV_waiting>
	  		  PID_Motor_All_Break();
 8001e0e:	f7ff faa3 	bl	8001358 <PID_Motor_All_Break>
	  debug_led();
 8001e12:	e73b      	b.n	8001c8c <main+0x240>
 8001e14:	24000665 	.word	0x24000665
 8001e18:	24000620 	.word	0x24000620
 8001e1c:	24000050 	.word	0x24000050
 8001e20:	2400065e 	.word	0x2400065e
 8001e24:	24000690 	.word	0x24000690
 8001e28:	24000692 	.word	0x24000692
 8001e2c:	2400005e 	.word	0x2400005e

08001e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b09c      	sub	sp, #112	@ 0x70
 8001e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3a:	224c      	movs	r2, #76	@ 0x4c
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00f f950 	bl	80110e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2220      	movs	r2, #32
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f00f f94a 	bl	80110e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e50:	2002      	movs	r0, #2
 8001e52:	f006 ff7f 	bl	8008d54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f10 <SystemClock_Config+0xe0>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f10 <SystemClock_Config+0xe0>)
 8001e60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <SystemClock_Config+0xe0>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e72:	bf00      	nop
 8001e74:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <SystemClock_Config+0xe0>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e80:	d1f8      	bne.n	8001e74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e82:	2303      	movs	r3, #3
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001e90:	2340      	movs	r3, #64	@ 0x40
 8001e92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e94:	2302      	movs	r3, #2
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001ea0:	232c      	movs	r3, #44	@ 0x2c
 8001ea2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f006 ff81 	bl	8008dc8 <HAL_RCC_OscConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001ecc:	f000 fe16 	bl	8002afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed0:	233f      	movs	r3, #63	@ 0x3f
 8001ed2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001edc:	2308      	movs	r3, #8
 8001ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ee0:	2340      	movs	r3, #64	@ 0x40
 8001ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ee4:	2340      	movs	r3, #64	@ 0x40
 8001ee6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ee8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001eee:	2340      	movs	r3, #64	@ 0x40
 8001ef0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f007 fb40 	bl	800957c <HAL_RCC_ClockConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001f02:	f000 fdfb 	bl	8002afc <Error_Handler>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3770      	adds	r7, #112	@ 0x70
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	58024800 	.word	0x58024800

08001f14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0ae      	sub	sp, #184	@ 0xb8
 8001f18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	22b8      	movs	r2, #184	@ 0xb8
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f00f f8df 	bl	80110e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8001f26:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <PeriphCommonClock_Config+0x64>)
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001f34:	230f      	movs	r3, #15
 8001f36:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f44:	23c0      	movs	r3, #192	@ 0xc0
 8001f46:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001f4c:	f640 3386 	movw	r3, #2950	@ 0xb86
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001f52:	2300      	movs	r3, #0
 8001f54:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f007 fe98 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001f6a:	f000 fdc7 	bl	8002afc <Error_Handler>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	37b8      	adds	r7, #184	@ 0xb8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	80080000 	.word	0x80080000

08001f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f8e:	463b      	mov	r3, r7
 8001f90:	2224      	movs	r2, #36	@ 0x24
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00f f8a5 	bl	80110e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f9a:	4b75      	ldr	r3, [pc, #468]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001f9c:	4a75      	ldr	r2, [pc, #468]	@ (8002174 <MX_ADC1_Init+0x1f8>)
 8001f9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fa0:	4b73      	ldr	r3, [pc, #460]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa6:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fa8:	2208      	movs	r2, #8
 8001faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fac:	4b70      	ldr	r3, [pc, #448]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fb8:	4b6d      	ldr	r3, [pc, #436]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fc6:	220a      	movs	r2, #10
 8001fc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fca:	4b69      	ldr	r3, [pc, #420]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd2:	4b67      	ldr	r3, [pc, #412]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd8:	4b65      	ldr	r3, [pc, #404]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001fde:	4b64      	ldr	r3, [pc, #400]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fe4:	4b62      	ldr	r3, [pc, #392]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fe6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001fec:	4b60      	ldr	r3, [pc, #384]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002000:	485b      	ldr	r0, [pc, #364]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8002002:	f001 ffad 	bl	8003f60 <HAL_ADC_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800200c:	f000 fd76 	bl	8002afc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4855      	ldr	r0, [pc, #340]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 800201c:	f003 fc7a 	bl	8005914 <HAL_ADCEx_MultiModeConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002026:	f000 fd69 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800202a:	4b53      	ldr	r3, [pc, #332]	@ (8002178 <MX_ADC1_Init+0x1fc>)
 800202c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800202e:	2306      	movs	r3, #6
 8002030:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8002032:	2305      	movs	r3, #5
 8002034:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002036:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800203a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800203c:	2304      	movs	r3, #4
 800203e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204a:	463b      	mov	r3, r7
 800204c:	4619      	mov	r1, r3
 800204e:	4848      	ldr	r0, [pc, #288]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8002050:	f002 fccc 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800205a:	f000 fd4f 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <MX_ADC1_Init+0x200>)
 8002060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002062:	230c      	movs	r3, #12
 8002064:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002066:	463b      	mov	r3, r7
 8002068:	4619      	mov	r1, r3
 800206a:	4841      	ldr	r0, [pc, #260]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 800206c:	f002 fcbe 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8002076:	f000 fd41 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800207a:	4b41      	ldr	r3, [pc, #260]	@ (8002180 <MX_ADC1_Init+0x204>)
 800207c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800207e:	2312      	movs	r3, #18
 8002080:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002082:	463b      	mov	r3, r7
 8002084:	4619      	mov	r1, r3
 8002086:	483a      	ldr	r0, [pc, #232]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8002088:	f002 fcb0 	bl	80049ec <HAL_ADC_ConfigChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8002092:	f000 fd33 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002096:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <MX_ADC1_Init+0x208>)
 8002098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800209a:	2318      	movs	r3, #24
 800209c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209e:	463b      	mov	r3, r7
 80020a0:	4619      	mov	r1, r3
 80020a2:	4833      	ldr	r0, [pc, #204]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 80020a4:	f002 fca2 	bl	80049ec <HAL_ADC_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80020ae:	f000 fd25 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020b2:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <MX_ADC1_Init+0x20c>)
 80020b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80020b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	482b      	ldr	r0, [pc, #172]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 80020c2:	f002 fc93 	bl	80049ec <HAL_ADC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80020cc:	f000 fd16 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020d0:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <MX_ADC1_Init+0x210>)
 80020d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80020d4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80020d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	4619      	mov	r1, r3
 80020de:	4824      	ldr	r0, [pc, #144]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 80020e0:	f002 fc84 	bl	80049ec <HAL_ADC_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80020ea:	f000 fd07 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <MX_ADC1_Init+0x214>)
 80020f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80020f2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80020f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	4619      	mov	r1, r3
 80020fc:	481c      	ldr	r0, [pc, #112]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 80020fe:	f002 fc75 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8002108:	f000 fcf8 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800210c:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <MX_ADC1_Init+0x218>)
 800210e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002110:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002114:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	4619      	mov	r1, r3
 800211a:	4815      	ldr	r0, [pc, #84]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 800211c:	f002 fc66 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8002126:	f000 fce9 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <MX_ADC1_Init+0x21c>)
 800212c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800212e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002132:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002134:	463b      	mov	r3, r7
 8002136:	4619      	mov	r1, r3
 8002138:	480d      	ldr	r0, [pc, #52]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 800213a:	f002 fc57 	bl	80049ec <HAL_ADC_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 8002144:	f000 fcda 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_ADC1_Init+0x220>)
 800214a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800214c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002150:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002152:	463b      	mov	r3, r7
 8002154:	4619      	mov	r1, r3
 8002156:	4806      	ldr	r0, [pc, #24]	@ (8002170 <MX_ADC1_Init+0x1f4>)
 8002158:	f002 fc48 	bl	80049ec <HAL_ADC_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8002162:	f000 fccb 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	3730      	adds	r7, #48	@ 0x30
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	24000094 	.word	0x24000094
 8002174:	40022000 	.word	0x40022000
 8002178:	08600004 	.word	0x08600004
 800217c:	0c900008 	.word	0x0c900008
 8002180:	10c00010 	.word	0x10c00010
 8002184:	14f00020 	.word	0x14f00020
 8002188:	19200040 	.word	0x19200040
 800218c:	1d500080 	.word	0x1d500080
 8002190:	21800100 	.word	0x21800100
 8002194:	25b00200 	.word	0x25b00200
 8002198:	2a000400 	.word	0x2a000400
 800219c:	2e300800 	.word	0x2e300800

080021a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	@ 0x28
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2224      	movs	r2, #36	@ 0x24
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00e ff99 	bl	80110e4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80021b2:	4b73      	ldr	r3, [pc, #460]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021b4:	4a73      	ldr	r2, [pc, #460]	@ (8002384 <MX_ADC3_Init+0x1e4>)
 80021b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80021b8:	4b71      	ldr	r3, [pc, #452]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80021be:	4b70      	ldr	r3, [pc, #448]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021c0:	2208      	movs	r2, #8
 80021c2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80021c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021d2:	2204      	movs	r2, #4
 80021d4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80021d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021d8:	2200      	movs	r2, #0
 80021da:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021de:	2201      	movs	r2, #1
 80021e0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 80021e2:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021e4:	220a      	movs	r2, #10
 80021e6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80021e8:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021f0:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021f6:	4b62      	ldr	r3, [pc, #392]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80021fc:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002204:	4b5e      	ldr	r3, [pc, #376]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 8002206:	2200      	movs	r2, #0
 8002208:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800220a:	4b5d      	ldr	r3, [pc, #372]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 800220c:	2203      	movs	r2, #3
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002210:	4b5b      	ldr	r3, [pc, #364]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 8002212:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002216:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002218:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800221e:	4b58      	ldr	r3, [pc, #352]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8002226:	4b56      	ldr	r3, [pc, #344]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 8002228:	2200      	movs	r2, #0
 800222a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800222c:	4854      	ldr	r0, [pc, #336]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 800222e:	f001 fe97 	bl	8003f60 <HAL_ADC_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8002238:	f000 fc60 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800223c:	2301      	movs	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002240:	2306      	movs	r3, #6
 8002242:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 8002244:	2305      	movs	r3, #5
 8002246:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002248:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800224c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800224e:	2304      	movs	r3, #4
 8002250:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4848      	ldr	r0, [pc, #288]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 8002260:	f002 fbc4 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800226a:	f000 fc47 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800226e:	4b46      	ldr	r3, [pc, #280]	@ (8002388 <MX_ADC3_Init+0x1e8>)
 8002270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002272:	230c      	movs	r3, #12
 8002274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4841      	ldr	r0, [pc, #260]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 800227c:	f002 fbb6 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8002286:	f000 fc39 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800228a:	4b40      	ldr	r3, [pc, #256]	@ (800238c <MX_ADC3_Init+0x1ec>)
 800228c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800228e:	2312      	movs	r3, #18
 8002290:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	4619      	mov	r1, r3
 8002296:	483a      	ldr	r0, [pc, #232]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 8002298:	f002 fba8 	bl	80049ec <HAL_ADC_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80022a2:	f000 fc2b 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <MX_ADC3_Init+0x1f0>)
 80022a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022aa:	2318      	movs	r3, #24
 80022ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4833      	ldr	r0, [pc, #204]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80022b4:	f002 fb9a 	bl	80049ec <HAL_ADC_ConfigChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 80022be:	f000 fc1d 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <MX_ADC3_Init+0x1f4>)
 80022c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80022c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	4619      	mov	r1, r3
 80022d0:	482b      	ldr	r0, [pc, #172]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80022d2:	f002 fb8b 	bl	80049ec <HAL_ADC_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 80022dc:	f000 fc0e 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <MX_ADC3_Init+0x1f8>)
 80022e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80022e4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80022e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4824      	ldr	r0, [pc, #144]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 80022f0:	f002 fb7c 	bl	80049ec <HAL_ADC_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 80022fa:	f000 fbff 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80022fe:	4b27      	ldr	r3, [pc, #156]	@ (800239c <MX_ADC3_Init+0x1fc>)
 8002300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002302:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8002306:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4619      	mov	r1, r3
 800230c:	481c      	ldr	r0, [pc, #112]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 800230e:	f002 fb6d 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 8002318:	f000 fbf0 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800231c:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <MX_ADC3_Init+0x200>)
 800231e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002320:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4815      	ldr	r0, [pc, #84]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 800232c:	f002 fb5e 	bl	80049ec <HAL_ADC_ConfigChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 8002336:	f000 fbe1 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800233a:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <MX_ADC3_Init+0x204>)
 800233c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800233e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002342:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4619      	mov	r1, r3
 8002348:	480d      	ldr	r0, [pc, #52]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 800234a:	f002 fb4f 	bl	80049ec <HAL_ADC_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 8002354:	f000 fbd2 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <MX_ADC3_Init+0x208>)
 800235a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800235c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002360:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4806      	ldr	r0, [pc, #24]	@ (8002380 <MX_ADC3_Init+0x1e0>)
 8002368:	f002 fb40 	bl	80049ec <HAL_ADC_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 8002372:	f000 fbc3 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	@ 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	24000104 	.word	0x24000104
 8002384:	58026000 	.word	0x58026000
 8002388:	04300002 	.word	0x04300002
 800238c:	08600004 	.word	0x08600004
 8002390:	0c900008 	.word	0x0c900008
 8002394:	10c00010 	.word	0x10c00010
 8002398:	14f00020 	.word	0x14f00020
 800239c:	19200040 	.word	0x19200040
 80023a0:	1d500080 	.word	0x1d500080
 80023a4:	21800100 	.word	0x21800100
 80023a8:	25b00200 	.word	0x25b00200

080023ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023b2:	4a28      	ldr	r2, [pc, #160]	@ (8002454 <MX_SPI1_Init+0xa8>)
 80023b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023c6:	2207      	movs	r2, #7
 80023c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023de:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023e0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80023e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ec:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80023f8:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <MX_SPI1_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <MX_SPI1_Init+0xa4>)
 8002400:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <MX_SPI1_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800240c:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <MX_SPI1_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <MX_SPI1_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002418:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <MX_SPI1_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <MX_SPI1_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <MX_SPI1_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <MX_SPI1_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002430:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <MX_SPI1_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <MX_SPI1_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800243c:	4804      	ldr	r0, [pc, #16]	@ (8002450 <MX_SPI1_Init+0xa4>)
 800243e:	f00a f80f 	bl	800c460 <HAL_SPI_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002448:	f000 fb58 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	24000264 	.word	0x24000264
 8002454:	40013000 	.word	0x40013000

08002458 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800246a:	463b      	mov	r3, r7
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <MX_TIM2_Init+0xe4>)
 800247e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1360;
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <MX_TIM2_Init+0xe4>)
 8002486:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 800248a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <MX_TIM2_Init+0xe4>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <MX_TIM2_Init+0xe4>)
 8002494:	2264      	movs	r2, #100	@ 0x64
 8002496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <MX_TIM2_Init+0xe4>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800249e:	4b27      	ldr	r3, [pc, #156]	@ (800253c <MX_TIM2_Init+0xe4>)
 80024a0:	2280      	movs	r2, #128	@ 0x80
 80024a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024a4:	4825      	ldr	r0, [pc, #148]	@ (800253c <MX_TIM2_Init+0xe4>)
 80024a6:	f00a ff33 	bl	800d310 <HAL_TIM_PWM_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80024b0:	f000 fb24 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	4619      	mov	r1, r3
 80024c2:	481e      	ldr	r0, [pc, #120]	@ (800253c <MX_TIM2_Init+0xe4>)
 80024c4:	f00c f820 	bl	800e508 <HAL_TIMEx_MasterConfigSynchronization>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80024ce:	f000 fb15 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d2:	2360      	movs	r3, #96	@ 0x60
 80024d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e2:	463b      	mov	r3, r7
 80024e4:	2200      	movs	r2, #0
 80024e6:	4619      	mov	r1, r3
 80024e8:	4814      	ldr	r0, [pc, #80]	@ (800253c <MX_TIM2_Init+0xe4>)
 80024ea:	f00b f98d 	bl	800d808 <HAL_TIM_PWM_ConfigChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80024f4:	f000 fb02 	bl	8002afc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <MX_TIM2_Init+0xe4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <MX_TIM2_Init+0xe4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0208 	bic.w	r2, r2, #8
 8002506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002508:	463b      	mov	r3, r7
 800250a:	2204      	movs	r2, #4
 800250c:	4619      	mov	r1, r3
 800250e:	480b      	ldr	r0, [pc, #44]	@ (800253c <MX_TIM2_Init+0xe4>)
 8002510:	f00b f97a 	bl	800d808 <HAL_TIM_PWM_ConfigChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800251a:	f000 faef 	bl	8002afc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800251e:	4b07      	ldr	r3, [pc, #28]	@ (800253c <MX_TIM2_Init+0xe4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <MX_TIM2_Init+0xe4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800252c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800252e:	4803      	ldr	r0, [pc, #12]	@ (800253c <MX_TIM2_Init+0xe4>)
 8002530:	f000 ff0e 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	@ 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	240002ec 	.word	0x240002ec

08002540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <MX_TIM3_Init+0x98>)
 8002560:	4a1e      	ldr	r2, [pc, #120]	@ (80025dc <MX_TIM3_Init+0x9c>)
 8002562:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8002564:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <MX_TIM3_Init+0x98>)
 8002566:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800256a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <MX_TIM3_Init+0x98>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 55000-1;
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <MX_TIM3_Init+0x98>)
 8002574:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8002578:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <MX_TIM3_Init+0x98>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002580:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <MX_TIM3_Init+0x98>)
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002586:	4814      	ldr	r0, [pc, #80]	@ (80025d8 <MX_TIM3_Init+0x98>)
 8002588:	f00a fde5 	bl	800d156 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002592:	f000 fab3 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800259a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <MX_TIM3_Init+0x98>)
 80025a4:	f00b fa44 	bl	800da30 <HAL_TIM_ConfigClockSource>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80025ae:	f000 faa5 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4806      	ldr	r0, [pc, #24]	@ (80025d8 <MX_TIM3_Init+0x98>)
 80025c0:	f00b ffa2 	bl	800e508 <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80025ca:	f000 fa97 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	24000338 	.word	0x24000338
 80025dc:	40000400 	.word	0x40000400

080025e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <MX_TIM4_Init+0x98>)
 8002600:	4a1e      	ldr	r2, [pc, #120]	@ (800267c <MX_TIM4_Init+0x9c>)
 8002602:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8002604:	4b1c      	ldr	r3, [pc, #112]	@ (8002678 <MX_TIM4_Init+0x98>)
 8002606:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800260a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <MX_TIM4_Init+0x98>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55000-1;
 8002612:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <MX_TIM4_Init+0x98>)
 8002614:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8002618:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <MX_TIM4_Init+0x98>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <MX_TIM4_Init+0x98>)
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002626:	4814      	ldr	r0, [pc, #80]	@ (8002678 <MX_TIM4_Init+0x98>)
 8002628:	f00a fd95 	bl	800d156 <HAL_TIM_Base_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002632:	f000 fa63 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4619      	mov	r1, r3
 8002642:	480d      	ldr	r0, [pc, #52]	@ (8002678 <MX_TIM4_Init+0x98>)
 8002644:	f00b f9f4 	bl	800da30 <HAL_TIM_ConfigClockSource>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800264e:	f000 fa55 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4806      	ldr	r0, [pc, #24]	@ (8002678 <MX_TIM4_Init+0x98>)
 8002660:	f00b ff52 	bl	800e508 <HAL_TIMEx_MasterConfigSynchronization>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800266a:	f000 fa47 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	24000384 	.word	0x24000384
 800267c:	40000800 	.word	0x40000800

08002680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002684:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 8002686:	4a23      	ldr	r2, [pc, #140]	@ (8002714 <MX_USART1_UART_Init+0x94>)
 8002688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800269e:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c2:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c8:	4811      	ldr	r0, [pc, #68]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026ca:	f00b ffd7 	bl	800e67c <HAL_UART_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80026d4:	f000 fa12 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026d8:	2100      	movs	r1, #0
 80026da:	480d      	ldr	r0, [pc, #52]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026dc:	f00e fbe7 	bl	8010eae <HAL_UARTEx_SetTxFifoThreshold>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026e6:	f000 fa09 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ea:	2100      	movs	r1, #0
 80026ec:	4808      	ldr	r0, [pc, #32]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026ee:	f00e fc1c 	bl	8010f2a <HAL_UARTEx_SetRxFifoThreshold>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026f8:	f000 fa00 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026fc:	4804      	ldr	r0, [pc, #16]	@ (8002710 <MX_USART1_UART_Init+0x90>)
 80026fe:	f00e fb9d 	bl	8010e3c <HAL_UARTEx_DisableFifoMode>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002708:	f000 f9f8 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	240003d0 	.word	0x240003d0
 8002714:	40011000 	.word	0x40011000

08002718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800271e:	4a23      	ldr	r2, [pc, #140]	@ (80027ac <MX_USART3_UART_Init+0x94>)
 8002720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002736:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800273e:	220c      	movs	r2, #12
 8002740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002742:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002760:	4811      	ldr	r0, [pc, #68]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002762:	f00b ff8b 	bl	800e67c <HAL_UART_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800276c:	f000 f9c6 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002770:	2100      	movs	r1, #0
 8002772:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002774:	f00e fb9b 	bl	8010eae <HAL_UARTEx_SetTxFifoThreshold>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800277e:	f000 f9bd 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002782:	2100      	movs	r1, #0
 8002784:	4808      	ldr	r0, [pc, #32]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002786:	f00e fbd0 	bl	8010f2a <HAL_UARTEx_SetRxFifoThreshold>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002790:	f000 f9b4 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002796:	f00e fb51 	bl	8010e3c <HAL_UARTEx_DisableFifoMode>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027a0:	f000 f9ac 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	24000464 	.word	0x24000464
 80027ac:	40004800 	.word	0x40004800

080027b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <MX_DMA_Init+0x4c>)
 80027b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027bc:	4a0f      	ldr	r2, [pc, #60]	@ (80027fc <MX_DMA_Init+0x4c>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <MX_DMA_Init+0x4c>)
 80027c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	200b      	movs	r0, #11
 80027da:	f003 fa58 	bl	8005c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027de:	200b      	movs	r0, #11
 80027e0:	f003 fa6f 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	200c      	movs	r0, #12
 80027ea:	f003 fa50 	bl	8005c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027ee:	200c      	movs	r0, #12
 80027f0:	f003 fa67 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	58024400 	.word	0x58024400

08002800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	@ 0x38
 8002804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002816:	4bb2      	ldr	r3, [pc, #712]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281c:	4ab0      	ldr	r2, [pc, #704]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002826:	4bae      	ldr	r3, [pc, #696]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	623b      	str	r3, [r7, #32]
 8002832:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002834:	4baa      	ldr	r3, [pc, #680]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283a:	4aa9      	ldr	r2, [pc, #676]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002844:	4ba6      	ldr	r3, [pc, #664]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002852:	4ba3      	ldr	r3, [pc, #652]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002858:	4aa1      	ldr	r2, [pc, #644]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 800285a:	f043 0320 	orr.w	r3, r3, #32
 800285e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002862:	4b9f      	ldr	r3, [pc, #636]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002870:	4b9b      	ldr	r3, [pc, #620]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002876:	4a9a      	ldr	r2, [pc, #616]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002880:	4b97      	ldr	r3, [pc, #604]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	4b94      	ldr	r3, [pc, #592]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002894:	4a92      	ldr	r2, [pc, #584]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800289e:	4b90      	ldr	r3, [pc, #576]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ac:	4b8c      	ldr	r3, [pc, #560]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b2:	4a8b      	ldr	r2, [pc, #556]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028bc:	4b88      	ldr	r3, [pc, #544]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ca:	4b85      	ldr	r3, [pc, #532]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d0:	4a83      	ldr	r2, [pc, #524]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028da:	4b81      	ldr	r3, [pc, #516]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028e8:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f8:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <MX_GPIO_Init+0x2e0>)
 80028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800290c:	4875      	ldr	r0, [pc, #468]	@ (8002ae4 <MX_GPIO_Init+0x2e4>)
 800290e:	f006 f9d3 	bl	8008cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8002912:	2200      	movs	r2, #0
 8002914:	213c      	movs	r1, #60	@ 0x3c
 8002916:	4874      	ldr	r0, [pc, #464]	@ (8002ae8 <MX_GPIO_Init+0x2e8>)
 8002918:	f006 f9ce 	bl	8008cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|RS485_M2_TX_EN_Pin, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8002922:	4872      	ldr	r0, [pc, #456]	@ (8002aec <MX_GPIO_Init+0x2ec>)
 8002924:	f006 f9c8 	bl	8008cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_M2_RX_LED_Pin|RS485_M1_TX_EN_Pin, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800292e:	4870      	ldr	r0, [pc, #448]	@ (8002af0 <MX_GPIO_Init+0x2f0>)
 8002930:	f006 f9c2 	bl	8008cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS485_M1_RX_LED_Pin|TURN_LED_RED_Pin|TURN_LED_GREEN_Pin|ORIENTATION_LED_RED_Pin
 8002934:	2200      	movs	r2, #0
 8002936:	f44f 415f 	mov.w	r1, #57088	@ 0xdf00
 800293a:	486e      	ldr	r0, [pc, #440]	@ (8002af4 <MX_GPIO_Init+0x2f4>)
 800293c:	f006 f9bc 	bl	8008cb8 <HAL_GPIO_WritePin>
                          |ORIENTATION_LED_GREEN_Pin|ONTASK_LED_RED_Pin|ONTASK_LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8002940:	2200      	movs	r2, #0
 8002942:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8002946:	486c      	ldr	r0, [pc, #432]	@ (8002af8 <MX_GPIO_Init+0x2f8>)
 8002948:	f006 f9b6 	bl	8008cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 800294c:	2201      	movs	r2, #1
 800294e:	2140      	movs	r1, #64	@ 0x40
 8002950:	4868      	ldr	r0, [pc, #416]	@ (8002af4 <MX_GPIO_Init+0x2f4>)
 8002952:	f006 f9b1 	bl	8008cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8002956:	2201      	movs	r2, #1
 8002958:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800295c:	4866      	ldr	r0, [pc, #408]	@ (8002af8 <MX_GPIO_Init+0x2f8>)
 800295e:	f006 f9ab 	bl	8008cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8002962:	231f      	movs	r3, #31
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002966:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	485d      	ldr	r0, [pc, #372]	@ (8002aec <MX_GPIO_Init+0x2ec>)
 8002978:	f005 fff6 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800297c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	2301      	movs	r3, #1
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002992:	4619      	mov	r1, r3
 8002994:	4853      	ldr	r0, [pc, #332]	@ (8002ae4 <MX_GPIO_Init+0x2e4>)
 8002996:	f005 ffe7 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 800299a:	233c      	movs	r3, #60	@ 0x3c
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299e:	2301      	movs	r3, #1
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ae:	4619      	mov	r1, r3
 80029b0:	484d      	ldr	r0, [pc, #308]	@ (8002ae8 <MX_GPIO_Init+0x2e8>)
 80029b2:	f005 ffd9 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80029b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029c0:	2302      	movs	r3, #2
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c4:	2302      	movs	r3, #2
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4847      	ldr	r0, [pc, #284]	@ (8002aec <MX_GPIO_Init+0x2ec>)
 80029d0:	f005 ffca 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M2_TX_EN_Pin;
 80029d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e2:	2302      	movs	r3, #2
 80029e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_TX_EN_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	483f      	ldr	r0, [pc, #252]	@ (8002aec <MX_GPIO_Init+0x2ec>)
 80029ee:	f005 ffbb 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M2_RX_LED_Pin;
 80029f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4839      	ldr	r0, [pc, #228]	@ (8002af0 <MX_GPIO_Init+0x2f0>)
 8002a0c:	f005 ffac 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M1_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M1_TX_EN_Pin;
 8002a10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M1_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a26:	4619      	mov	r1, r3
 8002a28:	4831      	ldr	r0, [pc, #196]	@ (8002af0 <MX_GPIO_Init+0x2f0>)
 8002a2a:	f005 ff9d 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_M1_RX_LED_Pin TURN_LED_RED_Pin TURN_LED_GREEN_Pin ORIENTATION_LED_RED_Pin
                           ORIENTATION_LED_GREEN_Pin ONTASK_LED_RED_Pin ONTASK_LED_GREEN_Pin LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M1_RX_LED_Pin|TURN_LED_RED_Pin|TURN_LED_GREEN_Pin|ORIENTATION_LED_RED_Pin
 8002a2e:	f64d 7340 	movw	r3, #57152	@ 0xdf40
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ORIENTATION_LED_GREEN_Pin|ONTASK_LED_RED_Pin|ONTASK_LED_GREEN_Pin|LORA_RX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a34:	2301      	movs	r3, #1
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a44:	4619      	mov	r1, r3
 8002a46:	482b      	ldr	r0, [pc, #172]	@ (8002af4 <MX_GPIO_Init+0x2f4>)
 8002a48:	f005 ff8e 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8002a4c:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a62:	4619      	mov	r1, r3
 8002a64:	4824      	ldr	r0, [pc, #144]	@ (8002af8 <MX_GPIO_Init+0x2f8>)
 8002a66:	f005 ff7f 	bl	8008968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8002a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	481d      	ldr	r0, [pc, #116]	@ (8002af8 <MX_GPIO_Init+0x2f8>)
 8002a82:	f005 ff71 	bl	8008968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2006      	movs	r0, #6
 8002a8c:	f003 f8ff 	bl	8005c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a90:	2006      	movs	r0, #6
 8002a92:	f003 f916 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2007      	movs	r0, #7
 8002a9c:	f003 f8f7 	bl	8005c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002aa0:	2007      	movs	r0, #7
 8002aa2:	f003 f90e 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2008      	movs	r0, #8
 8002aac:	f003 f8ef 	bl	8005c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ab0:	2008      	movs	r0, #8
 8002ab2:	f003 f906 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2009      	movs	r0, #9
 8002abc:	f003 f8e7 	bl	8005c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002ac0:	2009      	movs	r0, #9
 8002ac2:	f003 f8fe 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2028      	movs	r0, #40	@ 0x28
 8002acc:	f003 f8df 	bl	8005c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ad0:	2028      	movs	r0, #40	@ 0x28
 8002ad2:	f003 f8f6 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ad6:	bf00      	nop
 8002ad8:	3738      	adds	r7, #56	@ 0x38
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	58020800 	.word	0x58020800
 8002ae8:	58020000 	.word	0x58020000
 8002aec:	58021000 	.word	0x58021000
 8002af0:	58020400 	.word	0x58020400
 8002af4:	58020c00 	.word	0x58020c00
 8002af8:	58021800 	.word	0x58021800

08002afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <Error_Handler+0x8>

08002b08 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8002b14:	23ff      	movs	r3, #255	@ 0xff
 8002b16:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8002b18:	23ff      	movs	r3, #255	@ 0xff
 8002b1a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8002b1c:	e013      	b.n	8002b46 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	7bbb      	ldrb	r3, [r7, #14]
 8002b28:	4053      	eors	r3, r2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8002b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b6c <crc16+0x64>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4413      	add	r3, r2
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	4053      	eors	r3, r2
 8002b3a:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <crc16+0x68>)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	1e5a      	subs	r2, r3, #1
 8002b4a:	807a      	strh	r2, [r7, #2]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e6      	bne.n	8002b1e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	b21a      	sxth	r2, r3
 8002b56:	7bbb      	ldrb	r3, [r7, #14]
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b21b      	sxth	r3, r3
 8002b5e:	b29b      	uxth	r3, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	080111c8 	.word	0x080111c8
 8002b70:	080112c8 	.word	0x080112c8

08002b74 <rs485_init>:
 */


#include "rs485_driver.h"

void rs485_init(rs485_driver *driver){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(driver->rs485_timer);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00a fb3f 	bl	800d204 <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6958      	ldr	r0, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	2210      	movs	r2, #16
 8002b90:	4619      	mov	r1, r3
 8002b92:	f00e fa08 	bl	8010fa6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <rs485_send_data>:

void rs485_send_data(rs485_driver *driver, uint8_t *data){
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
	if(driver->rs485_isbusy == 0){
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11b      	bne.n	8002bec <rs485_send_data+0x4e>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6858      	ldr	r0, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	891b      	ldrh	r3, [r3, #8]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f006 f87a 	bl	8008cb8 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(driver->rs485_huart, data, 8, 500);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6958      	ldr	r0, [r3, #20]
 8002bc8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bcc:	2208      	movs	r2, #8
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	f00b fda4 	bl	800e71c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6858      	ldr	r0, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	891b      	ldrh	r3, [r3, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4619      	mov	r1, r3
 8002be0:	f006 f86a 	bl	8008cb8 <HAL_GPIO_WritePin>
		driver->rs485_isbusy = 255;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	22ff      	movs	r2, #255	@ 0xff
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	driver->rs485_last_connectivity = driver->rs485_connectivity;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	HAL_GPIO_WritePin(driver->rs485_rx_led_port, driver->rs485_rx_led_pin, GPIO_PIN_RESET);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68d8      	ldr	r0, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8a1b      	ldrh	r3, [r3, #16]
 8002c02:	2200      	movs	r2, #0
 8002c04:	4619      	mov	r1, r3
 8002c06:	f006 f857 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6958      	ldr	r0, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	331c      	adds	r3, #28
 8002c12:	2210      	movs	r2, #16
 8002c14:	4619      	mov	r1, r3
 8002c16:	f00e f9c6 	bl	8010fa6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <rs485_set_speed>:

void rs485_set_speed(rs485_driver *driver, uint16_t speed, uint8_t dir){
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	807b      	strh	r3, [r7, #2]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	707b      	strb	r3, [r7, #1]
	driver->rs485_TxData[0] = driver->rs485_id;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	driver->rs485_TxData[1] = 0x06;  // Function code
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2206      	movs	r2, #6
 8002c40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//address 203A -> Target Speed
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	driver->rs485_TxData[3] = 0x3A;  // Low  8 bit register address
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	223a      	movs	r2, #58	@ 0x3a
 8002c50:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	// Set Speed and Direction
	if(dir == 0){
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <rs485_set_speed+0x50>
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
	if(dir == 1){
 8002c72:	787b      	ldrb	r3, [r7, #1]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10e      	bne.n	8002c96 <rs485_set_speed+0x74>
		speed = (~speed) + 1;
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	425b      	negs	r3, r3
 8002c7c:	807b      	strh	r3, [r7, #2]
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
	uint16_t crc = crc16(driver->rs485_TxData, 6);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	332c      	adds	r3, #44	@ 0x2c
 8002c9a:	2106      	movs	r1, #6
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff33 	bl	8002b08 <crc16>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8002ca6:	89fb      	ldrh	r3, [r7, #14]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8002cb0:	89fb      	ldrh	r3, [r7, #14]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	rs485_send_data(driver, driver->rs485_TxData);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	332c      	adds	r3, #44	@ 0x2c
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff6a 	bl	8002b9e <rs485_send_data>

}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <rs485_enable_velocity_mode>:

void rs485_enable_velocity_mode(rs485_driver *driver){
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]

	driver->rs485_TxData[0] = driver->rs485_id;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	driver->rs485_TxData[1] = 0x06;  // Function code
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2206      	movs	r2, #6
 8002ce8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//address 2032 -> Operating Mode
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	driver->rs485_TxData[3] = 0x32;  // Low  8 bit register address
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2232      	movs	r2, #50	@ 0x32
 8002cf8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	//data 0x03 -> Set Velocity Mode
	driver->rs485_TxData[4] = 0x00;  // High 8 bit register data
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->rs485_TxData[5] = 0x03;  // Low  8 bit register data
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2203      	movs	r2, #3
 8002d08:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	uint16_t crc = crc16(driver->rs485_TxData, 6);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	332c      	adds	r3, #44	@ 0x2c
 8002d10:	2106      	movs	r1, #6
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fef8 	bl	8002b08 <crc16>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8002d1c:	89fb      	ldrh	r3, [r7, #14]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	rs485_send_data(driver, driver->rs485_TxData);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	332c      	adds	r3, #44	@ 0x2c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff2f 	bl	8002b9e <rs485_send_data>


	driver->rs485_TxData[0] = driver->rs485_id;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	driver->rs485_TxData[1] = 0x06;  // Function code
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2206      	movs	r2, #6
 8002d4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//address 2031 -> Control Word
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	driver->rs485_TxData[3] = 0x31;  // Low  8 bit register address
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2231      	movs	r2, #49	@ 0x31
 8002d5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	//data 0x08 -> Enable Motor
	driver->rs485_TxData[4] = 0x00;  // High 8 bit register data
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->rs485_TxData[5] = 0x08;  // Low  8 bit register data
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	crc = crc16(driver->rs485_TxData, 6);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	332c      	adds	r3, #44	@ 0x2c
 8002d76:	2106      	movs	r1, #6
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fec5 	bl	8002b08 <crc16>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8002d82:	89fb      	ldrh	r3, [r7, #14]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	rs485_send_data(driver, driver->rs485_TxData);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	332c      	adds	r3, #44	@ 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff fefc 	bl	8002b9e <rs485_send_data>
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <rs485_UART_receive_handler>:

void rs485_UART_receive_handler(rs485_driver *driver){
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
	driver->rs485_isbusy = 0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	driver->rs485_timer->Instance->CNT = 0;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->rs485_connectivity = 255;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	22ff      	movs	r2, #255	@ 0xff
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_rx_led_port, driver->rs485_rx_led_pin, GPIO_PIN_SET);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68d8      	ldr	r0, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8a1b      	ldrh	r3, [r3, #16]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f005 ff6c 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6958      	ldr	r0, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	331c      	adds	r3, #28
 8002de8:	2210      	movs	r2, #16
 8002dea:	4619      	mov	r1, r3
 8002dec:	f00e f8db 	bl	8010fa6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <rs485_connection_lost_handler>:

void rs485_connection_lost_handler(rs485_driver *driver){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	driver->rs485_connectivity= 0;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6858      	ldr	r0, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	891b      	ldrh	r3, [r3, #8]
 8002e10:	2201      	movs	r2, #1
 8002e12:	4619      	mov	r1, r3
 8002e14:	f005 ff50 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(driver->rs485_huart, driver->rs485_TxData, 8, 500);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6958      	ldr	r0, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002e22:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e26:	2208      	movs	r2, #8
 8002e28:	f00b fc78 	bl	800e71c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6858      	ldr	r0, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	891b      	ldrh	r3, [r3, #8]
 8002e34:	2200      	movs	r2, #0
 8002e36:	4619      	mov	r1, r3
 8002e38:	f005 ff3e 	bl	8008cb8 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6958      	ldr	r0, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	331c      	adds	r3, #28
 8002e44:	2210      	movs	r2, #16
 8002e46:	4619      	mov	r1, r3
 8002e48:	f00e f8ad 	bl	8010fa6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_MspInit+0x30>)
 8002e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e60:	4a08      	ldr	r2, [pc, #32]	@ (8002e84 <HAL_MspInit+0x30>)
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_MspInit+0x30>)
 8002e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	58024400 	.word	0x58024400

08002e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b090      	sub	sp, #64	@ 0x40
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4aa0      	ldr	r2, [pc, #640]	@ (8003128 <HAL_ADC_MspInit+0x2a0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f040 80b6 	bne.w	8003018 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002eac:	4b9f      	ldr	r3, [pc, #636]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002eb2:	4a9e      	ldr	r2, [pc, #632]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002eb4:	f043 0320 	orr.w	r3, r3, #32
 8002eb8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ebc:	4b9b      	ldr	r3, [pc, #620]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eca:	4b98      	ldr	r3, [pc, #608]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed0:	4a96      	ldr	r2, [pc, #600]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eda:	4b94      	ldr	r3, [pc, #592]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee8:	4b90      	ldr	r3, [pc, #576]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eee:	4a8f      	ldr	r2, [pc, #572]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f06:	4b89      	ldr	r3, [pc, #548]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0c:	4a87      	ldr	r2, [pc, #540]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f16:	4b85      	ldr	r3, [pc, #532]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f24:	4b81      	ldr	r3, [pc, #516]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f2a:	4a80      	ldr	r2, [pc, #512]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002f2c:	f043 0320 	orr.w	r3, r3, #32
 8002f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f34:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8002f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002f42:	2333      	movs	r3, #51	@ 0x33
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f46:	2303      	movs	r3, #3
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f52:	4619      	mov	r1, r3
 8002f54:	4876      	ldr	r0, [pc, #472]	@ (8003130 <HAL_ADC_MspInit+0x2a8>)
 8002f56:	f005 fd07 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f5a:	23c0      	movs	r3, #192	@ 0xc0
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4871      	ldr	r0, [pc, #452]	@ (8003134 <HAL_ADC_MspInit+0x2ac>)
 8002f6e:	f005 fcfb 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f72:	2303      	movs	r3, #3
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f76:	2303      	movs	r3, #3
 8002f78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f82:	4619      	mov	r1, r3
 8002f84:	486c      	ldr	r0, [pc, #432]	@ (8003138 <HAL_ADC_MspInit+0x2b0>)
 8002f86:	f005 fcef 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f90:	2303      	movs	r3, #3
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4867      	ldr	r0, [pc, #412]	@ (800313c <HAL_ADC_MspInit+0x2b4>)
 8002fa0:	f005 fce2 	bl	8008968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002fa4:	4b66      	ldr	r3, [pc, #408]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fa6:	4a67      	ldr	r2, [pc, #412]	@ (8003144 <HAL_ADC_MspInit+0x2bc>)
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002faa:	4b65      	ldr	r3, [pc, #404]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fac:	2209      	movs	r2, #9
 8002fae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb0:	4b63      	ldr	r3, [pc, #396]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb6:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fbc:	4b60      	ldr	r3, [pc, #384]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fc2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fd2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fda:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002fdc:	4b58      	ldr	r3, [pc, #352]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fe2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe4:	4b56      	ldr	r3, [pc, #344]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fea:	4855      	ldr	r0, [pc, #340]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002fec:	f002 fe84 	bl	8005cf8 <HAL_DMA_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 8002ff6:	f7ff fd81 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a50      	ldr	r2, [pc, #320]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8002ffe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003000:	4a4f      	ldr	r2, [pc, #316]	@ (8003140 <HAL_ADC_MspInit+0x2b8>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	2012      	movs	r0, #18
 800300c:	f002 fe3f 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003010:	2012      	movs	r0, #18
 8003012:	f002 fe56 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003016:	e083      	b.n	8003120 <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4a      	ldr	r2, [pc, #296]	@ (8003148 <HAL_ADC_MspInit+0x2c0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d17e      	bne.n	8003120 <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003022:	4b42      	ldr	r3, [pc, #264]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003028:	4a40      	ldr	r2, [pc, #256]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 800302a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800302e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003032:	4b3e      	ldr	r3, [pc, #248]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003038:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003040:	4b3a      	ldr	r3, [pc, #232]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003046:	4a39      	ldr	r2, [pc, #228]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003048:	f043 0320 	orr.w	r3, r3, #32
 800304c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003050:	4b36      	ldr	r3, [pc, #216]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	4b33      	ldr	r3, [pc, #204]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003064:	4a31      	ldr	r2, [pc, #196]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800306e:	4b2f      	ldr	r3, [pc, #188]	@ (800312c <HAL_ADC_MspInit+0x2a4>)
 8003070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800307c:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003082:	2303      	movs	r3, #3
 8003084:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800308a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800308e:	4619      	mov	r1, r3
 8003090:	482a      	ldr	r0, [pc, #168]	@ (800313c <HAL_ADC_MspInit+0x2b4>)
 8003092:	f005 fc69 	bl	8008968 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003096:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800309a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800309e:	f000 fc5d 	bl	800395c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80030a2:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80030a6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80030aa:	f000 fc57 	bl	800395c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80030ae:	4b27      	ldr	r3, [pc, #156]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030b0:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <HAL_ADC_MspInit+0x2c8>)
 80030b2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80030b4:	4b25      	ldr	r3, [pc, #148]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030b6:	2273      	movs	r2, #115	@ 0x73
 80030b8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ba:	4b24      	ldr	r3, [pc, #144]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c0:	4b22      	ldr	r3, [pc, #136]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80030c6:	4b21      	ldr	r3, [pc, #132]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030cc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030ce:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030d4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030d6:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030dc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80030e6:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030ec:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ee:	4b17      	ldr	r3, [pc, #92]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80030f4:	4815      	ldr	r0, [pc, #84]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 80030f6:	f002 fdff 	bl	8005cf8 <HAL_DMA_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8003100:	f7ff fcfc 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a11      	ldr	r2, [pc, #68]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 8003108:	659a      	str	r2, [r3, #88]	@ 0x58
 800310a:	4a10      	ldr	r2, [pc, #64]	@ (800314c <HAL_ADC_MspInit+0x2c4>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	207f      	movs	r0, #127	@ 0x7f
 8003116:	f002 fdba 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800311a:	207f      	movs	r0, #127	@ 0x7f
 800311c:	f002 fdd1 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 8003120:	bf00      	nop
 8003122:	3740      	adds	r7, #64	@ 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40022000 	.word	0x40022000
 800312c:	58024400 	.word	0x58024400
 8003130:	58020800 	.word	0x58020800
 8003134:	58020000 	.word	0x58020000
 8003138:	58020400 	.word	0x58020400
 800313c:	58021400 	.word	0x58021400
 8003140:	24000174 	.word	0x24000174
 8003144:	40020010 	.word	0x40020010
 8003148:	58026000 	.word	0x58026000
 800314c:	240001ec 	.word	0x240001ec
 8003150:	40020028 	.word	0x40020028

08003154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0ba      	sub	sp, #232	@ 0xe8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800316c:	f107 0318 	add.w	r3, r7, #24
 8003170:	22b8      	movs	r2, #184	@ 0xb8
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f00d ffb5 	bl	80110e4 <memset>
  if(hspi->Instance==SPI1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a39      	ldr	r2, [pc, #228]	@ (8003264 <HAL_SPI_MspInit+0x110>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d16a      	bne.n	800325a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003184:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003190:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003194:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003196:	f107 0318 	add.w	r3, r7, #24
 800319a:	4618      	mov	r0, r3
 800319c:	f006 fd7a 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80031a6:	f7ff fca9 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c8:	4b27      	ldr	r3, [pc, #156]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ce:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031d8:	4b23      	ldr	r3, [pc, #140]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003268 <HAL_SPI_MspInit+0x114>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320a:	2302      	movs	r3, #2
 800320c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800321c:	2305      	movs	r3, #5
 800321e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003222:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003226:	4619      	mov	r1, r3
 8003228:	4810      	ldr	r0, [pc, #64]	@ (800326c <HAL_SPI_MspInit+0x118>)
 800322a:	f005 fb9d 	bl	8008968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800322e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003248:	2305      	movs	r3, #5
 800324a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800324e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003252:	4619      	mov	r1, r3
 8003254:	4806      	ldr	r0, [pc, #24]	@ (8003270 <HAL_SPI_MspInit+0x11c>)
 8003256:	f005 fb87 	bl	8008968 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800325a:	bf00      	nop
 800325c:	37e8      	adds	r7, #232	@ 0xe8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40013000 	.word	0x40013000
 8003268:	58024400 	.word	0x58024400
 800326c:	58020c00 	.word	0x58020c00
 8003270:	58021800 	.word	0x58021800

08003274 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003284:	d116      	bne.n	80032b4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <HAL_TIM_PWM_MspInit+0x48>)
 8003288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800328c:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <HAL_TIM_PWM_MspInit+0x48>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_TIM_PWM_MspInit+0x48>)
 8003298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032a4:	2200      	movs	r2, #0
 80032a6:	2100      	movs	r1, #0
 80032a8:	201c      	movs	r0, #28
 80032aa:	f002 fcf0 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032ae:	201c      	movs	r0, #28
 80032b0:	f002 fd07 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	58024400 	.word	0x58024400

080032c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003344 <HAL_TIM_Base_MspInit+0x84>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d117      	bne.n	8003302 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <HAL_TIM_Base_MspInit+0x88>)
 80032d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <HAL_TIM_Base_MspInit+0x88>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032e2:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <HAL_TIM_Base_MspInit+0x88>)
 80032e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	201d      	movs	r0, #29
 80032f6:	f002 fcca 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032fa:	201d      	movs	r0, #29
 80032fc:	f002 fce1 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003300:	e01b      	b.n	800333a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a11      	ldr	r2, [pc, #68]	@ (800334c <HAL_TIM_Base_MspInit+0x8c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d116      	bne.n	800333a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <HAL_TIM_Base_MspInit+0x88>)
 800330e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003312:	4a0d      	ldr	r2, [pc, #52]	@ (8003348 <HAL_TIM_Base_MspInit+0x88>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800331c:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <HAL_TIM_Base_MspInit+0x88>)
 800331e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	201e      	movs	r0, #30
 8003330:	f002 fcad 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003334:	201e      	movs	r0, #30
 8003336:	f002 fcc4 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40000400 	.word	0x40000400
 8003348:	58024400 	.word	0x58024400
 800334c:	40000800 	.word	0x40000800

08003350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d11e      	bne.n	80033b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <HAL_TIM_MspPostInit+0x68>)
 8003374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003378:	4a0f      	ldr	r2, [pc, #60]	@ (80033b8 <HAL_TIM_MspPostInit+0x68>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <HAL_TIM_MspPostInit+0x68>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003390:	2303      	movs	r3, #3
 8003392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033a0:	2301      	movs	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a4:	f107 030c 	add.w	r3, r7, #12
 80033a8:	4619      	mov	r1, r3
 80033aa:	4804      	ldr	r0, [pc, #16]	@ (80033bc <HAL_TIM_MspPostInit+0x6c>)
 80033ac:	f005 fadc 	bl	8008968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033b0:	bf00      	nop
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	58024400 	.word	0x58024400
 80033bc:	58020000 	.word	0x58020000

080033c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b0ba      	sub	sp, #232	@ 0xe8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d8:	f107 0318 	add.w	r3, r7, #24
 80033dc:	22b8      	movs	r2, #184	@ 0xb8
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f00d fe7f 	bl	80110e4 <memset>
  if(huart->Instance==USART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a55      	ldr	r2, [pc, #340]	@ (8003540 <HAL_UART_MspInit+0x180>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d14f      	bne.n	8003490 <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033f0:	f04f 0201 	mov.w	r2, #1
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003402:	f107 0318 	add.w	r3, r7, #24
 8003406:	4618      	mov	r0, r3
 8003408:	f006 fc44 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003412:	f7ff fb73 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003416:	4b4b      	ldr	r3, [pc, #300]	@ (8003544 <HAL_UART_MspInit+0x184>)
 8003418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800341c:	4a49      	ldr	r2, [pc, #292]	@ (8003544 <HAL_UART_MspInit+0x184>)
 800341e:	f043 0310 	orr.w	r3, r3, #16
 8003422:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_UART_MspInit+0x184>)
 8003428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003434:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <HAL_UART_MspInit+0x184>)
 8003436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800343a:	4a42      	ldr	r2, [pc, #264]	@ (8003544 <HAL_UART_MspInit+0x184>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003444:	4b3f      	ldr	r3, [pc, #252]	@ (8003544 <HAL_UART_MspInit+0x184>)
 8003446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003452:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800346c:	2304      	movs	r3, #4
 800346e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003472:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003476:	4619      	mov	r1, r3
 8003478:	4833      	ldr	r0, [pc, #204]	@ (8003548 <HAL_UART_MspInit+0x188>)
 800347a:	f005 fa75 	bl	8008968 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	2025      	movs	r0, #37	@ 0x25
 8003484:	f002 fc03 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003488:	2025      	movs	r0, #37	@ 0x25
 800348a:	f002 fc1a 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800348e:	e053      	b.n	8003538 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2d      	ldr	r2, [pc, #180]	@ (800354c <HAL_UART_MspInit+0x18c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d14e      	bne.n	8003538 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800349a:	f04f 0202 	mov.w	r2, #2
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ac:	f107 0318 	add.w	r3, r7, #24
 80034b0:	4618      	mov	r0, r3
 80034b2:	f006 fbef 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_UART_MspInit+0x100>
      Error_Handler();
 80034bc:	f7ff fb1e 	bl	8002afc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034c0:	4b20      	ldr	r3, [pc, #128]	@ (8003544 <HAL_UART_MspInit+0x184>)
 80034c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <HAL_UART_MspInit+0x184>)
 80034c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <HAL_UART_MspInit+0x184>)
 80034d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <HAL_UART_MspInit+0x184>)
 80034e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e4:	4a17      	ldr	r2, [pc, #92]	@ (8003544 <HAL_UART_MspInit+0x184>)
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <HAL_UART_MspInit+0x184>)
 80034f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003500:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003516:	2307      	movs	r3, #7
 8003518:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003520:	4619      	mov	r1, r3
 8003522:	4809      	ldr	r0, [pc, #36]	@ (8003548 <HAL_UART_MspInit+0x188>)
 8003524:	f005 fa20 	bl	8008968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	2100      	movs	r1, #0
 800352c:	2027      	movs	r0, #39	@ 0x27
 800352e:	f002 fbae 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003532:	2027      	movs	r0, #39	@ 0x27
 8003534:	f002 fbc5 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 8003538:	bf00      	nop
 800353a:	37e8      	adds	r7, #232	@ 0xe8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40011000 	.word	0x40011000
 8003544:	58024400 	.word	0x58024400
 8003548:	58020400 	.word	0x58020400
 800354c:	40004800 	.word	0x40004800

08003550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <NMI_Handler+0x4>

08003558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <MemManage_Handler+0x4>

08003568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <BusFault_Handler+0x4>

08003570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <UsageFault_Handler+0x4>

08003578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a6:	f000 f995 	bl	80038d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}

080035ae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80035b2:	2001      	movs	r0, #1
 80035b4:	f005 fbb3 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}

080035bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80035c0:	2002      	movs	r0, #2
 80035c2:	f005 fbac 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}

080035ca <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80035ce:	2004      	movs	r0, #4
 80035d0:	f005 fba5 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80035dc:	2008      	movs	r0, #8
 80035de:	f005 fb9e 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035ec:	4802      	ldr	r0, [pc, #8]	@ (80035f8 <DMA1_Stream0_IRQHandler+0x10>)
 80035ee:	f003 fea9 	bl	8007344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	24000174 	.word	0x24000174

080035fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003600:	4802      	ldr	r0, [pc, #8]	@ (800360c <DMA1_Stream1_IRQHandler+0x10>)
 8003602:	f003 fe9f 	bl	8007344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	240001ec 	.word	0x240001ec

08003610 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003614:	4802      	ldr	r0, [pc, #8]	@ (8003620 <ADC_IRQHandler+0x10>)
 8003616:	f000 ff87 	bl	8004528 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	24000094 	.word	0x24000094

08003624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003628:	4802      	ldr	r0, [pc, #8]	@ (8003634 <TIM2_IRQHandler+0x10>)
 800362a:	f009 ffe5 	bl	800d5f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	240002ec 	.word	0x240002ec

08003638 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800363c:	4802      	ldr	r0, [pc, #8]	@ (8003648 <TIM3_IRQHandler+0x10>)
 800363e:	f009 ffdb 	bl	800d5f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	24000338 	.word	0x24000338

0800364c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003650:	4802      	ldr	r0, [pc, #8]	@ (800365c <TIM4_IRQHandler+0x10>)
 8003652:	f009 ffd1 	bl	800d5f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	24000384 	.word	0x24000384

08003660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003664:	4802      	ldr	r0, [pc, #8]	@ (8003670 <USART1_IRQHandler+0x10>)
 8003666:	f00b f8e7 	bl	800e838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	240003d0 	.word	0x240003d0

08003674 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003678:	4802      	ldr	r0, [pc, #8]	@ (8003684 <USART3_IRQHandler+0x10>)
 800367a:	f00b f8dd 	bl	800e838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	24000464 	.word	0x24000464

08003688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 800368c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003690:	f005 fb45 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	bd80      	pop	{r7, pc}

08003698 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800369c:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <ADC3_IRQHandler+0x10>)
 800369e:	f000 ff43 	bl	8004528 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	24000104 	.word	0x24000104

080036ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036b0:	4b32      	ldr	r3, [pc, #200]	@ (800377c <SystemInit+0xd0>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	4a31      	ldr	r2, [pc, #196]	@ (800377c <SystemInit+0xd0>)
 80036b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003780 <SystemInit+0xd4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d807      	bhi.n	80036dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003780 <SystemInit+0xd4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 030f 	bic.w	r3, r3, #15
 80036d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003780 <SystemInit+0xd4>)
 80036d6:	f043 0307 	orr.w	r3, r3, #7
 80036da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80036dc:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <SystemInit+0xd8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a28      	ldr	r2, [pc, #160]	@ (8003784 <SystemInit+0xd8>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036e8:	4b26      	ldr	r3, [pc, #152]	@ (8003784 <SystemInit+0xd8>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80036ee:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <SystemInit+0xd8>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4924      	ldr	r1, [pc, #144]	@ (8003784 <SystemInit+0xd8>)
 80036f4:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <SystemInit+0xdc>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036fa:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <SystemInit+0xd4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <SystemInit+0xd4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 030f 	bic.w	r3, r3, #15
 800370e:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <SystemInit+0xd4>)
 8003710:	f043 0307 	orr.w	r3, r3, #7
 8003714:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003716:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <SystemInit+0xd8>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <SystemInit+0xd8>)
 800371e:	2200      	movs	r2, #0
 8003720:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003722:	4b18      	ldr	r3, [pc, #96]	@ (8003784 <SystemInit+0xd8>)
 8003724:	2200      	movs	r2, #0
 8003726:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003728:	4b16      	ldr	r3, [pc, #88]	@ (8003784 <SystemInit+0xd8>)
 800372a:	4a18      	ldr	r2, [pc, #96]	@ (800378c <SystemInit+0xe0>)
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <SystemInit+0xd8>)
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <SystemInit+0xe4>)
 8003732:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003734:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <SystemInit+0xd8>)
 8003736:	4a17      	ldr	r2, [pc, #92]	@ (8003794 <SystemInit+0xe8>)
 8003738:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800373a:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <SystemInit+0xd8>)
 800373c:	2200      	movs	r2, #0
 800373e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003740:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <SystemInit+0xd8>)
 8003742:	4a14      	ldr	r2, [pc, #80]	@ (8003794 <SystemInit+0xe8>)
 8003744:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003746:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <SystemInit+0xd8>)
 8003748:	2200      	movs	r2, #0
 800374a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800374c:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <SystemInit+0xd8>)
 800374e:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <SystemInit+0xe8>)
 8003750:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003752:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <SystemInit+0xd8>)
 8003754:	2200      	movs	r2, #0
 8003756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003758:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <SystemInit+0xd8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a09      	ldr	r2, [pc, #36]	@ (8003784 <SystemInit+0xd8>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003764:	4b07      	ldr	r3, [pc, #28]	@ (8003784 <SystemInit+0xd8>)
 8003766:	2200      	movs	r2, #0
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800376a:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <SystemInit+0xec>)
 800376c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003770:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003772:	bf00      	nop
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00
 8003780:	52002000 	.word	0x52002000
 8003784:	58024400 	.word	0x58024400
 8003788:	eaf6ed7f 	.word	0xeaf6ed7f
 800378c:	02020200 	.word	0x02020200
 8003790:	01ff0000 	.word	0x01ff0000
 8003794:	01010280 	.word	0x01010280
 8003798:	52004000 	.word	0x52004000

0800379c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800379c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037a0:	f7ff ff84 	bl	80036ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037a4:	480c      	ldr	r0, [pc, #48]	@ (80037d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037a6:	490d      	ldr	r1, [pc, #52]	@ (80037dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037a8:	4a0d      	ldr	r2, [pc, #52]	@ (80037e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ac:	e002      	b.n	80037b4 <LoopCopyDataInit>

080037ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b2:	3304      	adds	r3, #4

080037b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b8:	d3f9      	bcc.n	80037ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ba:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037bc:	4c0a      	ldr	r4, [pc, #40]	@ (80037e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c0:	e001      	b.n	80037c6 <LoopFillZerobss>

080037c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c4:	3204      	adds	r2, #4

080037c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c8:	d3fb      	bcc.n	80037c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ca:	f00d fc93 	bl	80110f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ce:	f7fe f93d 	bl	8001a4c <main>
  bx  lr
 80037d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037d4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80037d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80037dc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80037e0:	08011418 	.word	0x08011418
  ldr r2, =_sbss
 80037e4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80037e8:	240007d0 	.word	0x240007d0

080037ec <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037ec:	e7fe      	b.n	80037ec <BDMA_Channel0_IRQHandler>
	...

080037f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f6:	2003      	movs	r0, #3
 80037f8:	f002 fa3e 	bl	8005c78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037fc:	f006 f874 	bl	80098e8 <HAL_RCC_GetSysClockFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <HAL_Init+0x68>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	4913      	ldr	r1, [pc, #76]	@ (800385c <HAL_Init+0x6c>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800381a:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <HAL_Init+0x68>)
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a0e      	ldr	r2, [pc, #56]	@ (800385c <HAL_Init+0x6c>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	4a0b      	ldr	r2, [pc, #44]	@ (8003860 <HAL_Init+0x70>)
 8003832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003834:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <HAL_Init+0x74>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800383a:	200f      	movs	r0, #15
 800383c:	f000 f814 	bl	8003868 <HAL_InitTick>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e002      	b.n	8003850 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800384a:	f7ff fb03 	bl	8002e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	58024400 	.word	0x58024400
 800385c:	080113c8 	.word	0x080113c8
 8003860:	2400006c 	.word	0x2400006c
 8003864:	24000068 	.word	0x24000068

08003868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003870:	4b15      	ldr	r3, [pc, #84]	@ (80038c8 <HAL_InitTick+0x60>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e021      	b.n	80038c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <HAL_InitTick+0x64>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <HAL_InitTick+0x60>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800388a:	fbb3 f3f1 	udiv	r3, r3, r1
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fa23 	bl	8005cde <HAL_SYSTICK_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e00e      	b.n	80038c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b0f      	cmp	r3, #15
 80038a6:	d80a      	bhi.n	80038be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038a8:	2200      	movs	r2, #0
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f002 f9ed 	bl	8005c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038b4:	4a06      	ldr	r2, [pc, #24]	@ (80038d0 <HAL_InitTick+0x68>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e000      	b.n	80038c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	24000074 	.word	0x24000074
 80038cc:	24000068 	.word	0x24000068
 80038d0:	24000070 	.word	0x24000070

080038d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_IncTick+0x20>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <HAL_IncTick+0x24>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4413      	add	r3, r2
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <HAL_IncTick+0x24>)
 80038e6:	6013      	str	r3, [r2, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	24000074 	.word	0x24000074
 80038f8:	240007cc 	.word	0x240007cc

080038fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003900:	4b03      	ldr	r3, [pc, #12]	@ (8003910 <HAL_GetTick+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	240007cc 	.word	0x240007cc

08003914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800391c:	f7ff ffee 	bl	80038fc <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d005      	beq.n	800393a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_Delay+0x44>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800393a:	bf00      	nop
 800393c:	f7ff ffde 	bl	80038fc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	429a      	cmp	r2, r3
 800394a:	d8f7      	bhi.n	800393c <HAL_Delay+0x28>
  {
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	24000074 	.word	0x24000074

0800395c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003966:	4b07      	ldr	r3, [pc, #28]	@ (8003984 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	4904      	ldr	r1, [pc, #16]	@ (8003984 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	58000400 	.word	0x58000400

08003988 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3360      	adds	r3, #96	@ 0x60
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a10      	ldr	r2, [pc, #64]	@ (8003a50 <LL_ADC_SetOffset+0x60>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10b      	bne.n	8003a2c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a2a:	e00b      	b.n	8003a44 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	58026000 	.word	0x58026000

08003a54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3360      	adds	r3, #96	@ 0x60
 8003a62:	461a      	mov	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	611a      	str	r2, [r3, #16]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8003af4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3360      	adds	r3, #96	@ 0x60
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	601a      	str	r2, [r3, #0]
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	58026000 	.word	0x58026000

08003af8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <LL_ADC_SetOffsetSaturation+0x40>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10e      	bne.n	8003b2a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3360      	adds	r3, #96	@ 0x60
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	58026000 	.word	0x58026000

08003b3c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b7c <LL_ADC_SetOffsetSign+0x40>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10e      	bne.n	8003b6e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3360      	adds	r3, #96	@ 0x60
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	58026000 	.word	0x58026000

08003b80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3360      	adds	r3, #96	@ 0x60
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd0 <LL_ADC_SetOffsetState+0x50>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003bb2:	e007      	b.n	8003bc4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	58026000 	.word	0x58026000

08003bd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b087      	sub	sp, #28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3330      	adds	r3, #48	@ 0x30
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	211f      	movs	r1, #31
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	f003 011f 	and.w	r1, r3, #31
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	431a      	orrs	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f023 0203 	bic.w	r2, r3, #3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f043 0201 	orr.w	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a08      	ldr	r2, [pc, #32]	@ (8003cc8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d107      	bne.n	8003cba <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]
  }
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	58026000 	.word	0x58026000

08003ccc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3314      	adds	r3, #20
 8003d02:	461a      	mov	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	0e5b      	lsrs	r3, r3, #25
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	4413      	add	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	0d1b      	lsrs	r3, r3, #20
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2107      	movs	r1, #7
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	401a      	ands	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	0d1b      	lsrs	r3, r3, #20
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	431a      	orrs	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d115      	bne.n	8003d88 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0318 	and.w	r3, r3, #24
 8003d72:	4914      	ldr	r1, [pc, #80]	@ (8003dc4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d74:	40d9      	lsrs	r1, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	400b      	ands	r3, r1
 8003d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d86:	e014      	b.n	8003db2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0318 	and.w	r3, r3, #24
 8003d9e:	4909      	ldr	r1, [pc, #36]	@ (8003dc4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003da0:	40d9      	lsrs	r1, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	400b      	ands	r3, r1
 8003da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	58026000 	.word	0x58026000
 8003dc4:	000fffff 	.word	0x000fffff

08003dc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6093      	str	r3, [r2, #8]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	5fffffc0 	.word	0x5fffffc0

08003e24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e38:	d101      	bne.n	8003e3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	6fffffc0 	.word	0x6fffffc0

08003e74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e88:	d101      	bne.n	8003e8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <LL_ADC_Enable+0x24>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	f043 0201 	orr.w	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	7fffffc0 	.word	0x7fffffc0

08003ec4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <LL_ADC_IsEnabled+0x18>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <LL_ADC_IsEnabled+0x1a>
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <LL_ADC_REG_StartConversion+0x24>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	f043 0204 	orr.w	r2, r3, #4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	7fffffc0 	.word	0x7fffffc0

08003f14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d101      	bne.n	8003f2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d101      	bne.n	8003f52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b089      	sub	sp, #36	@ 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e1ee      	b.n	8004358 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe ff7d 	bl	8002e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff3f 	bl	8003e24 <LL_ADC_IsDeepPowerDownEnabled>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff25 	bl	8003e00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff ff5a 	bl	8003e74 <LL_ADC_IsInternalRegulatorEnabled>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d114      	bne.n	8003ff0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff3e 	bl	8003e4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800420c <HAL_ADC_Init+0x2ac>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	099b      	lsrs	r3, r3, #6
 8003fd6:	4a8e      	ldr	r2, [pc, #568]	@ (8004210 <HAL_ADC_Init+0x2b0>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fe2:	e002      	b.n	8003fea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f9      	bne.n	8003fe4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff3d 	bl	8003e74 <LL_ADC_IsInternalRegulatorEnabled>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10d      	bne.n	800401c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004004:	f043 0210 	orr.w	r2, r3, #16
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff77 	bl	8003f14 <LL_ADC_REG_IsConversionOngoing>
 8004026:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 8188 	bne.w	8004346 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8184 	bne.w	8004346 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004042:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004046:	f043 0202 	orr.w	r2, r3, #2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff36 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d136      	bne.n	80040cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6c      	ldr	r2, [pc, #432]	@ (8004214 <HAL_ADC_Init+0x2b4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_ADC_Init+0x112>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6a      	ldr	r2, [pc, #424]	@ (8004218 <HAL_ADC_Init+0x2b8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10e      	bne.n	8004090 <HAL_ADC_Init+0x130>
 8004072:	4868      	ldr	r0, [pc, #416]	@ (8004214 <HAL_ADC_Init+0x2b4>)
 8004074:	f7ff ff26 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004078:	4604      	mov	r4, r0
 800407a:	4867      	ldr	r0, [pc, #412]	@ (8004218 <HAL_ADC_Init+0x2b8>)
 800407c:	f7ff ff22 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004080:	4603      	mov	r3, r0
 8004082:	4323      	orrs	r3, r4
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e008      	b.n	80040a2 <HAL_ADC_Init+0x142>
 8004090:	4862      	ldr	r0, [pc, #392]	@ (800421c <HAL_ADC_Init+0x2bc>)
 8004092:	f7ff ff17 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d012      	beq.n	80040cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004214 <HAL_ADC_Init+0x2b4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_ADC_Init+0x15a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a58      	ldr	r2, [pc, #352]	@ (8004218 <HAL_ADC_Init+0x2b8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_ADC_Init+0x15e>
 80040ba:	4a59      	ldr	r2, [pc, #356]	@ (8004220 <HAL_ADC_Init+0x2c0>)
 80040bc:	e000      	b.n	80040c0 <HAL_ADC_Init+0x160>
 80040be:	4a59      	ldr	r2, [pc, #356]	@ (8004224 <HAL_ADC_Init+0x2c4>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7ff fc5e 	bl	8003988 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a52      	ldr	r2, [pc, #328]	@ (800421c <HAL_ADC_Init+0x2bc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d129      	bne.n	800412a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	7e5b      	ldrb	r3, [r3, #25]
 80040da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040e0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80040e6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d013      	beq.n	8004118 <HAL_ADC_Init+0x1b8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d00d      	beq.n	8004114 <HAL_ADC_Init+0x1b4>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b1c      	cmp	r3, #28
 80040fe:	d007      	beq.n	8004110 <HAL_ADC_Init+0x1b0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b18      	cmp	r3, #24
 8004106:	d101      	bne.n	800410c <HAL_ADC_Init+0x1ac>
 8004108:	2318      	movs	r3, #24
 800410a:	e006      	b.n	800411a <HAL_ADC_Init+0x1ba>
 800410c:	2300      	movs	r3, #0
 800410e:	e004      	b.n	800411a <HAL_ADC_Init+0x1ba>
 8004110:	2310      	movs	r3, #16
 8004112:	e002      	b.n	800411a <HAL_ADC_Init+0x1ba>
 8004114:	2308      	movs	r3, #8
 8004116:	e000      	b.n	800411a <HAL_ADC_Init+0x1ba>
 8004118:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800411a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004122:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e00e      	b.n	8004148 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7e5b      	ldrb	r3, [r3, #25]
 800412e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004134:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800413a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004142:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d106      	bne.n	8004160 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	3b01      	subs	r3, #1
 8004158:	045b      	lsls	r3, r3, #17
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a26      	ldr	r2, [pc, #152]	@ (800421c <HAL_ADC_Init+0x2bc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d115      	bne.n	80041b2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <HAL_ADC_Init+0x2c8>)
 800418e:	4013      	ands	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	69b9      	ldr	r1, [r7, #24]
 8004196:	430b      	orrs	r3, r1
 8004198:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	611a      	str	r2, [r3, #16]
 80041b0:	e009      	b.n	80041c6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	4b1c      	ldr	r3, [pc, #112]	@ (800422c <HAL_ADC_Init+0x2cc>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fea2 	bl	8003f14 <LL_ADC_REG_IsConversionOngoing>
 80041d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff feaf 	bl	8003f3a <LL_ADC_INJ_IsConversionOngoing>
 80041dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 808e 	bne.w	8004302 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 808a 	bne.w	8004302 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	@ (800421c <HAL_ADC_Init+0x2bc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d11b      	bne.n	8004230 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	7e1b      	ldrb	r3, [r3, #24]
 80041fc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004204:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e018      	b.n	800423e <HAL_ADC_Init+0x2de>
 800420c:	24000068 	.word	0x24000068
 8004210:	053e2d63 	.word	0x053e2d63
 8004214:	40022000 	.word	0x40022000
 8004218:	40022100 	.word	0x40022100
 800421c:	58026000 	.word	0x58026000
 8004220:	40022300 	.word	0x40022300
 8004224:	58026300 	.word	0x58026300
 8004228:	fff04007 	.word	0xfff04007
 800422c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7e1b      	ldrb	r3, [r3, #24]
 8004234:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	4b46      	ldr	r3, [pc, #280]	@ (8004360 <HAL_ADC_Init+0x400>)
 8004246:	4013      	ands	r3, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	430b      	orrs	r3, r1
 8004250:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004258:	2b01      	cmp	r3, #1
 800425a:	d137      	bne.n	80042cc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3f      	ldr	r2, [pc, #252]	@ (8004364 <HAL_ADC_Init+0x404>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d116      	bne.n	800429a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	4b3d      	ldr	r3, [pc, #244]	@ (8004368 <HAL_ADC_Init+0x408>)
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800427e:	4311      	orrs	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800428a:	430a      	orrs	r2, r1
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	611a      	str	r2, [r3, #16]
 8004298:	e020      	b.n	80042dc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	4b32      	ldr	r3, [pc, #200]	@ (800436c <HAL_ADC_Init+0x40c>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0411      	lsls	r1, r2, #16
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042b0:	4311      	orrs	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80042bc:	430a      	orrs	r2, r1
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	611a      	str	r2, [r3, #16]
 80042ca:	e007      	b.n	80042dc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <HAL_ADC_Init+0x404>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d002      	beq.n	8004302 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 f9c3 	bl	8005688 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10c      	bne.n	8004324 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	f023 010f 	bic.w	r1, r3, #15
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	1e5a      	subs	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	631a      	str	r2, [r3, #48]	@ 0x30
 8004322:	e007      	b.n	8004334 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 020f 	bic.w	r2, r2, #15
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	f023 0303 	bic.w	r3, r3, #3
 800433c:	f043 0201 	orr.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	661a      	str	r2, [r3, #96]	@ 0x60
 8004344:	e007      	b.n	8004356 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	f043 0210 	orr.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004356:	7ffb      	ldrb	r3, [r7, #31]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3724      	adds	r7, #36	@ 0x24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}
 8004360:	ffffbffc 	.word	0xffffbffc
 8004364:	58026000 	.word	0x58026000
 8004368:	fc00f81f 	.word	0xfc00f81f
 800436c:	fc00f81e 	.word	0xfc00f81e

08004370 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a60      	ldr	r2, [pc, #384]	@ (8004504 <HAL_ADC_Start_DMA+0x194>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_ADC_Start_DMA+0x20>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a5f      	ldr	r2, [pc, #380]	@ (8004508 <HAL_ADC_Start_DMA+0x198>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_ADC_Start_DMA+0x24>
 8004390:	4b5e      	ldr	r3, [pc, #376]	@ (800450c <HAL_ADC_Start_DMA+0x19c>)
 8004392:	e000      	b.n	8004396 <HAL_ADC_Start_DMA+0x26>
 8004394:	4b5e      	ldr	r3, [pc, #376]	@ (8004510 <HAL_ADC_Start_DMA+0x1a0>)
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fd16 	bl	8003dc8 <LL_ADC_GetMultimode>
 800439c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fdb6 	bl	8003f14 <LL_ADC_REG_IsConversionOngoing>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 80a2 	bne.w	80044f4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_ADC_Start_DMA+0x4e>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e09d      	b.n	80044fa <HAL_ADC_Start_DMA+0x18a>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d003      	beq.n	80043da <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	f040 8086 	bne.w	80044e6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f001 f836 	bl	800544c <ADC_Enable>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d178      	bne.n	80044dc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043ee:	4b49      	ldr	r3, [pc, #292]	@ (8004514 <HAL_ADC_Start_DMA+0x1a4>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a42      	ldr	r2, [pc, #264]	@ (8004508 <HAL_ADC_Start_DMA+0x198>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d002      	beq.n	800440a <HAL_ADC_Start_DMA+0x9a>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	e000      	b.n	800440c <HAL_ADC_Start_DMA+0x9c>
 800440a:	4b3e      	ldr	r3, [pc, #248]	@ (8004504 <HAL_ADC_Start_DMA+0x194>)
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	4293      	cmp	r3, r2
 8004412:	d002      	beq.n	800441a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004436:	f023 0206 	bic.w	r2, r3, #6
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	665a      	str	r2, [r3, #100]	@ 0x64
 800443e:	e002      	b.n	8004446 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444a:	4a33      	ldr	r2, [pc, #204]	@ (8004518 <HAL_ADC_Start_DMA+0x1a8>)
 800444c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004452:	4a32      	ldr	r2, [pc, #200]	@ (800451c <HAL_ADC_Start_DMA+0x1ac>)
 8004454:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445a:	4a31      	ldr	r2, [pc, #196]	@ (8004520 <HAL_ADC_Start_DMA+0x1b0>)
 800445c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	221c      	movs	r2, #28
 8004464:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0210 	orr.w	r2, r2, #16
 800447c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a28      	ldr	r2, [pc, #160]	@ (8004524 <HAL_ADC_Start_DMA+0x1b4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d10f      	bne.n	80044a8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7ff fbfe 	bl	8003c98 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fbe9 	bl	8003c78 <LL_ADC_EnableDMAReq>
 80044a6:	e007      	b.n	80044b8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7ff fbcd 	bl	8003c52 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3340      	adds	r3, #64	@ 0x40
 80044c2:	4619      	mov	r1, r3
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f001 ff6e 	bl	80063a8 <HAL_DMA_Start_IT>
 80044cc:	4603      	mov	r3, r0
 80044ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fd09 	bl	8003eec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80044da:	e00d      	b.n	80044f8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80044e4:	e008      	b.n	80044f8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80044f2:	e001      	b.n	80044f8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40022000 	.word	0x40022000
 8004508:	40022100 	.word	0x40022100
 800450c:	40022300 	.word	0x40022300
 8004510:	58026300 	.word	0x58026300
 8004514:	fffff0fe 	.word	0xfffff0fe
 8004518:	08005561 	.word	0x08005561
 800451c:	08005639 	.word	0x08005639
 8004520:	08005655 	.word	0x08005655
 8004524:	58026000 	.word	0x58026000

08004528 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a87      	ldr	r2, [pc, #540]	@ (8004768 <HAL_ADC_IRQHandler+0x240>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_ADC_IRQHandler+0x30>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a86      	ldr	r2, [pc, #536]	@ (800476c <HAL_ADC_IRQHandler+0x244>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_ADC_IRQHandler+0x34>
 8004558:	4b85      	ldr	r3, [pc, #532]	@ (8004770 <HAL_ADC_IRQHandler+0x248>)
 800455a:	e000      	b.n	800455e <HAL_ADC_IRQHandler+0x36>
 800455c:	4b85      	ldr	r3, [pc, #532]	@ (8004774 <HAL_ADC_IRQHandler+0x24c>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fc32 	bl	8003dc8 <LL_ADC_GetMultimode>
 8004564:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d017      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x78>
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b00      	cmp	r3, #0
 8004584:	d105      	bne.n	8004592 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 f9b4 	bl	8005900 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2202      	movs	r2, #2
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <HAL_ADC_IRQHandler+0x8c>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8083 	beq.w	80046c6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d07d      	beq.n	80046c6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff faf4 	bl	8003bd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d062      	beq.n	80046b8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <HAL_ADC_IRQHandler+0x244>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d002      	beq.n	8004602 <HAL_ADC_IRQHandler+0xda>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	e000      	b.n	8004604 <HAL_ADC_IRQHandler+0xdc>
 8004602:	4b59      	ldr	r3, [pc, #356]	@ (8004768 <HAL_ADC_IRQHandler+0x240>)
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	4293      	cmp	r3, r2
 800460a:	d008      	beq.n	800461e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b05      	cmp	r3, #5
 8004616:	d002      	beq.n	800461e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b09      	cmp	r3, #9
 800461c:	d104      	bne.n	8004628 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	e00c      	b.n	8004642 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a4f      	ldr	r2, [pc, #316]	@ (800476c <HAL_ADC_IRQHandler+0x244>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d002      	beq.n	8004638 <HAL_ADC_IRQHandler+0x110>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	e000      	b.n	800463a <HAL_ADC_IRQHandler+0x112>
 8004638:	4b4b      	ldr	r3, [pc, #300]	@ (8004768 <HAL_ADC_IRQHandler+0x240>)
 800463a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d135      	bne.n	80046b8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b08      	cmp	r3, #8
 8004658:	d12e      	bne.n	80046b8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fc58 	bl	8003f14 <LL_ADC_REG_IsConversionOngoing>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11a      	bne.n	80046a0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 020c 	bic.w	r2, r2, #12
 8004678:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800467e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d112      	bne.n	80046b8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	661a      	str	r2, [r3, #96]	@ 0x60
 800469e:	e00b      	b.n	80046b8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a4:	f043 0210 	orr.w	r2, r3, #16
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046b0:	f043 0201 	orr.w	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f96f 	bl	800499c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	220c      	movs	r2, #12
 80046c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_ADC_IRQHandler+0x1b2>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80a0 	beq.w	8004826 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 809a 	beq.w	8004826 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fadc 	bl	8003ccc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004714:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fa5a 	bl	8003bd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004720:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a11      	ldr	r2, [pc, #68]	@ (800476c <HAL_ADC_IRQHandler+0x244>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d002      	beq.n	8004732 <HAL_ADC_IRQHandler+0x20a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	e000      	b.n	8004734 <HAL_ADC_IRQHandler+0x20c>
 8004732:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <HAL_ADC_IRQHandler+0x240>)
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	4293      	cmp	r3, r2
 800473a:	d008      	beq.n	800474e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b06      	cmp	r3, #6
 8004746:	d002      	beq.n	800474e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b07      	cmp	r3, #7
 800474c:	d104      	bne.n	8004758 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	e014      	b.n	8004782 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a03      	ldr	r2, [pc, #12]	@ (800476c <HAL_ADC_IRQHandler+0x244>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00a      	beq.n	8004778 <HAL_ADC_IRQHandler+0x250>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	e008      	b.n	800477a <HAL_ADC_IRQHandler+0x252>
 8004768:	40022000 	.word	0x40022000
 800476c:	40022100 	.word	0x40022100
 8004770:	40022300 	.word	0x40022300
 8004774:	58026300 	.word	0x58026300
 8004778:	4b84      	ldr	r3, [pc, #528]	@ (800498c <HAL_ADC_IRQHandler+0x464>)
 800477a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d047      	beq.n	8004818 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <HAL_ADC_IRQHandler+0x27a>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03f      	beq.n	8004818 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d13a      	bne.n	8004818 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b40      	cmp	r3, #64	@ 0x40
 80047ae:	d133      	bne.n	8004818 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12e      	bne.n	8004818 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fbbb 	bl	8003f3a <LL_ADC_INJ_IsConversionOngoing>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11a      	bne.n	8004800 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d112      	bne.n	8004818 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f6:	f043 0201 	orr.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80047fe:	e00b      	b.n	8004818 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f001 f849 	bl	80058b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2260      	movs	r2, #96	@ 0x60
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482c:	2b00      	cmp	r3, #0
 800482e:	d011      	beq.n	8004854 <HAL_ADC_IRQHandler+0x32c>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8bc 	bl	80049c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2280      	movs	r2, #128	@ 0x80
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d012      	beq.n	8004884 <HAL_ADC_IRQHandler+0x35c>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00d      	beq.n	8004884 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f001 f82f 	bl	80058d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004882:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <HAL_ADC_IRQHandler+0x38c>
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f001 f821 	bl	80058ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d043      	beq.n	8004946 <HAL_ADC_IRQHandler+0x41e>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d03e      	beq.n	8004946 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80048d0:	2301      	movs	r3, #1
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d4:	e021      	b.n	800491a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2a      	ldr	r2, [pc, #168]	@ (800498c <HAL_ADC_IRQHandler+0x464>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_ADC_IRQHandler+0x3c8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a29      	ldr	r2, [pc, #164]	@ (8004990 <HAL_ADC_IRQHandler+0x468>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_IRQHandler+0x3cc>
 80048f0:	4b28      	ldr	r3, [pc, #160]	@ (8004994 <HAL_ADC_IRQHandler+0x46c>)
 80048f2:	e000      	b.n	80048f6 <HAL_ADC_IRQHandler+0x3ce>
 80048f4:	4b28      	ldr	r3, [pc, #160]	@ (8004998 <HAL_ADC_IRQHandler+0x470>)
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fa74 	bl	8003de4 <LL_ADC_GetMultiDMATransfer>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004902:	2301      	movs	r3, #1
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
 8004906:	e008      	b.n	800491a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004916:	2301      	movs	r3, #1
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10e      	bne.n	800493e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004924:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004930:	f043 0202 	orr.w	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f84d 	bl	80049d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2210      	movs	r2, #16
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d018      	beq.n	8004982 <HAL_ADC_IRQHandler+0x45a>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004956:	2b00      	cmp	r3, #0
 8004958:	d013      	beq.n	8004982 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800496a:	f043 0208 	orr.w	r2, r3, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800497a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 ffa1 	bl	80058c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004982:	bf00      	nop
 8004984:	3728      	adds	r7, #40	@ 0x28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40022000 	.word	0x40022000
 8004990:	40022100 	.word	0x40022100
 8004994:	40022300 	.word	0x40022300
 8004998:	58026300 	.word	0x58026300

0800499c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b0b9      	sub	sp, #228	@ 0xe4
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a06:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4aab      	ldr	r2, [pc, #684]	@ (8004cbc <HAL_ADC_ConfigChannel+0x2d0>)
 8004a0e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x34>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	f000 bcfe 	b.w	800541c <HAL_ADC_ConfigChannel+0xa30>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fa71 	bl	8003f14 <LL_ADC_REG_IsConversionOngoing>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 84e2 	bne.w	80053fe <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	db38      	blt.n	8004ab4 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a9e      	ldr	r2, [pc, #632]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x2d4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d033      	beq.n	8004ab4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d108      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x7e>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0e9b      	lsrs	r3, r3, #26
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2201      	movs	r2, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	e01d      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0xba>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e004      	b.n	8004a9c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8004a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	69d1      	ldr	r1, [r2, #28]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f7ff f89a 	bl	8003bfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fa22 	bl	8003f14 <LL_ADC_REG_IsConversionOngoing>
 8004ad0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fa2e 	bl	8003f3a <LL_ADC_INJ_IsConversionOngoing>
 8004ade:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 8270 	bne.w	8004fcc <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004aec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f040 826b 	bne.w	8004fcc <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7ff f8f5 	bl	8003cf2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a6c      	ldr	r2, [pc, #432]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x2d4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10d      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	08db      	lsrs	r3, r3, #3
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b2c:	e032      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b2e:	4b65      	ldr	r3, [pc, #404]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x2d8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b3a:	d10b      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x168>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	089b      	lsrs	r3, r3, #2
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	e01d      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x1a4>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x18e>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	e00a      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x1a4>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	089b      	lsrs	r3, r3, #2
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d048      	beq.n	8004c2e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6919      	ldr	r1, [r3, #16]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bac:	f7fe ff20 	bl	80039f0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a42      	ldr	r2, [pc, #264]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x2d4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d119      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6919      	ldr	r1, [r3, #16]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f7fe ffb8 	bl	8003b3c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	6919      	ldr	r1, [r3, #16]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x1f8>
 8004bde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004be2:	e000      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x1fa>
 8004be4:	2300      	movs	r3, #0
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7fe ff86 	bl	8003af8 <LL_ADC_SetOffsetSaturation>
 8004bec:	e1ee      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6919      	ldr	r1, [r3, #16]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x21a>
 8004c00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c04:	e000      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x21c>
 8004c06:	2300      	movs	r3, #0
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f7fe ff53 	bl	8003ab4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6919      	ldr	r1, [r3, #16]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	7e1b      	ldrb	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d102      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x238>
 8004c1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c22:	e000      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x23a>
 8004c24:	2300      	movs	r3, #0
 8004c26:	461a      	mov	r2, r3
 8004c28:	f7fe ff2a 	bl	8003a80 <LL_ADC_SetDataRightShift>
 8004c2c:	e1ce      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a23      	ldr	r2, [pc, #140]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x2d4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	f040 8181 	bne.w	8004f3c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe ff07 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x27a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fefc 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	0e9b      	lsrs	r3, r3, #26
 8004c60:	f003 021f 	and.w	r2, r3, #31
 8004c64:	e01e      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x2b8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fef1 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004c84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8004c94:	2320      	movs	r3, #32
 8004c96:	e004      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004c98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c9c:	fab3 f383 	clz	r3, r3
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x2dc>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	0e9b      	lsrs	r3, r3, #26
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	e01e      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x30e>
 8004cbc:	47ff0000 	.word	0x47ff0000
 8004cc0:	58026000 	.word	0x58026000
 8004cc4:	5c001000 	.word	0x5c001000
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004cec:	2320      	movs	r3, #32
 8004cee:	e004      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cf4:	fab3 f383 	clz	r3, r3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d106      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe ff3a 	bl	8003b80 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fe9e 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x34c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fe93 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	0e9b      	lsrs	r3, r3, #26
 8004d32:	f003 021f 	and.w	r2, r3, #31
 8004d36:	e01e      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x38a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fe88 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004d56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004d66:	2320      	movs	r3, #32
 8004d68:	e004      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d6e:	fab3 f383 	clz	r3, r3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x3a2>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	0e9b      	lsrs	r3, r3, #26
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	e018      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x3d4>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004da6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004db2:	2320      	movs	r3, #32
 8004db4:	e004      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d106      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fed7 	bl	8003b80 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fe fe3b 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0x412>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2102      	movs	r1, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe fe30 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004df4:	4603      	mov	r3, r0
 8004df6:	0e9b      	lsrs	r3, r3, #26
 8004df8:	f003 021f 	and.w	r2, r3, #31
 8004dfc:	e01e      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x450>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2102      	movs	r1, #2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe fe25 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e004      	b.n	8004e3a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e34:	fab3 f383 	clz	r3, r3
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x468>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	0e9b      	lsrs	r3, r3, #26
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	e014      	b.n	8004e7e <HAL_ADC_ConfigChannel+0x492>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004e62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004e70:	2320      	movs	r3, #32
 8004e72:	e004      	b.n	8004e7e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e78:	fab3 f383 	clz	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d106      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fe78 	bl	8003b80 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2103      	movs	r1, #3
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fddc 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x4d0>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2103      	movs	r1, #3
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe fdd1 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	0e9b      	lsrs	r3, r3, #26
 8004eb6:	f003 021f 	and.w	r2, r3, #31
 8004eba:	e017      	b.n	8004eec <HAL_ADC_ConfigChannel+0x500>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2103      	movs	r1, #3
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fdc6 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ece:	fa93 f3a3 	rbit	r3, r3
 8004ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004ede:	2320      	movs	r3, #32
 8004ee0:	e003      	b.n	8004eea <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004ee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ee4:	fab3 f383 	clz	r3, r3
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x518>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	0e9b      	lsrs	r3, r3, #26
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	e011      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x53c>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f0c:	fa93 f3a3 	rbit	r3, r3
 8004f10:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f14:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004f16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	e003      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004f20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d14f      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2103      	movs	r1, #3
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fe23 	bl	8003b80 <LL_ADC_SetOffsetState>
 8004f3a:	e047      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	069b      	lsls	r3, r3, #26
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d107      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004f5e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	069b      	lsls	r3, r3, #26
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d107      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004f82:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	069b      	lsls	r3, r3, #26
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d107      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004fa6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	069b      	lsls	r3, r3, #26
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d107      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004fca:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe ff77 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 8219 	bne.w	8005410 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7fe feac 	bl	8003d48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4aa1      	ldr	r2, [pc, #644]	@ (800527c <HAL_ADC_ConfigChannel+0x890>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	f040 812e 	bne.w	8005258 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x638>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0e9b      	lsrs	r3, r3, #26
 8005012:	3301      	adds	r3, #1
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2b09      	cmp	r3, #9
 800501a:	bf94      	ite	ls
 800501c:	2301      	movls	r3, #1
 800501e:	2300      	movhi	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e019      	b.n	8005058 <HAL_ADC_ConfigChannel+0x66c>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800502c:	fa93 f3a3 	rbit	r3, r3
 8005030:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800503c:	2320      	movs	r3, #32
 800503e:	e003      	b.n	8005048 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	3301      	adds	r3, #1
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	2b09      	cmp	r3, #9
 8005050:	bf94      	ite	ls
 8005052:	2301      	movls	r3, #1
 8005054:	2300      	movhi	r3, #0
 8005056:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005058:	2b00      	cmp	r3, #0
 800505a:	d079      	beq.n	8005150 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x68c>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	0e9b      	lsrs	r3, r3, #26
 800506e:	3301      	adds	r3, #1
 8005070:	069b      	lsls	r3, r3, #26
 8005072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005076:	e015      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x6b8>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005080:	fa93 f3a3 	rbit	r3, r3
 8005084:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005088:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800508a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8005090:	2320      	movs	r3, #32
 8005092:	e003      	b.n	800509c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8005094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	3301      	adds	r3, #1
 800509e:	069b      	lsls	r3, r3, #26
 80050a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x6d8>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0e9b      	lsrs	r3, r3, #26
 80050b6:	3301      	adds	r3, #1
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	e017      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x708>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80050d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80050d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80050dc:	2320      	movs	r3, #32
 80050de:	e003      	b.n	80050e8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80050e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050e2:	fab3 f383 	clz	r3, r3
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	3301      	adds	r3, #1
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2101      	movs	r1, #1
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	ea42 0103 	orr.w	r1, r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <HAL_ADC_ConfigChannel+0x72e>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0e9b      	lsrs	r3, r3, #26
 800510a:	3301      	adds	r3, #1
 800510c:	f003 021f 	and.w	r2, r3, #31
 8005110:	4613      	mov	r3, r2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4413      	add	r3, r2
 8005116:	051b      	lsls	r3, r3, #20
 8005118:	e018      	b.n	800514c <HAL_ADC_ConfigChannel+0x760>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005122:	fa93 f3a3 	rbit	r3, r3
 8005126:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800512c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8005132:	2320      	movs	r3, #32
 8005134:	e003      	b.n	800513e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	fab3 f383 	clz	r3, r3
 800513c:	b2db      	uxtb	r3, r3
 800513e:	3301      	adds	r3, #1
 8005140:	f003 021f 	and.w	r2, r3, #31
 8005144:	4613      	mov	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	4413      	add	r3, r2
 800514a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800514c:	430b      	orrs	r3, r1
 800514e:	e07e      	b.n	800524e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005158:	2b00      	cmp	r3, #0
 800515a:	d107      	bne.n	800516c <HAL_ADC_ConfigChannel+0x780>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	0e9b      	lsrs	r3, r3, #26
 8005162:	3301      	adds	r3, #1
 8005164:	069b      	lsls	r3, r3, #26
 8005166:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800516a:	e015      	b.n	8005198 <HAL_ADC_ConfigChannel+0x7ac>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005174:	fa93 f3a3 	rbit	r3, r3
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800517e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8005184:	2320      	movs	r3, #32
 8005186:	e003      	b.n	8005190 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518a:	fab3 f383 	clz	r3, r3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	3301      	adds	r3, #1
 8005192:	069b      	lsls	r3, r3, #26
 8005194:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x7cc>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	0e9b      	lsrs	r3, r3, #26
 80051aa:	3301      	adds	r3, #1
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2101      	movs	r1, #1
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	e017      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x7fc>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	61bb      	str	r3, [r7, #24]
  return result;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80051d0:	2320      	movs	r3, #32
 80051d2:	e003      	b.n	80051dc <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2101      	movs	r1, #1
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	ea42 0103 	orr.w	r1, r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x828>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	0e9b      	lsrs	r3, r3, #26
 80051fe:	3301      	adds	r3, #1
 8005200:	f003 021f 	and.w	r2, r3, #31
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	3b1e      	subs	r3, #30
 800520c:	051b      	lsls	r3, r3, #20
 800520e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005212:	e01b      	b.n	800524c <HAL_ADC_ConfigChannel+0x860>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	fa93 f3a3 	rbit	r3, r3
 8005220:	60fb      	str	r3, [r7, #12]
  return result;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800522c:	2320      	movs	r3, #32
 800522e:	e003      	b.n	8005238 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	3301      	adds	r3, #1
 800523a:	f003 021f 	and.w	r2, r3, #31
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	3b1e      	subs	r3, #30
 8005246:	051b      	lsls	r3, r3, #20
 8005248:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800524c:	430b      	orrs	r3, r1
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	4619      	mov	r1, r3
 8005254:	f7fe fd4d 	bl	8003cf2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f280 80d7 	bge.w	8005410 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a06      	ldr	r2, [pc, #24]	@ (8005280 <HAL_ADC_ConfigChannel+0x894>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_ADC_ConfigChannel+0x88a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a04      	ldr	r2, [pc, #16]	@ (8005284 <HAL_ADC_ConfigChannel+0x898>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10a      	bne.n	800528c <HAL_ADC_ConfigChannel+0x8a0>
 8005276:	4b04      	ldr	r3, [pc, #16]	@ (8005288 <HAL_ADC_ConfigChannel+0x89c>)
 8005278:	e009      	b.n	800528e <HAL_ADC_ConfigChannel+0x8a2>
 800527a:	bf00      	nop
 800527c:	47ff0000 	.word	0x47ff0000
 8005280:	40022000 	.word	0x40022000
 8005284:	40022100 	.word	0x40022100
 8005288:	40022300 	.word	0x40022300
 800528c:	4b65      	ldr	r3, [pc, #404]	@ (8005424 <HAL_ADC_ConfigChannel+0xa38>)
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe fba0 	bl	80039d4 <LL_ADC_GetCommonPathInternalCh>
 8005294:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a62      	ldr	r2, [pc, #392]	@ (8005428 <HAL_ADC_ConfigChannel+0xa3c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_ADC_ConfigChannel+0x8c0>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a61      	ldr	r2, [pc, #388]	@ (800542c <HAL_ADC_ConfigChannel+0xa40>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10e      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x8de>
 80052ac:	485e      	ldr	r0, [pc, #376]	@ (8005428 <HAL_ADC_ConfigChannel+0xa3c>)
 80052ae:	f7fe fe09 	bl	8003ec4 <LL_ADC_IsEnabled>
 80052b2:	4604      	mov	r4, r0
 80052b4:	485d      	ldr	r0, [pc, #372]	@ (800542c <HAL_ADC_ConfigChannel+0xa40>)
 80052b6:	f7fe fe05 	bl	8003ec4 <LL_ADC_IsEnabled>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4323      	orrs	r3, r4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e008      	b.n	80052dc <HAL_ADC_ConfigChannel+0x8f0>
 80052ca:	4859      	ldr	r0, [pc, #356]	@ (8005430 <HAL_ADC_ConfigChannel+0xa44>)
 80052cc:	f7fe fdfa 	bl	8003ec4 <LL_ADC_IsEnabled>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf0c      	ite	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	2300      	movne	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8084 	beq.w	80053ea <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a53      	ldr	r2, [pc, #332]	@ (8005434 <HAL_ADC_ConfigChannel+0xa48>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d132      	bne.n	8005352 <HAL_ADC_ConfigChannel+0x966>
 80052ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d12c      	bne.n	8005352 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a4c      	ldr	r2, [pc, #304]	@ (8005430 <HAL_ADC_ConfigChannel+0xa44>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	f040 8086 	bne.w	8005410 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a47      	ldr	r2, [pc, #284]	@ (8005428 <HAL_ADC_ConfigChannel+0xa3c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <HAL_ADC_ConfigChannel+0x92c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a46      	ldr	r2, [pc, #280]	@ (800542c <HAL_ADC_ConfigChannel+0xa40>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d101      	bne.n	800531c <HAL_ADC_ConfigChannel+0x930>
 8005318:	4a47      	ldr	r2, [pc, #284]	@ (8005438 <HAL_ADC_ConfigChannel+0xa4c>)
 800531a:	e000      	b.n	800531e <HAL_ADC_ConfigChannel+0x932>
 800531c:	4a41      	ldr	r2, [pc, #260]	@ (8005424 <HAL_ADC_ConfigChannel+0xa38>)
 800531e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005322:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7fe fb40 	bl	80039ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800532e:	4b43      	ldr	r3, [pc, #268]	@ (800543c <HAL_ADC_ConfigChannel+0xa50>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	099b      	lsrs	r3, r3, #6
 8005334:	4a42      	ldr	r2, [pc, #264]	@ (8005440 <HAL_ADC_ConfigChannel+0xa54>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	099b      	lsrs	r3, r3, #6
 800533c:	3301      	adds	r3, #1
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005342:	e002      	b.n	800534a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	3b01      	subs	r3, #1
 8005348:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f9      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005350:	e05e      	b.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a3b      	ldr	r2, [pc, #236]	@ (8005444 <HAL_ADC_ConfigChannel+0xa58>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d120      	bne.n	800539e <HAL_ADC_ConfigChannel+0x9b2>
 800535c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005360:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d11a      	bne.n	800539e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a30      	ldr	r2, [pc, #192]	@ (8005430 <HAL_ADC_ConfigChannel+0xa44>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d14e      	bne.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2c      	ldr	r2, [pc, #176]	@ (8005428 <HAL_ADC_ConfigChannel+0xa3c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x99a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2a      	ldr	r2, [pc, #168]	@ (800542c <HAL_ADC_ConfigChannel+0xa40>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d101      	bne.n	800538a <HAL_ADC_ConfigChannel+0x99e>
 8005386:	4a2c      	ldr	r2, [pc, #176]	@ (8005438 <HAL_ADC_ConfigChannel+0xa4c>)
 8005388:	e000      	b.n	800538c <HAL_ADC_ConfigChannel+0x9a0>
 800538a:	4a26      	ldr	r2, [pc, #152]	@ (8005424 <HAL_ADC_ConfigChannel+0xa38>)
 800538c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005390:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7fe fb09 	bl	80039ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800539c:	e038      	b.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a29      	ldr	r2, [pc, #164]	@ (8005448 <HAL_ADC_ConfigChannel+0xa5c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d133      	bne.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
 80053a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d12d      	bne.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <HAL_ADC_ConfigChannel+0xa44>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d128      	bne.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_ADC_ConfigChannel+0xa3c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_ADC_ConfigChannel+0x9e6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a17      	ldr	r2, [pc, #92]	@ (800542c <HAL_ADC_ConfigChannel+0xa40>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x9ea>
 80053d2:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <HAL_ADC_ConfigChannel+0xa4c>)
 80053d4:	e000      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x9ec>
 80053d6:	4a13      	ldr	r2, [pc, #76]	@ (8005424 <HAL_ADC_ConfigChannel+0xa38>)
 80053d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7fe fae3 	bl	80039ae <LL_ADC_SetCommonPathInternalCh>
 80053e8:	e012      	b.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80053fc:	e008      	b.n	8005410 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005418:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800541c:	4618      	mov	r0, r3
 800541e:	37e4      	adds	r7, #228	@ 0xe4
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}
 8005424:	58026300 	.word	0x58026300
 8005428:	40022000 	.word	0x40022000
 800542c:	40022100 	.word	0x40022100
 8005430:	58026000 	.word	0x58026000
 8005434:	c7520000 	.word	0xc7520000
 8005438:	40022300 	.word	0x40022300
 800543c:	24000068 	.word	0x24000068
 8005440:	053e2d63 	.word	0x053e2d63
 8005444:	c3210000 	.word	0xc3210000
 8005448:	cb840000 	.word	0xcb840000

0800544c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fd33 	bl	8003ec4 <LL_ADC_IsEnabled>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d16e      	bne.n	8005542 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	4b38      	ldr	r3, [pc, #224]	@ (800554c <ADC_Enable+0x100>)
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005476:	f043 0210 	orr.w	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005482:	f043 0201 	orr.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e05a      	b.n	8005544 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe fd02 	bl	8003e9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005498:	f7fe fa30 	bl	80038fc <HAL_GetTick>
 800549c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005550 <ADC_Enable+0x104>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <ADC_Enable+0x66>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a29      	ldr	r2, [pc, #164]	@ (8005554 <ADC_Enable+0x108>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d101      	bne.n	80054b6 <ADC_Enable+0x6a>
 80054b2:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <ADC_Enable+0x10c>)
 80054b4:	e000      	b.n	80054b8 <ADC_Enable+0x6c>
 80054b6:	4b29      	ldr	r3, [pc, #164]	@ (800555c <ADC_Enable+0x110>)
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fc85 	bl	8003dc8 <LL_ADC_GetMultimode>
 80054be:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a23      	ldr	r2, [pc, #140]	@ (8005554 <ADC_Enable+0x108>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d002      	beq.n	80054d0 <ADC_Enable+0x84>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	e000      	b.n	80054d2 <ADC_Enable+0x86>
 80054d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <ADC_Enable+0x104>)
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02c      	beq.n	8005534 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d130      	bne.n	8005542 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054e0:	e028      	b.n	8005534 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fcec 	bl	8003ec4 <LL_ADC_IsEnabled>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fcd0 	bl	8003e9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054fc:	f7fe f9fe 	bl	80038fc <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d914      	bls.n	8005534 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d00d      	beq.n	8005534 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e007      	b.n	8005544 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b01      	cmp	r3, #1
 8005540:	d1cf      	bne.n	80054e2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	8000003f 	.word	0x8000003f
 8005550:	40022000 	.word	0x40022000
 8005554:	40022100 	.word	0x40022100
 8005558:	40022300 	.word	0x40022300
 800555c:	58026300 	.word	0x58026300

08005560 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005572:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005576:	2b00      	cmp	r3, #0
 8005578:	d14b      	bne.n	8005612 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800557e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d021      	beq.n	80055d8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe fb1b 	bl	8003bd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d032      	beq.n	800560a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d12b      	bne.n	800560a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d11f      	bne.n	800560a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80055d6:	e018      	b.n	800560a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d111      	bne.n	800560a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d105      	bne.n	800560a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005602:	f043 0201 	orr.w	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff f9c6 	bl	800499c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005610:	e00e      	b.n	8005630 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff f9da 	bl	80049d8 <HAL_ADC_ErrorCallback>
}
 8005624:	e004      	b.n	8005630 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff f9b2 	bl	80049b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005660:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005666:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff f9ac 	bl	80049d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a6c      	ldr	r2, [pc, #432]	@ (8005848 <ADC_ConfigureBoostMode+0x1c0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <ADC_ConfigureBoostMode+0x1c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a6b      	ldr	r2, [pc, #428]	@ (800584c <ADC_ConfigureBoostMode+0x1c4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d109      	bne.n	80056b8 <ADC_ConfigureBoostMode+0x30>
 80056a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <ADC_ConfigureBoostMode+0x1c8>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e008      	b.n	80056ca <ADC_ConfigureBoostMode+0x42>
 80056b8:	4b66      	ldr	r3, [pc, #408]	@ (8005854 <ADC_ConfigureBoostMode+0x1cc>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01c      	beq.n	8005708 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80056ce:	f004 fa85 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 80056d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056dc:	d010      	beq.n	8005700 <ADC_ConfigureBoostMode+0x78>
 80056de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056e2:	d873      	bhi.n	80057cc <ADC_ConfigureBoostMode+0x144>
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e8:	d002      	beq.n	80056f0 <ADC_ConfigureBoostMode+0x68>
 80056ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056ee:	d16d      	bne.n	80057cc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	60fb      	str	r3, [r7, #12]
        break;
 80056fe:	e068      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	60fb      	str	r3, [r7, #12]
        break;
 8005706:	e064      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005708:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	f005 fc60 	bl	800afd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005714:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800571e:	d051      	beq.n	80057c4 <ADC_ConfigureBoostMode+0x13c>
 8005720:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005724:	d854      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 8005726:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800572a:	d047      	beq.n	80057bc <ADC_ConfigureBoostMode+0x134>
 800572c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005730:	d84e      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 8005732:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005736:	d03d      	beq.n	80057b4 <ADC_ConfigureBoostMode+0x12c>
 8005738:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800573c:	d848      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 800573e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005742:	d033      	beq.n	80057ac <ADC_ConfigureBoostMode+0x124>
 8005744:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005748:	d842      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 800574a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800574e:	d029      	beq.n	80057a4 <ADC_ConfigureBoostMode+0x11c>
 8005750:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005754:	d83c      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 8005756:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800575a:	d01a      	beq.n	8005792 <ADC_ConfigureBoostMode+0x10a>
 800575c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005760:	d836      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 8005762:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005766:	d014      	beq.n	8005792 <ADC_ConfigureBoostMode+0x10a>
 8005768:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800576c:	d830      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 800576e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005772:	d00e      	beq.n	8005792 <ADC_ConfigureBoostMode+0x10a>
 8005774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005778:	d82a      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 800577a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800577e:	d008      	beq.n	8005792 <ADC_ConfigureBoostMode+0x10a>
 8005780:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005784:	d824      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x148>
 8005786:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800578a:	d002      	beq.n	8005792 <ADC_ConfigureBoostMode+0x10a>
 800578c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005790:	d11e      	bne.n	80057d0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	0c9b      	lsrs	r3, r3, #18
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	60fb      	str	r3, [r7, #12]
        break;
 80057a2:	e016      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
        break;
 80057aa:	e012      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	60fb      	str	r3, [r7, #12]
        break;
 80057b2:	e00e      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	60fb      	str	r3, [r7, #12]
        break;
 80057ba:	e00a      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	09db      	lsrs	r3, r3, #7
 80057c0:	60fb      	str	r3, [r7, #12]
        break;
 80057c2:	e006      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	60fb      	str	r3, [r7, #12]
        break;
 80057ca:	e002      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80057cc:	bf00      	nop
 80057ce:	e000      	b.n	80057d2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80057d0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a1f      	ldr	r2, [pc, #124]	@ (8005858 <ADC_ConfigureBoostMode+0x1d0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d808      	bhi.n	80057f2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80057ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80057f0:	e025      	b.n	800583e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a19      	ldr	r2, [pc, #100]	@ (800585c <ADC_ConfigureBoostMode+0x1d4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d80a      	bhi.n	8005810 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800580c:	609a      	str	r2, [r3, #8]
}
 800580e:	e016      	b.n	800583e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a13      	ldr	r2, [pc, #76]	@ (8005860 <ADC_ConfigureBoostMode+0x1d8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d80a      	bhi.n	800582e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	e007      	b.n	800583e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800583c:	609a      	str	r2, [r3, #8]
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40022000 	.word	0x40022000
 800584c:	40022100 	.word	0x40022100
 8005850:	40022300 	.word	0x40022300
 8005854:	58026300 	.word	0x58026300
 8005858:	005f5e10 	.word	0x005f5e10
 800585c:	00bebc20 	.word	0x00bebc20
 8005860:	017d7840 	.word	0x017d7840

08005864 <LL_ADC_IsEnabled>:
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <LL_ADC_IsEnabled+0x18>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <LL_ADC_IsEnabled+0x1a>
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <LL_ADC_REG_IsConversionOngoing>:
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d101      	bne.n	80058a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b0a3      	sub	sp, #140	@ 0x8c
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800592e:	2302      	movs	r3, #2
 8005930:	e0c1      	b.n	8005ab6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
 8005940:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a5e      	ldr	r2, [pc, #376]	@ (8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d102      	bne.n	8005952 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800594c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e001      	b.n	8005956 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0a0      	b.n	8005ab6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ff87 	bl	800588a <LL_ADC_REG_IsConversionOngoing>
 800597c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff80 	bl	800588a <LL_ADC_REG_IsConversionOngoing>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 8081 	bne.w	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005992:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d17c      	bne.n	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a48      	ldr	r2, [pc, #288]	@ (8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a46      	ldr	r2, [pc, #280]	@ (8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80059ae:	4b46      	ldr	r3, [pc, #280]	@ (8005ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80059b0:	e000      	b.n	80059b4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80059b2:	4b46      	ldr	r3, [pc, #280]	@ (8005acc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80059b4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d039      	beq.n	8005a32 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80059be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a39      	ldr	r2, [pc, #228]	@ (8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10e      	bne.n	8005a02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80059e4:	4836      	ldr	r0, [pc, #216]	@ (8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80059e6:	f7ff ff3d 	bl	8005864 <LL_ADC_IsEnabled>
 80059ea:	4604      	mov	r4, r0
 80059ec:	4835      	ldr	r0, [pc, #212]	@ (8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80059ee:	f7ff ff39 	bl	8005864 <LL_ADC_IsEnabled>
 80059f2:	4603      	mov	r3, r0
 80059f4:	4323      	orrs	r3, r4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf0c      	ite	eq
 80059fa:	2301      	moveq	r3, #1
 80059fc:	2300      	movne	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	e008      	b.n	8005a14 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005a02:	4833      	ldr	r0, [pc, #204]	@ (8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005a04:	f7ff ff2e 	bl	8005864 <LL_ADC_IsEnabled>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bf0c      	ite	eq
 8005a0e:	2301      	moveq	r3, #1
 8005a10:	2300      	movne	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d047      	beq.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005a18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	6811      	ldr	r1, [r2, #0]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	6892      	ldr	r2, [r2, #8]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a30:	e03a      	b.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005a32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10e      	bne.n	8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005a52:	481b      	ldr	r0, [pc, #108]	@ (8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005a54:	f7ff ff06 	bl	8005864 <LL_ADC_IsEnabled>
 8005a58:	4604      	mov	r4, r0
 8005a5a:	481a      	ldr	r0, [pc, #104]	@ (8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005a5c:	f7ff ff02 	bl	8005864 <LL_ADC_IsEnabled>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4323      	orrs	r3, r4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e008      	b.n	8005a82 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005a70:	4817      	ldr	r0, [pc, #92]	@ (8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005a72:	f7ff fef7 	bl	8005864 <LL_ADC_IsEnabled>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2301      	moveq	r3, #1
 8005a7e:	2300      	movne	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d010      	beq.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	4b12      	ldr	r3, [pc, #72]	@ (8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a92:	e009      	b.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005aa6:	e000      	b.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005aa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005ab2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	378c      	adds	r7, #140	@ 0x8c
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40022000 	.word	0x40022000
 8005ac4:	40022100 	.word	0x40022100
 8005ac8:	40022300 	.word	0x40022300
 8005acc:	58026300 	.word	0x58026300
 8005ad0:	58026000 	.word	0x58026000
 8005ad4:	fffff0e0 	.word	0xfffff0e0

08005ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <__NVIC_SetPriorityGrouping+0x40>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005af4:	4013      	ands	r3, r2
 8005af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b00:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <__NVIC_SetPriorityGrouping+0x44>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b06:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <__NVIC_SetPriorityGrouping+0x40>)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	60d3      	str	r3, [r2, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	e000ed00 	.word	0xe000ed00
 8005b1c:	05fa0000 	.word	0x05fa0000

08005b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b24:	4b04      	ldr	r3, [pc, #16]	@ (8005b38 <__NVIC_GetPriorityGrouping+0x18>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	0a1b      	lsrs	r3, r3, #8
 8005b2a:	f003 0307 	and.w	r3, r3, #7
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	e000ed00 	.word	0xe000ed00

08005b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	db0b      	blt.n	8005b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	f003 021f 	and.w	r2, r3, #31
 8005b54:	4907      	ldr	r1, [pc, #28]	@ (8005b74 <__NVIC_EnableIRQ+0x38>)
 8005b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	e000e100 	.word	0xe000e100

08005b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	6039      	str	r1, [r7, #0]
 8005b82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	db0a      	blt.n	8005ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	490c      	ldr	r1, [pc, #48]	@ (8005bc4 <__NVIC_SetPriority+0x4c>)
 8005b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b96:	0112      	lsls	r2, r2, #4
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ba0:	e00a      	b.n	8005bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4908      	ldr	r1, [pc, #32]	@ (8005bc8 <__NVIC_SetPriority+0x50>)
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	3b04      	subs	r3, #4
 8005bb0:	0112      	lsls	r2, r2, #4
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	761a      	strb	r2, [r3, #24]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	e000e100 	.word	0xe000e100
 8005bc8:	e000ed00 	.word	0xe000ed00

08005bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	@ 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f1c3 0307 	rsb	r3, r3, #7
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	bf28      	it	cs
 8005bea:	2304      	movcs	r3, #4
 8005bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	2b06      	cmp	r3, #6
 8005bf4:	d902      	bls.n	8005bfc <NVIC_EncodePriority+0x30>
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	3b03      	subs	r3, #3
 8005bfa:	e000      	b.n	8005bfe <NVIC_EncodePriority+0x32>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c00:	f04f 32ff 	mov.w	r2, #4294967295
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43da      	mvns	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	401a      	ands	r2, r3
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c14:	f04f 31ff 	mov.w	r1, #4294967295
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	43d9      	mvns	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c24:	4313      	orrs	r3, r2
         );
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3724      	adds	r7, #36	@ 0x24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c44:	d301      	bcc.n	8005c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c46:	2301      	movs	r3, #1
 8005c48:	e00f      	b.n	8005c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c74 <SysTick_Config+0x40>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c52:	210f      	movs	r1, #15
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	f7ff ff8e 	bl	8005b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <SysTick_Config+0x40>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c62:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <SysTick_Config+0x40>)
 8005c64:	2207      	movs	r2, #7
 8005c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	e000e010 	.word	0xe000e010

08005c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff29 	bl	8005ad8 <__NVIC_SetPriorityGrouping>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c9c:	f7ff ff40 	bl	8005b20 <__NVIC_GetPriorityGrouping>
 8005ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	6978      	ldr	r0, [r7, #20]
 8005ca8:	f7ff ff90 	bl	8005bcc <NVIC_EncodePriority>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff ff5f 	bl	8005b78 <__NVIC_SetPriority>
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	4603      	mov	r3, r0
 8005cca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff33 	bl	8005b3c <__NVIC_EnableIRQ>
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff ffa4 	bl	8005c34 <SysTick_Config>
 8005cec:	4603      	mov	r3, r0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d00:	f7fd fdfc 	bl	80038fc <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e312      	b.n	8006336 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a66      	ldr	r2, [pc, #408]	@ (8005eb0 <HAL_DMA_Init+0x1b8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a65      	ldr	r2, [pc, #404]	@ (8005eb4 <HAL_DMA_Init+0x1bc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a63      	ldr	r2, [pc, #396]	@ (8005eb8 <HAL_DMA_Init+0x1c0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a62      	ldr	r2, [pc, #392]	@ (8005ebc <HAL_DMA_Init+0x1c4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a60      	ldr	r2, [pc, #384]	@ (8005ec0 <HAL_DMA_Init+0x1c8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec4 <HAL_DMA_Init+0x1cc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a5d      	ldr	r2, [pc, #372]	@ (8005ec8 <HAL_DMA_Init+0x1d0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8005ecc <HAL_DMA_Init+0x1d4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5a      	ldr	r2, [pc, #360]	@ (8005ed0 <HAL_DMA_Init+0x1d8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a59      	ldr	r2, [pc, #356]	@ (8005ed4 <HAL_DMA_Init+0x1dc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a57      	ldr	r2, [pc, #348]	@ (8005ed8 <HAL_DMA_Init+0x1e0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a56      	ldr	r2, [pc, #344]	@ (8005edc <HAL_DMA_Init+0x1e4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a54      	ldr	r2, [pc, #336]	@ (8005ee0 <HAL_DMA_Init+0x1e8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a53      	ldr	r2, [pc, #332]	@ (8005ee4 <HAL_DMA_Init+0x1ec>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a51      	ldr	r2, [pc, #324]	@ (8005ee8 <HAL_DMA_Init+0x1f0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_DMA_Init+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a50      	ldr	r2, [pc, #320]	@ (8005eec <HAL_DMA_Init+0x1f4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <HAL_DMA_Init+0xbc>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <HAL_DMA_Init+0xbe>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 813c 	beq.w	8006034 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a37      	ldr	r2, [pc, #220]	@ (8005eb0 <HAL_DMA_Init+0x1b8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d04a      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a36      	ldr	r2, [pc, #216]	@ (8005eb4 <HAL_DMA_Init+0x1bc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d045      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a34      	ldr	r2, [pc, #208]	@ (8005eb8 <HAL_DMA_Init+0x1c0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d040      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a33      	ldr	r2, [pc, #204]	@ (8005ebc <HAL_DMA_Init+0x1c4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d03b      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a31      	ldr	r2, [pc, #196]	@ (8005ec0 <HAL_DMA_Init+0x1c8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d036      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a30      	ldr	r2, [pc, #192]	@ (8005ec4 <HAL_DMA_Init+0x1cc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d031      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec8 <HAL_DMA_Init+0x1d0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02c      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2d      	ldr	r2, [pc, #180]	@ (8005ecc <HAL_DMA_Init+0x1d4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d027      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <HAL_DMA_Init+0x1d8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed4 <HAL_DMA_Init+0x1dc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d01d      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a28      	ldr	r2, [pc, #160]	@ (8005ed8 <HAL_DMA_Init+0x1e0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d018      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a27      	ldr	r2, [pc, #156]	@ (8005edc <HAL_DMA_Init+0x1e4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a25      	ldr	r2, [pc, #148]	@ (8005ee0 <HAL_DMA_Init+0x1e8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a24      	ldr	r2, [pc, #144]	@ (8005ee4 <HAL_DMA_Init+0x1ec>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a22      	ldr	r2, [pc, #136]	@ (8005ee8 <HAL_DMA_Init+0x1f0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_DMA_Init+0x174>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a21      	ldr	r2, [pc, #132]	@ (8005eec <HAL_DMA_Init+0x1f4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <HAL_DMA_Init+0x186>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e007      	b.n	8005e8e <HAL_DMA_Init+0x196>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e8e:	e02f      	b.n	8005ef0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e90:	f7fd fd34 	bl	80038fc <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d928      	bls.n	8005ef0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e242      	b.n	8006336 <HAL_DMA_Init+0x63e>
 8005eb0:	40020010 	.word	0x40020010
 8005eb4:	40020028 	.word	0x40020028
 8005eb8:	40020040 	.word	0x40020040
 8005ebc:	40020058 	.word	0x40020058
 8005ec0:	40020070 	.word	0x40020070
 8005ec4:	40020088 	.word	0x40020088
 8005ec8:	400200a0 	.word	0x400200a0
 8005ecc:	400200b8 	.word	0x400200b8
 8005ed0:	40020410 	.word	0x40020410
 8005ed4:	40020428 	.word	0x40020428
 8005ed8:	40020440 	.word	0x40020440
 8005edc:	40020458 	.word	0x40020458
 8005ee0:	40020470 	.word	0x40020470
 8005ee4:	40020488 	.word	0x40020488
 8005ee8:	400204a0 	.word	0x400204a0
 8005eec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1c8      	bne.n	8005e90 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4b83      	ldr	r3, [pc, #524]	@ (8006118 <HAL_DMA_Init+0x420>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d107      	bne.n	8005f54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b28      	cmp	r3, #40	@ 0x28
 8005f5a:	d903      	bls.n	8005f64 <HAL_DMA_Init+0x26c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f62:	d91f      	bls.n	8005fa4 <HAL_DMA_Init+0x2ac>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f6a:	d903      	bls.n	8005f74 <HAL_DMA_Init+0x27c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b42      	cmp	r3, #66	@ 0x42
 8005f72:	d917      	bls.n	8005fa4 <HAL_DMA_Init+0x2ac>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b46      	cmp	r3, #70	@ 0x46
 8005f7a:	d903      	bls.n	8005f84 <HAL_DMA_Init+0x28c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b48      	cmp	r3, #72	@ 0x48
 8005f82:	d90f      	bls.n	8005fa4 <HAL_DMA_Init+0x2ac>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b4e      	cmp	r3, #78	@ 0x4e
 8005f8a:	d903      	bls.n	8005f94 <HAL_DMA_Init+0x29c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b52      	cmp	r3, #82	@ 0x52
 8005f92:	d907      	bls.n	8005fa4 <HAL_DMA_Init+0x2ac>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b73      	cmp	r3, #115	@ 0x73
 8005f9a:	d905      	bls.n	8005fa8 <HAL_DMA_Init+0x2b0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b77      	cmp	r3, #119	@ 0x77
 8005fa2:	d801      	bhi.n	8005fa8 <HAL_DMA_Init+0x2b0>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <HAL_DMA_Init+0x2b2>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fb4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 0307 	bic.w	r3, r3, #7
 8005fcc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d117      	bne.n	8006010 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f002 fb2e 	bl	8008654 <DMA_CheckFifoParam>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2240      	movs	r2, #64	@ 0x40
 8006002:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e192      	b.n	8006336 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 fa69 	bl	80084f0 <DMA_CalcBaseAndBitshift>
 800601e:	4603      	mov	r3, r0
 8006020:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	223f      	movs	r2, #63	@ 0x3f
 800602c:	409a      	lsls	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	609a      	str	r2, [r3, #8]
 8006032:	e0c8      	b.n	80061c6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a38      	ldr	r2, [pc, #224]	@ (800611c <HAL_DMA_Init+0x424>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <HAL_DMA_Init+0x38c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a37      	ldr	r2, [pc, #220]	@ (8006120 <HAL_DMA_Init+0x428>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d01d      	beq.n	8006084 <HAL_DMA_Init+0x38c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a35      	ldr	r2, [pc, #212]	@ (8006124 <HAL_DMA_Init+0x42c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_DMA_Init+0x38c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a34      	ldr	r2, [pc, #208]	@ (8006128 <HAL_DMA_Init+0x430>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_DMA_Init+0x38c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a32      	ldr	r2, [pc, #200]	@ (800612c <HAL_DMA_Init+0x434>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_DMA_Init+0x38c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a31      	ldr	r2, [pc, #196]	@ (8006130 <HAL_DMA_Init+0x438>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_DMA_Init+0x38c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a2f      	ldr	r2, [pc, #188]	@ (8006134 <HAL_DMA_Init+0x43c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_DMA_Init+0x38c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a2e      	ldr	r2, [pc, #184]	@ (8006138 <HAL_DMA_Init+0x440>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_DMA_Init+0x390>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <HAL_DMA_Init+0x392>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8092 	beq.w	80061b4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a21      	ldr	r2, [pc, #132]	@ (800611c <HAL_DMA_Init+0x424>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d021      	beq.n	80060de <HAL_DMA_Init+0x3e6>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <HAL_DMA_Init+0x428>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d01c      	beq.n	80060de <HAL_DMA_Init+0x3e6>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006124 <HAL_DMA_Init+0x42c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d017      	beq.n	80060de <HAL_DMA_Init+0x3e6>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006128 <HAL_DMA_Init+0x430>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d012      	beq.n	80060de <HAL_DMA_Init+0x3e6>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1b      	ldr	r2, [pc, #108]	@ (800612c <HAL_DMA_Init+0x434>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00d      	beq.n	80060de <HAL_DMA_Init+0x3e6>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006130 <HAL_DMA_Init+0x438>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d008      	beq.n	80060de <HAL_DMA_Init+0x3e6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a18      	ldr	r2, [pc, #96]	@ (8006134 <HAL_DMA_Init+0x43c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d003      	beq.n	80060de <HAL_DMA_Init+0x3e6>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a17      	ldr	r2, [pc, #92]	@ (8006138 <HAL_DMA_Init+0x440>)
 80060dc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4b10      	ldr	r3, [pc, #64]	@ (800613c <HAL_DMA_Init+0x444>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d01c      	beq.n	8006140 <HAL_DMA_Init+0x448>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b80      	cmp	r3, #128	@ 0x80
 800610c:	d102      	bne.n	8006114 <HAL_DMA_Init+0x41c>
 800610e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006112:	e016      	b.n	8006142 <HAL_DMA_Init+0x44a>
 8006114:	2300      	movs	r3, #0
 8006116:	e014      	b.n	8006142 <HAL_DMA_Init+0x44a>
 8006118:	fe10803f 	.word	0xfe10803f
 800611c:	58025408 	.word	0x58025408
 8006120:	5802541c 	.word	0x5802541c
 8006124:	58025430 	.word	0x58025430
 8006128:	58025444 	.word	0x58025444
 800612c:	58025458 	.word	0x58025458
 8006130:	5802546c 	.word	0x5802546c
 8006134:	58025480 	.word	0x58025480
 8006138:	58025494 	.word	0x58025494
 800613c:	fffe000f 	.word	0xfffe000f
 8006140:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68d2      	ldr	r2, [r2, #12]
 8006146:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006160:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006170:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	4b6e      	ldr	r3, [pc, #440]	@ (8006340 <HAL_DMA_Init+0x648>)
 8006188:	4413      	add	r3, r2
 800618a:	4a6e      	ldr	r2, [pc, #440]	@ (8006344 <HAL_DMA_Init+0x64c>)
 800618c:	fba2 2303 	umull	r2, r3, r2, r3
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	009a      	lsls	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f002 f9a9 	bl	80084f0 <DMA_CalcBaseAndBitshift>
 800619e:	4603      	mov	r3, r0
 80061a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2201      	movs	r2, #1
 80061ac:	409a      	lsls	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	e008      	b.n	80061c6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2240      	movs	r2, #64	@ 0x40
 80061b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2203      	movs	r2, #3
 80061be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e0b7      	b.n	8006336 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a5f      	ldr	r2, [pc, #380]	@ (8006348 <HAL_DMA_Init+0x650>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d072      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5d      	ldr	r2, [pc, #372]	@ (800634c <HAL_DMA_Init+0x654>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d06d      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5c      	ldr	r2, [pc, #368]	@ (8006350 <HAL_DMA_Init+0x658>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d068      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006354 <HAL_DMA_Init+0x65c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d063      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a59      	ldr	r2, [pc, #356]	@ (8006358 <HAL_DMA_Init+0x660>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d05e      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a57      	ldr	r2, [pc, #348]	@ (800635c <HAL_DMA_Init+0x664>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d059      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a56      	ldr	r2, [pc, #344]	@ (8006360 <HAL_DMA_Init+0x668>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d054      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a54      	ldr	r2, [pc, #336]	@ (8006364 <HAL_DMA_Init+0x66c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d04f      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a53      	ldr	r2, [pc, #332]	@ (8006368 <HAL_DMA_Init+0x670>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d04a      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a51      	ldr	r2, [pc, #324]	@ (800636c <HAL_DMA_Init+0x674>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d045      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a50      	ldr	r2, [pc, #320]	@ (8006370 <HAL_DMA_Init+0x678>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d040      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a4e      	ldr	r2, [pc, #312]	@ (8006374 <HAL_DMA_Init+0x67c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d03b      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a4d      	ldr	r2, [pc, #308]	@ (8006378 <HAL_DMA_Init+0x680>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d036      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a4b      	ldr	r2, [pc, #300]	@ (800637c <HAL_DMA_Init+0x684>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d031      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4a      	ldr	r2, [pc, #296]	@ (8006380 <HAL_DMA_Init+0x688>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d02c      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a48      	ldr	r2, [pc, #288]	@ (8006384 <HAL_DMA_Init+0x68c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d027      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a47      	ldr	r2, [pc, #284]	@ (8006388 <HAL_DMA_Init+0x690>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d022      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a45      	ldr	r2, [pc, #276]	@ (800638c <HAL_DMA_Init+0x694>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01d      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a44      	ldr	r2, [pc, #272]	@ (8006390 <HAL_DMA_Init+0x698>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d018      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a42      	ldr	r2, [pc, #264]	@ (8006394 <HAL_DMA_Init+0x69c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a41      	ldr	r2, [pc, #260]	@ (8006398 <HAL_DMA_Init+0x6a0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3f      	ldr	r2, [pc, #252]	@ (800639c <HAL_DMA_Init+0x6a4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a3e      	ldr	r2, [pc, #248]	@ (80063a0 <HAL_DMA_Init+0x6a8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_DMA_Init+0x5be>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a3c      	ldr	r2, [pc, #240]	@ (80063a4 <HAL_DMA_Init+0x6ac>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <HAL_DMA_Init+0x5c2>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_DMA_Init+0x5c4>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d032      	beq.n	8006326 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f002 fa43 	bl	800874c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b80      	cmp	r3, #128	@ 0x80
 80062cc:	d102      	bne.n	80062d4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80062e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d010      	beq.n	8006314 <HAL_DMA_Init+0x61c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d80c      	bhi.n	8006314 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 fac0 	bl	8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006310:	605a      	str	r2, [r3, #4]
 8006312:	e008      	b.n	8006326 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	a7fdabf8 	.word	0xa7fdabf8
 8006344:	cccccccd 	.word	0xcccccccd
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8
 8006388:	58025408 	.word	0x58025408
 800638c:	5802541c 	.word	0x5802541c
 8006390:	58025430 	.word	0x58025430
 8006394:	58025444 	.word	0x58025444
 8006398:	58025458 	.word	0x58025458
 800639c:	5802546c 	.word	0x5802546c
 80063a0:	58025480 	.word	0x58025480
 80063a4:	58025494 	.word	0x58025494

080063a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e226      	b.n	8006812 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_DMA_Start_IT+0x2a>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e21f      	b.n	8006812 <HAL_DMA_Start_IT+0x46a>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	f040 820a 	bne.w	80067fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a68      	ldr	r2, [pc, #416]	@ (800659c <HAL_DMA_Start_IT+0x1f4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a66      	ldr	r2, [pc, #408]	@ (80065a0 <HAL_DMA_Start_IT+0x1f8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a65      	ldr	r2, [pc, #404]	@ (80065a4 <HAL_DMA_Start_IT+0x1fc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a63      	ldr	r2, [pc, #396]	@ (80065a8 <HAL_DMA_Start_IT+0x200>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a62      	ldr	r2, [pc, #392]	@ (80065ac <HAL_DMA_Start_IT+0x204>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a60      	ldr	r2, [pc, #384]	@ (80065b0 <HAL_DMA_Start_IT+0x208>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a5f      	ldr	r2, [pc, #380]	@ (80065b4 <HAL_DMA_Start_IT+0x20c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5d      	ldr	r2, [pc, #372]	@ (80065b8 <HAL_DMA_Start_IT+0x210>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a5c      	ldr	r2, [pc, #368]	@ (80065bc <HAL_DMA_Start_IT+0x214>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a5a      	ldr	r2, [pc, #360]	@ (80065c0 <HAL_DMA_Start_IT+0x218>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a59      	ldr	r2, [pc, #356]	@ (80065c4 <HAL_DMA_Start_IT+0x21c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a57      	ldr	r2, [pc, #348]	@ (80065c8 <HAL_DMA_Start_IT+0x220>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a56      	ldr	r2, [pc, #344]	@ (80065cc <HAL_DMA_Start_IT+0x224>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a54      	ldr	r2, [pc, #336]	@ (80065d0 <HAL_DMA_Start_IT+0x228>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a53      	ldr	r2, [pc, #332]	@ (80065d4 <HAL_DMA_Start_IT+0x22c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_Start_IT+0xee>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a51      	ldr	r2, [pc, #324]	@ (80065d8 <HAL_DMA_Start_IT+0x230>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d108      	bne.n	80064a8 <HAL_DMA_Start_IT+0x100>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	e007      	b.n	80064b8 <HAL_DMA_Start_IT+0x110>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f001 fe6a 	bl	8008198 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a34      	ldr	r2, [pc, #208]	@ (800659c <HAL_DMA_Start_IT+0x1f4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d04a      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a33      	ldr	r2, [pc, #204]	@ (80065a0 <HAL_DMA_Start_IT+0x1f8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d045      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a31      	ldr	r2, [pc, #196]	@ (80065a4 <HAL_DMA_Start_IT+0x1fc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d040      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a30      	ldr	r2, [pc, #192]	@ (80065a8 <HAL_DMA_Start_IT+0x200>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d03b      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	@ (80065ac <HAL_DMA_Start_IT+0x204>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d036      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2d      	ldr	r2, [pc, #180]	@ (80065b0 <HAL_DMA_Start_IT+0x208>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d031      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2b      	ldr	r2, [pc, #172]	@ (80065b4 <HAL_DMA_Start_IT+0x20c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d02c      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2a      	ldr	r2, [pc, #168]	@ (80065b8 <HAL_DMA_Start_IT+0x210>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d027      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a28      	ldr	r2, [pc, #160]	@ (80065bc <HAL_DMA_Start_IT+0x214>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d022      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a27      	ldr	r2, [pc, #156]	@ (80065c0 <HAL_DMA_Start_IT+0x218>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d01d      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a25      	ldr	r2, [pc, #148]	@ (80065c4 <HAL_DMA_Start_IT+0x21c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d018      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a24      	ldr	r2, [pc, #144]	@ (80065c8 <HAL_DMA_Start_IT+0x220>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a22      	ldr	r2, [pc, #136]	@ (80065cc <HAL_DMA_Start_IT+0x224>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00e      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	@ (80065d0 <HAL_DMA_Start_IT+0x228>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d009      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1f      	ldr	r2, [pc, #124]	@ (80065d4 <HAL_DMA_Start_IT+0x22c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_DMA_Start_IT+0x1bc>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1e      	ldr	r2, [pc, #120]	@ (80065d8 <HAL_DMA_Start_IT+0x230>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d101      	bne.n	8006568 <HAL_DMA_Start_IT+0x1c0>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <HAL_DMA_Start_IT+0x1c2>
 8006568:	2300      	movs	r3, #0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d036      	beq.n	80065dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 021e 	bic.w	r2, r3, #30
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0216 	orr.w	r2, r2, #22
 8006580:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03e      	beq.n	8006608 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0208 	orr.w	r2, r2, #8
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e035      	b.n	8006608 <HAL_DMA_Start_IT+0x260>
 800659c:	40020010 	.word	0x40020010
 80065a0:	40020028 	.word	0x40020028
 80065a4:	40020040 	.word	0x40020040
 80065a8:	40020058 	.word	0x40020058
 80065ac:	40020070 	.word	0x40020070
 80065b0:	40020088 	.word	0x40020088
 80065b4:	400200a0 	.word	0x400200a0
 80065b8:	400200b8 	.word	0x400200b8
 80065bc:	40020410 	.word	0x40020410
 80065c0:	40020428 	.word	0x40020428
 80065c4:	40020440 	.word	0x40020440
 80065c8:	40020458 	.word	0x40020458
 80065cc:	40020470 	.word	0x40020470
 80065d0:	40020488 	.word	0x40020488
 80065d4:	400204a0 	.word	0x400204a0
 80065d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f023 020e 	bic.w	r2, r3, #14
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 020a 	orr.w	r2, r2, #10
 80065ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0204 	orr.w	r2, r2, #4
 8006606:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a83      	ldr	r2, [pc, #524]	@ (800681c <HAL_DMA_Start_IT+0x474>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d072      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a82      	ldr	r2, [pc, #520]	@ (8006820 <HAL_DMA_Start_IT+0x478>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d06d      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a80      	ldr	r2, [pc, #512]	@ (8006824 <HAL_DMA_Start_IT+0x47c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d068      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a7f      	ldr	r2, [pc, #508]	@ (8006828 <HAL_DMA_Start_IT+0x480>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d063      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a7d      	ldr	r2, [pc, #500]	@ (800682c <HAL_DMA_Start_IT+0x484>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d05e      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a7c      	ldr	r2, [pc, #496]	@ (8006830 <HAL_DMA_Start_IT+0x488>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d059      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7a      	ldr	r2, [pc, #488]	@ (8006834 <HAL_DMA_Start_IT+0x48c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d054      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a79      	ldr	r2, [pc, #484]	@ (8006838 <HAL_DMA_Start_IT+0x490>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d04f      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a77      	ldr	r2, [pc, #476]	@ (800683c <HAL_DMA_Start_IT+0x494>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d04a      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a76      	ldr	r2, [pc, #472]	@ (8006840 <HAL_DMA_Start_IT+0x498>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d045      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a74      	ldr	r2, [pc, #464]	@ (8006844 <HAL_DMA_Start_IT+0x49c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d040      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a73      	ldr	r2, [pc, #460]	@ (8006848 <HAL_DMA_Start_IT+0x4a0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d03b      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a71      	ldr	r2, [pc, #452]	@ (800684c <HAL_DMA_Start_IT+0x4a4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d036      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a70      	ldr	r2, [pc, #448]	@ (8006850 <HAL_DMA_Start_IT+0x4a8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d031      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a6e      	ldr	r2, [pc, #440]	@ (8006854 <HAL_DMA_Start_IT+0x4ac>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02c      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a6d      	ldr	r2, [pc, #436]	@ (8006858 <HAL_DMA_Start_IT+0x4b0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d027      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a6b      	ldr	r2, [pc, #428]	@ (800685c <HAL_DMA_Start_IT+0x4b4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d022      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a6a      	ldr	r2, [pc, #424]	@ (8006860 <HAL_DMA_Start_IT+0x4b8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d01d      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a68      	ldr	r2, [pc, #416]	@ (8006864 <HAL_DMA_Start_IT+0x4bc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a67      	ldr	r2, [pc, #412]	@ (8006868 <HAL_DMA_Start_IT+0x4c0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a65      	ldr	r2, [pc, #404]	@ (800686c <HAL_DMA_Start_IT+0x4c4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a64      	ldr	r2, [pc, #400]	@ (8006870 <HAL_DMA_Start_IT+0x4c8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a62      	ldr	r2, [pc, #392]	@ (8006874 <HAL_DMA_Start_IT+0x4cc>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_DMA_Start_IT+0x350>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a61      	ldr	r2, [pc, #388]	@ (8006878 <HAL_DMA_Start_IT+0x4d0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d101      	bne.n	80066fc <HAL_DMA_Start_IT+0x354>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_DMA_Start_IT+0x356>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01a      	beq.n	8006738 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800671a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800671e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006732:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006736:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a37      	ldr	r2, [pc, #220]	@ (800681c <HAL_DMA_Start_IT+0x474>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d04a      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a36      	ldr	r2, [pc, #216]	@ (8006820 <HAL_DMA_Start_IT+0x478>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d045      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a34      	ldr	r2, [pc, #208]	@ (8006824 <HAL_DMA_Start_IT+0x47c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d040      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a33      	ldr	r2, [pc, #204]	@ (8006828 <HAL_DMA_Start_IT+0x480>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d03b      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a31      	ldr	r2, [pc, #196]	@ (800682c <HAL_DMA_Start_IT+0x484>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d036      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a30      	ldr	r2, [pc, #192]	@ (8006830 <HAL_DMA_Start_IT+0x488>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d031      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a2e      	ldr	r2, [pc, #184]	@ (8006834 <HAL_DMA_Start_IT+0x48c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d02c      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a2d      	ldr	r2, [pc, #180]	@ (8006838 <HAL_DMA_Start_IT+0x490>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d027      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a2b      	ldr	r2, [pc, #172]	@ (800683c <HAL_DMA_Start_IT+0x494>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d022      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2a      	ldr	r2, [pc, #168]	@ (8006840 <HAL_DMA_Start_IT+0x498>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d01d      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a28      	ldr	r2, [pc, #160]	@ (8006844 <HAL_DMA_Start_IT+0x49c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d018      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a27      	ldr	r2, [pc, #156]	@ (8006848 <HAL_DMA_Start_IT+0x4a0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d013      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a25      	ldr	r2, [pc, #148]	@ (800684c <HAL_DMA_Start_IT+0x4a4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00e      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a24      	ldr	r2, [pc, #144]	@ (8006850 <HAL_DMA_Start_IT+0x4a8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d009      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a22      	ldr	r2, [pc, #136]	@ (8006854 <HAL_DMA_Start_IT+0x4ac>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d004      	beq.n	80067d8 <HAL_DMA_Start_IT+0x430>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a21      	ldr	r2, [pc, #132]	@ (8006858 <HAL_DMA_Start_IT+0x4b0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d108      	bne.n	80067ea <HAL_DMA_Start_IT+0x442>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e012      	b.n	8006810 <HAL_DMA_Start_IT+0x468>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e009      	b.n	8006810 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40020010 	.word	0x40020010
 8006820:	40020028 	.word	0x40020028
 8006824:	40020040 	.word	0x40020040
 8006828:	40020058 	.word	0x40020058
 800682c:	40020070 	.word	0x40020070
 8006830:	40020088 	.word	0x40020088
 8006834:	400200a0 	.word	0x400200a0
 8006838:	400200b8 	.word	0x400200b8
 800683c:	40020410 	.word	0x40020410
 8006840:	40020428 	.word	0x40020428
 8006844:	40020440 	.word	0x40020440
 8006848:	40020458 	.word	0x40020458
 800684c:	40020470 	.word	0x40020470
 8006850:	40020488 	.word	0x40020488
 8006854:	400204a0 	.word	0x400204a0
 8006858:	400204b8 	.word	0x400204b8
 800685c:	58025408 	.word	0x58025408
 8006860:	5802541c 	.word	0x5802541c
 8006864:	58025430 	.word	0x58025430
 8006868:	58025444 	.word	0x58025444
 800686c:	58025458 	.word	0x58025458
 8006870:	5802546c 	.word	0x5802546c
 8006874:	58025480 	.word	0x58025480
 8006878:	58025494 	.word	0x58025494

0800687c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006884:	f7fd f83a 	bl	80038fc <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e2dc      	b.n	8006e4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d008      	beq.n	80068b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2280      	movs	r2, #128	@ 0x80
 80068a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e2cd      	b.n	8006e4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a76      	ldr	r2, [pc, #472]	@ (8006a90 <HAL_DMA_Abort+0x214>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d04a      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a74      	ldr	r2, [pc, #464]	@ (8006a94 <HAL_DMA_Abort+0x218>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d045      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a73      	ldr	r2, [pc, #460]	@ (8006a98 <HAL_DMA_Abort+0x21c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d040      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a71      	ldr	r2, [pc, #452]	@ (8006a9c <HAL_DMA_Abort+0x220>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d03b      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a70      	ldr	r2, [pc, #448]	@ (8006aa0 <HAL_DMA_Abort+0x224>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d036      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a6e      	ldr	r2, [pc, #440]	@ (8006aa4 <HAL_DMA_Abort+0x228>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d031      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a6d      	ldr	r2, [pc, #436]	@ (8006aa8 <HAL_DMA_Abort+0x22c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d02c      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a6b      	ldr	r2, [pc, #428]	@ (8006aac <HAL_DMA_Abort+0x230>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d027      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a6a      	ldr	r2, [pc, #424]	@ (8006ab0 <HAL_DMA_Abort+0x234>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d022      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a68      	ldr	r2, [pc, #416]	@ (8006ab4 <HAL_DMA_Abort+0x238>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01d      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a67      	ldr	r2, [pc, #412]	@ (8006ab8 <HAL_DMA_Abort+0x23c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d018      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a65      	ldr	r2, [pc, #404]	@ (8006abc <HAL_DMA_Abort+0x240>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a64      	ldr	r2, [pc, #400]	@ (8006ac0 <HAL_DMA_Abort+0x244>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00e      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a62      	ldr	r2, [pc, #392]	@ (8006ac4 <HAL_DMA_Abort+0x248>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d009      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a61      	ldr	r2, [pc, #388]	@ (8006ac8 <HAL_DMA_Abort+0x24c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d004      	beq.n	8006952 <HAL_DMA_Abort+0xd6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a5f      	ldr	r2, [pc, #380]	@ (8006acc <HAL_DMA_Abort+0x250>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <HAL_DMA_Abort+0xda>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <HAL_DMA_Abort+0xdc>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d013      	beq.n	8006984 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 021e 	bic.w	r2, r2, #30
 800696a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800697a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e00a      	b.n	800699a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 020e 	bic.w	r2, r2, #14
 8006992:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a3c      	ldr	r2, [pc, #240]	@ (8006a90 <HAL_DMA_Abort+0x214>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d072      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a3a      	ldr	r2, [pc, #232]	@ (8006a94 <HAL_DMA_Abort+0x218>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d06d      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a39      	ldr	r2, [pc, #228]	@ (8006a98 <HAL_DMA_Abort+0x21c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d068      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a37      	ldr	r2, [pc, #220]	@ (8006a9c <HAL_DMA_Abort+0x220>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d063      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a36      	ldr	r2, [pc, #216]	@ (8006aa0 <HAL_DMA_Abort+0x224>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d05e      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a34      	ldr	r2, [pc, #208]	@ (8006aa4 <HAL_DMA_Abort+0x228>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d059      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a33      	ldr	r2, [pc, #204]	@ (8006aa8 <HAL_DMA_Abort+0x22c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d054      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a31      	ldr	r2, [pc, #196]	@ (8006aac <HAL_DMA_Abort+0x230>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d04f      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a30      	ldr	r2, [pc, #192]	@ (8006ab0 <HAL_DMA_Abort+0x234>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d04a      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a2e      	ldr	r2, [pc, #184]	@ (8006ab4 <HAL_DMA_Abort+0x238>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d045      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a2d      	ldr	r2, [pc, #180]	@ (8006ab8 <HAL_DMA_Abort+0x23c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d040      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8006abc <HAL_DMA_Abort+0x240>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d03b      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2a      	ldr	r2, [pc, #168]	@ (8006ac0 <HAL_DMA_Abort+0x244>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d036      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a28      	ldr	r2, [pc, #160]	@ (8006ac4 <HAL_DMA_Abort+0x248>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d031      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a27      	ldr	r2, [pc, #156]	@ (8006ac8 <HAL_DMA_Abort+0x24c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d02c      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a25      	ldr	r2, [pc, #148]	@ (8006acc <HAL_DMA_Abort+0x250>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d027      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a24      	ldr	r2, [pc, #144]	@ (8006ad0 <HAL_DMA_Abort+0x254>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d022      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a22      	ldr	r2, [pc, #136]	@ (8006ad4 <HAL_DMA_Abort+0x258>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <HAL_DMA_Abort+0x25c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d018      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006adc <HAL_DMA_Abort+0x260>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <HAL_DMA_Abort+0x264>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae4 <HAL_DMA_Abort+0x268>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <HAL_DMA_Abort+0x26c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_DMA_Abort+0x20e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a19      	ldr	r2, [pc, #100]	@ (8006aec <HAL_DMA_Abort+0x270>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d132      	bne.n	8006af0 <HAL_DMA_Abort+0x274>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e031      	b.n	8006af2 <HAL_DMA_Abort+0x276>
 8006a8e:	bf00      	nop
 8006a90:	40020010 	.word	0x40020010
 8006a94:	40020028 	.word	0x40020028
 8006a98:	40020040 	.word	0x40020040
 8006a9c:	40020058 	.word	0x40020058
 8006aa0:	40020070 	.word	0x40020070
 8006aa4:	40020088 	.word	0x40020088
 8006aa8:	400200a0 	.word	0x400200a0
 8006aac:	400200b8 	.word	0x400200b8
 8006ab0:	40020410 	.word	0x40020410
 8006ab4:	40020428 	.word	0x40020428
 8006ab8:	40020440 	.word	0x40020440
 8006abc:	40020458 	.word	0x40020458
 8006ac0:	40020470 	.word	0x40020470
 8006ac4:	40020488 	.word	0x40020488
 8006ac8:	400204a0 	.word	0x400204a0
 8006acc:	400204b8 	.word	0x400204b8
 8006ad0:	58025408 	.word	0x58025408
 8006ad4:	5802541c 	.word	0x5802541c
 8006ad8:	58025430 	.word	0x58025430
 8006adc:	58025444 	.word	0x58025444
 8006ae0:	58025458 	.word	0x58025458
 8006ae4:	5802546c 	.word	0x5802546c
 8006ae8:	58025480 	.word	0x58025480
 8006aec:	58025494 	.word	0x58025494
 8006af0:	2300      	movs	r3, #0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a6d      	ldr	r2, [pc, #436]	@ (8006cc0 <HAL_DMA_Abort+0x444>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d04a      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a6b      	ldr	r2, [pc, #428]	@ (8006cc4 <HAL_DMA_Abort+0x448>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d045      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a6a      	ldr	r2, [pc, #424]	@ (8006cc8 <HAL_DMA_Abort+0x44c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d040      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a68      	ldr	r2, [pc, #416]	@ (8006ccc <HAL_DMA_Abort+0x450>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d03b      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a67      	ldr	r2, [pc, #412]	@ (8006cd0 <HAL_DMA_Abort+0x454>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d036      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a65      	ldr	r2, [pc, #404]	@ (8006cd4 <HAL_DMA_Abort+0x458>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d031      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a64      	ldr	r2, [pc, #400]	@ (8006cd8 <HAL_DMA_Abort+0x45c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d02c      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a62      	ldr	r2, [pc, #392]	@ (8006cdc <HAL_DMA_Abort+0x460>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d027      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a61      	ldr	r2, [pc, #388]	@ (8006ce0 <HAL_DMA_Abort+0x464>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a5f      	ldr	r2, [pc, #380]	@ (8006ce4 <HAL_DMA_Abort+0x468>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01d      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ce8 <HAL_DMA_Abort+0x46c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a5c      	ldr	r2, [pc, #368]	@ (8006cec <HAL_DMA_Abort+0x470>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a5b      	ldr	r2, [pc, #364]	@ (8006cf0 <HAL_DMA_Abort+0x474>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a59      	ldr	r2, [pc, #356]	@ (8006cf4 <HAL_DMA_Abort+0x478>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a58      	ldr	r2, [pc, #352]	@ (8006cf8 <HAL_DMA_Abort+0x47c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_DMA_Abort+0x32a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a56      	ldr	r2, [pc, #344]	@ (8006cfc <HAL_DMA_Abort+0x480>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d108      	bne.n	8006bb8 <HAL_DMA_Abort+0x33c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0201 	bic.w	r2, r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e007      	b.n	8006bc8 <HAL_DMA_Abort+0x34c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bc8:	e013      	b.n	8006bf2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bca:	f7fc fe97 	bl	80038fc <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b05      	cmp	r3, #5
 8006bd6:	d90c      	bls.n	8006bf2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2203      	movs	r2, #3
 8006be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e12d      	b.n	8006e4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e5      	bne.n	8006bca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc0 <HAL_DMA_Abort+0x444>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d04a      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006cc4 <HAL_DMA_Abort+0x448>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d045      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2c      	ldr	r2, [pc, #176]	@ (8006cc8 <HAL_DMA_Abort+0x44c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d040      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a2a      	ldr	r2, [pc, #168]	@ (8006ccc <HAL_DMA_Abort+0x450>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d03b      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a29      	ldr	r2, [pc, #164]	@ (8006cd0 <HAL_DMA_Abort+0x454>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d036      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a27      	ldr	r2, [pc, #156]	@ (8006cd4 <HAL_DMA_Abort+0x458>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d031      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a26      	ldr	r2, [pc, #152]	@ (8006cd8 <HAL_DMA_Abort+0x45c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d02c      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a24      	ldr	r2, [pc, #144]	@ (8006cdc <HAL_DMA_Abort+0x460>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d027      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a23      	ldr	r2, [pc, #140]	@ (8006ce0 <HAL_DMA_Abort+0x464>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d022      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a21      	ldr	r2, [pc, #132]	@ (8006ce4 <HAL_DMA_Abort+0x468>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01d      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a20      	ldr	r2, [pc, #128]	@ (8006ce8 <HAL_DMA_Abort+0x46c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d018      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1e      	ldr	r2, [pc, #120]	@ (8006cec <HAL_DMA_Abort+0x470>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf0 <HAL_DMA_Abort+0x474>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf4 <HAL_DMA_Abort+0x478>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d009      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf8 <HAL_DMA_Abort+0x47c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d004      	beq.n	8006c9e <HAL_DMA_Abort+0x422>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a18      	ldr	r2, [pc, #96]	@ (8006cfc <HAL_DMA_Abort+0x480>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d101      	bne.n	8006ca2 <HAL_DMA_Abort+0x426>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <HAL_DMA_Abort+0x428>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d02b      	beq.n	8006d00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	223f      	movs	r2, #63	@ 0x3f
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	609a      	str	r2, [r3, #8]
 8006cbe:	e02a      	b.n	8006d16 <HAL_DMA_Abort+0x49a>
 8006cc0:	40020010 	.word	0x40020010
 8006cc4:	40020028 	.word	0x40020028
 8006cc8:	40020040 	.word	0x40020040
 8006ccc:	40020058 	.word	0x40020058
 8006cd0:	40020070 	.word	0x40020070
 8006cd4:	40020088 	.word	0x40020088
 8006cd8:	400200a0 	.word	0x400200a0
 8006cdc:	400200b8 	.word	0x400200b8
 8006ce0:	40020410 	.word	0x40020410
 8006ce4:	40020428 	.word	0x40020428
 8006ce8:	40020440 	.word	0x40020440
 8006cec:	40020458 	.word	0x40020458
 8006cf0:	40020470 	.word	0x40020470
 8006cf4:	40020488 	.word	0x40020488
 8006cf8:	400204a0 	.word	0x400204a0
 8006cfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2201      	movs	r2, #1
 8006d10:	409a      	lsls	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8006e58 <HAL_DMA_Abort+0x5dc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d072      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a4d      	ldr	r2, [pc, #308]	@ (8006e5c <HAL_DMA_Abort+0x5e0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d06d      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8006e60 <HAL_DMA_Abort+0x5e4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d068      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a4a      	ldr	r2, [pc, #296]	@ (8006e64 <HAL_DMA_Abort+0x5e8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d063      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a49      	ldr	r2, [pc, #292]	@ (8006e68 <HAL_DMA_Abort+0x5ec>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d05e      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a47      	ldr	r2, [pc, #284]	@ (8006e6c <HAL_DMA_Abort+0x5f0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d059      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a46      	ldr	r2, [pc, #280]	@ (8006e70 <HAL_DMA_Abort+0x5f4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d054      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a44      	ldr	r2, [pc, #272]	@ (8006e74 <HAL_DMA_Abort+0x5f8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d04f      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a43      	ldr	r2, [pc, #268]	@ (8006e78 <HAL_DMA_Abort+0x5fc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04a      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a41      	ldr	r2, [pc, #260]	@ (8006e7c <HAL_DMA_Abort+0x600>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d045      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a40      	ldr	r2, [pc, #256]	@ (8006e80 <HAL_DMA_Abort+0x604>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d040      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a3e      	ldr	r2, [pc, #248]	@ (8006e84 <HAL_DMA_Abort+0x608>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d03b      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a3d      	ldr	r2, [pc, #244]	@ (8006e88 <HAL_DMA_Abort+0x60c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d036      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8006e8c <HAL_DMA_Abort+0x610>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d031      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3a      	ldr	r2, [pc, #232]	@ (8006e90 <HAL_DMA_Abort+0x614>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d02c      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a38      	ldr	r2, [pc, #224]	@ (8006e94 <HAL_DMA_Abort+0x618>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d027      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a37      	ldr	r2, [pc, #220]	@ (8006e98 <HAL_DMA_Abort+0x61c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a35      	ldr	r2, [pc, #212]	@ (8006e9c <HAL_DMA_Abort+0x620>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a34      	ldr	r2, [pc, #208]	@ (8006ea0 <HAL_DMA_Abort+0x624>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a32      	ldr	r2, [pc, #200]	@ (8006ea4 <HAL_DMA_Abort+0x628>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a31      	ldr	r2, [pc, #196]	@ (8006ea8 <HAL_DMA_Abort+0x62c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a2f      	ldr	r2, [pc, #188]	@ (8006eac <HAL_DMA_Abort+0x630>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2e      	ldr	r2, [pc, #184]	@ (8006eb0 <HAL_DMA_Abort+0x634>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_DMA_Abort+0x58a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb4 <HAL_DMA_Abort+0x638>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d101      	bne.n	8006e0a <HAL_DMA_Abort+0x58e>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <HAL_DMA_Abort+0x590>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d015      	beq.n	8006e3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40020010 	.word	0x40020010
 8006e5c:	40020028 	.word	0x40020028
 8006e60:	40020040 	.word	0x40020040
 8006e64:	40020058 	.word	0x40020058
 8006e68:	40020070 	.word	0x40020070
 8006e6c:	40020088 	.word	0x40020088
 8006e70:	400200a0 	.word	0x400200a0
 8006e74:	400200b8 	.word	0x400200b8
 8006e78:	40020410 	.word	0x40020410
 8006e7c:	40020428 	.word	0x40020428
 8006e80:	40020440 	.word	0x40020440
 8006e84:	40020458 	.word	0x40020458
 8006e88:	40020470 	.word	0x40020470
 8006e8c:	40020488 	.word	0x40020488
 8006e90:	400204a0 	.word	0x400204a0
 8006e94:	400204b8 	.word	0x400204b8
 8006e98:	58025408 	.word	0x58025408
 8006e9c:	5802541c 	.word	0x5802541c
 8006ea0:	58025430 	.word	0x58025430
 8006ea4:	58025444 	.word	0x58025444
 8006ea8:	58025458 	.word	0x58025458
 8006eac:	5802546c 	.word	0x5802546c
 8006eb0:	58025480 	.word	0x58025480
 8006eb4:	58025494 	.word	0x58025494

08006eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e237      	b.n	800733a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2280      	movs	r2, #128	@ 0x80
 8006eda:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e22c      	b.n	800733a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5c      	ldr	r2, [pc, #368]	@ (8007058 <HAL_DMA_Abort_IT+0x1a0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d04a      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5b      	ldr	r2, [pc, #364]	@ (800705c <HAL_DMA_Abort_IT+0x1a4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d045      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a59      	ldr	r2, [pc, #356]	@ (8007060 <HAL_DMA_Abort_IT+0x1a8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d040      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a58      	ldr	r2, [pc, #352]	@ (8007064 <HAL_DMA_Abort_IT+0x1ac>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d03b      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a56      	ldr	r2, [pc, #344]	@ (8007068 <HAL_DMA_Abort_IT+0x1b0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d036      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a55      	ldr	r2, [pc, #340]	@ (800706c <HAL_DMA_Abort_IT+0x1b4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d031      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a53      	ldr	r2, [pc, #332]	@ (8007070 <HAL_DMA_Abort_IT+0x1b8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d02c      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a52      	ldr	r2, [pc, #328]	@ (8007074 <HAL_DMA_Abort_IT+0x1bc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d027      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a50      	ldr	r2, [pc, #320]	@ (8007078 <HAL_DMA_Abort_IT+0x1c0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d022      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a4f      	ldr	r2, [pc, #316]	@ (800707c <HAL_DMA_Abort_IT+0x1c4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d01d      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a4d      	ldr	r2, [pc, #308]	@ (8007080 <HAL_DMA_Abort_IT+0x1c8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d018      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a4c      	ldr	r2, [pc, #304]	@ (8007084 <HAL_DMA_Abort_IT+0x1cc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d013      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8007088 <HAL_DMA_Abort_IT+0x1d0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a49      	ldr	r2, [pc, #292]	@ (800708c <HAL_DMA_Abort_IT+0x1d4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d009      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a47      	ldr	r2, [pc, #284]	@ (8007090 <HAL_DMA_Abort_IT+0x1d8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_DMA_Abort_IT+0xc8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a46      	ldr	r2, [pc, #280]	@ (8007094 <HAL_DMA_Abort_IT+0x1dc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d101      	bne.n	8006f84 <HAL_DMA_Abort_IT+0xcc>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <HAL_DMA_Abort_IT+0xce>
 8006f84:	2300      	movs	r3, #0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8086 	beq.w	8007098 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2204      	movs	r2, #4
 8006f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a2f      	ldr	r2, [pc, #188]	@ (8007058 <HAL_DMA_Abort_IT+0x1a0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d04a      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800705c <HAL_DMA_Abort_IT+0x1a4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d045      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2c      	ldr	r2, [pc, #176]	@ (8007060 <HAL_DMA_Abort_IT+0x1a8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d040      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8007064 <HAL_DMA_Abort_IT+0x1ac>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d03b      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a29      	ldr	r2, [pc, #164]	@ (8007068 <HAL_DMA_Abort_IT+0x1b0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d036      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a28      	ldr	r2, [pc, #160]	@ (800706c <HAL_DMA_Abort_IT+0x1b4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d031      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a26      	ldr	r2, [pc, #152]	@ (8007070 <HAL_DMA_Abort_IT+0x1b8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d02c      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a25      	ldr	r2, [pc, #148]	@ (8007074 <HAL_DMA_Abort_IT+0x1bc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d027      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a23      	ldr	r2, [pc, #140]	@ (8007078 <HAL_DMA_Abort_IT+0x1c0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d022      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a22      	ldr	r2, [pc, #136]	@ (800707c <HAL_DMA_Abort_IT+0x1c4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d01d      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a20      	ldr	r2, [pc, #128]	@ (8007080 <HAL_DMA_Abort_IT+0x1c8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d018      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1f      	ldr	r2, [pc, #124]	@ (8007084 <HAL_DMA_Abort_IT+0x1cc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d013      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1d      	ldr	r2, [pc, #116]	@ (8007088 <HAL_DMA_Abort_IT+0x1d0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d00e      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1c      	ldr	r2, [pc, #112]	@ (800708c <HAL_DMA_Abort_IT+0x1d4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d009      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1a      	ldr	r2, [pc, #104]	@ (8007090 <HAL_DMA_Abort_IT+0x1d8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <HAL_DMA_Abort_IT+0x17c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a19      	ldr	r2, [pc, #100]	@ (8007094 <HAL_DMA_Abort_IT+0x1dc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d108      	bne.n	8007046 <HAL_DMA_Abort_IT+0x18e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e178      	b.n	8007338 <HAL_DMA_Abort_IT+0x480>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e16f      	b.n	8007338 <HAL_DMA_Abort_IT+0x480>
 8007058:	40020010 	.word	0x40020010
 800705c:	40020028 	.word	0x40020028
 8007060:	40020040 	.word	0x40020040
 8007064:	40020058 	.word	0x40020058
 8007068:	40020070 	.word	0x40020070
 800706c:	40020088 	.word	0x40020088
 8007070:	400200a0 	.word	0x400200a0
 8007074:	400200b8 	.word	0x400200b8
 8007078:	40020410 	.word	0x40020410
 800707c:	40020428 	.word	0x40020428
 8007080:	40020440 	.word	0x40020440
 8007084:	40020458 	.word	0x40020458
 8007088:	40020470 	.word	0x40020470
 800708c:	40020488 	.word	0x40020488
 8007090:	400204a0 	.word	0x400204a0
 8007094:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 020e 	bic.w	r2, r2, #14
 80070a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6c      	ldr	r2, [pc, #432]	@ (8007260 <HAL_DMA_Abort_IT+0x3a8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d04a      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a6b      	ldr	r2, [pc, #428]	@ (8007264 <HAL_DMA_Abort_IT+0x3ac>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d045      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a69      	ldr	r2, [pc, #420]	@ (8007268 <HAL_DMA_Abort_IT+0x3b0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d040      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a68      	ldr	r2, [pc, #416]	@ (800726c <HAL_DMA_Abort_IT+0x3b4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d03b      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a66      	ldr	r2, [pc, #408]	@ (8007270 <HAL_DMA_Abort_IT+0x3b8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d036      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a65      	ldr	r2, [pc, #404]	@ (8007274 <HAL_DMA_Abort_IT+0x3bc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d031      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a63      	ldr	r2, [pc, #396]	@ (8007278 <HAL_DMA_Abort_IT+0x3c0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d02c      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a62      	ldr	r2, [pc, #392]	@ (800727c <HAL_DMA_Abort_IT+0x3c4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d027      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a60      	ldr	r2, [pc, #384]	@ (8007280 <HAL_DMA_Abort_IT+0x3c8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d022      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a5f      	ldr	r2, [pc, #380]	@ (8007284 <HAL_DMA_Abort_IT+0x3cc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d01d      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a5d      	ldr	r2, [pc, #372]	@ (8007288 <HAL_DMA_Abort_IT+0x3d0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d018      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a5c      	ldr	r2, [pc, #368]	@ (800728c <HAL_DMA_Abort_IT+0x3d4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a5a      	ldr	r2, [pc, #360]	@ (8007290 <HAL_DMA_Abort_IT+0x3d8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00e      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a59      	ldr	r2, [pc, #356]	@ (8007294 <HAL_DMA_Abort_IT+0x3dc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d009      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a57      	ldr	r2, [pc, #348]	@ (8007298 <HAL_DMA_Abort_IT+0x3e0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d004      	beq.n	8007148 <HAL_DMA_Abort_IT+0x290>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a56      	ldr	r2, [pc, #344]	@ (800729c <HAL_DMA_Abort_IT+0x3e4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d108      	bne.n	800715a <HAL_DMA_Abort_IT+0x2a2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0201 	bic.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e007      	b.n	800716a <HAL_DMA_Abort_IT+0x2b2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0201 	bic.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a3c      	ldr	r2, [pc, #240]	@ (8007260 <HAL_DMA_Abort_IT+0x3a8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d072      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a3a      	ldr	r2, [pc, #232]	@ (8007264 <HAL_DMA_Abort_IT+0x3ac>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d06d      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a39      	ldr	r2, [pc, #228]	@ (8007268 <HAL_DMA_Abort_IT+0x3b0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d068      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a37      	ldr	r2, [pc, #220]	@ (800726c <HAL_DMA_Abort_IT+0x3b4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d063      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a36      	ldr	r2, [pc, #216]	@ (8007270 <HAL_DMA_Abort_IT+0x3b8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d05e      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a34      	ldr	r2, [pc, #208]	@ (8007274 <HAL_DMA_Abort_IT+0x3bc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d059      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a33      	ldr	r2, [pc, #204]	@ (8007278 <HAL_DMA_Abort_IT+0x3c0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d054      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a31      	ldr	r2, [pc, #196]	@ (800727c <HAL_DMA_Abort_IT+0x3c4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d04f      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a30      	ldr	r2, [pc, #192]	@ (8007280 <HAL_DMA_Abort_IT+0x3c8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d04a      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007284 <HAL_DMA_Abort_IT+0x3cc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d045      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007288 <HAL_DMA_Abort_IT+0x3d0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d040      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2b      	ldr	r2, [pc, #172]	@ (800728c <HAL_DMA_Abort_IT+0x3d4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d03b      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007290 <HAL_DMA_Abort_IT+0x3d8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d036      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a28      	ldr	r2, [pc, #160]	@ (8007294 <HAL_DMA_Abort_IT+0x3dc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d031      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a27      	ldr	r2, [pc, #156]	@ (8007298 <HAL_DMA_Abort_IT+0x3e0>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d02c      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a25      	ldr	r2, [pc, #148]	@ (800729c <HAL_DMA_Abort_IT+0x3e4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d027      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a24      	ldr	r2, [pc, #144]	@ (80072a0 <HAL_DMA_Abort_IT+0x3e8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d022      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a22      	ldr	r2, [pc, #136]	@ (80072a4 <HAL_DMA_Abort_IT+0x3ec>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01d      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a21      	ldr	r2, [pc, #132]	@ (80072a8 <HAL_DMA_Abort_IT+0x3f0>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d018      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1f      	ldr	r2, [pc, #124]	@ (80072ac <HAL_DMA_Abort_IT+0x3f4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1e      	ldr	r2, [pc, #120]	@ (80072b0 <HAL_DMA_Abort_IT+0x3f8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00e      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1c      	ldr	r2, [pc, #112]	@ (80072b4 <HAL_DMA_Abort_IT+0x3fc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d009      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1b      	ldr	r2, [pc, #108]	@ (80072b8 <HAL_DMA_Abort_IT+0x400>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d004      	beq.n	800725a <HAL_DMA_Abort_IT+0x3a2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a19      	ldr	r2, [pc, #100]	@ (80072bc <HAL_DMA_Abort_IT+0x404>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d132      	bne.n	80072c0 <HAL_DMA_Abort_IT+0x408>
 800725a:	2301      	movs	r3, #1
 800725c:	e031      	b.n	80072c2 <HAL_DMA_Abort_IT+0x40a>
 800725e:	bf00      	nop
 8007260:	40020010 	.word	0x40020010
 8007264:	40020028 	.word	0x40020028
 8007268:	40020040 	.word	0x40020040
 800726c:	40020058 	.word	0x40020058
 8007270:	40020070 	.word	0x40020070
 8007274:	40020088 	.word	0x40020088
 8007278:	400200a0 	.word	0x400200a0
 800727c:	400200b8 	.word	0x400200b8
 8007280:	40020410 	.word	0x40020410
 8007284:	40020428 	.word	0x40020428
 8007288:	40020440 	.word	0x40020440
 800728c:	40020458 	.word	0x40020458
 8007290:	40020470 	.word	0x40020470
 8007294:	40020488 	.word	0x40020488
 8007298:	400204a0 	.word	0x400204a0
 800729c:	400204b8 	.word	0x400204b8
 80072a0:	58025408 	.word	0x58025408
 80072a4:	5802541c 	.word	0x5802541c
 80072a8:	58025430 	.word	0x58025430
 80072ac:	58025444 	.word	0x58025444
 80072b0:	58025458 	.word	0x58025458
 80072b4:	5802546c 	.word	0x5802546c
 80072b8:	58025480 	.word	0x58025480
 80072bc:	58025494 	.word	0x58025494
 80072c0:	2300      	movs	r3, #0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d028      	beq.n	8007318 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2201      	movs	r2, #1
 80072e6:	409a      	lsls	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80072f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800730c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007316:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop

08007344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08a      	sub	sp, #40	@ 0x28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007350:	4b67      	ldr	r3, [pc, #412]	@ (80074f0 <HAL_DMA_IRQHandler+0x1ac>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a67      	ldr	r2, [pc, #412]	@ (80074f4 <HAL_DMA_IRQHandler+0x1b0>)
 8007356:	fba2 2303 	umull	r2, r3, r2, r3
 800735a:	0a9b      	lsrs	r3, r3, #10
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007362:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007368:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a5f      	ldr	r2, [pc, #380]	@ (80074f8 <HAL_DMA_IRQHandler+0x1b4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d04a      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a5d      	ldr	r2, [pc, #372]	@ (80074fc <HAL_DMA_IRQHandler+0x1b8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d045      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a5c      	ldr	r2, [pc, #368]	@ (8007500 <HAL_DMA_IRQHandler+0x1bc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d040      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a5a      	ldr	r2, [pc, #360]	@ (8007504 <HAL_DMA_IRQHandler+0x1c0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d03b      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a59      	ldr	r2, [pc, #356]	@ (8007508 <HAL_DMA_IRQHandler+0x1c4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d036      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a57      	ldr	r2, [pc, #348]	@ (800750c <HAL_DMA_IRQHandler+0x1c8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d031      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a56      	ldr	r2, [pc, #344]	@ (8007510 <HAL_DMA_IRQHandler+0x1cc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d02c      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a54      	ldr	r2, [pc, #336]	@ (8007514 <HAL_DMA_IRQHandler+0x1d0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d027      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a53      	ldr	r2, [pc, #332]	@ (8007518 <HAL_DMA_IRQHandler+0x1d4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d022      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a51      	ldr	r2, [pc, #324]	@ (800751c <HAL_DMA_IRQHandler+0x1d8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d01d      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a50      	ldr	r2, [pc, #320]	@ (8007520 <HAL_DMA_IRQHandler+0x1dc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d018      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a4e      	ldr	r2, [pc, #312]	@ (8007524 <HAL_DMA_IRQHandler+0x1e0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d013      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a4d      	ldr	r2, [pc, #308]	@ (8007528 <HAL_DMA_IRQHandler+0x1e4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00e      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a4b      	ldr	r2, [pc, #300]	@ (800752c <HAL_DMA_IRQHandler+0x1e8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d009      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4a      	ldr	r2, [pc, #296]	@ (8007530 <HAL_DMA_IRQHandler+0x1ec>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d004      	beq.n	8007416 <HAL_DMA_IRQHandler+0xd2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a48      	ldr	r2, [pc, #288]	@ (8007534 <HAL_DMA_IRQHandler+0x1f0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d101      	bne.n	800741a <HAL_DMA_IRQHandler+0xd6>
 8007416:	2301      	movs	r3, #1
 8007418:	e000      	b.n	800741c <HAL_DMA_IRQHandler+0xd8>
 800741a:	2300      	movs	r3, #0
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 842b 	beq.w	8007c78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2208      	movs	r2, #8
 800742c:	409a      	lsls	r2, r3
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 80a2 	beq.w	800757c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2e      	ldr	r2, [pc, #184]	@ (80074f8 <HAL_DMA_IRQHandler+0x1b4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d04a      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2d      	ldr	r2, [pc, #180]	@ (80074fc <HAL_DMA_IRQHandler+0x1b8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d045      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a2b      	ldr	r2, [pc, #172]	@ (8007500 <HAL_DMA_IRQHandler+0x1bc>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d040      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2a      	ldr	r2, [pc, #168]	@ (8007504 <HAL_DMA_IRQHandler+0x1c0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d03b      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a28      	ldr	r2, [pc, #160]	@ (8007508 <HAL_DMA_IRQHandler+0x1c4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d036      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a27      	ldr	r2, [pc, #156]	@ (800750c <HAL_DMA_IRQHandler+0x1c8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d031      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a25      	ldr	r2, [pc, #148]	@ (8007510 <HAL_DMA_IRQHandler+0x1cc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d02c      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a24      	ldr	r2, [pc, #144]	@ (8007514 <HAL_DMA_IRQHandler+0x1d0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d027      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a22      	ldr	r2, [pc, #136]	@ (8007518 <HAL_DMA_IRQHandler+0x1d4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d022      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a21      	ldr	r2, [pc, #132]	@ (800751c <HAL_DMA_IRQHandler+0x1d8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d01d      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007520 <HAL_DMA_IRQHandler+0x1dc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d018      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <HAL_DMA_IRQHandler+0x1e0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d013      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007528 <HAL_DMA_IRQHandler+0x1e4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00e      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1b      	ldr	r2, [pc, #108]	@ (800752c <HAL_DMA_IRQHandler+0x1e8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d009      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a19      	ldr	r2, [pc, #100]	@ (8007530 <HAL_DMA_IRQHandler+0x1ec>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d004      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x194>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a18      	ldr	r2, [pc, #96]	@ (8007534 <HAL_DMA_IRQHandler+0x1f0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d12f      	bne.n	8007538 <HAL_DMA_IRQHandler+0x1f4>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e02e      	b.n	800754c <HAL_DMA_IRQHandler+0x208>
 80074ee:	bf00      	nop
 80074f0:	24000068 	.word	0x24000068
 80074f4:	1b4e81b5 	.word	0x1b4e81b5
 80074f8:	40020010 	.word	0x40020010
 80074fc:	40020028 	.word	0x40020028
 8007500:	40020040 	.word	0x40020040
 8007504:	40020058 	.word	0x40020058
 8007508:	40020070 	.word	0x40020070
 800750c:	40020088 	.word	0x40020088
 8007510:	400200a0 	.word	0x400200a0
 8007514:	400200b8 	.word	0x400200b8
 8007518:	40020410 	.word	0x40020410
 800751c:	40020428 	.word	0x40020428
 8007520:	40020440 	.word	0x40020440
 8007524:	40020458 	.word	0x40020458
 8007528:	40020470 	.word	0x40020470
 800752c:	40020488 	.word	0x40020488
 8007530:	400204a0 	.word	0x400204a0
 8007534:	400204b8 	.word	0x400204b8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b00      	cmp	r3, #0
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d015      	beq.n	800757c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0204 	bic.w	r2, r2, #4
 800755e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007564:	f003 031f 	and.w	r3, r3, #31
 8007568:	2208      	movs	r2, #8
 800756a:	409a      	lsls	r2, r3
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007574:	f043 0201 	orr.w	r2, r3, #1
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007580:	f003 031f 	and.w	r3, r3, #31
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	fa22 f303 	lsr.w	r3, r2, r3
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d06e      	beq.n	8007670 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a69      	ldr	r2, [pc, #420]	@ (800773c <HAL_DMA_IRQHandler+0x3f8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d04a      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a67      	ldr	r2, [pc, #412]	@ (8007740 <HAL_DMA_IRQHandler+0x3fc>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d045      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a66      	ldr	r2, [pc, #408]	@ (8007744 <HAL_DMA_IRQHandler+0x400>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d040      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a64      	ldr	r2, [pc, #400]	@ (8007748 <HAL_DMA_IRQHandler+0x404>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d03b      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a63      	ldr	r2, [pc, #396]	@ (800774c <HAL_DMA_IRQHandler+0x408>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d036      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a61      	ldr	r2, [pc, #388]	@ (8007750 <HAL_DMA_IRQHandler+0x40c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d031      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a60      	ldr	r2, [pc, #384]	@ (8007754 <HAL_DMA_IRQHandler+0x410>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d02c      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a5e      	ldr	r2, [pc, #376]	@ (8007758 <HAL_DMA_IRQHandler+0x414>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a5d      	ldr	r2, [pc, #372]	@ (800775c <HAL_DMA_IRQHandler+0x418>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d022      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a5b      	ldr	r2, [pc, #364]	@ (8007760 <HAL_DMA_IRQHandler+0x41c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01d      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a5a      	ldr	r2, [pc, #360]	@ (8007764 <HAL_DMA_IRQHandler+0x420>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a58      	ldr	r2, [pc, #352]	@ (8007768 <HAL_DMA_IRQHandler+0x424>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a57      	ldr	r2, [pc, #348]	@ (800776c <HAL_DMA_IRQHandler+0x428>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a55      	ldr	r2, [pc, #340]	@ (8007770 <HAL_DMA_IRQHandler+0x42c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a54      	ldr	r2, [pc, #336]	@ (8007774 <HAL_DMA_IRQHandler+0x430>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_DMA_IRQHandler+0x2ee>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a52      	ldr	r2, [pc, #328]	@ (8007778 <HAL_DMA_IRQHandler+0x434>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d10a      	bne.n	8007648 <HAL_DMA_IRQHandler+0x304>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763c:	2b00      	cmp	r3, #0
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	e003      	b.n	8007650 <HAL_DMA_IRQHandler+0x30c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2300      	movs	r3, #0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00d      	beq.n	8007670 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007668:	f043 0202 	orr.w	r2, r3, #2
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2204      	movs	r2, #4
 800767a:	409a      	lsls	r2, r3
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	4013      	ands	r3, r2
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 808f 	beq.w	80077a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a2c      	ldr	r2, [pc, #176]	@ (800773c <HAL_DMA_IRQHandler+0x3f8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d04a      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a2a      	ldr	r2, [pc, #168]	@ (8007740 <HAL_DMA_IRQHandler+0x3fc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d045      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a29      	ldr	r2, [pc, #164]	@ (8007744 <HAL_DMA_IRQHandler+0x400>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d040      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a27      	ldr	r2, [pc, #156]	@ (8007748 <HAL_DMA_IRQHandler+0x404>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d03b      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a26      	ldr	r2, [pc, #152]	@ (800774c <HAL_DMA_IRQHandler+0x408>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d036      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a24      	ldr	r2, [pc, #144]	@ (8007750 <HAL_DMA_IRQHandler+0x40c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d031      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a23      	ldr	r2, [pc, #140]	@ (8007754 <HAL_DMA_IRQHandler+0x410>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d02c      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a21      	ldr	r2, [pc, #132]	@ (8007758 <HAL_DMA_IRQHandler+0x414>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d027      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a20      	ldr	r2, [pc, #128]	@ (800775c <HAL_DMA_IRQHandler+0x418>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d022      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <HAL_DMA_IRQHandler+0x41c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01d      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007764 <HAL_DMA_IRQHandler+0x420>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d018      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007768 <HAL_DMA_IRQHandler+0x424>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1a      	ldr	r2, [pc, #104]	@ (800776c <HAL_DMA_IRQHandler+0x428>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00e      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <HAL_DMA_IRQHandler+0x42c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d009      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a17      	ldr	r2, [pc, #92]	@ (8007774 <HAL_DMA_IRQHandler+0x430>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d004      	beq.n	8007726 <HAL_DMA_IRQHandler+0x3e2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a15      	ldr	r2, [pc, #84]	@ (8007778 <HAL_DMA_IRQHandler+0x434>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d12a      	bne.n	800777c <HAL_DMA_IRQHandler+0x438>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	e023      	b.n	8007784 <HAL_DMA_IRQHandler+0x440>
 800773c:	40020010 	.word	0x40020010
 8007740:	40020028 	.word	0x40020028
 8007744:	40020040 	.word	0x40020040
 8007748:	40020058 	.word	0x40020058
 800774c:	40020070 	.word	0x40020070
 8007750:	40020088 	.word	0x40020088
 8007754:	400200a0 	.word	0x400200a0
 8007758:	400200b8 	.word	0x400200b8
 800775c:	40020410 	.word	0x40020410
 8007760:	40020428 	.word	0x40020428
 8007764:	40020440 	.word	0x40020440
 8007768:	40020458 	.word	0x40020458
 800776c:	40020470 	.word	0x40020470
 8007770:	40020488 	.word	0x40020488
 8007774:	400204a0 	.word	0x400204a0
 8007778:	400204b8 	.word	0x400204b8
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2300      	movs	r3, #0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00d      	beq.n	80077a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	2204      	movs	r2, #4
 8007792:	409a      	lsls	r2, r3
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800779c:	f043 0204 	orr.w	r2, r3, #4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	2210      	movs	r2, #16
 80077ae:	409a      	lsls	r2, r3
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80a6 	beq.w	8007906 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a85      	ldr	r2, [pc, #532]	@ (80079d4 <HAL_DMA_IRQHandler+0x690>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d04a      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a83      	ldr	r2, [pc, #524]	@ (80079d8 <HAL_DMA_IRQHandler+0x694>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d045      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a82      	ldr	r2, [pc, #520]	@ (80079dc <HAL_DMA_IRQHandler+0x698>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d040      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a80      	ldr	r2, [pc, #512]	@ (80079e0 <HAL_DMA_IRQHandler+0x69c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d03b      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a7f      	ldr	r2, [pc, #508]	@ (80079e4 <HAL_DMA_IRQHandler+0x6a0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d036      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a7d      	ldr	r2, [pc, #500]	@ (80079e8 <HAL_DMA_IRQHandler+0x6a4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d031      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a7c      	ldr	r2, [pc, #496]	@ (80079ec <HAL_DMA_IRQHandler+0x6a8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d02c      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a7a      	ldr	r2, [pc, #488]	@ (80079f0 <HAL_DMA_IRQHandler+0x6ac>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d027      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a79      	ldr	r2, [pc, #484]	@ (80079f4 <HAL_DMA_IRQHandler+0x6b0>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d022      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a77      	ldr	r2, [pc, #476]	@ (80079f8 <HAL_DMA_IRQHandler+0x6b4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01d      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a76      	ldr	r2, [pc, #472]	@ (80079fc <HAL_DMA_IRQHandler+0x6b8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d018      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a74      	ldr	r2, [pc, #464]	@ (8007a00 <HAL_DMA_IRQHandler+0x6bc>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d013      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a73      	ldr	r2, [pc, #460]	@ (8007a04 <HAL_DMA_IRQHandler+0x6c0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00e      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a71      	ldr	r2, [pc, #452]	@ (8007a08 <HAL_DMA_IRQHandler+0x6c4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d009      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a70      	ldr	r2, [pc, #448]	@ (8007a0c <HAL_DMA_IRQHandler+0x6c8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d004      	beq.n	800785a <HAL_DMA_IRQHandler+0x516>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a6e      	ldr	r2, [pc, #440]	@ (8007a10 <HAL_DMA_IRQHandler+0x6cc>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d10a      	bne.n	8007870 <HAL_DMA_IRQHandler+0x52c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b00      	cmp	r3, #0
 8007866:	bf14      	ite	ne
 8007868:	2301      	movne	r3, #1
 800786a:	2300      	moveq	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	e009      	b.n	8007884 <HAL_DMA_IRQHandler+0x540>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	bf14      	ite	ne
 800787e:	2301      	movne	r3, #1
 8007880:	2300      	moveq	r3, #0
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d03e      	beq.n	8007906 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	2210      	movs	r2, #16
 8007892:	409a      	lsls	r2, r3
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d018      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d108      	bne.n	80078c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d024      	beq.n	8007906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
 80078c4:	e01f      	b.n	8007906 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01b      	beq.n	8007906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
 80078d6:	e016      	b.n	8007906 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d107      	bne.n	80078f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0208 	bic.w	r2, r2, #8
 80078f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	2220      	movs	r2, #32
 8007910:	409a      	lsls	r2, r3
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	4013      	ands	r3, r2
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 8110 	beq.w	8007b3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a2c      	ldr	r2, [pc, #176]	@ (80079d4 <HAL_DMA_IRQHandler+0x690>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d04a      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2b      	ldr	r2, [pc, #172]	@ (80079d8 <HAL_DMA_IRQHandler+0x694>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d045      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a29      	ldr	r2, [pc, #164]	@ (80079dc <HAL_DMA_IRQHandler+0x698>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d040      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a28      	ldr	r2, [pc, #160]	@ (80079e0 <HAL_DMA_IRQHandler+0x69c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d03b      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a26      	ldr	r2, [pc, #152]	@ (80079e4 <HAL_DMA_IRQHandler+0x6a0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d036      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a25      	ldr	r2, [pc, #148]	@ (80079e8 <HAL_DMA_IRQHandler+0x6a4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d031      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a23      	ldr	r2, [pc, #140]	@ (80079ec <HAL_DMA_IRQHandler+0x6a8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d02c      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a22      	ldr	r2, [pc, #136]	@ (80079f0 <HAL_DMA_IRQHandler+0x6ac>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d027      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a20      	ldr	r2, [pc, #128]	@ (80079f4 <HAL_DMA_IRQHandler+0x6b0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d022      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1f      	ldr	r2, [pc, #124]	@ (80079f8 <HAL_DMA_IRQHandler+0x6b4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d01d      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a1d      	ldr	r2, [pc, #116]	@ (80079fc <HAL_DMA_IRQHandler+0x6b8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d018      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a1c      	ldr	r2, [pc, #112]	@ (8007a00 <HAL_DMA_IRQHandler+0x6bc>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1a      	ldr	r2, [pc, #104]	@ (8007a04 <HAL_DMA_IRQHandler+0x6c0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00e      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a19      	ldr	r2, [pc, #100]	@ (8007a08 <HAL_DMA_IRQHandler+0x6c4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d009      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a17      	ldr	r2, [pc, #92]	@ (8007a0c <HAL_DMA_IRQHandler+0x6c8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <HAL_DMA_IRQHandler+0x678>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a16      	ldr	r2, [pc, #88]	@ (8007a10 <HAL_DMA_IRQHandler+0x6cc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d12b      	bne.n	8007a14 <HAL_DMA_IRQHandler+0x6d0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bf14      	ite	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	2300      	moveq	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	e02a      	b.n	8007a28 <HAL_DMA_IRQHandler+0x6e4>
 80079d2:	bf00      	nop
 80079d4:	40020010 	.word	0x40020010
 80079d8:	40020028 	.word	0x40020028
 80079dc:	40020040 	.word	0x40020040
 80079e0:	40020058 	.word	0x40020058
 80079e4:	40020070 	.word	0x40020070
 80079e8:	40020088 	.word	0x40020088
 80079ec:	400200a0 	.word	0x400200a0
 80079f0:	400200b8 	.word	0x400200b8
 80079f4:	40020410 	.word	0x40020410
 80079f8:	40020428 	.word	0x40020428
 80079fc:	40020440 	.word	0x40020440
 8007a00:	40020458 	.word	0x40020458
 8007a04:	40020470 	.word	0x40020470
 8007a08:	40020488 	.word	0x40020488
 8007a0c:	400204a0 	.word	0x400204a0
 8007a10:	400204b8 	.word	0x400204b8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bf14      	ite	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	2300      	moveq	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8087 	beq.w	8007b3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	2220      	movs	r2, #32
 8007a38:	409a      	lsls	r2, r3
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d139      	bne.n	8007abe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0216 	bic.w	r2, r2, #22
 8007a58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695a      	ldr	r2, [r3, #20]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <HAL_DMA_IRQHandler+0x736>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0208 	bic.w	r2, r2, #8
 8007a88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a8e:	f003 031f 	and.w	r3, r3, #31
 8007a92:	223f      	movs	r2, #63	@ 0x3f
 8007a94:	409a      	lsls	r2, r3
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 834a 	beq.w	8008148 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
          }
          return;
 8007abc:	e344      	b.n	8008148 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d018      	beq.n	8007afe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d108      	bne.n	8007aec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d02c      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
 8007aea:	e027      	b.n	8007b3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d023      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	4798      	blx	r3
 8007afc:	e01e      	b.n	8007b3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10f      	bne.n	8007b2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0210 	bic.w	r2, r2, #16
 8007b1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8306 	beq.w	8008152 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8088 	beq.w	8007c64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2204      	movs	r2, #4
 8007b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a7a      	ldr	r2, [pc, #488]	@ (8007d4c <HAL_DMA_IRQHandler+0xa08>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d04a      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a79      	ldr	r2, [pc, #484]	@ (8007d50 <HAL_DMA_IRQHandler+0xa0c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d045      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a77      	ldr	r2, [pc, #476]	@ (8007d54 <HAL_DMA_IRQHandler+0xa10>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d040      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a76      	ldr	r2, [pc, #472]	@ (8007d58 <HAL_DMA_IRQHandler+0xa14>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d03b      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a74      	ldr	r2, [pc, #464]	@ (8007d5c <HAL_DMA_IRQHandler+0xa18>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d036      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a73      	ldr	r2, [pc, #460]	@ (8007d60 <HAL_DMA_IRQHandler+0xa1c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d031      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a71      	ldr	r2, [pc, #452]	@ (8007d64 <HAL_DMA_IRQHandler+0xa20>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d02c      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a70      	ldr	r2, [pc, #448]	@ (8007d68 <HAL_DMA_IRQHandler+0xa24>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d027      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8007d6c <HAL_DMA_IRQHandler+0xa28>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d022      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a6d      	ldr	r2, [pc, #436]	@ (8007d70 <HAL_DMA_IRQHandler+0xa2c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d01d      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8007d74 <HAL_DMA_IRQHandler+0xa30>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d018      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6a      	ldr	r2, [pc, #424]	@ (8007d78 <HAL_DMA_IRQHandler+0xa34>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a68      	ldr	r2, [pc, #416]	@ (8007d7c <HAL_DMA_IRQHandler+0xa38>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a67      	ldr	r2, [pc, #412]	@ (8007d80 <HAL_DMA_IRQHandler+0xa3c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a65      	ldr	r2, [pc, #404]	@ (8007d84 <HAL_DMA_IRQHandler+0xa40>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x8b8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a64      	ldr	r2, [pc, #400]	@ (8007d88 <HAL_DMA_IRQHandler+0xa44>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d108      	bne.n	8007c0e <HAL_DMA_IRQHandler+0x8ca>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	e007      	b.n	8007c1e <HAL_DMA_IRQHandler+0x8da>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0201 	bic.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3301      	adds	r3, #1
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d307      	bcc.n	8007c3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f2      	bne.n	8007c1e <HAL_DMA_IRQHandler+0x8da>
 8007c38:	e000      	b.n	8007c3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007c52:	e003      	b.n	8007c5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8272 	beq.w	8008152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	e26c      	b.n	8008152 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a43      	ldr	r2, [pc, #268]	@ (8007d8c <HAL_DMA_IRQHandler+0xa48>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d022      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x984>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a42      	ldr	r2, [pc, #264]	@ (8007d90 <HAL_DMA_IRQHandler+0xa4c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d01d      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x984>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a40      	ldr	r2, [pc, #256]	@ (8007d94 <HAL_DMA_IRQHandler+0xa50>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d018      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x984>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8007d98 <HAL_DMA_IRQHandler+0xa54>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x984>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a3d      	ldr	r2, [pc, #244]	@ (8007d9c <HAL_DMA_IRQHandler+0xa58>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00e      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x984>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a3c      	ldr	r2, [pc, #240]	@ (8007da0 <HAL_DMA_IRQHandler+0xa5c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d009      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x984>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8007da4 <HAL_DMA_IRQHandler+0xa60>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d004      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x984>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a39      	ldr	r2, [pc, #228]	@ (8007da8 <HAL_DMA_IRQHandler+0xa64>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d101      	bne.n	8007ccc <HAL_DMA_IRQHandler+0x988>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e000      	b.n	8007cce <HAL_DMA_IRQHandler+0x98a>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 823f 	beq.w	8008152 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce0:	f003 031f 	and.w	r3, r3, #31
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	409a      	lsls	r2, r3
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80cd 	beq.w	8007e8c <HAL_DMA_IRQHandler+0xb48>
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80c7 	beq.w	8007e8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	2204      	movs	r2, #4
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d049      	beq.n	8007dac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8210 	beq.w	800814c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d34:	e20a      	b.n	800814c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8206 	beq.w	800814c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d48:	e200      	b.n	800814c <HAL_DMA_IRQHandler+0xe08>
 8007d4a:	bf00      	nop
 8007d4c:	40020010 	.word	0x40020010
 8007d50:	40020028 	.word	0x40020028
 8007d54:	40020040 	.word	0x40020040
 8007d58:	40020058 	.word	0x40020058
 8007d5c:	40020070 	.word	0x40020070
 8007d60:	40020088 	.word	0x40020088
 8007d64:	400200a0 	.word	0x400200a0
 8007d68:	400200b8 	.word	0x400200b8
 8007d6c:	40020410 	.word	0x40020410
 8007d70:	40020428 	.word	0x40020428
 8007d74:	40020440 	.word	0x40020440
 8007d78:	40020458 	.word	0x40020458
 8007d7c:	40020470 	.word	0x40020470
 8007d80:	40020488 	.word	0x40020488
 8007d84:	400204a0 	.word	0x400204a0
 8007d88:	400204b8 	.word	0x400204b8
 8007d8c:	58025408 	.word	0x58025408
 8007d90:	5802541c 	.word	0x5802541c
 8007d94:	58025430 	.word	0x58025430
 8007d98:	58025444 	.word	0x58025444
 8007d9c:	58025458 	.word	0x58025458
 8007da0:	5802546c 	.word	0x5802546c
 8007da4:	58025480 	.word	0x58025480
 8007da8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d160      	bne.n	8007e78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a7f      	ldr	r2, [pc, #508]	@ (8007fb8 <HAL_DMA_IRQHandler+0xc74>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d04a      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a7d      	ldr	r2, [pc, #500]	@ (8007fbc <HAL_DMA_IRQHandler+0xc78>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d045      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a7c      	ldr	r2, [pc, #496]	@ (8007fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d040      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a7a      	ldr	r2, [pc, #488]	@ (8007fc4 <HAL_DMA_IRQHandler+0xc80>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d03b      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a79      	ldr	r2, [pc, #484]	@ (8007fc8 <HAL_DMA_IRQHandler+0xc84>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d036      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a77      	ldr	r2, [pc, #476]	@ (8007fcc <HAL_DMA_IRQHandler+0xc88>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d031      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a76      	ldr	r2, [pc, #472]	@ (8007fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d02c      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a74      	ldr	r2, [pc, #464]	@ (8007fd4 <HAL_DMA_IRQHandler+0xc90>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d027      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a73      	ldr	r2, [pc, #460]	@ (8007fd8 <HAL_DMA_IRQHandler+0xc94>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d022      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a71      	ldr	r2, [pc, #452]	@ (8007fdc <HAL_DMA_IRQHandler+0xc98>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d01d      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a70      	ldr	r2, [pc, #448]	@ (8007fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d018      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a6e      	ldr	r2, [pc, #440]	@ (8007fe4 <HAL_DMA_IRQHandler+0xca0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a6d      	ldr	r2, [pc, #436]	@ (8007fe8 <HAL_DMA_IRQHandler+0xca4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00e      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8007fec <HAL_DMA_IRQHandler+0xca8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d009      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a6a      	ldr	r2, [pc, #424]	@ (8007ff0 <HAL_DMA_IRQHandler+0xcac>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_DMA_IRQHandler+0xb12>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a68      	ldr	r2, [pc, #416]	@ (8007ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d108      	bne.n	8007e68 <HAL_DMA_IRQHandler+0xb24>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0208 	bic.w	r2, r2, #8
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	e007      	b.n	8007e78 <HAL_DMA_IRQHandler+0xb34>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0204 	bic.w	r2, r2, #4
 8007e76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8165 	beq.w	800814c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e8a:	e15f      	b.n	800814c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	2202      	movs	r2, #2
 8007e96:	409a      	lsls	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 80c5 	beq.w	800802c <HAL_DMA_IRQHandler+0xce8>
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80bf 	beq.w	800802c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	409a      	lsls	r2, r3
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d018      	beq.n	8007efa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 813a 	beq.w	8008150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ee4:	e134      	b.n	8008150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8130 	beq.w	8008150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ef8:	e12a      	b.n	8008150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 8089 	bne.w	8008018 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8007fb8 <HAL_DMA_IRQHandler+0xc74>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d04a      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a29      	ldr	r2, [pc, #164]	@ (8007fbc <HAL_DMA_IRQHandler+0xc78>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d045      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a28      	ldr	r2, [pc, #160]	@ (8007fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d040      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a26      	ldr	r2, [pc, #152]	@ (8007fc4 <HAL_DMA_IRQHandler+0xc80>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d03b      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a25      	ldr	r2, [pc, #148]	@ (8007fc8 <HAL_DMA_IRQHandler+0xc84>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d036      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a23      	ldr	r2, [pc, #140]	@ (8007fcc <HAL_DMA_IRQHandler+0xc88>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d031      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a22      	ldr	r2, [pc, #136]	@ (8007fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d02c      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a20      	ldr	r2, [pc, #128]	@ (8007fd4 <HAL_DMA_IRQHandler+0xc90>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d027      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fd8 <HAL_DMA_IRQHandler+0xc94>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d022      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1d      	ldr	r2, [pc, #116]	@ (8007fdc <HAL_DMA_IRQHandler+0xc98>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d01d      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d018      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe4 <HAL_DMA_IRQHandler+0xca0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a19      	ldr	r2, [pc, #100]	@ (8007fe8 <HAL_DMA_IRQHandler+0xca4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00e      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a17      	ldr	r2, [pc, #92]	@ (8007fec <HAL_DMA_IRQHandler+0xca8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d009      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a16      	ldr	r2, [pc, #88]	@ (8007ff0 <HAL_DMA_IRQHandler+0xcac>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d004      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xc62>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a14      	ldr	r2, [pc, #80]	@ (8007ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d128      	bne.n	8007ff8 <HAL_DMA_IRQHandler+0xcb4>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0214 	bic.w	r2, r2, #20
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	e027      	b.n	8008008 <HAL_DMA_IRQHandler+0xcc4>
 8007fb8:	40020010 	.word	0x40020010
 8007fbc:	40020028 	.word	0x40020028
 8007fc0:	40020040 	.word	0x40020040
 8007fc4:	40020058 	.word	0x40020058
 8007fc8:	40020070 	.word	0x40020070
 8007fcc:	40020088 	.word	0x40020088
 8007fd0:	400200a0 	.word	0x400200a0
 8007fd4:	400200b8 	.word	0x400200b8
 8007fd8:	40020410 	.word	0x40020410
 8007fdc:	40020428 	.word	0x40020428
 8007fe0:	40020440 	.word	0x40020440
 8007fe4:	40020458 	.word	0x40020458
 8007fe8:	40020470 	.word	0x40020470
 8007fec:	40020488 	.word	0x40020488
 8007ff0:	400204a0 	.word	0x400204a0
 8007ff4:	400204b8 	.word	0x400204b8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 020a 	bic.w	r2, r2, #10
 8008006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8097 	beq.w	8008150 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800802a:	e091      	b.n	8008150 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008030:	f003 031f 	and.w	r3, r3, #31
 8008034:	2208      	movs	r2, #8
 8008036:	409a      	lsls	r2, r3
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8088 	beq.w	8008152 <HAL_DMA_IRQHandler+0xe0e>
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8082 	beq.w	8008152 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a41      	ldr	r2, [pc, #260]	@ (8008158 <HAL_DMA_IRQHandler+0xe14>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d04a      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a3f      	ldr	r2, [pc, #252]	@ (800815c <HAL_DMA_IRQHandler+0xe18>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d045      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a3e      	ldr	r2, [pc, #248]	@ (8008160 <HAL_DMA_IRQHandler+0xe1c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d040      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a3c      	ldr	r2, [pc, #240]	@ (8008164 <HAL_DMA_IRQHandler+0xe20>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d03b      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a3b      	ldr	r2, [pc, #236]	@ (8008168 <HAL_DMA_IRQHandler+0xe24>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d036      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a39      	ldr	r2, [pc, #228]	@ (800816c <HAL_DMA_IRQHandler+0xe28>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d031      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a38      	ldr	r2, [pc, #224]	@ (8008170 <HAL_DMA_IRQHandler+0xe2c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d02c      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a36      	ldr	r2, [pc, #216]	@ (8008174 <HAL_DMA_IRQHandler+0xe30>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d027      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a35      	ldr	r2, [pc, #212]	@ (8008178 <HAL_DMA_IRQHandler+0xe34>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d022      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a33      	ldr	r2, [pc, #204]	@ (800817c <HAL_DMA_IRQHandler+0xe38>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d01d      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a32      	ldr	r2, [pc, #200]	@ (8008180 <HAL_DMA_IRQHandler+0xe3c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d018      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a30      	ldr	r2, [pc, #192]	@ (8008184 <HAL_DMA_IRQHandler+0xe40>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d013      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a2f      	ldr	r2, [pc, #188]	@ (8008188 <HAL_DMA_IRQHandler+0xe44>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00e      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a2d      	ldr	r2, [pc, #180]	@ (800818c <HAL_DMA_IRQHandler+0xe48>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d009      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a2c      	ldr	r2, [pc, #176]	@ (8008190 <HAL_DMA_IRQHandler+0xe4c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d004      	beq.n	80080ee <HAL_DMA_IRQHandler+0xdaa>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008194 <HAL_DMA_IRQHandler+0xe50>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d108      	bne.n	8008100 <HAL_DMA_IRQHandler+0xdbc>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 021c 	bic.w	r2, r2, #28
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	e007      	b.n	8008110 <HAL_DMA_IRQHandler+0xdcc>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 020e 	bic.w	r2, r2, #14
 800810e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	2201      	movs	r2, #1
 800811a:	409a      	lsls	r2, r3
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
 8008146:	e004      	b.n	8008152 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008148:	bf00      	nop
 800814a:	e002      	b.n	8008152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800814c:	bf00      	nop
 800814e:	e000      	b.n	8008152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008150:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008152:	3728      	adds	r7, #40	@ 0x28
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40020010 	.word	0x40020010
 800815c:	40020028 	.word	0x40020028
 8008160:	40020040 	.word	0x40020040
 8008164:	40020058 	.word	0x40020058
 8008168:	40020070 	.word	0x40020070
 800816c:	40020088 	.word	0x40020088
 8008170:	400200a0 	.word	0x400200a0
 8008174:	400200b8 	.word	0x400200b8
 8008178:	40020410 	.word	0x40020410
 800817c:	40020428 	.word	0x40020428
 8008180:	40020440 	.word	0x40020440
 8008184:	40020458 	.word	0x40020458
 8008188:	40020470 	.word	0x40020470
 800818c:	40020488 	.word	0x40020488
 8008190:	400204a0 	.word	0x400204a0
 8008194:	400204b8 	.word	0x400204b8

08008198 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a7f      	ldr	r2, [pc, #508]	@ (80083b4 <DMA_SetConfig+0x21c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d072      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a7d      	ldr	r2, [pc, #500]	@ (80083b8 <DMA_SetConfig+0x220>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d06d      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a7c      	ldr	r2, [pc, #496]	@ (80083bc <DMA_SetConfig+0x224>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d068      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a7a      	ldr	r2, [pc, #488]	@ (80083c0 <DMA_SetConfig+0x228>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d063      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a79      	ldr	r2, [pc, #484]	@ (80083c4 <DMA_SetConfig+0x22c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d05e      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a77      	ldr	r2, [pc, #476]	@ (80083c8 <DMA_SetConfig+0x230>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d059      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a76      	ldr	r2, [pc, #472]	@ (80083cc <DMA_SetConfig+0x234>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d054      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a74      	ldr	r2, [pc, #464]	@ (80083d0 <DMA_SetConfig+0x238>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d04f      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a73      	ldr	r2, [pc, #460]	@ (80083d4 <DMA_SetConfig+0x23c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d04a      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a71      	ldr	r2, [pc, #452]	@ (80083d8 <DMA_SetConfig+0x240>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d045      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a70      	ldr	r2, [pc, #448]	@ (80083dc <DMA_SetConfig+0x244>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d040      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a6e      	ldr	r2, [pc, #440]	@ (80083e0 <DMA_SetConfig+0x248>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d03b      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a6d      	ldr	r2, [pc, #436]	@ (80083e4 <DMA_SetConfig+0x24c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d036      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a6b      	ldr	r2, [pc, #428]	@ (80083e8 <DMA_SetConfig+0x250>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d031      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a6a      	ldr	r2, [pc, #424]	@ (80083ec <DMA_SetConfig+0x254>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d02c      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a68      	ldr	r2, [pc, #416]	@ (80083f0 <DMA_SetConfig+0x258>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d027      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a67      	ldr	r2, [pc, #412]	@ (80083f4 <DMA_SetConfig+0x25c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d022      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a65      	ldr	r2, [pc, #404]	@ (80083f8 <DMA_SetConfig+0x260>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01d      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a64      	ldr	r2, [pc, #400]	@ (80083fc <DMA_SetConfig+0x264>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d018      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a62      	ldr	r2, [pc, #392]	@ (8008400 <DMA_SetConfig+0x268>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a61      	ldr	r2, [pc, #388]	@ (8008404 <DMA_SetConfig+0x26c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00e      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a5f      	ldr	r2, [pc, #380]	@ (8008408 <DMA_SetConfig+0x270>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d009      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a5e      	ldr	r2, [pc, #376]	@ (800840c <DMA_SetConfig+0x274>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d004      	beq.n	80082a2 <DMA_SetConfig+0x10a>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a5c      	ldr	r2, [pc, #368]	@ (8008410 <DMA_SetConfig+0x278>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d101      	bne.n	80082a6 <DMA_SetConfig+0x10e>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e000      	b.n	80082a8 <DMA_SetConfig+0x110>
 80082a6:	2300      	movs	r3, #0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00d      	beq.n	80082c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80082b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80082c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a39      	ldr	r2, [pc, #228]	@ (80083b4 <DMA_SetConfig+0x21c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d04a      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a38      	ldr	r2, [pc, #224]	@ (80083b8 <DMA_SetConfig+0x220>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d045      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a36      	ldr	r2, [pc, #216]	@ (80083bc <DMA_SetConfig+0x224>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d040      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a35      	ldr	r2, [pc, #212]	@ (80083c0 <DMA_SetConfig+0x228>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d03b      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a33      	ldr	r2, [pc, #204]	@ (80083c4 <DMA_SetConfig+0x22c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d036      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a32      	ldr	r2, [pc, #200]	@ (80083c8 <DMA_SetConfig+0x230>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d031      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a30      	ldr	r2, [pc, #192]	@ (80083cc <DMA_SetConfig+0x234>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d02c      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a2f      	ldr	r2, [pc, #188]	@ (80083d0 <DMA_SetConfig+0x238>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d027      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a2d      	ldr	r2, [pc, #180]	@ (80083d4 <DMA_SetConfig+0x23c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d022      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a2c      	ldr	r2, [pc, #176]	@ (80083d8 <DMA_SetConfig+0x240>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d01d      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a2a      	ldr	r2, [pc, #168]	@ (80083dc <DMA_SetConfig+0x244>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d018      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a29      	ldr	r2, [pc, #164]	@ (80083e0 <DMA_SetConfig+0x248>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d013      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a27      	ldr	r2, [pc, #156]	@ (80083e4 <DMA_SetConfig+0x24c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00e      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a26      	ldr	r2, [pc, #152]	@ (80083e8 <DMA_SetConfig+0x250>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d009      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a24      	ldr	r2, [pc, #144]	@ (80083ec <DMA_SetConfig+0x254>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d004      	beq.n	8008368 <DMA_SetConfig+0x1d0>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a23      	ldr	r2, [pc, #140]	@ (80083f0 <DMA_SetConfig+0x258>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d101      	bne.n	800836c <DMA_SetConfig+0x1d4>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <DMA_SetConfig+0x1d6>
 800836c:	2300      	movs	r3, #0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d059      	beq.n	8008426 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008376:	f003 031f 	and.w	r3, r3, #31
 800837a:	223f      	movs	r2, #63	@ 0x3f
 800837c:	409a      	lsls	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008390:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b40      	cmp	r3, #64	@ 0x40
 80083a0:	d138      	bne.n	8008414 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083b2:	e086      	b.n	80084c2 <DMA_SetConfig+0x32a>
 80083b4:	40020010 	.word	0x40020010
 80083b8:	40020028 	.word	0x40020028
 80083bc:	40020040 	.word	0x40020040
 80083c0:	40020058 	.word	0x40020058
 80083c4:	40020070 	.word	0x40020070
 80083c8:	40020088 	.word	0x40020088
 80083cc:	400200a0 	.word	0x400200a0
 80083d0:	400200b8 	.word	0x400200b8
 80083d4:	40020410 	.word	0x40020410
 80083d8:	40020428 	.word	0x40020428
 80083dc:	40020440 	.word	0x40020440
 80083e0:	40020458 	.word	0x40020458
 80083e4:	40020470 	.word	0x40020470
 80083e8:	40020488 	.word	0x40020488
 80083ec:	400204a0 	.word	0x400204a0
 80083f0:	400204b8 	.word	0x400204b8
 80083f4:	58025408 	.word	0x58025408
 80083f8:	5802541c 	.word	0x5802541c
 80083fc:	58025430 	.word	0x58025430
 8008400:	58025444 	.word	0x58025444
 8008404:	58025458 	.word	0x58025458
 8008408:	5802546c 	.word	0x5802546c
 800840c:	58025480 	.word	0x58025480
 8008410:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	60da      	str	r2, [r3, #12]
}
 8008424:	e04d      	b.n	80084c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a29      	ldr	r2, [pc, #164]	@ (80084d0 <DMA_SetConfig+0x338>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d022      	beq.n	8008476 <DMA_SetConfig+0x2de>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a27      	ldr	r2, [pc, #156]	@ (80084d4 <DMA_SetConfig+0x33c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01d      	beq.n	8008476 <DMA_SetConfig+0x2de>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a26      	ldr	r2, [pc, #152]	@ (80084d8 <DMA_SetConfig+0x340>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d018      	beq.n	8008476 <DMA_SetConfig+0x2de>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a24      	ldr	r2, [pc, #144]	@ (80084dc <DMA_SetConfig+0x344>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <DMA_SetConfig+0x2de>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a23      	ldr	r2, [pc, #140]	@ (80084e0 <DMA_SetConfig+0x348>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00e      	beq.n	8008476 <DMA_SetConfig+0x2de>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <DMA_SetConfig+0x34c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d009      	beq.n	8008476 <DMA_SetConfig+0x2de>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a20      	ldr	r2, [pc, #128]	@ (80084e8 <DMA_SetConfig+0x350>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d004      	beq.n	8008476 <DMA_SetConfig+0x2de>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1e      	ldr	r2, [pc, #120]	@ (80084ec <DMA_SetConfig+0x354>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d101      	bne.n	800847a <DMA_SetConfig+0x2e2>
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <DMA_SetConfig+0x2e4>
 800847a:	2300      	movs	r3, #0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d020      	beq.n	80084c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008484:	f003 031f 	and.w	r3, r3, #31
 8008488:	2201      	movs	r2, #1
 800848a:	409a      	lsls	r2, r3
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b40      	cmp	r3, #64	@ 0x40
 800849e:	d108      	bne.n	80084b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	60da      	str	r2, [r3, #12]
}
 80084b0:	e007      	b.n	80084c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	60da      	str	r2, [r3, #12]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	58025408 	.word	0x58025408
 80084d4:	5802541c 	.word	0x5802541c
 80084d8:	58025430 	.word	0x58025430
 80084dc:	58025444 	.word	0x58025444
 80084e0:	58025458 	.word	0x58025458
 80084e4:	5802546c 	.word	0x5802546c
 80084e8:	58025480 	.word	0x58025480
 80084ec:	58025494 	.word	0x58025494

080084f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a42      	ldr	r2, [pc, #264]	@ (8008608 <DMA_CalcBaseAndBitshift+0x118>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d04a      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a41      	ldr	r2, [pc, #260]	@ (800860c <DMA_CalcBaseAndBitshift+0x11c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d045      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a3f      	ldr	r2, [pc, #252]	@ (8008610 <DMA_CalcBaseAndBitshift+0x120>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d040      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a3e      	ldr	r2, [pc, #248]	@ (8008614 <DMA_CalcBaseAndBitshift+0x124>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d03b      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a3c      	ldr	r2, [pc, #240]	@ (8008618 <DMA_CalcBaseAndBitshift+0x128>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d036      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a3b      	ldr	r2, [pc, #236]	@ (800861c <DMA_CalcBaseAndBitshift+0x12c>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d031      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a39      	ldr	r2, [pc, #228]	@ (8008620 <DMA_CalcBaseAndBitshift+0x130>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d02c      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a38      	ldr	r2, [pc, #224]	@ (8008624 <DMA_CalcBaseAndBitshift+0x134>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d027      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a36      	ldr	r2, [pc, #216]	@ (8008628 <DMA_CalcBaseAndBitshift+0x138>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d022      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a35      	ldr	r2, [pc, #212]	@ (800862c <DMA_CalcBaseAndBitshift+0x13c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d01d      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a33      	ldr	r2, [pc, #204]	@ (8008630 <DMA_CalcBaseAndBitshift+0x140>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d018      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a32      	ldr	r2, [pc, #200]	@ (8008634 <DMA_CalcBaseAndBitshift+0x144>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d013      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a30      	ldr	r2, [pc, #192]	@ (8008638 <DMA_CalcBaseAndBitshift+0x148>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00e      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a2f      	ldr	r2, [pc, #188]	@ (800863c <DMA_CalcBaseAndBitshift+0x14c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d009      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a2d      	ldr	r2, [pc, #180]	@ (8008640 <DMA_CalcBaseAndBitshift+0x150>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xa8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a2c      	ldr	r2, [pc, #176]	@ (8008644 <DMA_CalcBaseAndBitshift+0x154>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d101      	bne.n	800859c <DMA_CalcBaseAndBitshift+0xac>
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <DMA_CalcBaseAndBitshift+0xae>
 800859c:	2300      	movs	r3, #0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d024      	beq.n	80085ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	3b10      	subs	r3, #16
 80085aa:	4a27      	ldr	r2, [pc, #156]	@ (8008648 <DMA_CalcBaseAndBitshift+0x158>)
 80085ac:	fba2 2303 	umull	r2, r3, r2, r3
 80085b0:	091b      	lsrs	r3, r3, #4
 80085b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	4a24      	ldr	r2, [pc, #144]	@ (800864c <DMA_CalcBaseAndBitshift+0x15c>)
 80085bc:	5cd3      	ldrb	r3, [r2, r3]
 80085be:	461a      	mov	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d908      	bls.n	80085dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	4b1f      	ldr	r3, [pc, #124]	@ (8008650 <DMA_CalcBaseAndBitshift+0x160>)
 80085d2:	4013      	ands	r3, r2
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80085da:	e00d      	b.n	80085f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008650 <DMA_CalcBaseAndBitshift+0x160>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80085ea:	e005      	b.n	80085f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	40020010 	.word	0x40020010
 800860c:	40020028 	.word	0x40020028
 8008610:	40020040 	.word	0x40020040
 8008614:	40020058 	.word	0x40020058
 8008618:	40020070 	.word	0x40020070
 800861c:	40020088 	.word	0x40020088
 8008620:	400200a0 	.word	0x400200a0
 8008624:	400200b8 	.word	0x400200b8
 8008628:	40020410 	.word	0x40020410
 800862c:	40020428 	.word	0x40020428
 8008630:	40020440 	.word	0x40020440
 8008634:	40020458 	.word	0x40020458
 8008638:	40020470 	.word	0x40020470
 800863c:	40020488 	.word	0x40020488
 8008640:	400204a0 	.word	0x400204a0
 8008644:	400204b8 	.word	0x400204b8
 8008648:	aaaaaaab 	.word	0xaaaaaaab
 800864c:	080113d8 	.word	0x080113d8
 8008650:	fffffc00 	.word	0xfffffc00

08008654 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d120      	bne.n	80086aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866c:	2b03      	cmp	r3, #3
 800866e:	d858      	bhi.n	8008722 <DMA_CheckFifoParam+0xce>
 8008670:	a201      	add	r2, pc, #4	@ (adr r2, 8008678 <DMA_CheckFifoParam+0x24>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	08008689 	.word	0x08008689
 800867c:	0800869b 	.word	0x0800869b
 8008680:	08008689 	.word	0x08008689
 8008684:	08008723 	.word	0x08008723
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d048      	beq.n	8008726 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008698:	e045      	b.n	8008726 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80086a2:	d142      	bne.n	800872a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086a8:	e03f      	b.n	800872a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086b2:	d123      	bne.n	80086fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d838      	bhi.n	800872e <DMA_CheckFifoParam+0xda>
 80086bc:	a201      	add	r2, pc, #4	@ (adr r2, 80086c4 <DMA_CheckFifoParam+0x70>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086d5 	.word	0x080086d5
 80086c8:	080086db 	.word	0x080086db
 80086cc:	080086d5 	.word	0x080086d5
 80086d0:	080086ed 	.word	0x080086ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
        break;
 80086d8:	e030      	b.n	800873c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d025      	beq.n	8008732 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ea:	e022      	b.n	8008732 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80086f4:	d11f      	bne.n	8008736 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086fa:	e01c      	b.n	8008736 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008700:	2b02      	cmp	r3, #2
 8008702:	d902      	bls.n	800870a <DMA_CheckFifoParam+0xb6>
 8008704:	2b03      	cmp	r3, #3
 8008706:	d003      	beq.n	8008710 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008708:	e018      	b.n	800873c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
        break;
 800870e:	e015      	b.n	800873c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	73fb      	strb	r3, [r7, #15]
    break;
 8008720:	e00b      	b.n	800873a <DMA_CheckFifoParam+0xe6>
        break;
 8008722:	bf00      	nop
 8008724:	e00a      	b.n	800873c <DMA_CheckFifoParam+0xe8>
        break;
 8008726:	bf00      	nop
 8008728:	e008      	b.n	800873c <DMA_CheckFifoParam+0xe8>
        break;
 800872a:	bf00      	nop
 800872c:	e006      	b.n	800873c <DMA_CheckFifoParam+0xe8>
        break;
 800872e:	bf00      	nop
 8008730:	e004      	b.n	800873c <DMA_CheckFifoParam+0xe8>
        break;
 8008732:	bf00      	nop
 8008734:	e002      	b.n	800873c <DMA_CheckFifoParam+0xe8>
        break;
 8008736:	bf00      	nop
 8008738:	e000      	b.n	800873c <DMA_CheckFifoParam+0xe8>
    break;
 800873a:	bf00      	nop
    }
  }

  return status;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop

0800874c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a38      	ldr	r2, [pc, #224]	@ (8008840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d022      	beq.n	80087aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a36      	ldr	r2, [pc, #216]	@ (8008844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d01d      	beq.n	80087aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a35      	ldr	r2, [pc, #212]	@ (8008848 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d018      	beq.n	80087aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a33      	ldr	r2, [pc, #204]	@ (800884c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a32      	ldr	r2, [pc, #200]	@ (8008850 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00e      	beq.n	80087aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a30      	ldr	r2, [pc, #192]	@ (8008854 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d009      	beq.n	80087aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a2f      	ldr	r2, [pc, #188]	@ (8008858 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d004      	beq.n	80087aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a2d      	ldr	r2, [pc, #180]	@ (800885c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d101      	bne.n	80087ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01a      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	3b08      	subs	r3, #8
 80087bc:	4a28      	ldr	r2, [pc, #160]	@ (8008860 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087be:	fba2 2303 	umull	r2, r3, r2, r3
 80087c2:	091b      	lsrs	r3, r3, #4
 80087c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4b26      	ldr	r3, [pc, #152]	@ (8008864 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a24      	ldr	r2, [pc, #144]	@ (8008868 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80087d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f003 031f 	and.w	r3, r3, #31
 80087e0:	2201      	movs	r2, #1
 80087e2:	409a      	lsls	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80087e8:	e024      	b.n	8008834 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	3b10      	subs	r3, #16
 80087f2:	4a1e      	ldr	r2, [pc, #120]	@ (800886c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80087f4:	fba2 2303 	umull	r2, r3, r2, r3
 80087f8:	091b      	lsrs	r3, r3, #4
 80087fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d806      	bhi.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	4a1b      	ldr	r2, [pc, #108]	@ (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d902      	bls.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3308      	adds	r3, #8
 8008810:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4b18      	ldr	r3, [pc, #96]	@ (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a16      	ldr	r2, [pc, #88]	@ (800887c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008824:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f003 031f 	and.w	r3, r3, #31
 800882c:	2201      	movs	r2, #1
 800882e:	409a      	lsls	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008834:	bf00      	nop
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	58025408 	.word	0x58025408
 8008844:	5802541c 	.word	0x5802541c
 8008848:	58025430 	.word	0x58025430
 800884c:	58025444 	.word	0x58025444
 8008850:	58025458 	.word	0x58025458
 8008854:	5802546c 	.word	0x5802546c
 8008858:	58025480 	.word	0x58025480
 800885c:	58025494 	.word	0x58025494
 8008860:	cccccccd 	.word	0xcccccccd
 8008864:	16009600 	.word	0x16009600
 8008868:	58025880 	.word	0x58025880
 800886c:	aaaaaaab 	.word	0xaaaaaaab
 8008870:	400204b8 	.word	0x400204b8
 8008874:	4002040f 	.word	0x4002040f
 8008878:	10008200 	.word	0x10008200
 800887c:	40020880 	.word	0x40020880

08008880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d04a      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b08      	cmp	r3, #8
 800889a:	d847      	bhi.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a25      	ldr	r2, [pc, #148]	@ (8008938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d022      	beq.n	80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a24      	ldr	r2, [pc, #144]	@ (800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d01d      	beq.n	80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a22      	ldr	r2, [pc, #136]	@ (8008940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d018      	beq.n	80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a21      	ldr	r2, [pc, #132]	@ (8008944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d013      	beq.n	80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00e      	beq.n	80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a1e      	ldr	r2, [pc, #120]	@ (800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d009      	beq.n	80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d004      	beq.n	80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d101      	bne.n	80088f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e000      	b.n	80088f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80088f0:	2300      	movs	r3, #0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	4b17      	ldr	r3, [pc, #92]	@ (8008958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a15      	ldr	r2, [pc, #84]	@ (800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008908:	671a      	str	r2, [r3, #112]	@ 0x70
 800890a:	e009      	b.n	8008920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4b14      	ldr	r3, [pc, #80]	@ (8008960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	461a      	mov	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a11      	ldr	r2, [pc, #68]	@ (8008964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800891e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3b01      	subs	r3, #1
 8008924:	2201      	movs	r2, #1
 8008926:	409a      	lsls	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	58025408 	.word	0x58025408
 800893c:	5802541c 	.word	0x5802541c
 8008940:	58025430 	.word	0x58025430
 8008944:	58025444 	.word	0x58025444
 8008948:	58025458 	.word	0x58025458
 800894c:	5802546c 	.word	0x5802546c
 8008950:	58025480 	.word	0x58025480
 8008954:	58025494 	.word	0x58025494
 8008958:	1600963f 	.word	0x1600963f
 800895c:	58025940 	.word	0x58025940
 8008960:	1000823f 	.word	0x1000823f
 8008964:	40020940 	.word	0x40020940

08008968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008968:	b480      	push	{r7}
 800896a:	b089      	sub	sp, #36	@ 0x24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008976:	4b86      	ldr	r3, [pc, #536]	@ (8008b90 <HAL_GPIO_Init+0x228>)
 8008978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800897a:	e18c      	b.n	8008c96 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	2101      	movs	r1, #1
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	fa01 f303 	lsl.w	r3, r1, r3
 8008988:	4013      	ands	r3, r2
 800898a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 817e 	beq.w	8008c90 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d005      	beq.n	80089ac <HAL_GPIO_Init+0x44>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f003 0303 	and.w	r3, r3, #3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d130      	bne.n	8008a0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	2203      	movs	r2, #3
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	43db      	mvns	r3, r3
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	4013      	ands	r3, r2
 80089c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	fa02 f303 	lsl.w	r3, r2, r3
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089e2:	2201      	movs	r2, #1
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ea:	43db      	mvns	r3, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	4013      	ands	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	091b      	lsrs	r3, r3, #4
 80089f8:	f003 0201 	and.w	r2, r3, #1
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f003 0303 	and.w	r3, r3, #3
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d017      	beq.n	8008a4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	2203      	movs	r2, #3
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d123      	bne.n	8008a9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	08da      	lsrs	r2, r3, #3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3208      	adds	r2, #8
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	220f      	movs	r2, #15
 8008a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a72:	43db      	mvns	r3, r3
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	4013      	ands	r3, r2
 8008a78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	08da      	lsrs	r2, r3, #3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3208      	adds	r2, #8
 8008a98:	69b9      	ldr	r1, [r7, #24]
 8008a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	43db      	mvns	r3, r3
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f003 0203 	and.w	r2, r3, #3
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80d8 	beq.w	8008c90 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8008b94 <HAL_GPIO_Init+0x22c>)
 8008ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8008b94 <HAL_GPIO_Init+0x22c>)
 8008ae8:	f043 0302 	orr.w	r3, r3, #2
 8008aec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008af0:	4b28      	ldr	r3, [pc, #160]	@ (8008b94 <HAL_GPIO_Init+0x22c>)
 8008af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008afe:	4a26      	ldr	r2, [pc, #152]	@ (8008b98 <HAL_GPIO_Init+0x230>)
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	089b      	lsrs	r3, r3, #2
 8008b04:	3302      	adds	r3, #2
 8008b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	220f      	movs	r2, #15
 8008b16:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a1d      	ldr	r2, [pc, #116]	@ (8008b9c <HAL_GPIO_Init+0x234>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d04a      	beq.n	8008bc0 <HAL_GPIO_Init+0x258>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba0 <HAL_GPIO_Init+0x238>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d02b      	beq.n	8008b8a <HAL_GPIO_Init+0x222>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba4 <HAL_GPIO_Init+0x23c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d025      	beq.n	8008b86 <HAL_GPIO_Init+0x21e>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba8 <HAL_GPIO_Init+0x240>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d01f      	beq.n	8008b82 <HAL_GPIO_Init+0x21a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a19      	ldr	r2, [pc, #100]	@ (8008bac <HAL_GPIO_Init+0x244>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d019      	beq.n	8008b7e <HAL_GPIO_Init+0x216>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a18      	ldr	r2, [pc, #96]	@ (8008bb0 <HAL_GPIO_Init+0x248>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d013      	beq.n	8008b7a <HAL_GPIO_Init+0x212>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a17      	ldr	r2, [pc, #92]	@ (8008bb4 <HAL_GPIO_Init+0x24c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d00d      	beq.n	8008b76 <HAL_GPIO_Init+0x20e>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a16      	ldr	r2, [pc, #88]	@ (8008bb8 <HAL_GPIO_Init+0x250>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d007      	beq.n	8008b72 <HAL_GPIO_Init+0x20a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a15      	ldr	r2, [pc, #84]	@ (8008bbc <HAL_GPIO_Init+0x254>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d101      	bne.n	8008b6e <HAL_GPIO_Init+0x206>
 8008b6a:	2309      	movs	r3, #9
 8008b6c:	e029      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b6e:	230a      	movs	r3, #10
 8008b70:	e027      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b72:	2307      	movs	r3, #7
 8008b74:	e025      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b76:	2306      	movs	r3, #6
 8008b78:	e023      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b7a:	2305      	movs	r3, #5
 8008b7c:	e021      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b7e:	2304      	movs	r3, #4
 8008b80:	e01f      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b82:	2303      	movs	r3, #3
 8008b84:	e01d      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e01b      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e019      	b.n	8008bc2 <HAL_GPIO_Init+0x25a>
 8008b8e:	bf00      	nop
 8008b90:	58000080 	.word	0x58000080
 8008b94:	58024400 	.word	0x58024400
 8008b98:	58000400 	.word	0x58000400
 8008b9c:	58020000 	.word	0x58020000
 8008ba0:	58020400 	.word	0x58020400
 8008ba4:	58020800 	.word	0x58020800
 8008ba8:	58020c00 	.word	0x58020c00
 8008bac:	58021000 	.word	0x58021000
 8008bb0:	58021400 	.word	0x58021400
 8008bb4:	58021800 	.word	0x58021800
 8008bb8:	58021c00 	.word	0x58021c00
 8008bbc:	58022400 	.word	0x58022400
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	f002 0203 	and.w	r2, r2, #3
 8008bc8:	0092      	lsls	r2, r2, #2
 8008bca:	4093      	lsls	r3, r2
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bd2:	4938      	ldr	r1, [pc, #224]	@ (8008cb4 <HAL_GPIO_Init+0x34c>)
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	089b      	lsrs	r3, r3, #2
 8008bd8:	3302      	adds	r3, #2
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	43db      	mvns	r3, r3
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	43db      	mvns	r3, r3
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	43db      	mvns	r3, r3
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4013      	ands	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	3301      	adds	r3, #1
 8008c94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f47f ae6b 	bne.w	800897c <HAL_GPIO_Init+0x14>
  }
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	3724      	adds	r7, #36	@ 0x24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	58000400 	.word	0x58000400

08008cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	807b      	strh	r3, [r7, #2]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cc8:	787b      	ldrb	r3, [r7, #1]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cce:	887a      	ldrh	r2, [r7, #2]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008cd4:	e003      	b.n	8008cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008cd6:	887b      	ldrh	r3, [r7, #2]
 8008cd8:	041a      	lsls	r2, r3, #16
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	619a      	str	r2, [r3, #24]
}
 8008cde:	bf00      	nop
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008cfc:	887a      	ldrh	r2, [r7, #2]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4013      	ands	r3, r2
 8008d02:	041a      	lsls	r2, r3, #16
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	43d9      	mvns	r1, r3
 8008d08:	887b      	ldrh	r3, [r7, #2]
 8008d0a:	400b      	ands	r3, r1
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	619a      	str	r2, [r3, #24]
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	4603      	mov	r3, r0
 8008d26:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008d30:	88fb      	ldrh	r3, [r7, #6]
 8008d32:	4013      	ands	r3, r2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d3c:	88fb      	ldrh	r3, [r7, #6]
 8008d3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7f8 fda5 	bl	8001894 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d5c:	4b19      	ldr	r3, [pc, #100]	@ (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d00a      	beq.n	8008d7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d68:	4b16      	ldr	r3, [pc, #88]	@ (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f003 0307 	and.w	r3, r3, #7
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d001      	beq.n	8008d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e01f      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e01d      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d7e:	4b11      	ldr	r3, [pc, #68]	@ (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f023 0207 	bic.w	r2, r3, #7
 8008d86:	490f      	ldr	r1, [pc, #60]	@ (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d8e:	f7fa fdb5 	bl	80038fc <HAL_GetTick>
 8008d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d94:	e009      	b.n	8008daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d96:	f7fa fdb1 	bl	80038fc <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008da4:	d901      	bls.n	8008daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e007      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008daa:	4b06      	ldr	r3, [pc, #24]	@ (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008db6:	d1ee      	bne.n	8008d96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	58024800 	.word	0x58024800

08008dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08c      	sub	sp, #48	@ 0x30
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e3c8      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8087 	beq.w	8008ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008de8:	4b88      	ldr	r3, [pc, #544]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008df2:	4b86      	ldr	r3, [pc, #536]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d007      	beq.n	8008e0e <HAL_RCC_OscConfig+0x46>
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	2b18      	cmp	r3, #24
 8008e02:	d110      	bne.n	8008e26 <HAL_RCC_OscConfig+0x5e>
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d10b      	bne.n	8008e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d06c      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x12c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d168      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e3a2      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e2e:	d106      	bne.n	8008e3e <HAL_RCC_OscConfig+0x76>
 8008e30:	4b76      	ldr	r3, [pc, #472]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a75      	ldr	r2, [pc, #468]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	e02e      	b.n	8008e9c <HAL_RCC_OscConfig+0xd4>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10c      	bne.n	8008e60 <HAL_RCC_OscConfig+0x98>
 8008e46:	4b71      	ldr	r3, [pc, #452]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a70      	ldr	r2, [pc, #448]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	4b6e      	ldr	r3, [pc, #440]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a6d      	ldr	r2, [pc, #436]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	e01d      	b.n	8008e9c <HAL_RCC_OscConfig+0xd4>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e68:	d10c      	bne.n	8008e84 <HAL_RCC_OscConfig+0xbc>
 8008e6a:	4b68      	ldr	r3, [pc, #416]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a67      	ldr	r2, [pc, #412]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	4b65      	ldr	r3, [pc, #404]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a64      	ldr	r2, [pc, #400]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	e00b      	b.n	8008e9c <HAL_RCC_OscConfig+0xd4>
 8008e84:	4b61      	ldr	r3, [pc, #388]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a60      	ldr	r2, [pc, #384]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	4b5e      	ldr	r3, [pc, #376]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a5d      	ldr	r2, [pc, #372]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d013      	beq.n	8008ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea4:	f7fa fd2a 	bl	80038fc <HAL_GetTick>
 8008ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eac:	f7fa fd26 	bl	80038fc <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b64      	cmp	r3, #100	@ 0x64
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e356      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ebe:	4b53      	ldr	r3, [pc, #332]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <HAL_RCC_OscConfig+0xe4>
 8008eca:	e014      	b.n	8008ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ecc:	f7fa fd16 	bl	80038fc <HAL_GetTick>
 8008ed0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ed4:	f7fa fd12 	bl	80038fc <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b64      	cmp	r3, #100	@ 0x64
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e342      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ee6:	4b49      	ldr	r3, [pc, #292]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f0      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x10c>
 8008ef2:	e000      	b.n	8008ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 808c 	beq.w	800901c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f04:	4b41      	ldr	r3, [pc, #260]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d007      	beq.n	8008f2a <HAL_RCC_OscConfig+0x162>
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	2b18      	cmp	r3, #24
 8008f1e:	d137      	bne.n	8008f90 <HAL_RCC_OscConfig+0x1c8>
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d132      	bne.n	8008f90 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f2a:	4b38      	ldr	r3, [pc, #224]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <HAL_RCC_OscConfig+0x17a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e314      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f42:	4b32      	ldr	r3, [pc, #200]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f023 0219 	bic.w	r2, r3, #25
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	492f      	ldr	r1, [pc, #188]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f54:	f7fa fcd2 	bl	80038fc <HAL_GetTick>
 8008f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f5c:	f7fa fcce 	bl	80038fc <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e2fe      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f6e:	4b27      	ldr	r3, [pc, #156]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f7a:	4b24      	ldr	r3, [pc, #144]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	061b      	lsls	r3, r3, #24
 8008f88:	4920      	ldr	r1, [pc, #128]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f8e:	e045      	b.n	800901c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d026      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f98:	4b1c      	ldr	r3, [pc, #112]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f023 0219 	bic.w	r2, r3, #25
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	4919      	ldr	r1, [pc, #100]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008faa:	f7fa fca7 	bl	80038fc <HAL_GetTick>
 8008fae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fb0:	e008      	b.n	8008fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fb2:	f7fa fca3 	bl	80038fc <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e2d3      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fc4:	4b11      	ldr	r3, [pc, #68]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0f0      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	061b      	lsls	r3, r3, #24
 8008fde:	490b      	ldr	r1, [pc, #44]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	604b      	str	r3, [r1, #4]
 8008fe4:	e01a      	b.n	800901c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fe6:	4b09      	ldr	r3, [pc, #36]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a08      	ldr	r2, [pc, #32]	@ (800900c <HAL_RCC_OscConfig+0x244>)
 8008fec:	f023 0301 	bic.w	r3, r3, #1
 8008ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff2:	f7fa fc83 	bl	80038fc <HAL_GetTick>
 8008ff6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ff8:	e00a      	b.n	8009010 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ffa:	f7fa fc7f 	bl	80038fc <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d903      	bls.n	8009010 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e2af      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
 800900c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009010:	4b96      	ldr	r3, [pc, #600]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1ee      	bne.n	8008ffa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d06a      	beq.n	80090fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009028:	4b90      	ldr	r3, [pc, #576]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009030:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009032:	4b8e      	ldr	r3, [pc, #568]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009036:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	2b08      	cmp	r3, #8
 800903c:	d007      	beq.n	800904e <HAL_RCC_OscConfig+0x286>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b18      	cmp	r3, #24
 8009042:	d11b      	bne.n	800907c <HAL_RCC_OscConfig+0x2b4>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	2b01      	cmp	r3, #1
 800904c:	d116      	bne.n	800907c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800904e:	4b87      	ldr	r3, [pc, #540]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_RCC_OscConfig+0x29e>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	2b80      	cmp	r3, #128	@ 0x80
 8009060:	d001      	beq.n	8009066 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e282      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009066:	4b81      	ldr	r3, [pc, #516]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	061b      	lsls	r3, r3, #24
 8009074:	497d      	ldr	r1, [pc, #500]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009076:	4313      	orrs	r3, r2
 8009078:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800907a:	e040      	b.n	80090fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d023      	beq.n	80090cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009084:	4b79      	ldr	r3, [pc, #484]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a78      	ldr	r2, [pc, #480]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800908a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800908e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fa fc34 	bl	80038fc <HAL_GetTick>
 8009094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009098:	f7fa fc30 	bl	80038fc <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e260      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090aa:	4b70      	ldr	r3, [pc, #448]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f0      	beq.n	8009098 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090b6:	4b6d      	ldr	r3, [pc, #436]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	061b      	lsls	r3, r3, #24
 80090c4:	4969      	ldr	r1, [pc, #420]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60cb      	str	r3, [r1, #12]
 80090ca:	e018      	b.n	80090fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80090cc:	4b67      	ldr	r3, [pc, #412]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a66      	ldr	r2, [pc, #408]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fa fc10 	bl	80038fc <HAL_GetTick>
 80090dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80090e0:	f7fa fc0c 	bl	80038fc <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e23c      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090f2:	4b5e      	ldr	r3, [pc, #376]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f0      	bne.n	80090e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d036      	beq.n	8009178 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d019      	beq.n	8009146 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009112:	4b56      	ldr	r3, [pc, #344]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009116:	4a55      	ldr	r2, [pc, #340]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800911e:	f7fa fbed 	bl	80038fc <HAL_GetTick>
 8009122:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009124:	e008      	b.n	8009138 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009126:	f7fa fbe9 	bl	80038fc <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d901      	bls.n	8009138 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e219      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009138:	4b4c      	ldr	r3, [pc, #304]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800913a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f0      	beq.n	8009126 <HAL_RCC_OscConfig+0x35e>
 8009144:	e018      	b.n	8009178 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009146:	4b49      	ldr	r3, [pc, #292]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800914a:	4a48      	ldr	r2, [pc, #288]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800914c:	f023 0301 	bic.w	r3, r3, #1
 8009150:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7fa fbd3 	bl	80038fc <HAL_GetTick>
 8009156:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009158:	e008      	b.n	800916c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800915a:	f7fa fbcf 	bl	80038fc <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e1ff      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800916c:	4b3f      	ldr	r3, [pc, #252]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800916e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1f0      	bne.n	800915a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b00      	cmp	r3, #0
 8009182:	d036      	beq.n	80091f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d019      	beq.n	80091c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800918c:	4b37      	ldr	r3, [pc, #220]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a36      	ldr	r2, [pc, #216]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009192:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009196:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009198:	f7fa fbb0 	bl	80038fc <HAL_GetTick>
 800919c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091a0:	f7fa fbac 	bl	80038fc <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e1dc      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091b2:	4b2e      	ldr	r3, [pc, #184]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0x3d8>
 80091be:	e018      	b.n	80091f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091c0:	4b2a      	ldr	r3, [pc, #168]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a29      	ldr	r2, [pc, #164]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091cc:	f7fa fb96 	bl	80038fc <HAL_GetTick>
 80091d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091d2:	e008      	b.n	80091e6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091d4:	f7fa fb92 	bl	80038fc <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e1c2      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091e6:	4b21      	ldr	r3, [pc, #132]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f0      	bne.n	80091d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8086 	beq.w	800930c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009200:	4b1b      	ldr	r3, [pc, #108]	@ (8009270 <HAL_RCC_OscConfig+0x4a8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a1a      	ldr	r2, [pc, #104]	@ (8009270 <HAL_RCC_OscConfig+0x4a8>)
 8009206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800920a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800920c:	f7fa fb76 	bl	80038fc <HAL_GetTick>
 8009210:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009214:	f7fa fb72 	bl	80038fc <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b64      	cmp	r3, #100	@ 0x64
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e1a2      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009226:	4b12      	ldr	r3, [pc, #72]	@ (8009270 <HAL_RCC_OscConfig+0x4a8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0f0      	beq.n	8009214 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d106      	bne.n	8009248 <HAL_RCC_OscConfig+0x480>
 800923a:	4b0c      	ldr	r3, [pc, #48]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800923c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800923e:	4a0b      	ldr	r2, [pc, #44]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009240:	f043 0301 	orr.w	r3, r3, #1
 8009244:	6713      	str	r3, [r2, #112]	@ 0x70
 8009246:	e032      	b.n	80092ae <HAL_RCC_OscConfig+0x4e6>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d111      	bne.n	8009274 <HAL_RCC_OscConfig+0x4ac>
 8009250:	4b06      	ldr	r3, [pc, #24]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009254:	4a05      	ldr	r2, [pc, #20]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009256:	f023 0301 	bic.w	r3, r3, #1
 800925a:	6713      	str	r3, [r2, #112]	@ 0x70
 800925c:	4b03      	ldr	r3, [pc, #12]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 800925e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009260:	4a02      	ldr	r2, [pc, #8]	@ (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009262:	f023 0304 	bic.w	r3, r3, #4
 8009266:	6713      	str	r3, [r2, #112]	@ 0x70
 8009268:	e021      	b.n	80092ae <HAL_RCC_OscConfig+0x4e6>
 800926a:	bf00      	nop
 800926c:	58024400 	.word	0x58024400
 8009270:	58024800 	.word	0x58024800
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b05      	cmp	r3, #5
 800927a:	d10c      	bne.n	8009296 <HAL_RCC_OscConfig+0x4ce>
 800927c:	4b83      	ldr	r3, [pc, #524]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800927e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009280:	4a82      	ldr	r2, [pc, #520]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009282:	f043 0304 	orr.w	r3, r3, #4
 8009286:	6713      	str	r3, [r2, #112]	@ 0x70
 8009288:	4b80      	ldr	r3, [pc, #512]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800928c:	4a7f      	ldr	r2, [pc, #508]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800928e:	f043 0301 	orr.w	r3, r3, #1
 8009292:	6713      	str	r3, [r2, #112]	@ 0x70
 8009294:	e00b      	b.n	80092ae <HAL_RCC_OscConfig+0x4e6>
 8009296:	4b7d      	ldr	r3, [pc, #500]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800929a:	4a7c      	ldr	r2, [pc, #496]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80092a2:	4b7a      	ldr	r3, [pc, #488]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80092a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a6:	4a79      	ldr	r2, [pc, #484]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80092a8:	f023 0304 	bic.w	r3, r3, #4
 80092ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d015      	beq.n	80092e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b6:	f7fa fb21 	bl	80038fc <HAL_GetTick>
 80092ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092bc:	e00a      	b.n	80092d4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092be:	f7fa fb1d 	bl	80038fc <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d901      	bls.n	80092d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e14b      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d4:	4b6d      	ldr	r3, [pc, #436]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0ee      	beq.n	80092be <HAL_RCC_OscConfig+0x4f6>
 80092e0:	e014      	b.n	800930c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e2:	f7fa fb0b 	bl	80038fc <HAL_GetTick>
 80092e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092e8:	e00a      	b.n	8009300 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ea:	f7fa fb07 	bl	80038fc <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d901      	bls.n	8009300 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e135      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009300:	4b62      	ldr	r3, [pc, #392]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1ee      	bne.n	80092ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 812a 	beq.w	800956a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009316:	4b5d      	ldr	r3, [pc, #372]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800931e:	2b18      	cmp	r3, #24
 8009320:	f000 80ba 	beq.w	8009498 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009328:	2b02      	cmp	r3, #2
 800932a:	f040 8095 	bne.w	8009458 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800932e:	4b57      	ldr	r3, [pc, #348]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a56      	ldr	r2, [pc, #344]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933a:	f7fa fadf 	bl	80038fc <HAL_GetTick>
 800933e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009342:	f7fa fadb 	bl	80038fc <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e10b      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009354:	4b4d      	ldr	r3, [pc, #308]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1f0      	bne.n	8009342 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009360:	4b4a      	ldr	r3, [pc, #296]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009364:	4b4a      	ldr	r3, [pc, #296]	@ (8009490 <HAL_RCC_OscConfig+0x6c8>)
 8009366:	4013      	ands	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009370:	0112      	lsls	r2, r2, #4
 8009372:	430a      	orrs	r2, r1
 8009374:	4945      	ldr	r1, [pc, #276]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009376:	4313      	orrs	r3, r2
 8009378:	628b      	str	r3, [r1, #40]	@ 0x28
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800937e:	3b01      	subs	r3, #1
 8009380:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009388:	3b01      	subs	r3, #1
 800938a:	025b      	lsls	r3, r3, #9
 800938c:	b29b      	uxth	r3, r3
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009394:	3b01      	subs	r3, #1
 8009396:	041b      	lsls	r3, r3, #16
 8009398:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a2:	3b01      	subs	r3, #1
 80093a4:	061b      	lsls	r3, r3, #24
 80093a6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093aa:	4938      	ldr	r1, [pc, #224]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80093b0:	4b36      	ldr	r3, [pc, #216]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b4:	4a35      	ldr	r2, [pc, #212]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093bc:	4b33      	ldr	r3, [pc, #204]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093c0:	4b34      	ldr	r3, [pc, #208]	@ (8009494 <HAL_RCC_OscConfig+0x6cc>)
 80093c2:	4013      	ands	r3, r2
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80093c8:	00d2      	lsls	r2, r2, #3
 80093ca:	4930      	ldr	r1, [pc, #192]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80093d0:	4b2e      	ldr	r3, [pc, #184]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d4:	f023 020c 	bic.w	r2, r3, #12
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093dc:	492b      	ldr	r1, [pc, #172]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093e2:	4b2a      	ldr	r3, [pc, #168]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e6:	f023 0202 	bic.w	r2, r3, #2
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ee:	4927      	ldr	r1, [pc, #156]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093f4:	4b25      	ldr	r3, [pc, #148]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	4a24      	ldr	r2, [pc, #144]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009400:	4b22      	ldr	r3, [pc, #136]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	4a21      	ldr	r2, [pc, #132]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800940a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800940c:	4b1f      	ldr	r3, [pc, #124]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	4a1e      	ldr	r2, [pc, #120]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009412:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009418:	4b1c      	ldr	r3, [pc, #112]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800941a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941c:	4a1b      	ldr	r2, [pc, #108]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009424:	4b19      	ldr	r3, [pc, #100]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a18      	ldr	r2, [pc, #96]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800942a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800942e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009430:	f7fa fa64 	bl	80038fc <HAL_GetTick>
 8009434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009438:	f7fa fa60 	bl	80038fc <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e090      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800944a:	4b10      	ldr	r3, [pc, #64]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f0      	beq.n	8009438 <HAL_RCC_OscConfig+0x670>
 8009456:	e088      	b.n	800956a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009458:	4b0c      	ldr	r3, [pc, #48]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a0b      	ldr	r2, [pc, #44]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 800945e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009464:	f7fa fa4a 	bl	80038fc <HAL_GetTick>
 8009468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800946a:	e008      	b.n	800947e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800946c:	f7fa fa46 	bl	80038fc <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e076      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800947e:	4b03      	ldr	r3, [pc, #12]	@ (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1f0      	bne.n	800946c <HAL_RCC_OscConfig+0x6a4>
 800948a:	e06e      	b.n	800956a <HAL_RCC_OscConfig+0x7a2>
 800948c:	58024400 	.word	0x58024400
 8009490:	fffffc0c 	.word	0xfffffc0c
 8009494:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009498:	4b36      	ldr	r3, [pc, #216]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 800949a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800949e:	4b35      	ldr	r3, [pc, #212]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d031      	beq.n	8009510 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f003 0203 	and.w	r2, r3, #3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d12a      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	091b      	lsrs	r3, r3, #4
 80094be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d122      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d11a      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	0a5b      	lsrs	r3, r3, #9
 80094de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d111      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	0c1b      	lsrs	r3, r3, #16
 80094f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d108      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	0e1b      	lsrs	r3, r3, #24
 8009502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800950c:	429a      	cmp	r2, r3
 800950e:	d001      	beq.n	8009514 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e02b      	b.n	800956c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009514:	4b17      	ldr	r3, [pc, #92]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 8009516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009518:	08db      	lsrs	r3, r3, #3
 800951a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800951e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	d01f      	beq.n	800956a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800952a:	4b12      	ldr	r3, [pc, #72]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 800952c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952e:	4a11      	ldr	r2, [pc, #68]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009536:	f7fa f9e1 	bl	80038fc <HAL_GetTick>
 800953a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800953c:	bf00      	nop
 800953e:	f7fa f9dd 	bl	80038fc <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	4293      	cmp	r3, r2
 8009548:	d0f9      	beq.n	800953e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800954a:	4b0a      	ldr	r3, [pc, #40]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 800954c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800954e:	4b0a      	ldr	r3, [pc, #40]	@ (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009550:	4013      	ands	r3, r2
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009556:	00d2      	lsls	r2, r2, #3
 8009558:	4906      	ldr	r1, [pc, #24]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 800955a:	4313      	orrs	r3, r2
 800955c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800955e:	4b05      	ldr	r3, [pc, #20]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 8009560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009562:	4a04      	ldr	r2, [pc, #16]	@ (8009574 <HAL_RCC_OscConfig+0x7ac>)
 8009564:	f043 0301 	orr.w	r3, r3, #1
 8009568:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3730      	adds	r7, #48	@ 0x30
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	58024400 	.word	0x58024400
 8009578:	ffff0007 	.word	0xffff0007

0800957c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e19c      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009590:	4b8a      	ldr	r3, [pc, #552]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	429a      	cmp	r2, r3
 800959c:	d910      	bls.n	80095c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800959e:	4b87      	ldr	r3, [pc, #540]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f023 020f 	bic.w	r2, r3, #15
 80095a6:	4985      	ldr	r1, [pc, #532]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ae:	4b83      	ldr	r3, [pc, #524]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 030f 	and.w	r3, r3, #15
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d001      	beq.n	80095c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e184      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d010      	beq.n	80095ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691a      	ldr	r2, [r3, #16]
 80095d0:	4b7b      	ldr	r3, [pc, #492]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095d8:	429a      	cmp	r2, r3
 80095da:	d908      	bls.n	80095ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095dc:	4b78      	ldr	r3, [pc, #480]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	4975      	ldr	r1, [pc, #468]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d010      	beq.n	800961c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695a      	ldr	r2, [r3, #20]
 80095fe:	4b70      	ldr	r3, [pc, #448]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009606:	429a      	cmp	r2, r3
 8009608:	d908      	bls.n	800961c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800960a:	4b6d      	ldr	r3, [pc, #436]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	496a      	ldr	r1, [pc, #424]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009618:	4313      	orrs	r3, r2
 800961a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0310 	and.w	r3, r3, #16
 8009624:	2b00      	cmp	r3, #0
 8009626:	d010      	beq.n	800964a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699a      	ldr	r2, [r3, #24]
 800962c:	4b64      	ldr	r3, [pc, #400]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009634:	429a      	cmp	r2, r3
 8009636:	d908      	bls.n	800964a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009638:	4b61      	ldr	r3, [pc, #388]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	495e      	ldr	r1, [pc, #376]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009646:	4313      	orrs	r3, r2
 8009648:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d010      	beq.n	8009678 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	69da      	ldr	r2, [r3, #28]
 800965a:	4b59      	ldr	r3, [pc, #356]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009662:	429a      	cmp	r2, r3
 8009664:	d908      	bls.n	8009678 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009666:	4b56      	ldr	r3, [pc, #344]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	4953      	ldr	r1, [pc, #332]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009674:	4313      	orrs	r3, r2
 8009676:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d010      	beq.n	80096a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68da      	ldr	r2, [r3, #12]
 8009688:	4b4d      	ldr	r3, [pc, #308]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	429a      	cmp	r2, r3
 8009692:	d908      	bls.n	80096a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009694:	4b4a      	ldr	r3, [pc, #296]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	f023 020f 	bic.w	r2, r3, #15
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	4947      	ldr	r1, [pc, #284]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d055      	beq.n	800975e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80096b2:	4b43      	ldr	r3, [pc, #268]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	4940      	ldr	r1, [pc, #256]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d107      	bne.n	80096dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096cc:	4b3c      	ldr	r3, [pc, #240]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d121      	bne.n	800971c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e0f6      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d107      	bne.n	80096f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096e4:	4b36      	ldr	r3, [pc, #216]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d115      	bne.n	800971c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0ea      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d107      	bne.n	800970c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096fc:	4b30      	ldr	r3, [pc, #192]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009704:	2b00      	cmp	r3, #0
 8009706:	d109      	bne.n	800971c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e0de      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800970c:	4b2c      	ldr	r3, [pc, #176]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0d6      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800971c:	4b28      	ldr	r3, [pc, #160]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	f023 0207 	bic.w	r2, r3, #7
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	4925      	ldr	r1, [pc, #148]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800972a:	4313      	orrs	r3, r2
 800972c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800972e:	f7fa f8e5 	bl	80038fc <HAL_GetTick>
 8009732:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009734:	e00a      	b.n	800974c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009736:	f7fa f8e1 	bl	80038fc <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009744:	4293      	cmp	r3, r2
 8009746:	d901      	bls.n	800974c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e0be      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800974c:	4b1c      	ldr	r3, [pc, #112]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	429a      	cmp	r2, r3
 800975c:	d1eb      	bne.n	8009736 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b00      	cmp	r3, #0
 8009768:	d010      	beq.n	800978c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	4b14      	ldr	r3, [pc, #80]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	429a      	cmp	r2, r3
 8009778:	d208      	bcs.n	800978c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800977a:	4b11      	ldr	r3, [pc, #68]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	f023 020f 	bic.w	r2, r3, #15
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	490e      	ldr	r1, [pc, #56]	@ (80097c0 <HAL_RCC_ClockConfig+0x244>)
 8009788:	4313      	orrs	r3, r2
 800978a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800978c:	4b0b      	ldr	r3, [pc, #44]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 030f 	and.w	r3, r3, #15
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d214      	bcs.n	80097c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979a:	4b08      	ldr	r3, [pc, #32]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f023 020f 	bic.w	r2, r3, #15
 80097a2:	4906      	ldr	r1, [pc, #24]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097aa:	4b04      	ldr	r3, [pc, #16]	@ (80097bc <HAL_RCC_ClockConfig+0x240>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d005      	beq.n	80097c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e086      	b.n	80098ca <HAL_RCC_ClockConfig+0x34e>
 80097bc:	52002000 	.word	0x52002000
 80097c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d010      	beq.n	80097f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	4b3f      	ldr	r3, [pc, #252]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097dc:	429a      	cmp	r2, r3
 80097de:	d208      	bcs.n	80097f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097e0:	4b3c      	ldr	r3, [pc, #240]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	4939      	ldr	r1, [pc, #228]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d010      	beq.n	8009820 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	695a      	ldr	r2, [r3, #20]
 8009802:	4b34      	ldr	r3, [pc, #208]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800980a:	429a      	cmp	r2, r3
 800980c:	d208      	bcs.n	8009820 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800980e:	4b31      	ldr	r3, [pc, #196]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	492e      	ldr	r1, [pc, #184]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 800981c:	4313      	orrs	r3, r2
 800981e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0310 	and.w	r3, r3, #16
 8009828:	2b00      	cmp	r3, #0
 800982a:	d010      	beq.n	800984e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	4b28      	ldr	r3, [pc, #160]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009838:	429a      	cmp	r2, r3
 800983a:	d208      	bcs.n	800984e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800983c:	4b25      	ldr	r3, [pc, #148]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	4922      	ldr	r1, [pc, #136]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 800984a:	4313      	orrs	r3, r2
 800984c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d010      	beq.n	800987c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69da      	ldr	r2, [r3, #28]
 800985e:	4b1d      	ldr	r3, [pc, #116]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009866:	429a      	cmp	r2, r3
 8009868:	d208      	bcs.n	800987c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800986a:	4b1a      	ldr	r3, [pc, #104]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	4917      	ldr	r1, [pc, #92]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 8009878:	4313      	orrs	r3, r2
 800987a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800987c:	f000 f834 	bl	80098e8 <HAL_RCC_GetSysClockFreq>
 8009880:	4602      	mov	r2, r0
 8009882:	4b14      	ldr	r3, [pc, #80]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	0a1b      	lsrs	r3, r3, #8
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	4912      	ldr	r1, [pc, #72]	@ (80098d8 <HAL_RCC_ClockConfig+0x35c>)
 800988e:	5ccb      	ldrb	r3, [r1, r3]
 8009890:	f003 031f 	and.w	r3, r3, #31
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
 8009898:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800989a:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <HAL_RCC_ClockConfig+0x358>)
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	4a0d      	ldr	r2, [pc, #52]	@ (80098d8 <HAL_RCC_ClockConfig+0x35c>)
 80098a4:	5cd3      	ldrb	r3, [r2, r3]
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	fa22 f303 	lsr.w	r3, r2, r3
 80098b0:	4a0a      	ldr	r2, [pc, #40]	@ (80098dc <HAL_RCC_ClockConfig+0x360>)
 80098b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098b4:	4a0a      	ldr	r2, [pc, #40]	@ (80098e0 <HAL_RCC_ClockConfig+0x364>)
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80098ba:	4b0a      	ldr	r3, [pc, #40]	@ (80098e4 <HAL_RCC_ClockConfig+0x368>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7f9 ffd2 	bl	8003868 <HAL_InitTick>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	58024400 	.word	0x58024400
 80098d8:	080113c8 	.word	0x080113c8
 80098dc:	2400006c 	.word	0x2400006c
 80098e0:	24000068 	.word	0x24000068
 80098e4:	24000070 	.word	0x24000070

080098e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b089      	sub	sp, #36	@ 0x24
 80098ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098ee:	4bb3      	ldr	r3, [pc, #716]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098f6:	2b18      	cmp	r3, #24
 80098f8:	f200 8155 	bhi.w	8009ba6 <HAL_RCC_GetSysClockFreq+0x2be>
 80098fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009904 <HAL_RCC_GetSysClockFreq+0x1c>)
 80098fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009902:	bf00      	nop
 8009904:	08009969 	.word	0x08009969
 8009908:	08009ba7 	.word	0x08009ba7
 800990c:	08009ba7 	.word	0x08009ba7
 8009910:	08009ba7 	.word	0x08009ba7
 8009914:	08009ba7 	.word	0x08009ba7
 8009918:	08009ba7 	.word	0x08009ba7
 800991c:	08009ba7 	.word	0x08009ba7
 8009920:	08009ba7 	.word	0x08009ba7
 8009924:	0800998f 	.word	0x0800998f
 8009928:	08009ba7 	.word	0x08009ba7
 800992c:	08009ba7 	.word	0x08009ba7
 8009930:	08009ba7 	.word	0x08009ba7
 8009934:	08009ba7 	.word	0x08009ba7
 8009938:	08009ba7 	.word	0x08009ba7
 800993c:	08009ba7 	.word	0x08009ba7
 8009940:	08009ba7 	.word	0x08009ba7
 8009944:	08009995 	.word	0x08009995
 8009948:	08009ba7 	.word	0x08009ba7
 800994c:	08009ba7 	.word	0x08009ba7
 8009950:	08009ba7 	.word	0x08009ba7
 8009954:	08009ba7 	.word	0x08009ba7
 8009958:	08009ba7 	.word	0x08009ba7
 800995c:	08009ba7 	.word	0x08009ba7
 8009960:	08009ba7 	.word	0x08009ba7
 8009964:	0800999b 	.word	0x0800999b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009968:	4b94      	ldr	r3, [pc, #592]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d009      	beq.n	8009988 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009974:	4b91      	ldr	r3, [pc, #580]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	08db      	lsrs	r3, r3, #3
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	4a90      	ldr	r2, [pc, #576]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009980:	fa22 f303 	lsr.w	r3, r2, r3
 8009984:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009986:	e111      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009988:	4b8d      	ldr	r3, [pc, #564]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800998a:	61bb      	str	r3, [r7, #24]
      break;
 800998c:	e10e      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800998e:	4b8d      	ldr	r3, [pc, #564]	@ (8009bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009990:	61bb      	str	r3, [r7, #24]
      break;
 8009992:	e10b      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009994:	4b8c      	ldr	r3, [pc, #560]	@ (8009bc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009996:	61bb      	str	r3, [r7, #24]
      break;
 8009998:	e108      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800999a:	4b88      	ldr	r3, [pc, #544]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800999c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80099a4:	4b85      	ldr	r3, [pc, #532]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	091b      	lsrs	r3, r3, #4
 80099aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80099b0:	4b82      	ldr	r3, [pc, #520]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80099ba:	4b80      	ldr	r3, [pc, #512]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099be:	08db      	lsrs	r3, r3, #3
 80099c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 80e1 	beq.w	8009ba0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	f000 8083 	beq.w	8009aec <HAL_RCC_GetSysClockFreq+0x204>
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	f200 80a1 	bhi.w	8009b30 <HAL_RCC_GetSysClockFreq+0x248>
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_RCC_GetSysClockFreq+0x114>
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d056      	beq.n	8009aa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80099fa:	e099      	b.n	8009b30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099fc:	4b6f      	ldr	r3, [pc, #444]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0320 	and.w	r3, r3, #32
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d02d      	beq.n	8009a64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a08:	4b6c      	ldr	r3, [pc, #432]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	08db      	lsrs	r3, r3, #3
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	4a6b      	ldr	r2, [pc, #428]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a14:	fa22 f303 	lsr.w	r3, r2, r3
 8009a18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	ee07 3a90 	vmov	s15, r3
 8009a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a32:	4b62      	ldr	r3, [pc, #392]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009a62:	e087      	b.n	8009b74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009bd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a76:	4b51      	ldr	r3, [pc, #324]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aa6:	e065      	b.n	8009b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b40      	ldr	r3, [pc, #256]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ace:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aea:	e043      	b.n	8009b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009bd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b2f      	ldr	r3, [pc, #188]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b2e:	e021      	b.n	8009b74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b1e      	ldr	r3, [pc, #120]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b74:	4b11      	ldr	r3, [pc, #68]	@ (8009bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b78:	0a5b      	lsrs	r3, r3, #9
 8009b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b7e:	3301      	adds	r3, #1
 8009b80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	ee07 3a90 	vmov	s15, r3
 8009b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b98:	ee17 3a90 	vmov	r3, s15
 8009b9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b9e:	e005      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61bb      	str	r3, [r7, #24]
      break;
 8009ba4:	e002      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009ba6:	4b07      	ldr	r3, [pc, #28]	@ (8009bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ba8:	61bb      	str	r3, [r7, #24]
      break;
 8009baa:	bf00      	nop
  }

  return sysclockfreq;
 8009bac:	69bb      	ldr	r3, [r7, #24]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3724      	adds	r7, #36	@ 0x24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	58024400 	.word	0x58024400
 8009bc0:	03d09000 	.word	0x03d09000
 8009bc4:	003d0900 	.word	0x003d0900
 8009bc8:	017d7840 	.word	0x017d7840
 8009bcc:	46000000 	.word	0x46000000
 8009bd0:	4c742400 	.word	0x4c742400
 8009bd4:	4a742400 	.word	0x4a742400
 8009bd8:	4bbebc20 	.word	0x4bbebc20

08009bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009be2:	f7ff fe81 	bl	80098e8 <HAL_RCC_GetSysClockFreq>
 8009be6:	4602      	mov	r2, r0
 8009be8:	4b10      	ldr	r3, [pc, #64]	@ (8009c2c <HAL_RCC_GetHCLKFreq+0x50>)
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	0a1b      	lsrs	r3, r3, #8
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	490f      	ldr	r1, [pc, #60]	@ (8009c30 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bf4:	5ccb      	ldrb	r3, [r1, r3]
 8009bf6:	f003 031f 	and.w	r3, r3, #31
 8009bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c00:	4b0a      	ldr	r3, [pc, #40]	@ (8009c2c <HAL_RCC_GetHCLKFreq+0x50>)
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f003 030f 	and.w	r3, r3, #15
 8009c08:	4a09      	ldr	r2, [pc, #36]	@ (8009c30 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c0a:	5cd3      	ldrb	r3, [r2, r3]
 8009c0c:	f003 031f 	and.w	r3, r3, #31
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	fa22 f303 	lsr.w	r3, r2, r3
 8009c16:	4a07      	ldr	r2, [pc, #28]	@ (8009c34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c1a:	4a07      	ldr	r2, [pc, #28]	@ (8009c38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009c20:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c22:	681b      	ldr	r3, [r3, #0]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	58024400 	.word	0x58024400
 8009c30:	080113c8 	.word	0x080113c8
 8009c34:	2400006c 	.word	0x2400006c
 8009c38:	24000068 	.word	0x24000068

08009c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c40:	f7ff ffcc 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 8009c44:	4602      	mov	r2, r0
 8009c46:	4b06      	ldr	r3, [pc, #24]	@ (8009c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	091b      	lsrs	r3, r3, #4
 8009c4c:	f003 0307 	and.w	r3, r3, #7
 8009c50:	4904      	ldr	r1, [pc, #16]	@ (8009c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c52:	5ccb      	ldrb	r3, [r1, r3]
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	58024400 	.word	0x58024400
 8009c64:	080113c8 	.word	0x080113c8

08009c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c6c:	f7ff ffb6 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 8009c70:	4602      	mov	r2, r0
 8009c72:	4b06      	ldr	r3, [pc, #24]	@ (8009c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	0a1b      	lsrs	r3, r3, #8
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	4904      	ldr	r1, [pc, #16]	@ (8009c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c7e:	5ccb      	ldrb	r3, [r1, r3]
 8009c80:	f003 031f 	and.w	r3, r3, #31
 8009c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	080113c8 	.word	0x080113c8

08009c94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c98:	b0c6      	sub	sp, #280	@ 0x118
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009cb8:	2500      	movs	r5, #0
 8009cba:	ea54 0305 	orrs.w	r3, r4, r5
 8009cbe:	d049      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cca:	d02f      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009ccc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cd0:	d828      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009cd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cd6:	d01a      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009cd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cdc:	d822      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ce6:	d007      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ce8:	e01c      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cea:	4bab      	ldr	r3, [pc, #684]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cee:	4aaa      	ldr	r2, [pc, #680]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cf6:	e01a      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	2102      	movs	r1, #2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f002 fa49 	bl	800c198 <RCCEx_PLL2_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d0c:	e00f      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d12:	3328      	adds	r3, #40	@ 0x28
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f002 faf0 	bl	800c2fc <RCCEx_PLL3_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d22:	e004      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d2a:	e000      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d36:	4b98      	ldr	r3, [pc, #608]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d44:	4a94      	ldr	r2, [pc, #592]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d46:	430b      	orrs	r3, r1
 8009d48:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d4a:	e003      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009d60:	f04f 0900 	mov.w	r9, #0
 8009d64:	ea58 0309 	orrs.w	r3, r8, r9
 8009d68:	d047      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d82a      	bhi.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d74:	a201      	add	r2, pc, #4	@ (adr r2, 8009d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009d91 	.word	0x08009d91
 8009d80:	08009d9f 	.word	0x08009d9f
 8009d84:	08009db5 	.word	0x08009db5
 8009d88:	08009dd3 	.word	0x08009dd3
 8009d8c:	08009dd3 	.word	0x08009dd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d90:	4b81      	ldr	r3, [pc, #516]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d94:	4a80      	ldr	r2, [pc, #512]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d9c:	e01a      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da2:	3308      	adds	r3, #8
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 f9f6 	bl	800c198 <RCCEx_PLL2_Config>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009db2:	e00f      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db8:	3328      	adds	r3, #40	@ 0x28
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f002 fa9d 	bl	800c2fc <RCCEx_PLL3_Config>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009dc8:	e004      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009dd0:	e000      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10a      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ddc:	4b6e      	ldr	r3, [pc, #440]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de0:	f023 0107 	bic.w	r1, r3, #7
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dea:	4a6b      	ldr	r2, [pc, #428]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dec:	430b      	orrs	r3, r1
 8009dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e0e:	d05b      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e18:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009e1c:	d03b      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009e1e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009e22:	d834      	bhi.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e28:	d037      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009e2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e2e:	d82e      	bhi.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e34:	d033      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009e36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e3a:	d828      	bhi.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e40:	d01a      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e46:	d822      	bhi.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009e4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e50:	d007      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009e52:	e01c      	b.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e54:	4b50      	ldr	r3, [pc, #320]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e58:	4a4f      	ldr	r2, [pc, #316]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e60:	e01e      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e66:	3308      	adds	r3, #8
 8009e68:	2100      	movs	r1, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f002 f994 	bl	800c198 <RCCEx_PLL2_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e76:	e013      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7c:	3328      	adds	r3, #40	@ 0x28
 8009e7e:	2100      	movs	r1, #0
 8009e80:	4618      	mov	r0, r3
 8009e82:	f002 fa3b 	bl	800c2fc <RCCEx_PLL3_Config>
 8009e86:	4603      	mov	r3, r0
 8009e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e8c:	e008      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e94:	e004      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e96:	bf00      	nop
 8009e98:	e002      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e9a:	bf00      	nop
 8009e9c:	e000      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10b      	bne.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eac:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009eb8:	4a37      	ldr	r2, [pc, #220]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eba:	430b      	orrs	r3, r1
 8009ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ebe:	e003      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009ede:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	d05d      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009ef0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009ef4:	d03b      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009ef6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009efa:	d834      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f00:	d037      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009f02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f06:	d82e      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f0c:	d033      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009f0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f12:	d828      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f18:	d01a      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f1e:	d822      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f28:	d007      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009f2a:	e01c      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f30:	4a19      	ldr	r2, [pc, #100]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f38:	e01e      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f3e:	3308      	adds	r3, #8
 8009f40:	2100      	movs	r1, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f002 f928 	bl	800c198 <RCCEx_PLL2_Config>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f4e:	e013      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f54:	3328      	adds	r3, #40	@ 0x28
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f002 f9cf 	bl	800c2fc <RCCEx_PLL3_Config>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f64:	e008      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f6c:	e004      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f6e:	bf00      	nop
 8009f70:	e002      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f72:	bf00      	nop
 8009f74:	e000      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10d      	bne.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f80:	4b05      	ldr	r3, [pc, #20]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f90:	4a01      	ldr	r2, [pc, #4]	@ (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f92:	430b      	orrs	r3, r1
 8009f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f96:	e005      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009fb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009fba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	d03a      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fca:	2b30      	cmp	r3, #48	@ 0x30
 8009fcc:	d01f      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009fce:	2b30      	cmp	r3, #48	@ 0x30
 8009fd0:	d819      	bhi.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	d00c      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	d815      	bhi.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d019      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009fde:	2b10      	cmp	r3, #16
 8009fe0:	d111      	bne.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe2:	4baa      	ldr	r3, [pc, #680]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe6:	4aa9      	ldr	r2, [pc, #676]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009fee:	e011      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	2102      	movs	r1, #2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f002 f8cd 	bl	800c198 <RCCEx_PLL2_Config>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a004:	e006      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a00c:	e002      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a00e:	bf00      	nop
 800a010:	e000      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a012:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a01c:	4b9b      	ldr	r3, [pc, #620]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a01e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a020:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a02a:	4a98      	ldr	r2, [pc, #608]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a02c:	430b      	orrs	r3, r1
 800a02e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a030:	e003      	b.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a032:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a036:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a042:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a04a:	2300      	movs	r3, #0
 800a04c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a050:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a054:	460b      	mov	r3, r1
 800a056:	4313      	orrs	r3, r2
 800a058:	d051      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a064:	d035      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a06a:	d82e      	bhi.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a06c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a070:	d031      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a072:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a076:	d828      	bhi.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a07c:	d01a      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a07e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a082:	d822      	bhi.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a08c:	d007      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a08e:	e01c      	b.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a090:	4b7e      	ldr	r3, [pc, #504]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a094:	4a7d      	ldr	r2, [pc, #500]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a09a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a09c:	e01c      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f002 f876 	bl	800c198 <RCCEx_PLL2_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0b2:	e011      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b8:	3328      	adds	r3, #40	@ 0x28
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f002 f91d 	bl	800c2fc <RCCEx_PLL3_Config>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0c8:	e006      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0d0:	e002      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a0d2:	bf00      	nop
 800a0d4:	e000      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a0d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a0e0:	4b6a      	ldr	r3, [pc, #424]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ee:	4a67      	ldr	r2, [pc, #412]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a0f4:	e003      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a10a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a10e:	2300      	movs	r3, #0
 800a110:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a114:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a118:	460b      	mov	r3, r1
 800a11a:	4313      	orrs	r3, r2
 800a11c:	d053      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a128:	d033      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a12a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a12e:	d82c      	bhi.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a134:	d02f      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a13a:	d826      	bhi.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a13c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a140:	d02b      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a142:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a146:	d820      	bhi.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a14c:	d012      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a14e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a152:	d81a      	bhi.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d022      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a15c:	d115      	bne.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a162:	3308      	adds	r3, #8
 800a164:	2101      	movs	r1, #1
 800a166:	4618      	mov	r0, r3
 800a168:	f002 f816 	bl	800c198 <RCCEx_PLL2_Config>
 800a16c:	4603      	mov	r3, r0
 800a16e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a172:	e015      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a178:	3328      	adds	r3, #40	@ 0x28
 800a17a:	2101      	movs	r1, #1
 800a17c:	4618      	mov	r0, r3
 800a17e:	f002 f8bd 	bl	800c2fc <RCCEx_PLL3_Config>
 800a182:	4603      	mov	r3, r0
 800a184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a188:	e00a      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a190:	e006      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a192:	bf00      	nop
 800a194:	e004      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a196:	bf00      	nop
 800a198:	e002      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a19a:	bf00      	nop
 800a19c:	e000      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a19e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1a8:	4b38      	ldr	r3, [pc, #224]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1b6:	4a35      	ldr	r2, [pc, #212]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1b8:	430b      	orrs	r3, r1
 800a1ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1bc:	e003      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a1d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a1dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	d058      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a1ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1f2:	d033      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a1f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1f8:	d82c      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1fe:	d02f      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a204:	d826      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a206:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a20a:	d02b      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a20c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a210:	d820      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a216:	d012      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a21c:	d81a      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d022      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a226:	d115      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22c:	3308      	adds	r3, #8
 800a22e:	2101      	movs	r1, #1
 800a230:	4618      	mov	r0, r3
 800a232:	f001 ffb1 	bl	800c198 <RCCEx_PLL2_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a23c:	e015      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a242:	3328      	adds	r3, #40	@ 0x28
 800a244:	2101      	movs	r1, #1
 800a246:	4618      	mov	r0, r3
 800a248:	f002 f858 	bl	800c2fc <RCCEx_PLL3_Config>
 800a24c:	4603      	mov	r3, r0
 800a24e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a252:	e00a      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a25a:	e006      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a25c:	bf00      	nop
 800a25e:	e004      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a260:	bf00      	nop
 800a262:	e002      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a264:	bf00      	nop
 800a266:	e000      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a26a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10e      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a272:	4b06      	ldr	r3, [pc, #24]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a276:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a282:	4a02      	ldr	r2, [pc, #8]	@ (800a28c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a284:	430b      	orrs	r3, r1
 800a286:	6593      	str	r3, [r2, #88]	@ 0x58
 800a288:	e006      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a28a:	bf00      	nop
 800a28c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a2a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a2ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	d037      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c2:	d00e      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a2c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c8:	d816      	bhi.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d018      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a2ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2d2:	d111      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2d4:	4bc4      	ldr	r3, [pc, #784]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d8:	4ac3      	ldr	r2, [pc, #780]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2e0:	e00f      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f001 ff54 	bl	800c198 <RCCEx_PLL2_Config>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2f6:	e004      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2fe:	e000      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a300:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10a      	bne.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a30a:	4bb7      	ldr	r3, [pc, #732]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a30c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a30e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a318:	4ab3      	ldr	r2, [pc, #716]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a31a:	430b      	orrs	r3, r1
 800a31c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a31e:	e003      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a324:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a334:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a338:	2300      	movs	r3, #0
 800a33a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a33e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a342:	460b      	mov	r3, r1
 800a344:	4313      	orrs	r3, r2
 800a346:	d039      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d81c      	bhi.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a352:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a358:	0800a395 	.word	0x0800a395
 800a35c:	0800a369 	.word	0x0800a369
 800a360:	0800a377 	.word	0x0800a377
 800a364:	0800a395 	.word	0x0800a395
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a368:	4b9f      	ldr	r3, [pc, #636]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36c:	4a9e      	ldr	r2, [pc, #632]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a36e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a374:	e00f      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37a:	3308      	adds	r3, #8
 800a37c:	2102      	movs	r1, #2
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 ff0a 	bl	800c198 <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a38a:	e004      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a392:	e000      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a394:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a39e:	4b92      	ldr	r3, [pc, #584]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3a2:	f023 0103 	bic.w	r1, r3, #3
 800a3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ac:	4a8e      	ldr	r2, [pc, #568]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3b2:	e003      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a3c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a3d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	f000 8099 	beq.w	800a510 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3de:	4b83      	ldr	r3, [pc, #524]	@ (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a82      	ldr	r2, [pc, #520]	@ (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a3e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3ea:	f7f9 fa87 	bl	80038fc <HAL_GetTick>
 800a3ee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3f2:	e00b      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3f4:	f7f9 fa82 	bl	80038fc <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b64      	cmp	r3, #100	@ 0x64
 800a402:	d903      	bls.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a40a:	e005      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a40c:	4b77      	ldr	r3, [pc, #476]	@ (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0ed      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d173      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a420:	4b71      	ldr	r3, [pc, #452]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a422:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a42c:	4053      	eors	r3, r2
 800a42e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a432:	2b00      	cmp	r3, #0
 800a434:	d015      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a436:	4b6c      	ldr	r3, [pc, #432]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a43a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a43e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a442:	4b69      	ldr	r3, [pc, #420]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a446:	4a68      	ldr	r2, [pc, #416]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a44c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a44e:	4b66      	ldr	r3, [pc, #408]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a452:	4a65      	ldr	r2, [pc, #404]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a458:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a45a:	4a63      	ldr	r2, [pc, #396]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a460:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a46a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a46e:	d118      	bne.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a470:	f7f9 fa44 	bl	80038fc <HAL_GetTick>
 800a474:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a478:	e00d      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a47a:	f7f9 fa3f 	bl	80038fc <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a484:	1ad2      	subs	r2, r2, r3
 800a486:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d903      	bls.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a494:	e005      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a496:	4b54      	ldr	r3, [pc, #336]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0eb      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a4a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d129      	bne.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4ba:	d10e      	bne.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a4bc:	4b4a      	ldr	r3, [pc, #296]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4cc:	091a      	lsrs	r2, r3, #4
 800a4ce:	4b48      	ldr	r3, [pc, #288]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	4a45      	ldr	r2, [pc, #276]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4d4:	430b      	orrs	r3, r1
 800a4d6:	6113      	str	r3, [r2, #16]
 800a4d8:	e005      	b.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a4da:	4b43      	ldr	r3, [pc, #268]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	4a42      	ldr	r2, [pc, #264]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a4e4:	6113      	str	r3, [r2, #16]
 800a4e6:	4b40      	ldr	r3, [pc, #256]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4f6:	4a3c      	ldr	r2, [pc, #240]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4fc:	e008      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a502:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a506:	e003      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a50c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a518:	f002 0301 	and.w	r3, r2, #1
 800a51c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a520:	2300      	movs	r3, #0
 800a522:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a526:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a52a:	460b      	mov	r3, r1
 800a52c:	4313      	orrs	r3, r2
 800a52e:	f000 808f 	beq.w	800a650 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a538:	2b28      	cmp	r3, #40	@ 0x28
 800a53a:	d871      	bhi.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a53c:	a201      	add	r2, pc, #4	@ (adr r2, 800a544 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a629 	.word	0x0800a629
 800a548:	0800a621 	.word	0x0800a621
 800a54c:	0800a621 	.word	0x0800a621
 800a550:	0800a621 	.word	0x0800a621
 800a554:	0800a621 	.word	0x0800a621
 800a558:	0800a621 	.word	0x0800a621
 800a55c:	0800a621 	.word	0x0800a621
 800a560:	0800a621 	.word	0x0800a621
 800a564:	0800a5f5 	.word	0x0800a5f5
 800a568:	0800a621 	.word	0x0800a621
 800a56c:	0800a621 	.word	0x0800a621
 800a570:	0800a621 	.word	0x0800a621
 800a574:	0800a621 	.word	0x0800a621
 800a578:	0800a621 	.word	0x0800a621
 800a57c:	0800a621 	.word	0x0800a621
 800a580:	0800a621 	.word	0x0800a621
 800a584:	0800a60b 	.word	0x0800a60b
 800a588:	0800a621 	.word	0x0800a621
 800a58c:	0800a621 	.word	0x0800a621
 800a590:	0800a621 	.word	0x0800a621
 800a594:	0800a621 	.word	0x0800a621
 800a598:	0800a621 	.word	0x0800a621
 800a59c:	0800a621 	.word	0x0800a621
 800a5a0:	0800a621 	.word	0x0800a621
 800a5a4:	0800a629 	.word	0x0800a629
 800a5a8:	0800a621 	.word	0x0800a621
 800a5ac:	0800a621 	.word	0x0800a621
 800a5b0:	0800a621 	.word	0x0800a621
 800a5b4:	0800a621 	.word	0x0800a621
 800a5b8:	0800a621 	.word	0x0800a621
 800a5bc:	0800a621 	.word	0x0800a621
 800a5c0:	0800a621 	.word	0x0800a621
 800a5c4:	0800a629 	.word	0x0800a629
 800a5c8:	0800a621 	.word	0x0800a621
 800a5cc:	0800a621 	.word	0x0800a621
 800a5d0:	0800a621 	.word	0x0800a621
 800a5d4:	0800a621 	.word	0x0800a621
 800a5d8:	0800a621 	.word	0x0800a621
 800a5dc:	0800a621 	.word	0x0800a621
 800a5e0:	0800a621 	.word	0x0800a621
 800a5e4:	0800a629 	.word	0x0800a629
 800a5e8:	58024400 	.word	0x58024400
 800a5ec:	58024800 	.word	0x58024800
 800a5f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f8:	3308      	adds	r3, #8
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 fdcb 	bl	800c198 <RCCEx_PLL2_Config>
 800a602:	4603      	mov	r3, r0
 800a604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a608:	e00f      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60e:	3328      	adds	r3, #40	@ 0x28
 800a610:	2101      	movs	r1, #1
 800a612:	4618      	mov	r0, r3
 800a614:	f001 fe72 	bl	800c2fc <RCCEx_PLL3_Config>
 800a618:	4603      	mov	r3, r0
 800a61a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a61e:	e004      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a626:	e000      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a62a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10a      	bne.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a632:	4bbf      	ldr	r3, [pc, #764]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a636:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a640:	4abb      	ldr	r2, [pc, #748]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a642:	430b      	orrs	r3, r1
 800a644:	6553      	str	r3, [r2, #84]	@ 0x54
 800a646:	e003      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a64c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f002 0302 	and.w	r3, r2, #2
 800a65c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a660:	2300      	movs	r3, #0
 800a662:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a666:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4313      	orrs	r3, r2
 800a66e:	d041      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a676:	2b05      	cmp	r3, #5
 800a678:	d824      	bhi.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a67a:	a201      	add	r2, pc, #4	@ (adr r2, 800a680 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a6cd 	.word	0x0800a6cd
 800a684:	0800a699 	.word	0x0800a699
 800a688:	0800a6af 	.word	0x0800a6af
 800a68c:	0800a6cd 	.word	0x0800a6cd
 800a690:	0800a6cd 	.word	0x0800a6cd
 800a694:	0800a6cd 	.word	0x0800a6cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a69c:	3308      	adds	r3, #8
 800a69e:	2101      	movs	r1, #1
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f001 fd79 	bl	800c198 <RCCEx_PLL2_Config>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a6ac:	e00f      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b2:	3328      	adds	r3, #40	@ 0x28
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f001 fe20 	bl	800c2fc <RCCEx_PLL3_Config>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a6c2:	e004      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6ca:	e000      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a6cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a6d6:	4b96      	ldr	r3, [pc, #600]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6da:	f023 0107 	bic.w	r1, r3, #7
 800a6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6e4:	4a92      	ldr	r2, [pc, #584]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6ea:	e003      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f002 0304 	and.w	r3, r2, #4
 800a700:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a704:	2300      	movs	r3, #0
 800a706:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a70a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a70e:	460b      	mov	r3, r1
 800a710:	4313      	orrs	r3, r2
 800a712:	d044      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a71c:	2b05      	cmp	r3, #5
 800a71e:	d825      	bhi.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a720:	a201      	add	r2, pc, #4	@ (adr r2, 800a728 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a775 	.word	0x0800a775
 800a72c:	0800a741 	.word	0x0800a741
 800a730:	0800a757 	.word	0x0800a757
 800a734:	0800a775 	.word	0x0800a775
 800a738:	0800a775 	.word	0x0800a775
 800a73c:	0800a775 	.word	0x0800a775
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a744:	3308      	adds	r3, #8
 800a746:	2101      	movs	r1, #1
 800a748:	4618      	mov	r0, r3
 800a74a:	f001 fd25 	bl	800c198 <RCCEx_PLL2_Config>
 800a74e:	4603      	mov	r3, r0
 800a750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a754:	e00f      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75a:	3328      	adds	r3, #40	@ 0x28
 800a75c:	2101      	movs	r1, #1
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 fdcc 	bl	800c2fc <RCCEx_PLL3_Config>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a76a:	e004      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a772:	e000      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10b      	bne.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a77e:	4b6c      	ldr	r3, [pc, #432]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a782:	f023 0107 	bic.w	r1, r3, #7
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a78e:	4a68      	ldr	r2, [pc, #416]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a790:	430b      	orrs	r3, r1
 800a792:	6593      	str	r3, [r2, #88]	@ 0x58
 800a794:	e003      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a79a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	f002 0320 	and.w	r3, r2, #32
 800a7aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a7b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	d055      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7ca:	d033      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a7cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7d0:	d82c      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7d6:	d02f      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7dc:	d826      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7e2:	d02b      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a7e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7e8:	d820      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ee:	d012      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a7f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7f4:	d81a      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d022      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a7fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7fe:	d115      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a804:	3308      	adds	r3, #8
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 fcc5 	bl	800c198 <RCCEx_PLL2_Config>
 800a80e:	4603      	mov	r3, r0
 800a810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a814:	e015      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81a:	3328      	adds	r3, #40	@ 0x28
 800a81c:	2102      	movs	r1, #2
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 fd6c 	bl	800c2fc <RCCEx_PLL3_Config>
 800a824:	4603      	mov	r3, r0
 800a826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a82a:	e00a      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a832:	e006      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a834:	bf00      	nop
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a838:	bf00      	nop
 800a83a:	e002      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a83c:	bf00      	nop
 800a83e:	e000      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10b      	bne.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a84a:	4b39      	ldr	r3, [pc, #228]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a85a:	4a35      	ldr	r2, [pc, #212]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a85c:	430b      	orrs	r3, r1
 800a85e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a860:	e003      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a866:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a876:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a87a:	2300      	movs	r3, #0
 800a87c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a880:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a884:	460b      	mov	r3, r1
 800a886:	4313      	orrs	r3, r2
 800a888:	d058      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a892:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a896:	d033      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a898:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a89c:	d82c      	bhi.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a89e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a2:	d02f      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a8a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a8:	d826      	bhi.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a8aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8ae:	d02b      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a8b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8b4:	d820      	bhi.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a8b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8ba:	d012      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a8bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8c0:	d81a      	bhi.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d022      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a8c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8ca:	d115      	bne.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 fc5f 	bl	800c198 <RCCEx_PLL2_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8e0:	e015      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e6:	3328      	adds	r3, #40	@ 0x28
 800a8e8:	2102      	movs	r1, #2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 fd06 	bl	800c2fc <RCCEx_PLL3_Config>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8f6:	e00a      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8fe:	e006      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a900:	bf00      	nop
 800a902:	e004      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a904:	bf00      	nop
 800a906:	e002      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a908:	bf00      	nop
 800a90a:	e000      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a90c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a90e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10e      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a916:	4b06      	ldr	r3, [pc, #24]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a91a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a926:	4a02      	ldr	r2, [pc, #8]	@ (800a930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a928:	430b      	orrs	r3, r1
 800a92a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a92c:	e006      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a92e:	bf00      	nop
 800a930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a948:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a94c:	2300      	movs	r3, #0
 800a94e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a952:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a956:	460b      	mov	r3, r1
 800a958:	4313      	orrs	r3, r2
 800a95a:	d055      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a960:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a964:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a968:	d033      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a96a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a96e:	d82c      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a974:	d02f      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a97a:	d826      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a97c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a980:	d02b      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a982:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a986:	d820      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a98c:	d012      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a98e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a992:	d81a      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d022      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a99c:	d115      	bne.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 fbf6 	bl	800c198 <RCCEx_PLL2_Config>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a9b2:	e015      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b8:	3328      	adds	r3, #40	@ 0x28
 800a9ba:	2102      	movs	r1, #2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 fc9d 	bl	800c2fc <RCCEx_PLL3_Config>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a9c8:	e00a      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9d0:	e006      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a9d2:	bf00      	nop
 800a9d4:	e004      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a9d6:	bf00      	nop
 800a9d8:	e002      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a9da:	bf00      	nop
 800a9dc:	e000      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a9de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a9e8:	4ba0      	ldr	r3, [pc, #640]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9f8:	4a9c      	ldr	r2, [pc, #624]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9fe:	e003      	b.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800aa08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f002 0308 	and.w	r3, r2, #8
 800aa14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aa1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aa22:	460b      	mov	r3, r1
 800aa24:	4313      	orrs	r3, r2
 800aa26:	d01e      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800aa28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa34:	d10c      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa3a:	3328      	adds	r3, #40	@ 0x28
 800aa3c:	2102      	movs	r1, #2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 fc5c 	bl	800c2fc <RCCEx_PLL3_Config>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800aa50:	4b86      	ldr	r3, [pc, #536]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa60:	4a82      	ldr	r2, [pc, #520]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa62:	430b      	orrs	r3, r1
 800aa64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	f002 0310 	and.w	r3, r2, #16
 800aa72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa76:	2300      	movs	r3, #0
 800aa78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aa80:	460b      	mov	r3, r1
 800aa82:	4313      	orrs	r3, r2
 800aa84:	d01e      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa92:	d10c      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa98:	3328      	adds	r3, #40	@ 0x28
 800aa9a:	2102      	movs	r1, #2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 fc2d 	bl	800c2fc <RCCEx_PLL3_Config>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aaae:	4b6f      	ldr	r3, [pc, #444]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aab2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aabe:	4a6b      	ldr	r2, [pc, #428]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aac0:	430b      	orrs	r3, r1
 800aac2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aad0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aad2:	2300      	movs	r3, #0
 800aad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aad6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aada:	460b      	mov	r3, r1
 800aadc:	4313      	orrs	r3, r2
 800aade:	d03e      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaec:	d022      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aaee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf2:	d81b      	bhi.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aaf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aafc:	d00b      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800aafe:	e015      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab04:	3308      	adds	r3, #8
 800ab06:	2100      	movs	r1, #0
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 fb45 	bl	800c198 <RCCEx_PLL2_Config>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab14:	e00f      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1a:	3328      	adds	r3, #40	@ 0x28
 800ab1c:	2102      	movs	r1, #2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f001 fbec 	bl	800c2fc <RCCEx_PLL3_Config>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab2a:	e004      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab32:	e000      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ab34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10b      	bne.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab3e:	4b4b      	ldr	r3, [pc, #300]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ab46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab4e:	4a47      	ldr	r2, [pc, #284]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab54:	e003      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ab6a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ab70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ab74:	460b      	mov	r3, r1
 800ab76:	4313      	orrs	r3, r2
 800ab78:	d03b      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab86:	d01f      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ab88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab8c:	d818      	bhi.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ab8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab92:	d003      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ab94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab98:	d007      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ab9a:	e011      	b.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9c:	4b33      	ldr	r3, [pc, #204]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba0:	4a32      	ldr	r2, [pc, #200]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aba8:	e00f      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abae:	3328      	adds	r3, #40	@ 0x28
 800abb0:	2101      	movs	r1, #1
 800abb2:	4618      	mov	r0, r3
 800abb4:	f001 fba2 	bl	800c2fc <RCCEx_PLL3_Config>
 800abb8:	4603      	mov	r3, r0
 800abba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800abbe:	e004      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800abc6:	e000      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800abc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10b      	bne.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abd2:	4b26      	ldr	r3, [pc, #152]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800abda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abe2:	4a22      	ldr	r2, [pc, #136]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abe4:	430b      	orrs	r3, r1
 800abe6:	6553      	str	r3, [r2, #84]	@ 0x54
 800abe8:	e003      	b.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800abfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac00:	2300      	movs	r3, #0
 800ac02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	d034      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ac0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ac18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac1c:	d007      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ac1e:	e011      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac20:	4b12      	ldr	r3, [pc, #72]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac24:	4a11      	ldr	r2, [pc, #68]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac2c:	e00e      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac32:	3308      	adds	r3, #8
 800ac34:	2102      	movs	r1, #2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f001 faae 	bl	800c198 <RCCEx_PLL2_Config>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac42:	e003      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10d      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac54:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac62:	4a02      	ldr	r2, [pc, #8]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac64:	430b      	orrs	r3, r1
 800ac66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac68:	e006      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ac6a:	bf00      	nop
 800ac6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ac84:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac86:	2300      	movs	r3, #0
 800ac88:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac8a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4313      	orrs	r3, r2
 800ac92:	d00c      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac98:	3328      	adds	r3, #40	@ 0x28
 800ac9a:	2102      	movs	r1, #2
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f001 fb2d 	bl	800c2fc <RCCEx_PLL3_Config>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800acba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acbc:	2300      	movs	r3, #0
 800acbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acc0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800acc4:	460b      	mov	r3, r1
 800acc6:	4313      	orrs	r3, r2
 800acc8:	d036      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd4:	d018      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800acd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acda:	d811      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800acdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ace0:	d014      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ace2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ace6:	d80b      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d011      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800acec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acf0:	d106      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acf2:	4bb7      	ldr	r3, [pc, #732]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf6:	4ab6      	ldr	r2, [pc, #728]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800acfe:	e008      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad06:	e004      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad08:	bf00      	nop
 800ad0a:	e002      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad0c:	bf00      	nop
 800ad0e:	e000      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad1a:	4bad      	ldr	r3, [pc, #692]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ad22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad28:	4aa9      	ldr	r2, [pc, #676]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad2a:	430b      	orrs	r3, r1
 800ad2c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad2e:	e003      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ad44:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad46:	2300      	movs	r3, #0
 800ad48:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4313      	orrs	r3, r2
 800ad52:	d009      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad54:	4b9e      	ldr	r3, [pc, #632]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ad5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad62:	4a9b      	ldr	r2, [pc, #620]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad64:	430b      	orrs	r3, r1
 800ad66:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ad74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad76:	2300      	movs	r3, #0
 800ad78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad7a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4313      	orrs	r3, r2
 800ad82:	d009      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad84:	4b92      	ldr	r3, [pc, #584]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad88:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ad8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad92:	4a8f      	ldr	r2, [pc, #572]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad94:	430b      	orrs	r3, r1
 800ad96:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ada4:	643b      	str	r3, [r7, #64]	@ 0x40
 800ada6:	2300      	movs	r3, #0
 800ada8:	647b      	str	r3, [r7, #68]	@ 0x44
 800adaa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800adae:	460b      	mov	r3, r1
 800adb0:	4313      	orrs	r3, r2
 800adb2:	d00e      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adb4:	4b86      	ldr	r3, [pc, #536]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	4a85      	ldr	r2, [pc, #532]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800adbe:	6113      	str	r3, [r2, #16]
 800adc0:	4b83      	ldr	r3, [pc, #524]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adc2:	6919      	ldr	r1, [r3, #16]
 800adc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800adcc:	4a80      	ldr	r2, [pc, #512]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adce:	430b      	orrs	r3, r1
 800add0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800adde:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ade0:	2300      	movs	r3, #0
 800ade2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ade4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ade8:	460b      	mov	r3, r1
 800adea:	4313      	orrs	r3, r2
 800adec:	d009      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800adee:	4b78      	ldr	r3, [pc, #480]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adf2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adfc:	4a74      	ldr	r2, [pc, #464]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adfe:	430b      	orrs	r3, r1
 800ae00:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ae0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae10:	2300      	movs	r3, #0
 800ae12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae14:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	d00a      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae1e:	4b6c      	ldr	r3, [pc, #432]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae22:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae2e:	4a68      	ldr	r2, [pc, #416]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae30:	430b      	orrs	r3, r1
 800ae32:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	d011      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae54:	3308      	adds	r3, #8
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f001 f99d 	bl	800c198 <RCCEx_PLL2_Config>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ae64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	6239      	str	r1, [r7, #32]
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	d011      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae94:	3308      	adds	r3, #8
 800ae96:	2101      	movs	r1, #1
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 f97d 	bl	800c198 <RCCEx_PLL2_Config>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aeb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	2100      	movs	r1, #0
 800aebe:	61b9      	str	r1, [r7, #24]
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	61fb      	str	r3, [r7, #28]
 800aec6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	d011      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed4:	3308      	adds	r3, #8
 800aed6:	2102      	movs	r1, #2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f95d 	bl	800c198 <RCCEx_PLL2_Config>
 800aede:	4603      	mov	r3, r0
 800aee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aef0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	2100      	movs	r1, #0
 800aefe:	6139      	str	r1, [r7, #16]
 800af00:	f003 0308 	and.w	r3, r3, #8
 800af04:	617b      	str	r3, [r7, #20]
 800af06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af0a:	460b      	mov	r3, r1
 800af0c:	4313      	orrs	r3, r2
 800af0e:	d011      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af14:	3328      	adds	r3, #40	@ 0x28
 800af16:	2100      	movs	r1, #0
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 f9ef 	bl	800c2fc <RCCEx_PLL3_Config>
 800af1e:	4603      	mov	r3, r0
 800af20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800af24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800af34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	2100      	movs	r1, #0
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	f003 0310 	and.w	r3, r3, #16
 800af44:	60fb      	str	r3, [r7, #12]
 800af46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af4a:	460b      	mov	r3, r1
 800af4c:	4313      	orrs	r3, r2
 800af4e:	d011      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af54:	3328      	adds	r3, #40	@ 0x28
 800af56:	2101      	movs	r1, #1
 800af58:	4618      	mov	r0, r3
 800af5a:	f001 f9cf 	bl	800c2fc <RCCEx_PLL3_Config>
 800af5e:	4603      	mov	r3, r0
 800af60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	2100      	movs	r1, #0
 800af7e:	6039      	str	r1, [r7, #0]
 800af80:	f003 0320 	and.w	r3, r3, #32
 800af84:	607b      	str	r3, [r7, #4]
 800af86:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af8a:	460b      	mov	r3, r1
 800af8c:	4313      	orrs	r3, r2
 800af8e:	d011      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af94:	3328      	adds	r3, #40	@ 0x28
 800af96:	2102      	movs	r1, #2
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 f9af 	bl	800c2fc <RCCEx_PLL3_Config>
 800af9e:	4603      	mov	r3, r0
 800afa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800afa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800afb4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e000      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800afc8:	46bd      	mov	sp, r7
 800afca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afce:	bf00      	nop
 800afd0:	58024400 	.word	0x58024400

0800afd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b090      	sub	sp, #64	@ 0x40
 800afd8:	af00      	add	r7, sp, #0
 800afda:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800afde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800afe6:	430b      	orrs	r3, r1
 800afe8:	f040 8094 	bne.w	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800afec:	4b9b      	ldr	r3, [pc, #620]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	2b04      	cmp	r3, #4
 800affa:	f200 8087 	bhi.w	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800affe:	a201      	add	r2, pc, #4	@ (adr r2, 800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b019 	.word	0x0800b019
 800b008:	0800b041 	.word	0x0800b041
 800b00c:	0800b069 	.word	0x0800b069
 800b010:	0800b105 	.word	0x0800b105
 800b014:	0800b091 	.word	0x0800b091
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b018:	4b90      	ldr	r3, [pc, #576]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b020:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b024:	d108      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 ff62 	bl	800bef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b034:	f000 bc93 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b03c:	f000 bc8f 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b040:	4b86      	ldr	r3, [pc, #536]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b04c:	d108      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b04e:	f107 0318 	add.w	r3, r7, #24
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fca6 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b05c:	f000 bc7f 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b064:	f000 bc7b 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b068:	4b7c      	ldr	r3, [pc, #496]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b074:	d108      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b076:	f107 030c 	add.w	r3, r7, #12
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fde6 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b084:	f000 bc6b 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b08c:	f000 bc67 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b090:	4b72      	ldr	r3, [pc, #456]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b094:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b098:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b09a:	4b70      	ldr	r3, [pc, #448]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d10c      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d109      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0ac:	4b6b      	ldr	r3, [pc, #428]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	08db      	lsrs	r3, r3, #3
 800b0b2:	f003 0303 	and.w	r3, r3, #3
 800b0b6:	4a6a      	ldr	r2, [pc, #424]	@ (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0be:	e01f      	b.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0c0:	4b66      	ldr	r3, [pc, #408]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0cc:	d106      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0d4:	d102      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0d6:	4b63      	ldr	r3, [pc, #396]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0da:	e011      	b.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0dc:	4b5f      	ldr	r3, [pc, #380]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0e8:	d106      	bne.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0f0:	d102      	bne.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0f2:	4b5d      	ldr	r3, [pc, #372]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0f6:	e003      	b.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b0fc:	f000 bc2f 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b100:	f000 bc2d 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b104:	4b59      	ldr	r3, [pc, #356]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b108:	f000 bc29 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b110:	f000 bc25 	b.w	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b114:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b118:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b11c:	430b      	orrs	r3, r1
 800b11e:	f040 80a7 	bne.w	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b122:	4b4e      	ldr	r3, [pc, #312]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b126:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b12a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b132:	d054      	beq.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b13a:	f200 808b 	bhi.w	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b144:	f000 8083 	beq.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b14e:	f200 8081 	bhi.w	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b158:	d02f      	beq.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b160:	d878      	bhi.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	2b00      	cmp	r3, #0
 800b166:	d004      	beq.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b16e:	d012      	beq.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b170:	e070      	b.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b172:	4b3a      	ldr	r3, [pc, #232]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b17a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b17e:	d107      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b184:	4618      	mov	r0, r3
 800b186:	f000 feb5 	bl	800bef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b18e:	e3e6      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b194:	e3e3      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b196:	4b31      	ldr	r3, [pc, #196]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b19e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1a2:	d107      	bne.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a4:	f107 0318 	add.w	r3, r7, #24
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 fbfb 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1b2:	e3d4      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b8:	e3d1      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1ba:	4b28      	ldr	r3, [pc, #160]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1c6:	d107      	bne.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c8:	f107 030c 	add.w	r3, r7, #12
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fd3d 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d6:	e3c2      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1dc:	e3bf      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1de:	4b1f      	ldr	r3, [pc, #124]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d10c      	bne.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1fa:	4b18      	ldr	r3, [pc, #96]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	08db      	lsrs	r3, r3, #3
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	4a16      	ldr	r2, [pc, #88]	@ (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b206:	fa22 f303 	lsr.w	r3, r2, r3
 800b20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b20c:	e01e      	b.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b20e:	4b13      	ldr	r3, [pc, #76]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b21a:	d106      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b21e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b222:	d102      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b224:	4b0f      	ldr	r3, [pc, #60]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b228:	e010      	b.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b22a:	4b0c      	ldr	r3, [pc, #48]	@ (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b236:	d106      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b23a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b23e:	d102      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b240:	4b09      	ldr	r3, [pc, #36]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b244:	e002      	b.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b24a:	e388      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b24c:	e387      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b24e:	4b07      	ldr	r3, [pc, #28]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b252:	e384      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b258:	e381      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b25a:	bf00      	nop
 800b25c:	58024400 	.word	0x58024400
 800b260:	03d09000 	.word	0x03d09000
 800b264:	003d0900 	.word	0x003d0900
 800b268:	017d7840 	.word	0x017d7840
 800b26c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b274:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b278:	430b      	orrs	r3, r1
 800b27a:	f040 809c 	bne.w	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b27e:	4b9e      	ldr	r3, [pc, #632]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b282:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b286:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b28e:	d054      	beq.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b296:	f200 808b 	bhi.w	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b2a0:	f000 8083 	beq.w	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b2aa:	f200 8081 	bhi.w	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2b4:	d02f      	beq.n	800b316 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2bc:	d878      	bhi.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d004      	beq.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2ca:	d012      	beq.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b2cc:	e070      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2ce:	4b8a      	ldr	r3, [pc, #552]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2da:	d107      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fe07 	bl	800bef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ea:	e338      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f0:	e335      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2f2:	4b81      	ldr	r3, [pc, #516]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2fe:	d107      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b300:	f107 0318 	add.w	r3, r7, #24
 800b304:	4618      	mov	r0, r3
 800b306:	f000 fb4d 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b30e:	e326      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b314:	e323      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b316:	4b78      	ldr	r3, [pc, #480]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b322:	d107      	bne.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 fc8f 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b332:	e314      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b338:	e311      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b33a:	4b6f      	ldr	r3, [pc, #444]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b33c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b33e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b342:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b344:	4b6c      	ldr	r3, [pc, #432]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b04      	cmp	r3, #4
 800b34e:	d10c      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b352:	2b00      	cmp	r3, #0
 800b354:	d109      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b356:	4b68      	ldr	r3, [pc, #416]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	08db      	lsrs	r3, r3, #3
 800b35c:	f003 0303 	and.w	r3, r3, #3
 800b360:	4a66      	ldr	r2, [pc, #408]	@ (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b362:	fa22 f303 	lsr.w	r3, r2, r3
 800b366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b368:	e01e      	b.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b36a:	4b63      	ldr	r3, [pc, #396]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b376:	d106      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b37e:	d102      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b380:	4b5f      	ldr	r3, [pc, #380]	@ (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b384:	e010      	b.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b386:	4b5c      	ldr	r3, [pc, #368]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b38e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b392:	d106      	bne.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b39a:	d102      	bne.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b39c:	4b59      	ldr	r3, [pc, #356]	@ (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3a0:	e002      	b.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3a6:	e2da      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3a8:	e2d9      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3aa:	4b57      	ldr	r3, [pc, #348]	@ (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ae:	e2d6      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b4:	e2d3      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b3be:	430b      	orrs	r3, r1
 800b3c0:	f040 80a7 	bne.w	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b3c4:	4b4c      	ldr	r3, [pc, #304]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b3cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3d4:	d055      	beq.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3dc:	f200 8096 	bhi.w	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3e6:	f000 8084 	beq.w	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3f0:	f200 808c 	bhi.w	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3fa:	d030      	beq.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b402:	f200 8083 	bhi.w	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b412:	d012      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b414:	e07a      	b.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b416:	4b38      	ldr	r3, [pc, #224]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b41e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b422:	d107      	bne.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fd63 	bl	800bef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b432:	e294      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b438:	e291      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b43a:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b446:	d107      	bne.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b448:	f107 0318 	add.w	r3, r7, #24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 faa9 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b456:	e282      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45c:	e27f      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b45e:	4b26      	ldr	r3, [pc, #152]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b46a:	d107      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b46c:	f107 030c 	add.w	r3, r7, #12
 800b470:	4618      	mov	r0, r3
 800b472:	f000 fbeb 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b47a:	e270      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b480:	e26d      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b482:	4b1d      	ldr	r3, [pc, #116]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b486:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b48a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b48c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b04      	cmp	r3, #4
 800b496:	d10c      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d109      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b49e:	4b16      	ldr	r3, [pc, #88]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	08db      	lsrs	r3, r3, #3
 800b4a4:	f003 0303 	and.w	r3, r3, #3
 800b4a8:	4a14      	ldr	r2, [pc, #80]	@ (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4b0:	e01e      	b.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4b2:	4b11      	ldr	r3, [pc, #68]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4be:	d106      	bne.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4c6:	d102      	bne.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4c8:	4b0d      	ldr	r3, [pc, #52]	@ (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4cc:	e010      	b.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4da:	d106      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4e2:	d102      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4e4:	4b07      	ldr	r3, [pc, #28]	@ (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4e8:	e002      	b.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b4ee:	e236      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4f0:	e235      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4f2:	4b05      	ldr	r3, [pc, #20]	@ (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f6:	e232      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4f8:	58024400 	.word	0x58024400
 800b4fc:	03d09000 	.word	0x03d09000
 800b500:	003d0900 	.word	0x003d0900
 800b504:	017d7840 	.word	0x017d7840
 800b508:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b510:	e225      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b512:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b516:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b51a:	430b      	orrs	r3, r1
 800b51c:	f040 8085 	bne.w	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b520:	4b9c      	ldr	r3, [pc, #624]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b524:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b528:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b530:	d06b      	beq.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b538:	d874      	bhi.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b540:	d056      	beq.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b544:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b548:	d86c      	bhi.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b550:	d03b      	beq.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b554:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b558:	d864      	bhi.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b560:	d021      	beq.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b568:	d85c      	bhi.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d004      	beq.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b576:	d004      	beq.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b578:	e054      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b57a:	f7fe fb5f 	bl	8009c3c <HAL_RCC_GetPCLK1Freq>
 800b57e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b580:	e1ed      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b582:	4b84      	ldr	r3, [pc, #528]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b58a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b58e:	d107      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b590:	f107 0318 	add.w	r3, r7, #24
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fa05 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b59e:	e1de      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a4:	e1db      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5a6:	4b7b      	ldr	r3, [pc, #492]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5b2:	d107      	bne.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5b4:	f107 030c 	add.w	r3, r7, #12
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 fb47 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5c2:	e1cc      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c8:	e1c9      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5ca:	4b72      	ldr	r3, [pc, #456]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	2b04      	cmp	r3, #4
 800b5d4:	d109      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5d6:	4b6f      	ldr	r3, [pc, #444]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	08db      	lsrs	r3, r3, #3
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	4a6d      	ldr	r2, [pc, #436]	@ (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e8:	e1b9      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5ee:	e1b6      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5f0:	4b68      	ldr	r3, [pc, #416]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5fc:	d102      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b5fe:	4b67      	ldr	r3, [pc, #412]	@ (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b602:	e1ac      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b608:	e1a9      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b60a:	4b62      	ldr	r3, [pc, #392]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b616:	d102      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b618:	4b61      	ldr	r3, [pc, #388]	@ (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b61c:	e19f      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b622:	e19c      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b628:	e199      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b62e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b632:	430b      	orrs	r3, r1
 800b634:	d173      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b636:	4b57      	ldr	r3, [pc, #348]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b63a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b63e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b646:	d02f      	beq.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b64e:	d863      	bhi.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b652:	2b00      	cmp	r3, #0
 800b654:	d004      	beq.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b65c:	d012      	beq.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b65e:	e05b      	b.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b660:	4b4c      	ldr	r3, [pc, #304]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b66c:	d107      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b66e:	f107 0318 	add.w	r3, r7, #24
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f996 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b67c:	e16f      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b682:	e16c      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b684:	4b43      	ldr	r3, [pc, #268]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b68c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b690:	d107      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b692:	f107 030c 	add.w	r3, r7, #12
 800b696:	4618      	mov	r0, r3
 800b698:	f000 fad8 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a0:	e15d      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6a6:	e15a      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6a8:	4b3a      	ldr	r3, [pc, #232]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b6b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6b2:	4b38      	ldr	r3, [pc, #224]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 0304 	and.w	r3, r3, #4
 800b6ba:	2b04      	cmp	r3, #4
 800b6bc:	d10c      	bne.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d109      	bne.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6c4:	4b33      	ldr	r3, [pc, #204]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	08db      	lsrs	r3, r3, #3
 800b6ca:	f003 0303 	and.w	r3, r3, #3
 800b6ce:	4a32      	ldr	r2, [pc, #200]	@ (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6d6:	e01e      	b.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6d8:	4b2e      	ldr	r3, [pc, #184]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6e4:	d106      	bne.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6ec:	d102      	bne.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6ee:	4b2b      	ldr	r3, [pc, #172]	@ (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6f2:	e010      	b.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6f4:	4b27      	ldr	r3, [pc, #156]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b700:	d106      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b708:	d102      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b70a:	4b25      	ldr	r3, [pc, #148]	@ (800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b70e:	e002      	b.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b714:	e123      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b716:	e122      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b71c:	e11f      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b71e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b722:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b726:	430b      	orrs	r3, r1
 800b728:	d13c      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b72a:	4b1a      	ldr	r3, [pc, #104]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b72e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b732:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b740:	d012      	beq.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b742:	e023      	b.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b744:	4b13      	ldr	r3, [pc, #76]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b74c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b750:	d107      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b756:	4618      	mov	r0, r3
 800b758:	f000 fbcc 	bl	800bef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b760:	e0fd      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b766:	e0fa      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b768:	4b0a      	ldr	r3, [pc, #40]	@ (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b774:	d107      	bne.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b776:	f107 0318 	add.w	r3, r7, #24
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 f912 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b784:	e0eb      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b78a:	e0e8      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b790:	e0e5      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b792:	bf00      	nop
 800b794:	58024400 	.word	0x58024400
 800b798:	03d09000 	.word	0x03d09000
 800b79c:	003d0900 	.word	0x003d0900
 800b7a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b7a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7a8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	f040 8085 	bne.w	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b7b2:	4b6d      	ldr	r3, [pc, #436]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b7ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7c2:	d06b      	beq.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7ca:	d874      	bhi.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7d2:	d056      	beq.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7da:	d86c      	bhi.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7e2:	d03b      	beq.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7ea:	d864      	bhi.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7f2:	d021      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7fa:	d85c      	bhi.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d004      	beq.n	800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b808:	d004      	beq.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b80a:	e054      	b.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b80c:	f000 f8b4 	bl	800b978 <HAL_RCCEx_GetD3PCLK1Freq>
 800b810:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b812:	e0a4      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b814:	4b54      	ldr	r3, [pc, #336]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b81c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b820:	d107      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b822:	f107 0318 	add.w	r3, r7, #24
 800b826:	4618      	mov	r0, r3
 800b828:	f000 f8bc 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b830:	e095      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b836:	e092      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b838:	4b4b      	ldr	r3, [pc, #300]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b844:	d107      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f9fe 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b854:	e083      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b85a:	e080      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b85c:	4b42      	ldr	r3, [pc, #264]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0304 	and.w	r3, r3, #4
 800b864:	2b04      	cmp	r3, #4
 800b866:	d109      	bne.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b868:	4b3f      	ldr	r3, [pc, #252]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	08db      	lsrs	r3, r3, #3
 800b86e:	f003 0303 	and.w	r3, r3, #3
 800b872:	4a3e      	ldr	r2, [pc, #248]	@ (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b874:	fa22 f303 	lsr.w	r3, r2, r3
 800b878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b87a:	e070      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b880:	e06d      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b882:	4b39      	ldr	r3, [pc, #228]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b88a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b88e:	d102      	bne.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b890:	4b37      	ldr	r3, [pc, #220]	@ (800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b894:	e063      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b89a:	e060      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b89c:	4b32      	ldr	r3, [pc, #200]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8a8:	d102      	bne.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b8aa:	4b32      	ldr	r3, [pc, #200]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ae:	e056      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8b4:	e053      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ba:	e050      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b8bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	d148      	bne.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b8c8:	4b27      	ldr	r3, [pc, #156]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8d8:	d02a      	beq.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8e0:	d838      	bhi.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8ee:	d00d      	beq.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b8f0:	e030      	b.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8f2:	4b1d      	ldr	r3, [pc, #116]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8fe:	d102      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b900:	4b1c      	ldr	r3, [pc, #112]	@ (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b904:	e02b      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90a:	e028      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b90c:	4b16      	ldr	r3, [pc, #88]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b914:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b918:	d107      	bne.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b91a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 fae8 	bl	800bef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b928:	e019      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b92e:	e016      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b930:	4b0d      	ldr	r3, [pc, #52]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b938:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b93c:	d107      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b93e:	f107 0318 	add.w	r3, r7, #24
 800b942:	4618      	mov	r0, r3
 800b944:	f000 f82e 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b94c:	e007      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b952:	e004      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b958:	e001      	b.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b95e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b960:	4618      	mov	r0, r3
 800b962:	3740      	adds	r7, #64	@ 0x40
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	58024400 	.word	0x58024400
 800b96c:	03d09000 	.word	0x03d09000
 800b970:	003d0900 	.word	0x003d0900
 800b974:	017d7840 	.word	0x017d7840

0800b978 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b97c:	f7fe f92e 	bl	8009bdc <HAL_RCC_GetHCLKFreq>
 800b980:	4602      	mov	r2, r0
 800b982:	4b06      	ldr	r3, [pc, #24]	@ (800b99c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	091b      	lsrs	r3, r3, #4
 800b988:	f003 0307 	and.w	r3, r3, #7
 800b98c:	4904      	ldr	r1, [pc, #16]	@ (800b9a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b98e:	5ccb      	ldrb	r3, [r1, r3]
 800b990:	f003 031f 	and.w	r3, r3, #31
 800b994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b998:	4618      	mov	r0, r3
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	58024400 	.word	0x58024400
 800b9a0:	080113c8 	.word	0x080113c8

0800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b089      	sub	sp, #36	@ 0x24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9ac:	4ba1      	ldr	r3, [pc, #644]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b9b6:	4b9f      	ldr	r3, [pc, #636]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ba:	0b1b      	lsrs	r3, r3, #12
 800b9bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b9c2:	4b9c      	ldr	r3, [pc, #624]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c6:	091b      	lsrs	r3, r3, #4
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b9ce:	4b99      	ldr	r3, [pc, #612]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9d2:	08db      	lsrs	r3, r3, #3
 800b9d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	fb02 f303 	mul.w	r3, r2, r3
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 8111 	beq.w	800bc14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	f000 8083 	beq.w	800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	f200 80a1 	bhi.w	800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d056      	beq.n	800babc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ba0e:	e099      	b.n	800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba10:	4b88      	ldr	r3, [pc, #544]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 0320 	and.w	r3, r3, #32
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d02d      	beq.n	800ba78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba1c:	4b85      	ldr	r3, [pc, #532]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	08db      	lsrs	r3, r3, #3
 800ba22:	f003 0303 	and.w	r3, r3, #3
 800ba26:	4a84      	ldr	r2, [pc, #528]	@ (800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ba28:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba46:	4b7b      	ldr	r3, [pc, #492]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba4e:	ee07 3a90 	vmov	s15, r3
 800ba52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba76:	e087      	b.n	800bb88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ba86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba8a:	4b6a      	ldr	r3, [pc, #424]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baba:	e065      	b.n	800bb88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800baca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bace:	4b59      	ldr	r3, [pc, #356]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bade:	ed97 6a03 	vldr	s12, [r7, #12]
 800bae2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bafa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bafe:	e043      	b.n	800bb88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bc48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bb0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb12:	4b48      	ldr	r3, [pc, #288]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb1a:	ee07 3a90 	vmov	s15, r3
 800bb1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb42:	e021      	b.n	800bb88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb56:	4b37      	ldr	r3, [pc, #220]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5e:	ee07 3a90 	vmov	s15, r3
 800bb62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bb88:	4b2a      	ldr	r3, [pc, #168]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8c:	0a5b      	lsrs	r3, r3, #9
 800bb8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bba2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbae:	ee17 2a90 	vmov	r2, s15
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bbb6:	4b1f      	ldr	r3, [pc, #124]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbba:	0c1b      	lsrs	r3, r3, #16
 800bbbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbc0:	ee07 3a90 	vmov	s15, r3
 800bbc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbdc:	ee17 2a90 	vmov	r2, s15
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bbe4:	4b13      	ldr	r3, [pc, #76]	@ (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe8:	0e1b      	lsrs	r3, r3, #24
 800bbea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc0a:	ee17 2a90 	vmov	r2, s15
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc12:	e008      	b.n	800bc26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	609a      	str	r2, [r3, #8]
}
 800bc26:	bf00      	nop
 800bc28:	3724      	adds	r7, #36	@ 0x24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	58024400 	.word	0x58024400
 800bc38:	03d09000 	.word	0x03d09000
 800bc3c:	46000000 	.word	0x46000000
 800bc40:	4c742400 	.word	0x4c742400
 800bc44:	4a742400 	.word	0x4a742400
 800bc48:	4bbebc20 	.word	0x4bbebc20

0800bc4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b089      	sub	sp, #36	@ 0x24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc54:	4ba1      	ldr	r3, [pc, #644]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc5e:	4b9f      	ldr	r3, [pc, #636]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc62:	0d1b      	lsrs	r3, r3, #20
 800bc64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc6a:	4b9c      	ldr	r3, [pc, #624]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6e:	0a1b      	lsrs	r3, r3, #8
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bc76:	4b99      	ldr	r3, [pc, #612]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc7a:	08db      	lsrs	r3, r3, #3
 800bc7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	fb02 f303 	mul.w	r3, r2, r3
 800bc86:	ee07 3a90 	vmov	s15, r3
 800bc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 8111 	beq.w	800bebc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	f000 8083 	beq.w	800bda8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	f200 80a1 	bhi.w	800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d056      	beq.n	800bd64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bcb6:	e099      	b.n	800bdec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcb8:	4b88      	ldr	r3, [pc, #544]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0320 	and.w	r3, r3, #32
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d02d      	beq.n	800bd20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcc4:	4b85      	ldr	r3, [pc, #532]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	08db      	lsrs	r3, r3, #3
 800bcca:	f003 0303 	and.w	r3, r3, #3
 800bcce:	4a84      	ldr	r2, [pc, #528]	@ (800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bcd0:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	ee07 3a90 	vmov	s15, r3
 800bcdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcee:	4b7b      	ldr	r3, [pc, #492]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf6:	ee07 3a90 	vmov	s15, r3
 800bcfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd1e:	e087      	b.n	800be30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bee8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bd2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd32:	4b6a      	ldr	r3, [pc, #424]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd42:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd62:	e065      	b.n	800be30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800beec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd76:	4b59      	ldr	r3, [pc, #356]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd7e:	ee07 3a90 	vmov	s15, r3
 800bd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd86:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bda6:	e043      	b.n	800be30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdba:	4b48      	ldr	r3, [pc, #288]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdea:	e021      	b.n	800be30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800beec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdfe:	4b37      	ldr	r3, [pc, #220]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800be30:	4b2a      	ldr	r3, [pc, #168]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be34:	0a5b      	lsrs	r3, r3, #9
 800be36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be56:	ee17 2a90 	vmov	r2, s15
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be5e:	4b1f      	ldr	r3, [pc, #124]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be62:	0c1b      	lsrs	r3, r3, #16
 800be64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be68:	ee07 3a90 	vmov	s15, r3
 800be6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be78:	edd7 6a07 	vldr	s13, [r7, #28]
 800be7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be84:	ee17 2a90 	vmov	r2, s15
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800be8c:	4b13      	ldr	r3, [pc, #76]	@ (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be90:	0e1b      	lsrs	r3, r3, #24
 800be92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800beaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb2:	ee17 2a90 	vmov	r2, s15
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800beba:	e008      	b.n	800bece <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	609a      	str	r2, [r3, #8]
}
 800bece:	bf00      	nop
 800bed0:	3724      	adds	r7, #36	@ 0x24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	58024400 	.word	0x58024400
 800bee0:	03d09000 	.word	0x03d09000
 800bee4:	46000000 	.word	0x46000000
 800bee8:	4c742400 	.word	0x4c742400
 800beec:	4a742400 	.word	0x4a742400
 800bef0:	4bbebc20 	.word	0x4bbebc20

0800bef4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b089      	sub	sp, #36	@ 0x24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800befc:	4ba0      	ldr	r3, [pc, #640]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800befe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf00:	f003 0303 	and.w	r3, r3, #3
 800bf04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bf06:	4b9e      	ldr	r3, [pc, #632]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0a:	091b      	lsrs	r3, r3, #4
 800bf0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf12:	4b9b      	ldr	r3, [pc, #620]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bf1c:	4b98      	ldr	r3, [pc, #608]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf20:	08db      	lsrs	r3, r3, #3
 800bf22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	fb02 f303 	mul.w	r3, r2, r3
 800bf2c:	ee07 3a90 	vmov	s15, r3
 800bf30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 8111 	beq.w	800c162 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	f000 8083 	beq.w	800c04e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	f200 80a1 	bhi.w	800c092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d003      	beq.n	800bf5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d056      	beq.n	800c00a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bf5c:	e099      	b.n	800c092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf5e:	4b88      	ldr	r3, [pc, #544]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f003 0320 	and.w	r3, r3, #32
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d02d      	beq.n	800bfc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf6a:	4b85      	ldr	r3, [pc, #532]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	08db      	lsrs	r3, r3, #3
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	4a83      	ldr	r2, [pc, #524]	@ (800c184 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bf76:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	ee07 3a90 	vmov	s15, r3
 800bf8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf94:	4b7a      	ldr	r3, [pc, #488]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf9c:	ee07 3a90 	vmov	s15, r3
 800bfa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfa8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfc0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bfc4:	e087      	b.n	800c0d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	ee07 3a90 	vmov	s15, r3
 800bfcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfd0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c18c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bfd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd8:	4b69      	ldr	r3, [pc, #420]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c008:	e065      	b.n	800c0d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	ee07 3a90 	vmov	s15, r3
 800c010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c014:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c190 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c01c:	4b58      	ldr	r3, [pc, #352]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c024:	ee07 3a90 	vmov	s15, r3
 800c028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c02c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c030:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c03c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c04c:	e043      	b.n	800c0d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c058:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c05c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c060:	4b47      	ldr	r3, [pc, #284]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c068:	ee07 3a90 	vmov	s15, r3
 800c06c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c070:	ed97 6a03 	vldr	s12, [r7, #12]
 800c074:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c07c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c08c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c090:	e021      	b.n	800c0d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	ee07 3a90 	vmov	s15, r3
 800c098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c18c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0a4:	4b36      	ldr	r3, [pc, #216]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ac:	ee07 3a90 	vmov	s15, r3
 800c0b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c0d6:	4b2a      	ldr	r3, [pc, #168]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0da:	0a5b      	lsrs	r3, r3, #9
 800c0dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0fc:	ee17 2a90 	vmov	r2, s15
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c104:	4b1e      	ldr	r3, [pc, #120]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c108:	0c1b      	lsrs	r3, r3, #16
 800c10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c12a:	ee17 2a90 	vmov	r2, s15
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c132:	4b13      	ldr	r3, [pc, #76]	@ (800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c136:	0e1b      	lsrs	r3, r3, #24
 800c138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c13c:	ee07 3a90 	vmov	s15, r3
 800c140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c158:	ee17 2a90 	vmov	r2, s15
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c160:	e008      	b.n	800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	609a      	str	r2, [r3, #8]
}
 800c174:	bf00      	nop
 800c176:	3724      	adds	r7, #36	@ 0x24
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	58024400 	.word	0x58024400
 800c184:	03d09000 	.word	0x03d09000
 800c188:	46000000 	.word	0x46000000
 800c18c:	4c742400 	.word	0x4c742400
 800c190:	4a742400 	.word	0x4a742400
 800c194:	4bbebc20 	.word	0x4bbebc20

0800c198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1a6:	4b53      	ldr	r3, [pc, #332]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1aa:	f003 0303 	and.w	r3, r3, #3
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d101      	bne.n	800c1b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e099      	b.n	800c2ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1b6:	4b4f      	ldr	r3, [pc, #316]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a4e      	ldr	r2, [pc, #312]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c1bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c1c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1c2:	f7f7 fb9b 	bl	80038fc <HAL_GetTick>
 800c1c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1c8:	e008      	b.n	800c1dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1ca:	f7f7 fb97 	bl	80038fc <HAL_GetTick>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d901      	bls.n	800c1dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	e086      	b.n	800c2ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1dc:	4b45      	ldr	r3, [pc, #276]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1f0      	bne.n	800c1ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1e8:	4b42      	ldr	r3, [pc, #264]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	031b      	lsls	r3, r3, #12
 800c1f6:	493f      	ldr	r1, [pc, #252]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	628b      	str	r3, [r1, #40]	@ 0x28
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	3b01      	subs	r3, #1
 800c202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	025b      	lsls	r3, r3, #9
 800c20e:	b29b      	uxth	r3, r3
 800c210:	431a      	orrs	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	3b01      	subs	r3, #1
 800c218:	041b      	lsls	r3, r3, #16
 800c21a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c21e:	431a      	orrs	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	3b01      	subs	r3, #1
 800c226:	061b      	lsls	r3, r3, #24
 800c228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c22c:	4931      	ldr	r1, [pc, #196]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c232:	4b30      	ldr	r3, [pc, #192]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	492d      	ldr	r1, [pc, #180]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c240:	4313      	orrs	r3, r2
 800c242:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c244:	4b2b      	ldr	r3, [pc, #172]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c248:	f023 0220 	bic.w	r2, r3, #32
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	4928      	ldr	r1, [pc, #160]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c252:	4313      	orrs	r3, r2
 800c254:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c256:	4b27      	ldr	r3, [pc, #156]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25a:	4a26      	ldr	r2, [pc, #152]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	f023 0310 	bic.w	r3, r3, #16
 800c260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c262:	4b24      	ldr	r3, [pc, #144]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c266:	4b24      	ldr	r3, [pc, #144]	@ (800c2f8 <RCCEx_PLL2_Config+0x160>)
 800c268:	4013      	ands	r3, r2
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	69d2      	ldr	r2, [r2, #28]
 800c26e:	00d2      	lsls	r2, r2, #3
 800c270:	4920      	ldr	r1, [pc, #128]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c272:	4313      	orrs	r3, r2
 800c274:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c276:	4b1f      	ldr	r3, [pc, #124]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27a:	4a1e      	ldr	r2, [pc, #120]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c27c:	f043 0310 	orr.w	r3, r3, #16
 800c280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d106      	bne.n	800c296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c288:	4b1a      	ldr	r3, [pc, #104]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c28c:	4a19      	ldr	r2, [pc, #100]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c28e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c294:	e00f      	b.n	800c2b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d106      	bne.n	800c2aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c29c:	4b15      	ldr	r3, [pc, #84]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a0:	4a14      	ldr	r2, [pc, #80]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c2a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2a8:	e005      	b.n	800c2b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2aa:	4b12      	ldr	r3, [pc, #72]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ae:	4a11      	ldr	r2, [pc, #68]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c2b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c2b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a0e      	ldr	r2, [pc, #56]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c2bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2c2:	f7f7 fb1b 	bl	80038fc <HAL_GetTick>
 800c2c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2c8:	e008      	b.n	800c2dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2ca:	f7f7 fb17 	bl	80038fc <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d901      	bls.n	800c2dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e006      	b.n	800c2ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2dc:	4b05      	ldr	r3, [pc, #20]	@ (800c2f4 <RCCEx_PLL2_Config+0x15c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d0f0      	beq.n	800c2ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	58024400 	.word	0x58024400
 800c2f8:	ffff0007 	.word	0xffff0007

0800c2fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c30a:	4b53      	ldr	r3, [pc, #332]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c30e:	f003 0303 	and.w	r3, r3, #3
 800c312:	2b03      	cmp	r3, #3
 800c314:	d101      	bne.n	800c31a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e099      	b.n	800c44e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c31a:	4b4f      	ldr	r3, [pc, #316]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a4e      	ldr	r2, [pc, #312]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c326:	f7f7 fae9 	bl	80038fc <HAL_GetTick>
 800c32a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c32c:	e008      	b.n	800c340 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c32e:	f7f7 fae5 	bl	80038fc <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d901      	bls.n	800c340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e086      	b.n	800c44e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c340:	4b45      	ldr	r3, [pc, #276]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1f0      	bne.n	800c32e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c34c:	4b42      	ldr	r3, [pc, #264]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c350:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	051b      	lsls	r3, r3, #20
 800c35a:	493f      	ldr	r1, [pc, #252]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c35c:	4313      	orrs	r3, r2
 800c35e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	3b01      	subs	r3, #1
 800c366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	3b01      	subs	r3, #1
 800c370:	025b      	lsls	r3, r3, #9
 800c372:	b29b      	uxth	r3, r3
 800c374:	431a      	orrs	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	041b      	lsls	r3, r3, #16
 800c37e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c382:	431a      	orrs	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	3b01      	subs	r3, #1
 800c38a:	061b      	lsls	r3, r3, #24
 800c38c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c390:	4931      	ldr	r1, [pc, #196]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c392:	4313      	orrs	r3, r2
 800c394:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c396:	4b30      	ldr	r3, [pc, #192]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	492d      	ldr	r1, [pc, #180]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	699b      	ldr	r3, [r3, #24]
 800c3b4:	4928      	ldr	r1, [pc, #160]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3ba:	4b27      	ldr	r3, [pc, #156]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3be:	4a26      	ldr	r2, [pc, #152]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3c6:	4b24      	ldr	r3, [pc, #144]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3ca:	4b24      	ldr	r3, [pc, #144]	@ (800c45c <RCCEx_PLL3_Config+0x160>)
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	69d2      	ldr	r2, [r2, #28]
 800c3d2:	00d2      	lsls	r2, r2, #3
 800c3d4:	4920      	ldr	r1, [pc, #128]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3da:	4b1f      	ldr	r3, [pc, #124]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3de:	4a1e      	ldr	r2, [pc, #120]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c3e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d106      	bne.n	800c3fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c3ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f0:	4a19      	ldr	r2, [pc, #100]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c3f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c3f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3f8:	e00f      	b.n	800c41a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d106      	bne.n	800c40e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c400:	4b15      	ldr	r3, [pc, #84]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c404:	4a14      	ldr	r2, [pc, #80]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c40a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c40c:	e005      	b.n	800c41a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c40e:	4b12      	ldr	r3, [pc, #72]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c412:	4a11      	ldr	r2, [pc, #68]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c418:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c41a:	4b0f      	ldr	r3, [pc, #60]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a0e      	ldr	r2, [pc, #56]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c426:	f7f7 fa69 	bl	80038fc <HAL_GetTick>
 800c42a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c42c:	e008      	b.n	800c440 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c42e:	f7f7 fa65 	bl	80038fc <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d901      	bls.n	800c440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c43c:	2303      	movs	r3, #3
 800c43e:	e006      	b.n	800c44e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c440:	4b05      	ldr	r3, [pc, #20]	@ (800c458 <RCCEx_PLL3_Config+0x15c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d0f0      	beq.n	800c42e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	58024400 	.word	0x58024400
 800c45c:	ffff0007 	.word	0xffff0007

0800c460 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	e10f      	b.n	800c692 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a87      	ldr	r2, [pc, #540]	@ (800c69c <HAL_SPI_Init+0x23c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d00f      	beq.n	800c4a2 <HAL_SPI_Init+0x42>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a86      	ldr	r2, [pc, #536]	@ (800c6a0 <HAL_SPI_Init+0x240>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d00a      	beq.n	800c4a2 <HAL_SPI_Init+0x42>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a84      	ldr	r2, [pc, #528]	@ (800c6a4 <HAL_SPI_Init+0x244>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d005      	beq.n	800c4a2 <HAL_SPI_Init+0x42>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	2b0f      	cmp	r3, #15
 800c49c:	d901      	bls.n	800c4a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e0f7      	b.n	800c692 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fe3c 	bl	800d120 <SPI_GetPacketSize>
 800c4a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a7b      	ldr	r2, [pc, #492]	@ (800c69c <HAL_SPI_Init+0x23c>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d00c      	beq.n	800c4ce <HAL_SPI_Init+0x6e>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a79      	ldr	r2, [pc, #484]	@ (800c6a0 <HAL_SPI_Init+0x240>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d007      	beq.n	800c4ce <HAL_SPI_Init+0x6e>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a78      	ldr	r2, [pc, #480]	@ (800c6a4 <HAL_SPI_Init+0x244>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d002      	beq.n	800c4ce <HAL_SPI_Init+0x6e>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b08      	cmp	r3, #8
 800c4cc:	d811      	bhi.n	800c4f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c4d2:	4a72      	ldr	r2, [pc, #456]	@ (800c69c <HAL_SPI_Init+0x23c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d009      	beq.n	800c4ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a70      	ldr	r2, [pc, #448]	@ (800c6a0 <HAL_SPI_Init+0x240>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d004      	beq.n	800c4ec <HAL_SPI_Init+0x8c>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a6f      	ldr	r2, [pc, #444]	@ (800c6a4 <HAL_SPI_Init+0x244>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d104      	bne.n	800c4f6 <HAL_SPI_Init+0x96>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2b10      	cmp	r3, #16
 800c4f0:	d901      	bls.n	800c4f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e0cd      	b.n	800c692 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d106      	bne.n	800c510 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7f6 fe22 	bl	8003154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2202      	movs	r2, #2
 800c514:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f022 0201 	bic.w	r2, r2, #1
 800c526:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c532:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c53c:	d119      	bne.n	800c572 <HAL_SPI_Init+0x112>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c546:	d103      	bne.n	800c550 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d008      	beq.n	800c562 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10c      	bne.n	800c572 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c55c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c560:	d107      	bne.n	800c572 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c570:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00f      	beq.n	800c59e <HAL_SPI_Init+0x13e>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	2b06      	cmp	r3, #6
 800c584:	d90b      	bls.n	800c59e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	430a      	orrs	r2, r1
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	e007      	b.n	800c5ae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	69da      	ldr	r2, [r3, #28]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	431a      	orrs	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5c0:	ea42 0103 	orr.w	r1, r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d8:	431a      	orrs	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5de:	431a      	orrs	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	431a      	orrs	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c602:	431a      	orrs	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	431a      	orrs	r2, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c60e:	ea42 0103 	orr.w	r1, r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d113      	bne.n	800c64e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c638:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c64c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f022 0201 	bic.w	r2, r2, #1
 800c65c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00a      	beq.n	800c680 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	430a      	orrs	r2, r1
 800c67e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	40013000 	.word	0x40013000
 800c6a0:	40003800 	.word	0x40003800
 800c6a4:	40003c00 	.word	0x40003c00

0800c6a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b088      	sub	sp, #32
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	603b      	str	r3, [r7, #0]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3320      	adds	r3, #32
 800c6be:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c6c0:	f7f7 f91c 	bl	80038fc <HAL_GetTick>
 800c6c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d001      	beq.n	800c6d6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	e1d1      	b.n	800ca7a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <HAL_SPI_Transmit+0x3a>
 800c6dc:	88fb      	ldrh	r3, [r7, #6]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e1c9      	b.n	800ca7a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d101      	bne.n	800c6f4 <HAL_SPI_Transmit+0x4c>
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e1c2      	b.n	800ca7a <HAL_SPI_Transmit+0x3d2>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2203      	movs	r2, #3
 800c700:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	88fa      	ldrh	r2, [r7, #6]
 800c716:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	88fa      	ldrh	r2, [r7, #6]
 800c71e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2200      	movs	r2, #0
 800c734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c74c:	d108      	bne.n	800c760 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	e009      	b.n	800c774 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c772:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685a      	ldr	r2, [r3, #4]
 800c77a:	4b96      	ldr	r3, [pc, #600]	@ (800c9d4 <HAL_SPI_Transmit+0x32c>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	88f9      	ldrh	r1, [r7, #6]
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	6812      	ldr	r2, [r2, #0]
 800c784:	430b      	orrs	r3, r1
 800c786:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f042 0201 	orr.w	r2, r2, #1
 800c796:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7a0:	d107      	bne.n	800c7b2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	2b0f      	cmp	r3, #15
 800c7b8:	d947      	bls.n	800c84a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c7ba:	e03f      	b.n	800c83c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d114      	bne.n	800c7f4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	6812      	ldr	r2, [r2, #0]
 800c7d4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7da:	1d1a      	adds	r2, r3, #4
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c7f2:	e023      	b.n	800c83c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7f4:	f7f7 f882 	bl	80038fc <HAL_GetTick>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d803      	bhi.n	800c80c <HAL_SPI_Transmit+0x164>
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80a:	d102      	bne.n	800c812 <HAL_SPI_Transmit+0x16a>
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d114      	bne.n	800c83c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f000 fbb6 	bl	800cf84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c81e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c838:	2303      	movs	r3, #3
 800c83a:	e11e      	b.n	800ca7a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c842:	b29b      	uxth	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1b9      	bne.n	800c7bc <HAL_SPI_Transmit+0x114>
 800c848:	e0f1      	b.n	800ca2e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	2b07      	cmp	r3, #7
 800c850:	f240 80e6 	bls.w	800ca20 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c854:	e05d      	b.n	800c912 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	f003 0302 	and.w	r3, r3, #2
 800c860:	2b02      	cmp	r3, #2
 800c862:	d132      	bne.n	800c8ca <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d918      	bls.n	800c8a2 <HAL_SPI_Transmit+0x1fa>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c874:	2b00      	cmp	r3, #0
 800c876:	d014      	beq.n	800c8a2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6812      	ldr	r2, [r2, #0]
 800c882:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c888:	1d1a      	adds	r2, r3, #4
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c894:	b29b      	uxth	r3, r3
 800c896:	3b02      	subs	r3, #2
 800c898:	b29a      	uxth	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c8a0:	e037      	b.n	800c912 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8a6:	881a      	ldrh	r2, [r3, #0]
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8b0:	1c9a      	adds	r2, r3, #2
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c8c8:	e023      	b.n	800c912 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8ca:	f7f7 f817 	bl	80038fc <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d803      	bhi.n	800c8e2 <HAL_SPI_Transmit+0x23a>
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e0:	d102      	bne.n	800c8e8 <HAL_SPI_Transmit+0x240>
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d114      	bne.n	800c912 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f000 fb4b 	bl	800cf84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c90e:	2303      	movs	r3, #3
 800c910:	e0b3      	b.n	800ca7a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c918:	b29b      	uxth	r3, r3
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d19b      	bne.n	800c856 <HAL_SPI_Transmit+0x1ae>
 800c91e:	e086      	b.n	800ca2e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	f003 0302 	and.w	r3, r3, #2
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d154      	bne.n	800c9d8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c934:	b29b      	uxth	r3, r3
 800c936:	2b03      	cmp	r3, #3
 800c938:	d918      	bls.n	800c96c <HAL_SPI_Transmit+0x2c4>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c93e:	2b40      	cmp	r3, #64	@ 0x40
 800c940:	d914      	bls.n	800c96c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6812      	ldr	r2, [r2, #0]
 800c94c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c952:	1d1a      	adds	r2, r3, #4
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c95e:	b29b      	uxth	r3, r3
 800c960:	3b04      	subs	r3, #4
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c96a:	e059      	b.n	800ca20 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c972:	b29b      	uxth	r3, r3
 800c974:	2b01      	cmp	r3, #1
 800c976:	d917      	bls.n	800c9a8 <HAL_SPI_Transmit+0x300>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d013      	beq.n	800c9a8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c984:	881a      	ldrh	r2, [r3, #0]
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c98e:	1c9a      	adds	r2, r3, #2
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	3b02      	subs	r3, #2
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c9a6:	e03b      	b.n	800ca20 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3320      	adds	r3, #32
 800c9b2:	7812      	ldrb	r2, [r2, #0]
 800c9b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c9d2:	e025      	b.n	800ca20 <HAL_SPI_Transmit+0x378>
 800c9d4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9d8:	f7f6 ff90 	bl	80038fc <HAL_GetTick>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d803      	bhi.n	800c9f0 <HAL_SPI_Transmit+0x348>
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d102      	bne.n	800c9f6 <HAL_SPI_Transmit+0x34e>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d114      	bne.n	800ca20 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f000 fac4 	bl	800cf84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	e02c      	b.n	800ca7a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f47f af79 	bne.w	800c920 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2200      	movs	r2, #0
 800ca36:	2108      	movs	r1, #8
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f000 fb43 	bl	800d0c4 <SPI_WaitOnFlagUntilTimeout>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d007      	beq.n	800ca54 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca4a:	f043 0220 	orr.w	r2, r3, #32
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 fa95 	bl	800cf84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ca78:	2300      	movs	r3, #0
  }
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop

0800ca84 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	603b      	str	r3, [r7, #0]
 800ca90:	4613      	mov	r3, r2
 800ca92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca98:	095b      	lsrs	r3, r3, #5
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3330      	adds	r3, #48	@ 0x30
 800caa6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800caa8:	f7f6 ff28 	bl	80038fc <HAL_GetTick>
 800caac:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d001      	beq.n	800cabe <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800caba:	2302      	movs	r3, #2
 800cabc:	e250      	b.n	800cf60 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <HAL_SPI_Receive+0x46>
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e248      	b.n	800cf60 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d101      	bne.n	800cadc <HAL_SPI_Receive+0x58>
 800cad8:	2302      	movs	r3, #2
 800cada:	e241      	b.n	800cf60 <HAL_SPI_Receive+0x4dc>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2204      	movs	r2, #4
 800cae8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	88fa      	ldrh	r2, [r7, #6]
 800cafe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	88fa      	ldrh	r2, [r7, #6]
 800cb06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cb34:	d108      	bne.n	800cb48 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	e009      	b.n	800cb5c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800cb5a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	4b95      	ldr	r3, [pc, #596]	@ (800cdb8 <HAL_SPI_Receive+0x334>)
 800cb64:	4013      	ands	r3, r2
 800cb66:	88f9      	ldrh	r1, [r7, #6]
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	6812      	ldr	r2, [r2, #0]
 800cb6c:	430b      	orrs	r3, r1
 800cb6e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f042 0201 	orr.w	r2, r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb88:	d107      	bne.n	800cb9a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	2b0f      	cmp	r3, #15
 800cba0:	d96c      	bls.n	800cc7c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cba2:	e064      	b.n	800cc6e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	f003 0301 	and.w	r3, r3, #1
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d114      	bne.n	800cbe4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbc2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cbc4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbca:	1d1a      	adds	r2, r3, #4
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbe2:	e044      	b.n	800cc6e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8bfa      	ldrh	r2, [r7, #30]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d919      	bls.n	800cc26 <HAL_SPI_Receive+0x1a2>
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d014      	beq.n	800cc26 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cc06:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc0c:	1d1a      	adds	r2, r3, #4
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc24:	e023      	b.n	800cc6e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc26:	f7f6 fe69 	bl	80038fc <HAL_GetTick>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d803      	bhi.n	800cc3e <HAL_SPI_Receive+0x1ba>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3c:	d102      	bne.n	800cc44 <HAL_SPI_Receive+0x1c0>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d114      	bne.n	800cc6e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 f99d 	bl	800cf84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e178      	b.n	800cf60 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d194      	bne.n	800cba4 <HAL_SPI_Receive+0x120>
 800cc7a:	e15e      	b.n	800cf3a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2b07      	cmp	r3, #7
 800cc82:	f240 8153 	bls.w	800cf2c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cc86:	e08f      	b.n	800cda8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d114      	bne.n	800ccc8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	8812      	ldrh	r2, [r2, #0]
 800cca6:	b292      	uxth	r2, r2
 800cca8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccae:	1c9a      	adds	r2, r3, #2
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ccc6:	e06f      	b.n	800cda8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	8bfa      	ldrh	r2, [r7, #30]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d924      	bls.n	800cd20 <HAL_SPI_Receive+0x29c>
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01f      	beq.n	800cd20 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cce4:	69ba      	ldr	r2, [r7, #24]
 800cce6:	8812      	ldrh	r2, [r2, #0]
 800cce8:	b292      	uxth	r2, r2
 800ccea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccf0:	1c9a      	adds	r2, r3, #2
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	8812      	ldrh	r2, [r2, #0]
 800ccfe:	b292      	uxth	r2, r2
 800cd00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd06:	1c9a      	adds	r2, r3, #2
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	3b02      	subs	r3, #2
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd1e:	e043      	b.n	800cda8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d119      	bne.n	800cd60 <HAL_SPI_Receive+0x2dc>
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d014      	beq.n	800cd60 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	8812      	ldrh	r2, [r2, #0]
 800cd3e:	b292      	uxth	r2, r2
 800cd40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd46:	1c9a      	adds	r2, r3, #2
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	3b01      	subs	r3, #1
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd5e:	e023      	b.n	800cda8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd60:	f7f6 fdcc 	bl	80038fc <HAL_GetTick>
 800cd64:	4602      	mov	r2, r0
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d803      	bhi.n	800cd78 <HAL_SPI_Receive+0x2f4>
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d102      	bne.n	800cd7e <HAL_SPI_Receive+0x2fa>
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d114      	bne.n	800cda8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd7e:	68f8      	ldr	r0, [r7, #12]
 800cd80:	f000 f900 	bl	800cf84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e0db      	b.n	800cf60 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f47f af69 	bne.w	800cc88 <HAL_SPI_Receive+0x204>
 800cdb6:	e0c0      	b.n	800cf3a <HAL_SPI_Receive+0x4b6>
 800cdb8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	695b      	ldr	r3, [r3, #20]
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d117      	bne.n	800ce02 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdde:	7812      	ldrb	r2, [r2, #0]
 800cde0:	b2d2      	uxtb	r2, r2
 800cde2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ce00:	e094      	b.n	800cf2c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	8bfa      	ldrh	r2, [r7, #30]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d946      	bls.n	800ce9e <HAL_SPI_Receive+0x41a>
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d041      	beq.n	800ce9e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce26:	7812      	ldrb	r2, [r2, #0]
 800ce28:	b2d2      	uxtb	r2, r2
 800ce2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce30:	1c5a      	adds	r2, r3, #1
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce42:	7812      	ldrb	r2, [r2, #0]
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce5e:	7812      	ldrb	r2, [r2, #0]
 800ce60:	b2d2      	uxtb	r2, r2
 800ce62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce68:	1c5a      	adds	r2, r3, #1
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce7a:	7812      	ldrb	r2, [r2, #0]
 800ce7c:	b2d2      	uxtb	r2, r2
 800ce7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce84:	1c5a      	adds	r2, r3, #1
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	3b04      	subs	r3, #4
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ce9c:	e046      	b.n	800cf2c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d81c      	bhi.n	800cee4 <HAL_SPI_Receive+0x460>
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d017      	beq.n	800cee4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cec0:	7812      	ldrb	r2, [r2, #0]
 800cec2:	b2d2      	uxtb	r2, r2
 800cec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	3b01      	subs	r3, #1
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cee2:	e023      	b.n	800cf2c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cee4:	f7f6 fd0a 	bl	80038fc <HAL_GetTick>
 800cee8:	4602      	mov	r2, r0
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d803      	bhi.n	800cefc <HAL_SPI_Receive+0x478>
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefa:	d102      	bne.n	800cf02 <HAL_SPI_Receive+0x47e>
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d114      	bne.n	800cf2c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f000 f83e 	bl	800cf84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e019      	b.n	800cf60 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f47f af41 	bne.w	800cdbc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 f822 	bl	800cf84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e000      	b.n	800cf60 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
  }
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf76:	b2db      	uxtb	r3, r3
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	699a      	ldr	r2, [r3, #24]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f042 0208 	orr.w	r2, r2, #8
 800cfa2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	699a      	ldr	r2, [r3, #24]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f042 0210 	orr.w	r2, r2, #16
 800cfb2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f022 0201 	bic.w	r2, r2, #1
 800cfc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6919      	ldr	r1, [r3, #16]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4b3c      	ldr	r3, [pc, #240]	@ (800d0c0 <SPI_CloseTransfer+0x13c>)
 800cfd0:	400b      	ands	r3, r1
 800cfd2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	689a      	ldr	r2, [r3, #8]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cfe2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	2b04      	cmp	r3, #4
 800cfee:	d014      	beq.n	800d01a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f003 0320 	and.w	r3, r3, #32
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00f      	beq.n	800d01a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d000:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	699a      	ldr	r2, [r3, #24]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f042 0220 	orr.w	r2, r2, #32
 800d018:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b03      	cmp	r3, #3
 800d024:	d014      	beq.n	800d050 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00f      	beq.n	800d050 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d036:	f043 0204 	orr.w	r2, r3, #4
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	699a      	ldr	r2, [r3, #24]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d04e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00f      	beq.n	800d07a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d060:	f043 0201 	orr.w	r2, r3, #1
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	699a      	ldr	r2, [r3, #24]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d078:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00f      	beq.n	800d0a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d08a:	f043 0208 	orr.w	r2, r3, #8
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	699a      	ldr	r2, [r3, #24]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d0a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d0b4:	bf00      	nop
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	fffffc90 	.word	0xfffffc90

0800d0c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	603b      	str	r3, [r7, #0]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d0d4:	e010      	b.n	800d0f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0d6:	f7f6 fc11 	bl	80038fc <HAL_GetTick>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d803      	bhi.n	800d0ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ec:	d102      	bne.n	800d0f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e00f      	b.n	800d118 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	695a      	ldr	r2, [r3, #20]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	4013      	ands	r3, r2
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	429a      	cmp	r2, r3
 800d106:	bf0c      	ite	eq
 800d108:	2301      	moveq	r3, #1
 800d10a:	2300      	movne	r3, #0
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	461a      	mov	r2, r3
 800d110:	79fb      	ldrb	r3, [r7, #7]
 800d112:	429a      	cmp	r2, r3
 800d114:	d0df      	beq.n	800d0d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d12c:	095b      	lsrs	r3, r3, #5
 800d12e:	3301      	adds	r3, #1
 800d130:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	3301      	adds	r3, #1
 800d138:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	3307      	adds	r3, #7
 800d13e:	08db      	lsrs	r3, r3, #3
 800d140:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	fb02 f303 	mul.w	r3, r2, r3
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	e049      	b.n	800d1fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7f6 f89f 	bl	80032c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2202      	movs	r2, #2
 800d186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	3304      	adds	r3, #4
 800d192:	4619      	mov	r1, r3
 800d194:	4610      	mov	r0, r2
 800d196:	f000 fd6b 	bl	800dc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d212:	b2db      	uxtb	r3, r3
 800d214:	2b01      	cmp	r3, #1
 800d216:	d001      	beq.n	800d21c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	e05e      	b.n	800d2da <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2202      	movs	r2, #2
 800d220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68da      	ldr	r2, [r3, #12]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f042 0201 	orr.w	r2, r2, #1
 800d232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a2b      	ldr	r2, [pc, #172]	@ (800d2e8 <HAL_TIM_Base_Start_IT+0xe4>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d02c      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d246:	d027      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a27      	ldr	r2, [pc, #156]	@ (800d2ec <HAL_TIM_Base_Start_IT+0xe8>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d022      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a26      	ldr	r2, [pc, #152]	@ (800d2f0 <HAL_TIM_Base_Start_IT+0xec>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d01d      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a24      	ldr	r2, [pc, #144]	@ (800d2f4 <HAL_TIM_Base_Start_IT+0xf0>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d018      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a23      	ldr	r2, [pc, #140]	@ (800d2f8 <HAL_TIM_Base_Start_IT+0xf4>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d013      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a21      	ldr	r2, [pc, #132]	@ (800d2fc <HAL_TIM_Base_Start_IT+0xf8>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d00e      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a20      	ldr	r2, [pc, #128]	@ (800d300 <HAL_TIM_Base_Start_IT+0xfc>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d009      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a1e      	ldr	r2, [pc, #120]	@ (800d304 <HAL_TIM_Base_Start_IT+0x100>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d004      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x94>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a1d      	ldr	r2, [pc, #116]	@ (800d308 <HAL_TIM_Base_Start_IT+0x104>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d115      	bne.n	800d2c4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	689a      	ldr	r2, [r3, #8]
 800d29e:	4b1b      	ldr	r3, [pc, #108]	@ (800d30c <HAL_TIM_Base_Start_IT+0x108>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b06      	cmp	r3, #6
 800d2a8:	d015      	beq.n	800d2d6 <HAL_TIM_Base_Start_IT+0xd2>
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2b0:	d011      	beq.n	800d2d6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f042 0201 	orr.w	r2, r2, #1
 800d2c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c2:	e008      	b.n	800d2d6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f042 0201 	orr.w	r2, r2, #1
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	e000      	b.n	800d2d8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	40010000 	.word	0x40010000
 800d2ec:	40000400 	.word	0x40000400
 800d2f0:	40000800 	.word	0x40000800
 800d2f4:	40000c00 	.word	0x40000c00
 800d2f8:	40010400 	.word	0x40010400
 800d2fc:	40001800 	.word	0x40001800
 800d300:	40014000 	.word	0x40014000
 800d304:	4000e000 	.word	0x4000e000
 800d308:	4000e400 	.word	0x4000e400
 800d30c:	00010007 	.word	0x00010007

0800d310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e049      	b.n	800d3b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d106      	bne.n	800d33c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7f5 ff9c 	bl	8003274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2202      	movs	r2, #2
 800d340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3304      	adds	r3, #4
 800d34c:	4619      	mov	r1, r3
 800d34e:	4610      	mov	r0, r2
 800d350:	f000 fc8e 	bl	800dc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d109      	bne.n	800d3e4 <HAL_TIM_PWM_Start+0x24>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	bf14      	ite	ne
 800d3dc:	2301      	movne	r3, #1
 800d3de:	2300      	moveq	r3, #0
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	e03c      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b04      	cmp	r3, #4
 800d3e8:	d109      	bne.n	800d3fe <HAL_TIM_PWM_Start+0x3e>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	bf14      	ite	ne
 800d3f6:	2301      	movne	r3, #1
 800d3f8:	2300      	moveq	r3, #0
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	e02f      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2b08      	cmp	r3, #8
 800d402:	d109      	bne.n	800d418 <HAL_TIM_PWM_Start+0x58>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	bf14      	ite	ne
 800d410:	2301      	movne	r3, #1
 800d412:	2300      	moveq	r3, #0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	e022      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2b0c      	cmp	r3, #12
 800d41c:	d109      	bne.n	800d432 <HAL_TIM_PWM_Start+0x72>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d424:	b2db      	uxtb	r3, r3
 800d426:	2b01      	cmp	r3, #1
 800d428:	bf14      	ite	ne
 800d42a:	2301      	movne	r3, #1
 800d42c:	2300      	moveq	r3, #0
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	e015      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	2b10      	cmp	r3, #16
 800d436:	d109      	bne.n	800d44c <HAL_TIM_PWM_Start+0x8c>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	2b01      	cmp	r3, #1
 800d442:	bf14      	ite	ne
 800d444:	2301      	movne	r3, #1
 800d446:	2300      	moveq	r3, #0
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	e008      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b01      	cmp	r3, #1
 800d456:	bf14      	ite	ne
 800d458:	2301      	movne	r3, #1
 800d45a:	2300      	moveq	r3, #0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e0ab      	b.n	800d5be <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d104      	bne.n	800d476 <HAL_TIM_PWM_Start+0xb6>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2202      	movs	r2, #2
 800d470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d474:	e023      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	2b04      	cmp	r3, #4
 800d47a:	d104      	bne.n	800d486 <HAL_TIM_PWM_Start+0xc6>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2202      	movs	r2, #2
 800d480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d484:	e01b      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2b08      	cmp	r3, #8
 800d48a:	d104      	bne.n	800d496 <HAL_TIM_PWM_Start+0xd6>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2202      	movs	r2, #2
 800d490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d494:	e013      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b0c      	cmp	r3, #12
 800d49a:	d104      	bne.n	800d4a6 <HAL_TIM_PWM_Start+0xe6>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2202      	movs	r2, #2
 800d4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4a4:	e00b      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b10      	cmp	r3, #16
 800d4aa:	d104      	bne.n	800d4b6 <HAL_TIM_PWM_Start+0xf6>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4b4:	e003      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 fff8 	bl	800e4bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a3d      	ldr	r2, [pc, #244]	@ (800d5c8 <HAL_TIM_PWM_Start+0x208>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d013      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a3c      	ldr	r2, [pc, #240]	@ (800d5cc <HAL_TIM_PWM_Start+0x20c>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d00e      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a3a      	ldr	r2, [pc, #232]	@ (800d5d0 <HAL_TIM_PWM_Start+0x210>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d009      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a39      	ldr	r2, [pc, #228]	@ (800d5d4 <HAL_TIM_PWM_Start+0x214>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d004      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a37      	ldr	r2, [pc, #220]	@ (800d5d8 <HAL_TIM_PWM_Start+0x218>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d101      	bne.n	800d502 <HAL_TIM_PWM_Start+0x142>
 800d4fe:	2301      	movs	r3, #1
 800d500:	e000      	b.n	800d504 <HAL_TIM_PWM_Start+0x144>
 800d502:	2300      	movs	r3, #0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d007      	beq.n	800d518 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d516:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a2a      	ldr	r2, [pc, #168]	@ (800d5c8 <HAL_TIM_PWM_Start+0x208>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d02c      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d52a:	d027      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a2a      	ldr	r2, [pc, #168]	@ (800d5dc <HAL_TIM_PWM_Start+0x21c>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d022      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a29      	ldr	r2, [pc, #164]	@ (800d5e0 <HAL_TIM_PWM_Start+0x220>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d01d      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a27      	ldr	r2, [pc, #156]	@ (800d5e4 <HAL_TIM_PWM_Start+0x224>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d018      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a1f      	ldr	r2, [pc, #124]	@ (800d5cc <HAL_TIM_PWM_Start+0x20c>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d013      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a23      	ldr	r2, [pc, #140]	@ (800d5e8 <HAL_TIM_PWM_Start+0x228>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d00e      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a1b      	ldr	r2, [pc, #108]	@ (800d5d0 <HAL_TIM_PWM_Start+0x210>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d009      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a1f      	ldr	r2, [pc, #124]	@ (800d5ec <HAL_TIM_PWM_Start+0x22c>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d004      	beq.n	800d57c <HAL_TIM_PWM_Start+0x1bc>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a1e      	ldr	r2, [pc, #120]	@ (800d5f0 <HAL_TIM_PWM_Start+0x230>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d115      	bne.n	800d5a8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689a      	ldr	r2, [r3, #8]
 800d582:	4b1c      	ldr	r3, [pc, #112]	@ (800d5f4 <HAL_TIM_PWM_Start+0x234>)
 800d584:	4013      	ands	r3, r2
 800d586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2b06      	cmp	r3, #6
 800d58c:	d015      	beq.n	800d5ba <HAL_TIM_PWM_Start+0x1fa>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d594:	d011      	beq.n	800d5ba <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f042 0201 	orr.w	r2, r2, #1
 800d5a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5a6:	e008      	b.n	800d5ba <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f042 0201 	orr.w	r2, r2, #1
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	e000      	b.n	800d5bc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	40010000 	.word	0x40010000
 800d5cc:	40010400 	.word	0x40010400
 800d5d0:	40014000 	.word	0x40014000
 800d5d4:	40014400 	.word	0x40014400
 800d5d8:	40014800 	.word	0x40014800
 800d5dc:	40000400 	.word	0x40000400
 800d5e0:	40000800 	.word	0x40000800
 800d5e4:	40000c00 	.word	0x40000c00
 800d5e8:	40001800 	.word	0x40001800
 800d5ec:	4000e000 	.word	0x4000e000
 800d5f0:	4000e400 	.word	0x4000e400
 800d5f4:	00010007 	.word	0x00010007

0800d5f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	691b      	ldr	r3, [r3, #16]
 800d60e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	f003 0302 	and.w	r3, r3, #2
 800d616:	2b00      	cmp	r3, #0
 800d618:	d020      	beq.n	800d65c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f003 0302 	and.w	r3, r3, #2
 800d620:	2b00      	cmp	r3, #0
 800d622:	d01b      	beq.n	800d65c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f06f 0202 	mvn.w	r2, #2
 800d62c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2201      	movs	r2, #1
 800d632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	699b      	ldr	r3, [r3, #24]
 800d63a:	f003 0303 	and.w	r3, r3, #3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 faf6 	bl	800dc34 <HAL_TIM_IC_CaptureCallback>
 800d648:	e005      	b.n	800d656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fae8 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 faf9 	bl	800dc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	f003 0304 	and.w	r3, r3, #4
 800d662:	2b00      	cmp	r3, #0
 800d664:	d020      	beq.n	800d6a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f003 0304 	and.w	r3, r3, #4
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d01b      	beq.n	800d6a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f06f 0204 	mvn.w	r2, #4
 800d678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2202      	movs	r2, #2
 800d67e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fad0 	bl	800dc34 <HAL_TIM_IC_CaptureCallback>
 800d694:	e005      	b.n	800d6a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 fac2 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 fad3 	bl	800dc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	f003 0308 	and.w	r3, r3, #8
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d020      	beq.n	800d6f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f003 0308 	and.w	r3, r3, #8
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d01b      	beq.n	800d6f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f06f 0208 	mvn.w	r2, #8
 800d6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2204      	movs	r2, #4
 800d6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	f003 0303 	and.w	r3, r3, #3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d003      	beq.n	800d6e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 faaa 	bl	800dc34 <HAL_TIM_IC_CaptureCallback>
 800d6e0:	e005      	b.n	800d6ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fa9c 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 faad 	bl	800dc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f003 0310 	and.w	r3, r3, #16
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d020      	beq.n	800d740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f003 0310 	and.w	r3, r3, #16
 800d704:	2b00      	cmp	r3, #0
 800d706:	d01b      	beq.n	800d740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f06f 0210 	mvn.w	r2, #16
 800d710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2208      	movs	r2, #8
 800d716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	69db      	ldr	r3, [r3, #28]
 800d71e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fa84 	bl	800dc34 <HAL_TIM_IC_CaptureCallback>
 800d72c:	e005      	b.n	800d73a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fa76 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fa87 	bl	800dc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00c      	beq.n	800d764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	d007      	beq.n	800d764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f06f 0201 	mvn.w	r2, #1
 800d75c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7f4 f900 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d104      	bne.n	800d778 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00c      	beq.n	800d792 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d007      	beq.n	800d792 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 ff61 	bl	800e654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00c      	beq.n	800d7b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d007      	beq.n	800d7b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 ff59 	bl	800e668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00c      	beq.n	800d7da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d007      	beq.n	800d7da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fa41 	bl	800dc5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	f003 0320 	and.w	r3, r3, #32
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00c      	beq.n	800d7fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d007      	beq.n	800d7fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f06f 0220 	mvn.w	r2, #32
 800d7f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 ff21 	bl	800e640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7fe:	bf00      	nop
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
	...

0800d808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d814:	2300      	movs	r3, #0
 800d816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d101      	bne.n	800d826 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d822:	2302      	movs	r3, #2
 800d824:	e0ff      	b.n	800da26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b14      	cmp	r3, #20
 800d832:	f200 80f0 	bhi.w	800da16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d836:	a201      	add	r2, pc, #4	@ (adr r2, 800d83c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d83c:	0800d891 	.word	0x0800d891
 800d840:	0800da17 	.word	0x0800da17
 800d844:	0800da17 	.word	0x0800da17
 800d848:	0800da17 	.word	0x0800da17
 800d84c:	0800d8d1 	.word	0x0800d8d1
 800d850:	0800da17 	.word	0x0800da17
 800d854:	0800da17 	.word	0x0800da17
 800d858:	0800da17 	.word	0x0800da17
 800d85c:	0800d913 	.word	0x0800d913
 800d860:	0800da17 	.word	0x0800da17
 800d864:	0800da17 	.word	0x0800da17
 800d868:	0800da17 	.word	0x0800da17
 800d86c:	0800d953 	.word	0x0800d953
 800d870:	0800da17 	.word	0x0800da17
 800d874:	0800da17 	.word	0x0800da17
 800d878:	0800da17 	.word	0x0800da17
 800d87c:	0800d995 	.word	0x0800d995
 800d880:	0800da17 	.word	0x0800da17
 800d884:	0800da17 	.word	0x0800da17
 800d888:	0800da17 	.word	0x0800da17
 800d88c:	0800d9d5 	.word	0x0800d9d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68b9      	ldr	r1, [r7, #8]
 800d896:	4618      	mov	r0, r3
 800d898:	f000 fa9c 	bl	800ddd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	699a      	ldr	r2, [r3, #24]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f042 0208 	orr.w	r2, r2, #8
 800d8aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	699a      	ldr	r2, [r3, #24]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f022 0204 	bic.w	r2, r2, #4
 800d8ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	6999      	ldr	r1, [r3, #24]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	691a      	ldr	r2, [r3, #16]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	619a      	str	r2, [r3, #24]
      break;
 800d8ce:	e0a5      	b.n	800da1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68b9      	ldr	r1, [r7, #8]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 fb0c 	bl	800def4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	699a      	ldr	r2, [r3, #24]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d8ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	699a      	ldr	r2, [r3, #24]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d8fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6999      	ldr	r1, [r3, #24]
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	021a      	lsls	r2, r3, #8
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	430a      	orrs	r2, r1
 800d90e:	619a      	str	r2, [r3, #24]
      break;
 800d910:	e084      	b.n	800da1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68b9      	ldr	r1, [r7, #8]
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fb75 	bl	800e008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	69da      	ldr	r2, [r3, #28]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f042 0208 	orr.w	r2, r2, #8
 800d92c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	69da      	ldr	r2, [r3, #28]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f022 0204 	bic.w	r2, r2, #4
 800d93c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	69d9      	ldr	r1, [r3, #28]
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	691a      	ldr	r2, [r3, #16]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	430a      	orrs	r2, r1
 800d94e:	61da      	str	r2, [r3, #28]
      break;
 800d950:	e064      	b.n	800da1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68b9      	ldr	r1, [r7, #8]
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 fbdd 	bl	800e118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	69da      	ldr	r2, [r3, #28]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d96c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	69da      	ldr	r2, [r3, #28]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d97c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	69d9      	ldr	r1, [r3, #28]
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	021a      	lsls	r2, r3, #8
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	430a      	orrs	r2, r1
 800d990:	61da      	str	r2, [r3, #28]
      break;
 800d992:	e043      	b.n	800da1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	68b9      	ldr	r1, [r7, #8]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 fc26 	bl	800e1ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f042 0208 	orr.w	r2, r2, #8
 800d9ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f022 0204 	bic.w	r2, r2, #4
 800d9be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	691a      	ldr	r2, [r3, #16]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	430a      	orrs	r2, r1
 800d9d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9d2:	e023      	b.n	800da1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	68b9      	ldr	r1, [r7, #8]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 fc6a 	bl	800e2b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	021a      	lsls	r2, r3, #8
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	430a      	orrs	r2, r1
 800da12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800da14:	e002      	b.n	800da1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	75fb      	strb	r3, [r7, #23]
      break;
 800da1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop

0800da30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da44:	2b01      	cmp	r3, #1
 800da46:	d101      	bne.n	800da4c <HAL_TIM_ConfigClockSource+0x1c>
 800da48:	2302      	movs	r3, #2
 800da4a:	e0dc      	b.n	800dc06 <HAL_TIM_ConfigClockSource+0x1d6>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2202      	movs	r2, #2
 800da58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	4b6a      	ldr	r3, [pc, #424]	@ (800dc10 <HAL_TIM_ConfigClockSource+0x1e0>)
 800da68:	4013      	ands	r3, r2
 800da6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800da72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a64      	ldr	r2, [pc, #400]	@ (800dc14 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da82:	4293      	cmp	r3, r2
 800da84:	f000 80a9 	beq.w	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800da88:	4a62      	ldr	r2, [pc, #392]	@ (800dc14 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	f200 80ae 	bhi.w	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800da90:	4a61      	ldr	r2, [pc, #388]	@ (800dc18 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da92:	4293      	cmp	r3, r2
 800da94:	f000 80a1 	beq.w	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800da98:	4a5f      	ldr	r2, [pc, #380]	@ (800dc18 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	f200 80a6 	bhi.w	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800daa0:	4a5e      	ldr	r2, [pc, #376]	@ (800dc1c <HAL_TIM_ConfigClockSource+0x1ec>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	f000 8099 	beq.w	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800daa8:	4a5c      	ldr	r2, [pc, #368]	@ (800dc1c <HAL_TIM_ConfigClockSource+0x1ec>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	f200 809e 	bhi.w	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800dab0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dab4:	f000 8091 	beq.w	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800dab8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dabc:	f200 8096 	bhi.w	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800dac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dac4:	f000 8089 	beq.w	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800dac8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dacc:	f200 808e 	bhi.w	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800dad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dad4:	d03e      	beq.n	800db54 <HAL_TIM_ConfigClockSource+0x124>
 800dad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dada:	f200 8087 	bhi.w	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800dade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dae2:	f000 8086 	beq.w	800dbf2 <HAL_TIM_ConfigClockSource+0x1c2>
 800dae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800daea:	d87f      	bhi.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800daec:	2b70      	cmp	r3, #112	@ 0x70
 800daee:	d01a      	beq.n	800db26 <HAL_TIM_ConfigClockSource+0xf6>
 800daf0:	2b70      	cmp	r3, #112	@ 0x70
 800daf2:	d87b      	bhi.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800daf4:	2b60      	cmp	r3, #96	@ 0x60
 800daf6:	d050      	beq.n	800db9a <HAL_TIM_ConfigClockSource+0x16a>
 800daf8:	2b60      	cmp	r3, #96	@ 0x60
 800dafa:	d877      	bhi.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800dafc:	2b50      	cmp	r3, #80	@ 0x50
 800dafe:	d03c      	beq.n	800db7a <HAL_TIM_ConfigClockSource+0x14a>
 800db00:	2b50      	cmp	r3, #80	@ 0x50
 800db02:	d873      	bhi.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800db04:	2b40      	cmp	r3, #64	@ 0x40
 800db06:	d058      	beq.n	800dbba <HAL_TIM_ConfigClockSource+0x18a>
 800db08:	2b40      	cmp	r3, #64	@ 0x40
 800db0a:	d86f      	bhi.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800db0c:	2b30      	cmp	r3, #48	@ 0x30
 800db0e:	d064      	beq.n	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800db10:	2b30      	cmp	r3, #48	@ 0x30
 800db12:	d86b      	bhi.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800db14:	2b20      	cmp	r3, #32
 800db16:	d060      	beq.n	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800db18:	2b20      	cmp	r3, #32
 800db1a:	d867      	bhi.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d05c      	beq.n	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800db20:	2b10      	cmp	r3, #16
 800db22:	d05a      	beq.n	800dbda <HAL_TIM_ConfigClockSource+0x1aa>
 800db24:	e062      	b.n	800dbec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db36:	f000 fca1 	bl	800e47c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800db48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	609a      	str	r2, [r3, #8]
      break;
 800db52:	e04f      	b.n	800dbf4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db64:	f000 fc8a 	bl	800e47c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	689a      	ldr	r2, [r3, #8]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800db76:	609a      	str	r2, [r3, #8]
      break;
 800db78:	e03c      	b.n	800dbf4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db86:	461a      	mov	r2, r3
 800db88:	f000 fbfa 	bl	800e380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2150      	movs	r1, #80	@ 0x50
 800db92:	4618      	mov	r0, r3
 800db94:	f000 fc54 	bl	800e440 <TIM_ITRx_SetConfig>
      break;
 800db98:	e02c      	b.n	800dbf4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dba6:	461a      	mov	r2, r3
 800dba8:	f000 fc19 	bl	800e3de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2160      	movs	r1, #96	@ 0x60
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 fc44 	bl	800e440 <TIM_ITRx_SetConfig>
      break;
 800dbb8:	e01c      	b.n	800dbf4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	f000 fbda 	bl	800e380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2140      	movs	r1, #64	@ 0x40
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 fc34 	bl	800e440 <TIM_ITRx_SetConfig>
      break;
 800dbd8:	e00c      	b.n	800dbf4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f000 fc2b 	bl	800e440 <TIM_ITRx_SetConfig>
      break;
 800dbea:	e003      	b.n	800dbf4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf0:	e000      	b.n	800dbf4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dbf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	ffceff88 	.word	0xffceff88
 800dc14:	00100040 	.word	0x00100040
 800dc18:	00100030 	.word	0x00100030
 800dc1c:	00100020 	.word	0x00100020

0800dc20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	4a4a      	ldr	r2, [pc, #296]	@ (800ddac <TIM_Base_SetConfig+0x13c>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d013      	beq.n	800dcb0 <TIM_Base_SetConfig+0x40>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc8e:	d00f      	beq.n	800dcb0 <TIM_Base_SetConfig+0x40>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a47      	ldr	r2, [pc, #284]	@ (800ddb0 <TIM_Base_SetConfig+0x140>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d00b      	beq.n	800dcb0 <TIM_Base_SetConfig+0x40>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	4a46      	ldr	r2, [pc, #280]	@ (800ddb4 <TIM_Base_SetConfig+0x144>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d007      	beq.n	800dcb0 <TIM_Base_SetConfig+0x40>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a45      	ldr	r2, [pc, #276]	@ (800ddb8 <TIM_Base_SetConfig+0x148>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d003      	beq.n	800dcb0 <TIM_Base_SetConfig+0x40>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a44      	ldr	r2, [pc, #272]	@ (800ddbc <TIM_Base_SetConfig+0x14c>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d108      	bne.n	800dcc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a39      	ldr	r2, [pc, #228]	@ (800ddac <TIM_Base_SetConfig+0x13c>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d027      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcd0:	d023      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a36      	ldr	r2, [pc, #216]	@ (800ddb0 <TIM_Base_SetConfig+0x140>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d01f      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4a35      	ldr	r2, [pc, #212]	@ (800ddb4 <TIM_Base_SetConfig+0x144>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d01b      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a34      	ldr	r2, [pc, #208]	@ (800ddb8 <TIM_Base_SetConfig+0x148>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d017      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a33      	ldr	r2, [pc, #204]	@ (800ddbc <TIM_Base_SetConfig+0x14c>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d013      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a32      	ldr	r2, [pc, #200]	@ (800ddc0 <TIM_Base_SetConfig+0x150>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d00f      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a31      	ldr	r2, [pc, #196]	@ (800ddc4 <TIM_Base_SetConfig+0x154>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d00b      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a30      	ldr	r2, [pc, #192]	@ (800ddc8 <TIM_Base_SetConfig+0x158>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d007      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a2f      	ldr	r2, [pc, #188]	@ (800ddcc <TIM_Base_SetConfig+0x15c>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d003      	beq.n	800dd1a <TIM_Base_SetConfig+0xaa>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a2e      	ldr	r2, [pc, #184]	@ (800ddd0 <TIM_Base_SetConfig+0x160>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d108      	bne.n	800dd2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	695b      	ldr	r3, [r3, #20]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	689a      	ldr	r2, [r3, #8]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a16      	ldr	r2, [pc, #88]	@ (800ddac <TIM_Base_SetConfig+0x13c>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d00f      	beq.n	800dd78 <TIM_Base_SetConfig+0x108>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a18      	ldr	r2, [pc, #96]	@ (800ddbc <TIM_Base_SetConfig+0x14c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d00b      	beq.n	800dd78 <TIM_Base_SetConfig+0x108>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a17      	ldr	r2, [pc, #92]	@ (800ddc0 <TIM_Base_SetConfig+0x150>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d007      	beq.n	800dd78 <TIM_Base_SetConfig+0x108>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a16      	ldr	r2, [pc, #88]	@ (800ddc4 <TIM_Base_SetConfig+0x154>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d003      	beq.n	800dd78 <TIM_Base_SetConfig+0x108>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a15      	ldr	r2, [pc, #84]	@ (800ddc8 <TIM_Base_SetConfig+0x158>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d103      	bne.n	800dd80 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	691a      	ldr	r2, [r3, #16]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d105      	bne.n	800dd9e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	f023 0201 	bic.w	r2, r3, #1
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	611a      	str	r2, [r3, #16]
  }
}
 800dd9e:	bf00      	nop
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	40010000 	.word	0x40010000
 800ddb0:	40000400 	.word	0x40000400
 800ddb4:	40000800 	.word	0x40000800
 800ddb8:	40000c00 	.word	0x40000c00
 800ddbc:	40010400 	.word	0x40010400
 800ddc0:	40014000 	.word	0x40014000
 800ddc4:	40014400 	.word	0x40014400
 800ddc8:	40014800 	.word	0x40014800
 800ddcc:	4000e000 	.word	0x4000e000
 800ddd0:	4000e400 	.word	0x4000e400

0800ddd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b087      	sub	sp, #28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	f023 0201 	bic.w	r2, r3, #1
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	4b37      	ldr	r3, [pc, #220]	@ (800dedc <TIM_OC1_SetConfig+0x108>)
 800de00:	4013      	ands	r3, r2
 800de02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f023 0303 	bic.w	r3, r3, #3
 800de0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	4313      	orrs	r3, r2
 800de14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f023 0302 	bic.w	r3, r3, #2
 800de1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	689b      	ldr	r3, [r3, #8]
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	4313      	orrs	r3, r2
 800de26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a2d      	ldr	r2, [pc, #180]	@ (800dee0 <TIM_OC1_SetConfig+0x10c>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d00f      	beq.n	800de50 <TIM_OC1_SetConfig+0x7c>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a2c      	ldr	r2, [pc, #176]	@ (800dee4 <TIM_OC1_SetConfig+0x110>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d00b      	beq.n	800de50 <TIM_OC1_SetConfig+0x7c>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a2b      	ldr	r2, [pc, #172]	@ (800dee8 <TIM_OC1_SetConfig+0x114>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d007      	beq.n	800de50 <TIM_OC1_SetConfig+0x7c>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a2a      	ldr	r2, [pc, #168]	@ (800deec <TIM_OC1_SetConfig+0x118>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d003      	beq.n	800de50 <TIM_OC1_SetConfig+0x7c>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a29      	ldr	r2, [pc, #164]	@ (800def0 <TIM_OC1_SetConfig+0x11c>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d10c      	bne.n	800de6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f023 0308 	bic.w	r3, r3, #8
 800de56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	697a      	ldr	r2, [r7, #20]
 800de5e:	4313      	orrs	r3, r2
 800de60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f023 0304 	bic.w	r3, r3, #4
 800de68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4a1c      	ldr	r2, [pc, #112]	@ (800dee0 <TIM_OC1_SetConfig+0x10c>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d00f      	beq.n	800de92 <TIM_OC1_SetConfig+0xbe>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4a1b      	ldr	r2, [pc, #108]	@ (800dee4 <TIM_OC1_SetConfig+0x110>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d00b      	beq.n	800de92 <TIM_OC1_SetConfig+0xbe>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4a1a      	ldr	r2, [pc, #104]	@ (800dee8 <TIM_OC1_SetConfig+0x114>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d007      	beq.n	800de92 <TIM_OC1_SetConfig+0xbe>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a19      	ldr	r2, [pc, #100]	@ (800deec <TIM_OC1_SetConfig+0x118>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d003      	beq.n	800de92 <TIM_OC1_SetConfig+0xbe>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4a18      	ldr	r2, [pc, #96]	@ (800def0 <TIM_OC1_SetConfig+0x11c>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d111      	bne.n	800deb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	693a      	ldr	r2, [r7, #16]
 800deba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	697a      	ldr	r2, [r7, #20]
 800dece:	621a      	str	r2, [r3, #32]
}
 800ded0:	bf00      	nop
 800ded2:	371c      	adds	r7, #28
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	fffeff8f 	.word	0xfffeff8f
 800dee0:	40010000 	.word	0x40010000
 800dee4:	40010400 	.word	0x40010400
 800dee8:	40014000 	.word	0x40014000
 800deec:	40014400 	.word	0x40014400
 800def0:	40014800 	.word	0x40014800

0800def4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800def4:	b480      	push	{r7}
 800def6:	b087      	sub	sp, #28
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6a1b      	ldr	r3, [r3, #32]
 800df08:	f023 0210 	bic.w	r2, r3, #16
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	4b34      	ldr	r3, [pc, #208]	@ (800dff0 <TIM_OC2_SetConfig+0xfc>)
 800df20:	4013      	ands	r3, r2
 800df22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	021b      	lsls	r3, r3, #8
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	4313      	orrs	r3, r2
 800df36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	f023 0320 	bic.w	r3, r3, #32
 800df3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	011b      	lsls	r3, r3, #4
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	4313      	orrs	r3, r2
 800df4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4a29      	ldr	r2, [pc, #164]	@ (800dff4 <TIM_OC2_SetConfig+0x100>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d003      	beq.n	800df5c <TIM_OC2_SetConfig+0x68>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a28      	ldr	r2, [pc, #160]	@ (800dff8 <TIM_OC2_SetConfig+0x104>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d10d      	bne.n	800df78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	011b      	lsls	r3, r3, #4
 800df6a:	697a      	ldr	r2, [r7, #20]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4a1e      	ldr	r2, [pc, #120]	@ (800dff4 <TIM_OC2_SetConfig+0x100>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d00f      	beq.n	800dfa0 <TIM_OC2_SetConfig+0xac>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4a1d      	ldr	r2, [pc, #116]	@ (800dff8 <TIM_OC2_SetConfig+0x104>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d00b      	beq.n	800dfa0 <TIM_OC2_SetConfig+0xac>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	4a1c      	ldr	r2, [pc, #112]	@ (800dffc <TIM_OC2_SetConfig+0x108>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d007      	beq.n	800dfa0 <TIM_OC2_SetConfig+0xac>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4a1b      	ldr	r2, [pc, #108]	@ (800e000 <TIM_OC2_SetConfig+0x10c>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d003      	beq.n	800dfa0 <TIM_OC2_SetConfig+0xac>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a1a      	ldr	r2, [pc, #104]	@ (800e004 <TIM_OC2_SetConfig+0x110>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d113      	bne.n	800dfc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dfa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dfae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	695b      	ldr	r3, [r3, #20]
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	693a      	ldr	r2, [r7, #16]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	693a      	ldr	r2, [r7, #16]
 800dfcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	685a      	ldr	r2, [r3, #4]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	621a      	str	r2, [r3, #32]
}
 800dfe2:	bf00      	nop
 800dfe4:	371c      	adds	r7, #28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	feff8fff 	.word	0xfeff8fff
 800dff4:	40010000 	.word	0x40010000
 800dff8:	40010400 	.word	0x40010400
 800dffc:	40014000 	.word	0x40014000
 800e000:	40014400 	.word	0x40014400
 800e004:	40014800 	.word	0x40014800

0800e008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e008:	b480      	push	{r7}
 800e00a:	b087      	sub	sp, #28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	4b33      	ldr	r3, [pc, #204]	@ (800e100 <TIM_OC3_SetConfig+0xf8>)
 800e034:	4013      	ands	r3, r2
 800e036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f023 0303 	bic.w	r3, r3, #3
 800e03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	4313      	orrs	r3, r2
 800e048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	021b      	lsls	r3, r3, #8
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a28      	ldr	r2, [pc, #160]	@ (800e104 <TIM_OC3_SetConfig+0xfc>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d003      	beq.n	800e06e <TIM_OC3_SetConfig+0x66>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a27      	ldr	r2, [pc, #156]	@ (800e108 <TIM_OC3_SetConfig+0x100>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d10d      	bne.n	800e08a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	021b      	lsls	r3, r3, #8
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	4313      	orrs	r3, r2
 800e080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a1d      	ldr	r2, [pc, #116]	@ (800e104 <TIM_OC3_SetConfig+0xfc>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d00f      	beq.n	800e0b2 <TIM_OC3_SetConfig+0xaa>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4a1c      	ldr	r2, [pc, #112]	@ (800e108 <TIM_OC3_SetConfig+0x100>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d00b      	beq.n	800e0b2 <TIM_OC3_SetConfig+0xaa>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a1b      	ldr	r2, [pc, #108]	@ (800e10c <TIM_OC3_SetConfig+0x104>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d007      	beq.n	800e0b2 <TIM_OC3_SetConfig+0xaa>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a1a      	ldr	r2, [pc, #104]	@ (800e110 <TIM_OC3_SetConfig+0x108>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d003      	beq.n	800e0b2 <TIM_OC3_SetConfig+0xaa>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a19      	ldr	r2, [pc, #100]	@ (800e114 <TIM_OC3_SetConfig+0x10c>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d113      	bne.n	800e0da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e0c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	011b      	lsls	r3, r3, #4
 800e0c8:	693a      	ldr	r2, [r7, #16]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	011b      	lsls	r3, r3, #4
 800e0d4:	693a      	ldr	r2, [r7, #16]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	693a      	ldr	r2, [r7, #16]
 800e0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	685a      	ldr	r2, [r3, #4]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	697a      	ldr	r2, [r7, #20]
 800e0f2:	621a      	str	r2, [r3, #32]
}
 800e0f4:	bf00      	nop
 800e0f6:	371c      	adds	r7, #28
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	fffeff8f 	.word	0xfffeff8f
 800e104:	40010000 	.word	0x40010000
 800e108:	40010400 	.word	0x40010400
 800e10c:	40014000 	.word	0x40014000
 800e110:	40014400 	.word	0x40014400
 800e114:	40014800 	.word	0x40014800

0800e118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e118:	b480      	push	{r7}
 800e11a:	b087      	sub	sp, #28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a1b      	ldr	r3, [r3, #32]
 800e12c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	69db      	ldr	r3, [r3, #28]
 800e13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	4b24      	ldr	r3, [pc, #144]	@ (800e1d4 <TIM_OC4_SetConfig+0xbc>)
 800e144:	4013      	ands	r3, r2
 800e146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	021b      	lsls	r3, r3, #8
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	4313      	orrs	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	031b      	lsls	r3, r3, #12
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a19      	ldr	r2, [pc, #100]	@ (800e1d8 <TIM_OC4_SetConfig+0xc0>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d00f      	beq.n	800e198 <TIM_OC4_SetConfig+0x80>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a18      	ldr	r2, [pc, #96]	@ (800e1dc <TIM_OC4_SetConfig+0xc4>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00b      	beq.n	800e198 <TIM_OC4_SetConfig+0x80>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a17      	ldr	r2, [pc, #92]	@ (800e1e0 <TIM_OC4_SetConfig+0xc8>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d007      	beq.n	800e198 <TIM_OC4_SetConfig+0x80>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a16      	ldr	r2, [pc, #88]	@ (800e1e4 <TIM_OC4_SetConfig+0xcc>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d003      	beq.n	800e198 <TIM_OC4_SetConfig+0x80>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a15      	ldr	r2, [pc, #84]	@ (800e1e8 <TIM_OC4_SetConfig+0xd0>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d109      	bne.n	800e1ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e19e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	695b      	ldr	r3, [r3, #20]
 800e1a4:	019b      	lsls	r3, r3, #6
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	697a      	ldr	r2, [r7, #20]
 800e1b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	685a      	ldr	r2, [r3, #4]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	693a      	ldr	r2, [r7, #16]
 800e1c4:	621a      	str	r2, [r3, #32]
}
 800e1c6:	bf00      	nop
 800e1c8:	371c      	adds	r7, #28
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	feff8fff 	.word	0xfeff8fff
 800e1d8:	40010000 	.word	0x40010000
 800e1dc:	40010400 	.word	0x40010400
 800e1e0:	40014000 	.word	0x40014000
 800e1e4:	40014400 	.word	0x40014400
 800e1e8:	40014800 	.word	0x40014800

0800e1ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	4b21      	ldr	r3, [pc, #132]	@ (800e29c <TIM_OC5_SetConfig+0xb0>)
 800e218:	4013      	ands	r3, r2
 800e21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	4313      	orrs	r3, r2
 800e224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e22c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	041b      	lsls	r3, r3, #16
 800e234:	693a      	ldr	r2, [r7, #16]
 800e236:	4313      	orrs	r3, r2
 800e238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4a18      	ldr	r2, [pc, #96]	@ (800e2a0 <TIM_OC5_SetConfig+0xb4>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d00f      	beq.n	800e262 <TIM_OC5_SetConfig+0x76>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4a17      	ldr	r2, [pc, #92]	@ (800e2a4 <TIM_OC5_SetConfig+0xb8>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d00b      	beq.n	800e262 <TIM_OC5_SetConfig+0x76>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a16      	ldr	r2, [pc, #88]	@ (800e2a8 <TIM_OC5_SetConfig+0xbc>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d007      	beq.n	800e262 <TIM_OC5_SetConfig+0x76>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4a15      	ldr	r2, [pc, #84]	@ (800e2ac <TIM_OC5_SetConfig+0xc0>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d003      	beq.n	800e262 <TIM_OC5_SetConfig+0x76>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4a14      	ldr	r2, [pc, #80]	@ (800e2b0 <TIM_OC5_SetConfig+0xc4>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d109      	bne.n	800e276 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	695b      	ldr	r3, [r3, #20]
 800e26e:	021b      	lsls	r3, r3, #8
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	4313      	orrs	r3, r2
 800e274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	685a      	ldr	r2, [r3, #4]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	693a      	ldr	r2, [r7, #16]
 800e28e:	621a      	str	r2, [r3, #32]
}
 800e290:	bf00      	nop
 800e292:	371c      	adds	r7, #28
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	fffeff8f 	.word	0xfffeff8f
 800e2a0:	40010000 	.word	0x40010000
 800e2a4:	40010400 	.word	0x40010400
 800e2a8:	40014000 	.word	0x40014000
 800e2ac:	40014400 	.word	0x40014400
 800e2b0:	40014800 	.word	0x40014800

0800e2b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b087      	sub	sp, #28
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
 800e2c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	4b22      	ldr	r3, [pc, #136]	@ (800e368 <TIM_OC6_SetConfig+0xb4>)
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	021b      	lsls	r3, r3, #8
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e2f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	051b      	lsls	r3, r3, #20
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	4313      	orrs	r3, r2
 800e302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a19      	ldr	r2, [pc, #100]	@ (800e36c <TIM_OC6_SetConfig+0xb8>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d00f      	beq.n	800e32c <TIM_OC6_SetConfig+0x78>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a18      	ldr	r2, [pc, #96]	@ (800e370 <TIM_OC6_SetConfig+0xbc>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d00b      	beq.n	800e32c <TIM_OC6_SetConfig+0x78>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4a17      	ldr	r2, [pc, #92]	@ (800e374 <TIM_OC6_SetConfig+0xc0>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d007      	beq.n	800e32c <TIM_OC6_SetConfig+0x78>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a16      	ldr	r2, [pc, #88]	@ (800e378 <TIM_OC6_SetConfig+0xc4>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d003      	beq.n	800e32c <TIM_OC6_SetConfig+0x78>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a15      	ldr	r2, [pc, #84]	@ (800e37c <TIM_OC6_SetConfig+0xc8>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d109      	bne.n	800e340 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	695b      	ldr	r3, [r3, #20]
 800e338:	029b      	lsls	r3, r3, #10
 800e33a:	697a      	ldr	r2, [r7, #20]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	697a      	ldr	r2, [r7, #20]
 800e344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	685a      	ldr	r2, [r3, #4]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	693a      	ldr	r2, [r7, #16]
 800e358:	621a      	str	r2, [r3, #32]
}
 800e35a:	bf00      	nop
 800e35c:	371c      	adds	r7, #28
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	feff8fff 	.word	0xfeff8fff
 800e36c:	40010000 	.word	0x40010000
 800e370:	40010400 	.word	0x40010400
 800e374:	40014000 	.word	0x40014000
 800e378:	40014400 	.word	0x40014400
 800e37c:	40014800 	.word	0x40014800

0800e380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e380:	b480      	push	{r7}
 800e382:	b087      	sub	sp, #28
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6a1b      	ldr	r3, [r3, #32]
 800e390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6a1b      	ldr	r3, [r3, #32]
 800e396:	f023 0201 	bic.w	r2, r3, #1
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	699b      	ldr	r3, [r3, #24]
 800e3a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e3aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	011b      	lsls	r3, r3, #4
 800e3b0:	693a      	ldr	r2, [r7, #16]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f023 030a 	bic.w	r3, r3, #10
 800e3bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	693a      	ldr	r2, [r7, #16]
 800e3ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	621a      	str	r2, [r3, #32]
}
 800e3d2:	bf00      	nop
 800e3d4:	371c      	adds	r7, #28
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b087      	sub	sp, #28
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	60f8      	str	r0, [r7, #12]
 800e3e6:	60b9      	str	r1, [r7, #8]
 800e3e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6a1b      	ldr	r3, [r3, #32]
 800e3f4:	f023 0210 	bic.w	r2, r3, #16
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	031b      	lsls	r3, r3, #12
 800e40e:	693a      	ldr	r2, [r7, #16]
 800e410:	4313      	orrs	r3, r2
 800e412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e41a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	011b      	lsls	r3, r3, #4
 800e420:	697a      	ldr	r2, [r7, #20]
 800e422:	4313      	orrs	r3, r2
 800e424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	693a      	ldr	r2, [r7, #16]
 800e42a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	697a      	ldr	r2, [r7, #20]
 800e430:	621a      	str	r2, [r3, #32]
}
 800e432:	bf00      	nop
 800e434:	371c      	adds	r7, #28
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
	...

0800e440 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	4b09      	ldr	r3, [pc, #36]	@ (800e478 <TIM_ITRx_SetConfig+0x38>)
 800e454:	4013      	ands	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	f043 0307 	orr.w	r3, r3, #7
 800e462:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	609a      	str	r2, [r3, #8]
}
 800e46a:	bf00      	nop
 800e46c:	3714      	adds	r7, #20
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	ffcfff8f 	.word	0xffcfff8f

0800e47c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	021a      	lsls	r2, r3, #8
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	431a      	orrs	r2, r3
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	697a      	ldr	r2, [r7, #20]
 800e4ae:	609a      	str	r2, [r3, #8]
}
 800e4b0:	bf00      	nop
 800e4b2:	371c      	adds	r7, #28
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b087      	sub	sp, #28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	f003 031f 	and.w	r3, r3, #31
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6a1a      	ldr	r2, [r3, #32]
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	43db      	mvns	r3, r3
 800e4de:	401a      	ands	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6a1a      	ldr	r2, [r3, #32]
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f003 031f 	and.w	r3, r3, #31
 800e4ee:	6879      	ldr	r1, [r7, #4]
 800e4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800e4f4:	431a      	orrs	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	621a      	str	r2, [r3, #32]
}
 800e4fa:	bf00      	nop
 800e4fc:	371c      	adds	r7, #28
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
	...

0800e508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d101      	bne.n	800e520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e51c:	2302      	movs	r3, #2
 800e51e:	e077      	b.n	800e610 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2202      	movs	r2, #2
 800e52c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a35      	ldr	r2, [pc, #212]	@ (800e61c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d004      	beq.n	800e554 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a34      	ldr	r2, [pc, #208]	@ (800e620 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d108      	bne.n	800e566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e55a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	68fa      	ldr	r2, [r7, #12]
 800e562:	4313      	orrs	r3, r2
 800e564:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e56c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	4313      	orrs	r3, r2
 800e576:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	68fa      	ldr	r2, [r7, #12]
 800e57e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a25      	ldr	r2, [pc, #148]	@ (800e61c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d02c      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e592:	d027      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a22      	ldr	r2, [pc, #136]	@ (800e624 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d022      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4a21      	ldr	r2, [pc, #132]	@ (800e628 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d01d      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a1f      	ldr	r2, [pc, #124]	@ (800e62c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d018      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a1a      	ldr	r2, [pc, #104]	@ (800e620 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d013      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a1b      	ldr	r2, [pc, #108]	@ (800e630 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d00e      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e634 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d009      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a18      	ldr	r2, [pc, #96]	@ (800e638 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d004      	beq.n	800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4a17      	ldr	r2, [pc, #92]	@ (800e63c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d10c      	bne.n	800e5fe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e5ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3714      	adds	r7, #20
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	40010000 	.word	0x40010000
 800e620:	40010400 	.word	0x40010400
 800e624:	40000400 	.word	0x40000400
 800e628:	40000800 	.word	0x40000800
 800e62c:	40000c00 	.word	0x40000c00
 800e630:	40001800 	.word	0x40001800
 800e634:	40014000 	.word	0x40014000
 800e638:	4000e000 	.word	0x4000e000
 800e63c:	4000e400 	.word	0x4000e400

0800e640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e648:	bf00      	nop
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e65c:	bf00      	nop
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e670:	bf00      	nop
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	e042      	b.n	800e714 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e694:	2b00      	cmp	r3, #0
 800e696:	d106      	bne.n	800e6a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f7f4 fe8d 	bl	80033c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2224      	movs	r2, #36	@ 0x24
 800e6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f022 0201 	bic.w	r2, r2, #1
 800e6bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f001 fafa 	bl	800fcc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fc8b 	bl	800efe8 <UART_SetConfig>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d101      	bne.n	800e6dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e01b      	b.n	800e714 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e6ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	689a      	ldr	r2, [r3, #8]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e6fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f042 0201 	orr.w	r2, r2, #1
 800e70a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f001 fb79 	bl	800fe04 <UART_CheckIdleState>
 800e712:	4603      	mov	r3, r0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b08a      	sub	sp, #40	@ 0x28
 800e720:	af02      	add	r7, sp, #8
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	603b      	str	r3, [r7, #0]
 800e728:	4613      	mov	r3, r2
 800e72a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e732:	2b20      	cmp	r3, #32
 800e734:	d17b      	bne.n	800e82e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <HAL_UART_Transmit+0x26>
 800e73c:	88fb      	ldrh	r3, [r7, #6]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d101      	bne.n	800e746 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	e074      	b.n	800e830 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2221      	movs	r2, #33	@ 0x21
 800e752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e756:	f7f5 f8d1 	bl	80038fc <HAL_GetTick>
 800e75a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	88fa      	ldrh	r2, [r7, #6]
 800e760:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	88fa      	ldrh	r2, [r7, #6]
 800e768:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e774:	d108      	bne.n	800e788 <HAL_UART_Transmit+0x6c>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d104      	bne.n	800e788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	61bb      	str	r3, [r7, #24]
 800e786:	e003      	b.n	800e790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e78c:	2300      	movs	r3, #0
 800e78e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e790:	e030      	b.n	800e7f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	2200      	movs	r2, #0
 800e79a:	2180      	movs	r1, #128	@ 0x80
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f001 fbdb 	bl	800ff58 <UART_WaitOnFlagUntilTimeout>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d005      	beq.n	800e7b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2220      	movs	r2, #32
 800e7ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	e03d      	b.n	800e830 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10b      	bne.n	800e7d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	881b      	ldrh	r3, [r3, #0]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	3302      	adds	r3, #2
 800e7ce:	61bb      	str	r3, [r7, #24]
 800e7d0:	e007      	b.n	800e7e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	781a      	ldrb	r2, [r3, #0]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	3b01      	subs	r3, #1
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1c8      	bne.n	800e792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	2200      	movs	r2, #0
 800e808:	2140      	movs	r1, #64	@ 0x40
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f001 fba4 	bl	800ff58 <UART_WaitOnFlagUntilTimeout>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d005      	beq.n	800e822 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2220      	movs	r2, #32
 800e81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e81e:	2303      	movs	r3, #3
 800e820:	e006      	b.n	800e830 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2220      	movs	r2, #32
 800e826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	e000      	b.n	800e830 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e82e:	2302      	movs	r3, #2
  }
}
 800e830:	4618      	mov	r0, r3
 800e832:	3720      	adds	r7, #32
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b0ba      	sub	sp, #232	@ 0xe8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	69db      	ldr	r3, [r3, #28]
 800e846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e85e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e862:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e866:	4013      	ands	r3, r2
 800e868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e86c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e870:	2b00      	cmp	r3, #0
 800e872:	d11b      	bne.n	800e8ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e878:	f003 0320 	and.w	r3, r3, #32
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d015      	beq.n	800e8ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e884:	f003 0320 	and.w	r3, r3, #32
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d105      	bne.n	800e898 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e88c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e894:	2b00      	cmp	r3, #0
 800e896:	d009      	beq.n	800e8ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f000 8377 	beq.w	800ef90 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	4798      	blx	r3
      }
      return;
 800e8aa:	e371      	b.n	800ef90 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e8ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f000 8123 	beq.w	800eafc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e8b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e8ba:	4b8d      	ldr	r3, [pc, #564]	@ (800eaf0 <HAL_UART_IRQHandler+0x2b8>)
 800e8bc:	4013      	ands	r3, r2
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d106      	bne.n	800e8d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e8c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e8c6:	4b8b      	ldr	r3, [pc, #556]	@ (800eaf4 <HAL_UART_IRQHandler+0x2bc>)
 800e8c8:	4013      	ands	r3, r2
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 8116 	beq.w	800eafc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8d4:	f003 0301 	and.w	r3, r3, #1
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d011      	beq.n	800e900 <HAL_UART_IRQHandler+0xc8>
 800e8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00b      	beq.n	800e900 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8f6:	f043 0201 	orr.w	r2, r3, #1
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e904:	f003 0302 	and.w	r3, r3, #2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d011      	beq.n	800e930 <HAL_UART_IRQHandler+0xf8>
 800e90c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00b      	beq.n	800e930 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2202      	movs	r2, #2
 800e91e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e926:	f043 0204 	orr.w	r2, r3, #4
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e934:	f003 0304 	and.w	r3, r3, #4
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d011      	beq.n	800e960 <HAL_UART_IRQHandler+0x128>
 800e93c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e940:	f003 0301 	and.w	r3, r3, #1
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00b      	beq.n	800e960 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2204      	movs	r2, #4
 800e94e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e956:	f043 0202 	orr.w	r2, r3, #2
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e964:	f003 0308 	and.w	r3, r3, #8
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d017      	beq.n	800e99c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e970:	f003 0320 	and.w	r3, r3, #32
 800e974:	2b00      	cmp	r3, #0
 800e976:	d105      	bne.n	800e984 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e978:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e97c:	4b5c      	ldr	r3, [pc, #368]	@ (800eaf0 <HAL_UART_IRQHandler+0x2b8>)
 800e97e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00b      	beq.n	800e99c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2208      	movs	r2, #8
 800e98a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e992:	f043 0208 	orr.w	r2, r3, #8
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d012      	beq.n	800e9ce <HAL_UART_IRQHandler+0x196>
 800e9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00c      	beq.n	800e9ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e9bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c4:	f043 0220 	orr.w	r2, r3, #32
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 82dd 	beq.w	800ef94 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9de:	f003 0320 	and.w	r3, r3, #32
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d013      	beq.n	800ea0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e9e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9ea:	f003 0320 	and.w	r3, r3, #32
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d105      	bne.n	800e9fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e9f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d003      	beq.n	800ea0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea22:	2b40      	cmp	r3, #64	@ 0x40
 800ea24:	d005      	beq.n	800ea32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ea26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ea2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d054      	beq.n	800eadc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f001 fc20 	bl	8010278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea42:	2b40      	cmp	r3, #64	@ 0x40
 800ea44:	d146      	bne.n	800ead4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3308      	adds	r3, #8
 800ea4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ea54:	e853 3f00 	ldrex	r3, [r3]
 800ea58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ea5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ea60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	3308      	adds	r3, #8
 800ea6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ea72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ea76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ea7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ea82:	e841 2300 	strex	r3, r2, [r1]
 800ea86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ea8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1d9      	bne.n	800ea46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d017      	beq.n	800eacc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaa2:	4a15      	ldr	r2, [pc, #84]	@ (800eaf8 <HAL_UART_IRQHandler+0x2c0>)
 800eaa4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7f8 fa03 	bl	8006eb8 <HAL_DMA_Abort_IT>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d019      	beq.n	800eaec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eabe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800eac6:	4610      	mov	r0, r2
 800eac8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eaca:	e00f      	b.n	800eaec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 fa81 	bl	800efd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ead2:	e00b      	b.n	800eaec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fa7d 	bl	800efd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eada:	e007      	b.n	800eaec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fa79 	bl	800efd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800eaea:	e253      	b.n	800ef94 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eaec:	bf00      	nop
    return;
 800eaee:	e251      	b.n	800ef94 <HAL_UART_IRQHandler+0x75c>
 800eaf0:	10000001 	.word	0x10000001
 800eaf4:	04000120 	.word	0x04000120
 800eaf8:	08010345 	.word	0x08010345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	f040 81e7 	bne.w	800eed4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eb06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb0a:	f003 0310 	and.w	r3, r3, #16
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 81e0 	beq.w	800eed4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eb14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb18:	f003 0310 	and.w	r3, r3, #16
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 81d9 	beq.w	800eed4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2210      	movs	r2, #16
 800eb28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb34:	2b40      	cmp	r3, #64	@ 0x40
 800eb36:	f040 8151 	bne.w	800eddc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a96      	ldr	r2, [pc, #600]	@ (800ed9c <HAL_UART_IRQHandler+0x564>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d068      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a93      	ldr	r2, [pc, #588]	@ (800eda0 <HAL_UART_IRQHandler+0x568>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d061      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a91      	ldr	r2, [pc, #580]	@ (800eda4 <HAL_UART_IRQHandler+0x56c>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d05a      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a8e      	ldr	r2, [pc, #568]	@ (800eda8 <HAL_UART_IRQHandler+0x570>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d053      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a8c      	ldr	r2, [pc, #560]	@ (800edac <HAL_UART_IRQHandler+0x574>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d04c      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a89      	ldr	r2, [pc, #548]	@ (800edb0 <HAL_UART_IRQHandler+0x578>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d045      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a87      	ldr	r2, [pc, #540]	@ (800edb4 <HAL_UART_IRQHandler+0x57c>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d03e      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a84      	ldr	r2, [pc, #528]	@ (800edb8 <HAL_UART_IRQHandler+0x580>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d037      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a82      	ldr	r2, [pc, #520]	@ (800edbc <HAL_UART_IRQHandler+0x584>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d030      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a7f      	ldr	r2, [pc, #508]	@ (800edc0 <HAL_UART_IRQHandler+0x588>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d029      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4a7d      	ldr	r2, [pc, #500]	@ (800edc4 <HAL_UART_IRQHandler+0x58c>)
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d022      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a7a      	ldr	r2, [pc, #488]	@ (800edc8 <HAL_UART_IRQHandler+0x590>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d01b      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a78      	ldr	r2, [pc, #480]	@ (800edcc <HAL_UART_IRQHandler+0x594>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d014      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a75      	ldr	r2, [pc, #468]	@ (800edd0 <HAL_UART_IRQHandler+0x598>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d00d      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4a73      	ldr	r2, [pc, #460]	@ (800edd4 <HAL_UART_IRQHandler+0x59c>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d006      	beq.n	800ec1a <HAL_UART_IRQHandler+0x3e2>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a70      	ldr	r2, [pc, #448]	@ (800edd8 <HAL_UART_IRQHandler+0x5a0>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d106      	bne.n	800ec28 <HAL_UART_IRQHandler+0x3f0>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	e005      	b.n	800ec34 <HAL_UART_IRQHandler+0x3fc>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ec38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f000 81ab 	beq.w	800ef98 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	f080 81a3 	bcs.w	800ef98 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ec58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec62:	69db      	ldr	r3, [r3, #28]
 800ec64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec68:	f000 8087 	beq.w	800ed7a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ec78:	e853 3f00 	ldrex	r3, [r3]
 800ec7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ec80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	461a      	mov	r2, r3
 800ec92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800eca2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eca6:	e841 2300 	strex	r3, r2, [r1]
 800ecaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ecae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1da      	bne.n	800ec6c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3308      	adds	r3, #8
 800ecbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ecc0:	e853 3f00 	ldrex	r3, [r3]
 800ecc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ecc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ecc8:	f023 0301 	bic.w	r3, r3, #1
 800eccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	3308      	adds	r3, #8
 800ecd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ecda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ecde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ece2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ece6:	e841 2300 	strex	r3, r2, [r1]
 800ecea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ecec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1e1      	bne.n	800ecb6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	3308      	adds	r3, #8
 800ecf8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ecfc:	e853 3f00 	ldrex	r3, [r3]
 800ed00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ed02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	3308      	adds	r3, #8
 800ed12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ed16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ed18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ed1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ed1e:	e841 2300 	strex	r3, r2, [r1]
 800ed22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ed24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1e3      	bne.n	800ecf2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed40:	e853 3f00 	ldrex	r3, [r3]
 800ed44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ed46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed48:	f023 0310 	bic.w	r3, r3, #16
 800ed4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ed60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed62:	e841 2300 	strex	r3, r2, [r1]
 800ed66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ed68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1e4      	bne.n	800ed38 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7f7 fd81 	bl	800687c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	4619      	mov	r1, r3
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7f2 fdc3 	bl	8001920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ed9a:	e0fd      	b.n	800ef98 <HAL_UART_IRQHandler+0x760>
 800ed9c:	40020010 	.word	0x40020010
 800eda0:	40020028 	.word	0x40020028
 800eda4:	40020040 	.word	0x40020040
 800eda8:	40020058 	.word	0x40020058
 800edac:	40020070 	.word	0x40020070
 800edb0:	40020088 	.word	0x40020088
 800edb4:	400200a0 	.word	0x400200a0
 800edb8:	400200b8 	.word	0x400200b8
 800edbc:	40020410 	.word	0x40020410
 800edc0:	40020428 	.word	0x40020428
 800edc4:	40020440 	.word	0x40020440
 800edc8:	40020458 	.word	0x40020458
 800edcc:	40020470 	.word	0x40020470
 800edd0:	40020488 	.word	0x40020488
 800edd4:	400204a0 	.word	0x400204a0
 800edd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ede8:	b29b      	uxth	r3, r3
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 80cf 	beq.w	800ef9c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800edfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f000 80ca 	beq.w	800ef9c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee10:	e853 3f00 	ldrex	r3, [r3]
 800ee14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ee16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	461a      	mov	r2, r3
 800ee26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ee2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee2c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ee30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ee38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e4      	bne.n	800ee08 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	3308      	adds	r3, #8
 800ee44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee48:	e853 3f00 	ldrex	r3, [r3]
 800ee4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ee4e:	6a3a      	ldr	r2, [r7, #32]
 800ee50:	4b55      	ldr	r3, [pc, #340]	@ (800efa8 <HAL_UART_IRQHandler+0x770>)
 800ee52:	4013      	ands	r3, r2
 800ee54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	3308      	adds	r3, #8
 800ee5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ee62:	633a      	str	r2, [r7, #48]	@ 0x30
 800ee64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee6a:	e841 2300 	strex	r3, r2, [r1]
 800ee6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ee70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d1e3      	bne.n	800ee3e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2220      	movs	r2, #32
 800ee7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	e853 3f00 	ldrex	r3, [r3]
 800ee96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f023 0310 	bic.w	r3, r3, #16
 800ee9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	461a      	mov	r2, r3
 800eea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eeac:	61fb      	str	r3, [r7, #28]
 800eeae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb0:	69b9      	ldr	r1, [r7, #24]
 800eeb2:	69fa      	ldr	r2, [r7, #28]
 800eeb4:	e841 2300 	strex	r3, r2, [r1]
 800eeb8:	617b      	str	r3, [r7, #20]
   return(result);
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1e4      	bne.n	800ee8a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eec6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eeca:	4619      	mov	r1, r3
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7f2 fd27 	bl	8001920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eed2:	e063      	b.n	800ef9c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00e      	beq.n	800eefe <HAL_UART_IRQHandler+0x6c6>
 800eee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d008      	beq.n	800eefe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800eef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f001 ff82 	bl	8010e00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eefc:	e051      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d014      	beq.n	800ef34 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ef0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d105      	bne.n	800ef22 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ef16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d008      	beq.n	800ef34 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d03a      	beq.n	800efa0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	4798      	blx	r3
    }
    return;
 800ef32:	e035      	b.n	800efa0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ef34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d009      	beq.n	800ef54 <HAL_UART_IRQHandler+0x71c>
 800ef40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f001 fa0f 	bl	8010370 <UART_EndTransmit_IT>
    return;
 800ef52:	e026      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ef54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d009      	beq.n	800ef74 <HAL_UART_IRQHandler+0x73c>
 800ef60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f001 ff5b 	bl	8010e28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ef72:	e016      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ef74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d010      	beq.n	800efa2 <HAL_UART_IRQHandler+0x76a>
 800ef80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	da0c      	bge.n	800efa2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f001 ff43 	bl	8010e14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ef8e:	e008      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ef90:	bf00      	nop
 800ef92:	e006      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
    return;
 800ef94:	bf00      	nop
 800ef96:	e004      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ef98:	bf00      	nop
 800ef9a:	e002      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ef9c:	bf00      	nop
 800ef9e:	e000      	b.n	800efa2 <HAL_UART_IRQHandler+0x76a>
    return;
 800efa0:	bf00      	nop
  }
}
 800efa2:	37e8      	adds	r7, #232	@ 0xe8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	effffffe 	.word	0xeffffffe

0800efac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800efb4:	bf00      	nop
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800efc8:	bf00      	nop
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800efdc:	bf00      	nop
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800efe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800efec:	b092      	sub	sp, #72	@ 0x48
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eff2:	2300      	movs	r3, #0
 800eff4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	689a      	ldr	r2, [r3, #8]
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	431a      	orrs	r2, r3
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	431a      	orrs	r2, r3
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	4bbe      	ldr	r3, [pc, #760]	@ (800f310 <UART_SetConfig+0x328>)
 800f018:	4013      	ands	r3, r2
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	6812      	ldr	r2, [r2, #0]
 800f01e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f020:	430b      	orrs	r3, r1
 800f022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	68da      	ldr	r2, [r3, #12]
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	430a      	orrs	r2, r1
 800f038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4ab3      	ldr	r2, [pc, #716]	@ (800f314 <UART_SetConfig+0x32c>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d004      	beq.n	800f054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f050:	4313      	orrs	r3, r2
 800f052:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	689a      	ldr	r2, [r3, #8]
 800f05a:	4baf      	ldr	r3, [pc, #700]	@ (800f318 <UART_SetConfig+0x330>)
 800f05c:	4013      	ands	r3, r2
 800f05e:	697a      	ldr	r2, [r7, #20]
 800f060:	6812      	ldr	r2, [r2, #0]
 800f062:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f064:	430b      	orrs	r3, r1
 800f066:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f06e:	f023 010f 	bic.w	r1, r3, #15
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	430a      	orrs	r2, r1
 800f07c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4aa6      	ldr	r2, [pc, #664]	@ (800f31c <UART_SetConfig+0x334>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d177      	bne.n	800f178 <UART_SetConfig+0x190>
 800f088:	4ba5      	ldr	r3, [pc, #660]	@ (800f320 <UART_SetConfig+0x338>)
 800f08a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f08c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f090:	2b28      	cmp	r3, #40	@ 0x28
 800f092:	d86d      	bhi.n	800f170 <UART_SetConfig+0x188>
 800f094:	a201      	add	r2, pc, #4	@ (adr r2, 800f09c <UART_SetConfig+0xb4>)
 800f096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f09a:	bf00      	nop
 800f09c:	0800f141 	.word	0x0800f141
 800f0a0:	0800f171 	.word	0x0800f171
 800f0a4:	0800f171 	.word	0x0800f171
 800f0a8:	0800f171 	.word	0x0800f171
 800f0ac:	0800f171 	.word	0x0800f171
 800f0b0:	0800f171 	.word	0x0800f171
 800f0b4:	0800f171 	.word	0x0800f171
 800f0b8:	0800f171 	.word	0x0800f171
 800f0bc:	0800f149 	.word	0x0800f149
 800f0c0:	0800f171 	.word	0x0800f171
 800f0c4:	0800f171 	.word	0x0800f171
 800f0c8:	0800f171 	.word	0x0800f171
 800f0cc:	0800f171 	.word	0x0800f171
 800f0d0:	0800f171 	.word	0x0800f171
 800f0d4:	0800f171 	.word	0x0800f171
 800f0d8:	0800f171 	.word	0x0800f171
 800f0dc:	0800f151 	.word	0x0800f151
 800f0e0:	0800f171 	.word	0x0800f171
 800f0e4:	0800f171 	.word	0x0800f171
 800f0e8:	0800f171 	.word	0x0800f171
 800f0ec:	0800f171 	.word	0x0800f171
 800f0f0:	0800f171 	.word	0x0800f171
 800f0f4:	0800f171 	.word	0x0800f171
 800f0f8:	0800f171 	.word	0x0800f171
 800f0fc:	0800f159 	.word	0x0800f159
 800f100:	0800f171 	.word	0x0800f171
 800f104:	0800f171 	.word	0x0800f171
 800f108:	0800f171 	.word	0x0800f171
 800f10c:	0800f171 	.word	0x0800f171
 800f110:	0800f171 	.word	0x0800f171
 800f114:	0800f171 	.word	0x0800f171
 800f118:	0800f171 	.word	0x0800f171
 800f11c:	0800f161 	.word	0x0800f161
 800f120:	0800f171 	.word	0x0800f171
 800f124:	0800f171 	.word	0x0800f171
 800f128:	0800f171 	.word	0x0800f171
 800f12c:	0800f171 	.word	0x0800f171
 800f130:	0800f171 	.word	0x0800f171
 800f134:	0800f171 	.word	0x0800f171
 800f138:	0800f171 	.word	0x0800f171
 800f13c:	0800f169 	.word	0x0800f169
 800f140:	2301      	movs	r3, #1
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f146:	e326      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f148:	2304      	movs	r3, #4
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f14e:	e322      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f150:	2308      	movs	r3, #8
 800f152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f156:	e31e      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f158:	2310      	movs	r3, #16
 800f15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15e:	e31a      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f160:	2320      	movs	r3, #32
 800f162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f166:	e316      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f168:	2340      	movs	r3, #64	@ 0x40
 800f16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f16e:	e312      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f170:	2380      	movs	r3, #128	@ 0x80
 800f172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f176:	e30e      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a69      	ldr	r2, [pc, #420]	@ (800f324 <UART_SetConfig+0x33c>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d130      	bne.n	800f1e4 <UART_SetConfig+0x1fc>
 800f182:	4b67      	ldr	r3, [pc, #412]	@ (800f320 <UART_SetConfig+0x338>)
 800f184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f186:	f003 0307 	and.w	r3, r3, #7
 800f18a:	2b05      	cmp	r3, #5
 800f18c:	d826      	bhi.n	800f1dc <UART_SetConfig+0x1f4>
 800f18e:	a201      	add	r2, pc, #4	@ (adr r2, 800f194 <UART_SetConfig+0x1ac>)
 800f190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f194:	0800f1ad 	.word	0x0800f1ad
 800f198:	0800f1b5 	.word	0x0800f1b5
 800f19c:	0800f1bd 	.word	0x0800f1bd
 800f1a0:	0800f1c5 	.word	0x0800f1c5
 800f1a4:	0800f1cd 	.word	0x0800f1cd
 800f1a8:	0800f1d5 	.word	0x0800f1d5
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1b2:	e2f0      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f1b4:	2304      	movs	r3, #4
 800f1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ba:	e2ec      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f1bc:	2308      	movs	r3, #8
 800f1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1c2:	e2e8      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f1c4:	2310      	movs	r3, #16
 800f1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ca:	e2e4      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f1cc:	2320      	movs	r3, #32
 800f1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1d2:	e2e0      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f1d4:	2340      	movs	r3, #64	@ 0x40
 800f1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1da:	e2dc      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f1dc:	2380      	movs	r3, #128	@ 0x80
 800f1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1e2:	e2d8      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a4f      	ldr	r2, [pc, #316]	@ (800f328 <UART_SetConfig+0x340>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d130      	bne.n	800f250 <UART_SetConfig+0x268>
 800f1ee:	4b4c      	ldr	r3, [pc, #304]	@ (800f320 <UART_SetConfig+0x338>)
 800f1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1f2:	f003 0307 	and.w	r3, r3, #7
 800f1f6:	2b05      	cmp	r3, #5
 800f1f8:	d826      	bhi.n	800f248 <UART_SetConfig+0x260>
 800f1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f200 <UART_SetConfig+0x218>)
 800f1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f200:	0800f219 	.word	0x0800f219
 800f204:	0800f221 	.word	0x0800f221
 800f208:	0800f229 	.word	0x0800f229
 800f20c:	0800f231 	.word	0x0800f231
 800f210:	0800f239 	.word	0x0800f239
 800f214:	0800f241 	.word	0x0800f241
 800f218:	2300      	movs	r3, #0
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f21e:	e2ba      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f220:	2304      	movs	r3, #4
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f226:	e2b6      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f228:	2308      	movs	r3, #8
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22e:	e2b2      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f230:	2310      	movs	r3, #16
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f236:	e2ae      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f238:	2320      	movs	r3, #32
 800f23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23e:	e2aa      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f240:	2340      	movs	r3, #64	@ 0x40
 800f242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f246:	e2a6      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f248:	2380      	movs	r3, #128	@ 0x80
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24e:	e2a2      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4a35      	ldr	r2, [pc, #212]	@ (800f32c <UART_SetConfig+0x344>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d130      	bne.n	800f2bc <UART_SetConfig+0x2d4>
 800f25a:	4b31      	ldr	r3, [pc, #196]	@ (800f320 <UART_SetConfig+0x338>)
 800f25c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f25e:	f003 0307 	and.w	r3, r3, #7
 800f262:	2b05      	cmp	r3, #5
 800f264:	d826      	bhi.n	800f2b4 <UART_SetConfig+0x2cc>
 800f266:	a201      	add	r2, pc, #4	@ (adr r2, 800f26c <UART_SetConfig+0x284>)
 800f268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26c:	0800f285 	.word	0x0800f285
 800f270:	0800f28d 	.word	0x0800f28d
 800f274:	0800f295 	.word	0x0800f295
 800f278:	0800f29d 	.word	0x0800f29d
 800f27c:	0800f2a5 	.word	0x0800f2a5
 800f280:	0800f2ad 	.word	0x0800f2ad
 800f284:	2300      	movs	r3, #0
 800f286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f28a:	e284      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f28c:	2304      	movs	r3, #4
 800f28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f292:	e280      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f294:	2308      	movs	r3, #8
 800f296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f29a:	e27c      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f29c:	2310      	movs	r3, #16
 800f29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2a2:	e278      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f2a4:	2320      	movs	r3, #32
 800f2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2aa:	e274      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f2ac:	2340      	movs	r3, #64	@ 0x40
 800f2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2b2:	e270      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f2b4:	2380      	movs	r3, #128	@ 0x80
 800f2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ba:	e26c      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a1b      	ldr	r2, [pc, #108]	@ (800f330 <UART_SetConfig+0x348>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d142      	bne.n	800f34c <UART_SetConfig+0x364>
 800f2c6:	4b16      	ldr	r3, [pc, #88]	@ (800f320 <UART_SetConfig+0x338>)
 800f2c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2ca:	f003 0307 	and.w	r3, r3, #7
 800f2ce:	2b05      	cmp	r3, #5
 800f2d0:	d838      	bhi.n	800f344 <UART_SetConfig+0x35c>
 800f2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2d8 <UART_SetConfig+0x2f0>)
 800f2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d8:	0800f2f1 	.word	0x0800f2f1
 800f2dc:	0800f2f9 	.word	0x0800f2f9
 800f2e0:	0800f301 	.word	0x0800f301
 800f2e4:	0800f309 	.word	0x0800f309
 800f2e8:	0800f335 	.word	0x0800f335
 800f2ec:	0800f33d 	.word	0x0800f33d
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2f6:	e24e      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f2f8:	2304      	movs	r3, #4
 800f2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2fe:	e24a      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f300:	2308      	movs	r3, #8
 800f302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f306:	e246      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f308:	2310      	movs	r3, #16
 800f30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f30e:	e242      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f310:	cfff69f3 	.word	0xcfff69f3
 800f314:	58000c00 	.word	0x58000c00
 800f318:	11fff4ff 	.word	0x11fff4ff
 800f31c:	40011000 	.word	0x40011000
 800f320:	58024400 	.word	0x58024400
 800f324:	40004400 	.word	0x40004400
 800f328:	40004800 	.word	0x40004800
 800f32c:	40004c00 	.word	0x40004c00
 800f330:	40005000 	.word	0x40005000
 800f334:	2320      	movs	r3, #32
 800f336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f33a:	e22c      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f33c:	2340      	movs	r3, #64	@ 0x40
 800f33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f342:	e228      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f344:	2380      	movs	r3, #128	@ 0x80
 800f346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f34a:	e224      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4ab1      	ldr	r2, [pc, #708]	@ (800f618 <UART_SetConfig+0x630>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d176      	bne.n	800f444 <UART_SetConfig+0x45c>
 800f356:	4bb1      	ldr	r3, [pc, #708]	@ (800f61c <UART_SetConfig+0x634>)
 800f358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f35a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f35e:	2b28      	cmp	r3, #40	@ 0x28
 800f360:	d86c      	bhi.n	800f43c <UART_SetConfig+0x454>
 800f362:	a201      	add	r2, pc, #4	@ (adr r2, 800f368 <UART_SetConfig+0x380>)
 800f364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f368:	0800f40d 	.word	0x0800f40d
 800f36c:	0800f43d 	.word	0x0800f43d
 800f370:	0800f43d 	.word	0x0800f43d
 800f374:	0800f43d 	.word	0x0800f43d
 800f378:	0800f43d 	.word	0x0800f43d
 800f37c:	0800f43d 	.word	0x0800f43d
 800f380:	0800f43d 	.word	0x0800f43d
 800f384:	0800f43d 	.word	0x0800f43d
 800f388:	0800f415 	.word	0x0800f415
 800f38c:	0800f43d 	.word	0x0800f43d
 800f390:	0800f43d 	.word	0x0800f43d
 800f394:	0800f43d 	.word	0x0800f43d
 800f398:	0800f43d 	.word	0x0800f43d
 800f39c:	0800f43d 	.word	0x0800f43d
 800f3a0:	0800f43d 	.word	0x0800f43d
 800f3a4:	0800f43d 	.word	0x0800f43d
 800f3a8:	0800f41d 	.word	0x0800f41d
 800f3ac:	0800f43d 	.word	0x0800f43d
 800f3b0:	0800f43d 	.word	0x0800f43d
 800f3b4:	0800f43d 	.word	0x0800f43d
 800f3b8:	0800f43d 	.word	0x0800f43d
 800f3bc:	0800f43d 	.word	0x0800f43d
 800f3c0:	0800f43d 	.word	0x0800f43d
 800f3c4:	0800f43d 	.word	0x0800f43d
 800f3c8:	0800f425 	.word	0x0800f425
 800f3cc:	0800f43d 	.word	0x0800f43d
 800f3d0:	0800f43d 	.word	0x0800f43d
 800f3d4:	0800f43d 	.word	0x0800f43d
 800f3d8:	0800f43d 	.word	0x0800f43d
 800f3dc:	0800f43d 	.word	0x0800f43d
 800f3e0:	0800f43d 	.word	0x0800f43d
 800f3e4:	0800f43d 	.word	0x0800f43d
 800f3e8:	0800f42d 	.word	0x0800f42d
 800f3ec:	0800f43d 	.word	0x0800f43d
 800f3f0:	0800f43d 	.word	0x0800f43d
 800f3f4:	0800f43d 	.word	0x0800f43d
 800f3f8:	0800f43d 	.word	0x0800f43d
 800f3fc:	0800f43d 	.word	0x0800f43d
 800f400:	0800f43d 	.word	0x0800f43d
 800f404:	0800f43d 	.word	0x0800f43d
 800f408:	0800f435 	.word	0x0800f435
 800f40c:	2301      	movs	r3, #1
 800f40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f412:	e1c0      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f414:	2304      	movs	r3, #4
 800f416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f41a:	e1bc      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f41c:	2308      	movs	r3, #8
 800f41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f422:	e1b8      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f424:	2310      	movs	r3, #16
 800f426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f42a:	e1b4      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f42c:	2320      	movs	r3, #32
 800f42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f432:	e1b0      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f434:	2340      	movs	r3, #64	@ 0x40
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43a:	e1ac      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f43c:	2380      	movs	r3, #128	@ 0x80
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e1a8      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a75      	ldr	r2, [pc, #468]	@ (800f620 <UART_SetConfig+0x638>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d130      	bne.n	800f4b0 <UART_SetConfig+0x4c8>
 800f44e:	4b73      	ldr	r3, [pc, #460]	@ (800f61c <UART_SetConfig+0x634>)
 800f450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f452:	f003 0307 	and.w	r3, r3, #7
 800f456:	2b05      	cmp	r3, #5
 800f458:	d826      	bhi.n	800f4a8 <UART_SetConfig+0x4c0>
 800f45a:	a201      	add	r2, pc, #4	@ (adr r2, 800f460 <UART_SetConfig+0x478>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f479 	.word	0x0800f479
 800f464:	0800f481 	.word	0x0800f481
 800f468:	0800f489 	.word	0x0800f489
 800f46c:	0800f491 	.word	0x0800f491
 800f470:	0800f499 	.word	0x0800f499
 800f474:	0800f4a1 	.word	0x0800f4a1
 800f478:	2300      	movs	r3, #0
 800f47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f47e:	e18a      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f480:	2304      	movs	r3, #4
 800f482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f486:	e186      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f488:	2308      	movs	r3, #8
 800f48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f48e:	e182      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f490:	2310      	movs	r3, #16
 800f492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f496:	e17e      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f498:	2320      	movs	r3, #32
 800f49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f49e:	e17a      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f4a0:	2340      	movs	r3, #64	@ 0x40
 800f4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a6:	e176      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f4a8:	2380      	movs	r3, #128	@ 0x80
 800f4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ae:	e172      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a5b      	ldr	r2, [pc, #364]	@ (800f624 <UART_SetConfig+0x63c>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d130      	bne.n	800f51c <UART_SetConfig+0x534>
 800f4ba:	4b58      	ldr	r3, [pc, #352]	@ (800f61c <UART_SetConfig+0x634>)
 800f4bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4be:	f003 0307 	and.w	r3, r3, #7
 800f4c2:	2b05      	cmp	r3, #5
 800f4c4:	d826      	bhi.n	800f514 <UART_SetConfig+0x52c>
 800f4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4cc <UART_SetConfig+0x4e4>)
 800f4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4cc:	0800f4e5 	.word	0x0800f4e5
 800f4d0:	0800f4ed 	.word	0x0800f4ed
 800f4d4:	0800f4f5 	.word	0x0800f4f5
 800f4d8:	0800f4fd 	.word	0x0800f4fd
 800f4dc:	0800f505 	.word	0x0800f505
 800f4e0:	0800f50d 	.word	0x0800f50d
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ea:	e154      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f4ec:	2304      	movs	r3, #4
 800f4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4f2:	e150      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f4f4:	2308      	movs	r3, #8
 800f4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4fa:	e14c      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f4fc:	2310      	movs	r3, #16
 800f4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f502:	e148      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f504:	2320      	movs	r3, #32
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50a:	e144      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f50c:	2340      	movs	r3, #64	@ 0x40
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e140      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f514:	2380      	movs	r3, #128	@ 0x80
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e13c      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a41      	ldr	r2, [pc, #260]	@ (800f628 <UART_SetConfig+0x640>)
 800f522:	4293      	cmp	r3, r2
 800f524:	f040 8082 	bne.w	800f62c <UART_SetConfig+0x644>
 800f528:	4b3c      	ldr	r3, [pc, #240]	@ (800f61c <UART_SetConfig+0x634>)
 800f52a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f52c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f530:	2b28      	cmp	r3, #40	@ 0x28
 800f532:	d86d      	bhi.n	800f610 <UART_SetConfig+0x628>
 800f534:	a201      	add	r2, pc, #4	@ (adr r2, 800f53c <UART_SetConfig+0x554>)
 800f536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53a:	bf00      	nop
 800f53c:	0800f5e1 	.word	0x0800f5e1
 800f540:	0800f611 	.word	0x0800f611
 800f544:	0800f611 	.word	0x0800f611
 800f548:	0800f611 	.word	0x0800f611
 800f54c:	0800f611 	.word	0x0800f611
 800f550:	0800f611 	.word	0x0800f611
 800f554:	0800f611 	.word	0x0800f611
 800f558:	0800f611 	.word	0x0800f611
 800f55c:	0800f5e9 	.word	0x0800f5e9
 800f560:	0800f611 	.word	0x0800f611
 800f564:	0800f611 	.word	0x0800f611
 800f568:	0800f611 	.word	0x0800f611
 800f56c:	0800f611 	.word	0x0800f611
 800f570:	0800f611 	.word	0x0800f611
 800f574:	0800f611 	.word	0x0800f611
 800f578:	0800f611 	.word	0x0800f611
 800f57c:	0800f5f1 	.word	0x0800f5f1
 800f580:	0800f611 	.word	0x0800f611
 800f584:	0800f611 	.word	0x0800f611
 800f588:	0800f611 	.word	0x0800f611
 800f58c:	0800f611 	.word	0x0800f611
 800f590:	0800f611 	.word	0x0800f611
 800f594:	0800f611 	.word	0x0800f611
 800f598:	0800f611 	.word	0x0800f611
 800f59c:	0800f5f9 	.word	0x0800f5f9
 800f5a0:	0800f611 	.word	0x0800f611
 800f5a4:	0800f611 	.word	0x0800f611
 800f5a8:	0800f611 	.word	0x0800f611
 800f5ac:	0800f611 	.word	0x0800f611
 800f5b0:	0800f611 	.word	0x0800f611
 800f5b4:	0800f611 	.word	0x0800f611
 800f5b8:	0800f611 	.word	0x0800f611
 800f5bc:	0800f601 	.word	0x0800f601
 800f5c0:	0800f611 	.word	0x0800f611
 800f5c4:	0800f611 	.word	0x0800f611
 800f5c8:	0800f611 	.word	0x0800f611
 800f5cc:	0800f611 	.word	0x0800f611
 800f5d0:	0800f611 	.word	0x0800f611
 800f5d4:	0800f611 	.word	0x0800f611
 800f5d8:	0800f611 	.word	0x0800f611
 800f5dc:	0800f609 	.word	0x0800f609
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	e0d6      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f5e8:	2304      	movs	r3, #4
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ee:	e0d2      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f6:	e0ce      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fe:	e0ca      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f600:	2320      	movs	r3, #32
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f606:	e0c6      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f608:	2340      	movs	r3, #64	@ 0x40
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f60e:	e0c2      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f610:	2380      	movs	r3, #128	@ 0x80
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f616:	e0be      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f618:	40011400 	.word	0x40011400
 800f61c:	58024400 	.word	0x58024400
 800f620:	40007800 	.word	0x40007800
 800f624:	40007c00 	.word	0x40007c00
 800f628:	40011800 	.word	0x40011800
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4aad      	ldr	r2, [pc, #692]	@ (800f8e8 <UART_SetConfig+0x900>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d176      	bne.n	800f724 <UART_SetConfig+0x73c>
 800f636:	4bad      	ldr	r3, [pc, #692]	@ (800f8ec <UART_SetConfig+0x904>)
 800f638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f63a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f63e:	2b28      	cmp	r3, #40	@ 0x28
 800f640:	d86c      	bhi.n	800f71c <UART_SetConfig+0x734>
 800f642:	a201      	add	r2, pc, #4	@ (adr r2, 800f648 <UART_SetConfig+0x660>)
 800f644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f648:	0800f6ed 	.word	0x0800f6ed
 800f64c:	0800f71d 	.word	0x0800f71d
 800f650:	0800f71d 	.word	0x0800f71d
 800f654:	0800f71d 	.word	0x0800f71d
 800f658:	0800f71d 	.word	0x0800f71d
 800f65c:	0800f71d 	.word	0x0800f71d
 800f660:	0800f71d 	.word	0x0800f71d
 800f664:	0800f71d 	.word	0x0800f71d
 800f668:	0800f6f5 	.word	0x0800f6f5
 800f66c:	0800f71d 	.word	0x0800f71d
 800f670:	0800f71d 	.word	0x0800f71d
 800f674:	0800f71d 	.word	0x0800f71d
 800f678:	0800f71d 	.word	0x0800f71d
 800f67c:	0800f71d 	.word	0x0800f71d
 800f680:	0800f71d 	.word	0x0800f71d
 800f684:	0800f71d 	.word	0x0800f71d
 800f688:	0800f6fd 	.word	0x0800f6fd
 800f68c:	0800f71d 	.word	0x0800f71d
 800f690:	0800f71d 	.word	0x0800f71d
 800f694:	0800f71d 	.word	0x0800f71d
 800f698:	0800f71d 	.word	0x0800f71d
 800f69c:	0800f71d 	.word	0x0800f71d
 800f6a0:	0800f71d 	.word	0x0800f71d
 800f6a4:	0800f71d 	.word	0x0800f71d
 800f6a8:	0800f705 	.word	0x0800f705
 800f6ac:	0800f71d 	.word	0x0800f71d
 800f6b0:	0800f71d 	.word	0x0800f71d
 800f6b4:	0800f71d 	.word	0x0800f71d
 800f6b8:	0800f71d 	.word	0x0800f71d
 800f6bc:	0800f71d 	.word	0x0800f71d
 800f6c0:	0800f71d 	.word	0x0800f71d
 800f6c4:	0800f71d 	.word	0x0800f71d
 800f6c8:	0800f70d 	.word	0x0800f70d
 800f6cc:	0800f71d 	.word	0x0800f71d
 800f6d0:	0800f71d 	.word	0x0800f71d
 800f6d4:	0800f71d 	.word	0x0800f71d
 800f6d8:	0800f71d 	.word	0x0800f71d
 800f6dc:	0800f71d 	.word	0x0800f71d
 800f6e0:	0800f71d 	.word	0x0800f71d
 800f6e4:	0800f71d 	.word	0x0800f71d
 800f6e8:	0800f715 	.word	0x0800f715
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6f2:	e050      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f6f4:	2304      	movs	r3, #4
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6fa:	e04c      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f6fc:	2308      	movs	r3, #8
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f702:	e048      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f704:	2310      	movs	r3, #16
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70a:	e044      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f70c:	2320      	movs	r3, #32
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f712:	e040      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f714:	2340      	movs	r3, #64	@ 0x40
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71a:	e03c      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f71c:	2380      	movs	r3, #128	@ 0x80
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f722:	e038      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4a71      	ldr	r2, [pc, #452]	@ (800f8f0 <UART_SetConfig+0x908>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d130      	bne.n	800f790 <UART_SetConfig+0x7a8>
 800f72e:	4b6f      	ldr	r3, [pc, #444]	@ (800f8ec <UART_SetConfig+0x904>)
 800f730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f732:	f003 0307 	and.w	r3, r3, #7
 800f736:	2b05      	cmp	r3, #5
 800f738:	d826      	bhi.n	800f788 <UART_SetConfig+0x7a0>
 800f73a:	a201      	add	r2, pc, #4	@ (adr r2, 800f740 <UART_SetConfig+0x758>)
 800f73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f740:	0800f759 	.word	0x0800f759
 800f744:	0800f761 	.word	0x0800f761
 800f748:	0800f769 	.word	0x0800f769
 800f74c:	0800f771 	.word	0x0800f771
 800f750:	0800f779 	.word	0x0800f779
 800f754:	0800f781 	.word	0x0800f781
 800f758:	2302      	movs	r3, #2
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f75e:	e01a      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f760:	2304      	movs	r3, #4
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f766:	e016      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f768:	2308      	movs	r3, #8
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76e:	e012      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f770:	2310      	movs	r3, #16
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f776:	e00e      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f778:	2320      	movs	r3, #32
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77e:	e00a      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f780:	2340      	movs	r3, #64	@ 0x40
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f786:	e006      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f788:	2380      	movs	r3, #128	@ 0x80
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78e:	e002      	b.n	800f796 <UART_SetConfig+0x7ae>
 800f790:	2380      	movs	r3, #128	@ 0x80
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4a55      	ldr	r2, [pc, #340]	@ (800f8f0 <UART_SetConfig+0x908>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	f040 80f8 	bne.w	800f992 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f7a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f7a6:	2b20      	cmp	r3, #32
 800f7a8:	dc46      	bgt.n	800f838 <UART_SetConfig+0x850>
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	db75      	blt.n	800f89a <UART_SetConfig+0x8b2>
 800f7ae:	3b02      	subs	r3, #2
 800f7b0:	2b1e      	cmp	r3, #30
 800f7b2:	d872      	bhi.n	800f89a <UART_SetConfig+0x8b2>
 800f7b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f7bc <UART_SetConfig+0x7d4>)
 800f7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ba:	bf00      	nop
 800f7bc:	0800f83f 	.word	0x0800f83f
 800f7c0:	0800f89b 	.word	0x0800f89b
 800f7c4:	0800f847 	.word	0x0800f847
 800f7c8:	0800f89b 	.word	0x0800f89b
 800f7cc:	0800f89b 	.word	0x0800f89b
 800f7d0:	0800f89b 	.word	0x0800f89b
 800f7d4:	0800f857 	.word	0x0800f857
 800f7d8:	0800f89b 	.word	0x0800f89b
 800f7dc:	0800f89b 	.word	0x0800f89b
 800f7e0:	0800f89b 	.word	0x0800f89b
 800f7e4:	0800f89b 	.word	0x0800f89b
 800f7e8:	0800f89b 	.word	0x0800f89b
 800f7ec:	0800f89b 	.word	0x0800f89b
 800f7f0:	0800f89b 	.word	0x0800f89b
 800f7f4:	0800f867 	.word	0x0800f867
 800f7f8:	0800f89b 	.word	0x0800f89b
 800f7fc:	0800f89b 	.word	0x0800f89b
 800f800:	0800f89b 	.word	0x0800f89b
 800f804:	0800f89b 	.word	0x0800f89b
 800f808:	0800f89b 	.word	0x0800f89b
 800f80c:	0800f89b 	.word	0x0800f89b
 800f810:	0800f89b 	.word	0x0800f89b
 800f814:	0800f89b 	.word	0x0800f89b
 800f818:	0800f89b 	.word	0x0800f89b
 800f81c:	0800f89b 	.word	0x0800f89b
 800f820:	0800f89b 	.word	0x0800f89b
 800f824:	0800f89b 	.word	0x0800f89b
 800f828:	0800f89b 	.word	0x0800f89b
 800f82c:	0800f89b 	.word	0x0800f89b
 800f830:	0800f89b 	.word	0x0800f89b
 800f834:	0800f88d 	.word	0x0800f88d
 800f838:	2b40      	cmp	r3, #64	@ 0x40
 800f83a:	d02a      	beq.n	800f892 <UART_SetConfig+0x8aa>
 800f83c:	e02d      	b.n	800f89a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f83e:	f7fc f89b 	bl	800b978 <HAL_RCCEx_GetD3PCLK1Freq>
 800f842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f844:	e02f      	b.n	800f8a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fc f8aa 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f854:	e027      	b.n	800f8a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f856:	f107 0318 	add.w	r3, r7, #24
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fc f9f6 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f864:	e01f      	b.n	800f8a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f866:	4b21      	ldr	r3, [pc, #132]	@ (800f8ec <UART_SetConfig+0x904>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f003 0320 	and.w	r3, r3, #32
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d009      	beq.n	800f886 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f872:	4b1e      	ldr	r3, [pc, #120]	@ (800f8ec <UART_SetConfig+0x904>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	08db      	lsrs	r3, r3, #3
 800f878:	f003 0303 	and.w	r3, r3, #3
 800f87c:	4a1d      	ldr	r2, [pc, #116]	@ (800f8f4 <UART_SetConfig+0x90c>)
 800f87e:	fa22 f303 	lsr.w	r3, r2, r3
 800f882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f884:	e00f      	b.n	800f8a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f886:	4b1b      	ldr	r3, [pc, #108]	@ (800f8f4 <UART_SetConfig+0x90c>)
 800f888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f88a:	e00c      	b.n	800f8a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f88c:	4b1a      	ldr	r3, [pc, #104]	@ (800f8f8 <UART_SetConfig+0x910>)
 800f88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f890:	e009      	b.n	800f8a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f898:	e005      	b.n	800f8a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f89a:	2300      	movs	r3, #0
 800f89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f8a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 81ee 	beq.w	800fc8a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8b2:	4a12      	ldr	r2, [pc, #72]	@ (800f8fc <UART_SetConfig+0x914>)
 800f8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8c0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	685a      	ldr	r2, [r3, #4]
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	4413      	add	r3, r2
 800f8cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d305      	bcc.n	800f8de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f8d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d910      	bls.n	800f900 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f8e4:	e1d1      	b.n	800fc8a <UART_SetConfig+0xca2>
 800f8e6:	bf00      	nop
 800f8e8:	40011c00 	.word	0x40011c00
 800f8ec:	58024400 	.word	0x58024400
 800f8f0:	58000c00 	.word	0x58000c00
 800f8f4:	03d09000 	.word	0x03d09000
 800f8f8:	003d0900 	.word	0x003d0900
 800f8fc:	080113e0 	.word	0x080113e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f902:	2200      	movs	r2, #0
 800f904:	60bb      	str	r3, [r7, #8]
 800f906:	60fa      	str	r2, [r7, #12]
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90c:	4ac0      	ldr	r2, [pc, #768]	@ (800fc10 <UART_SetConfig+0xc28>)
 800f90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f912:	b29b      	uxth	r3, r3
 800f914:	2200      	movs	r2, #0
 800f916:	603b      	str	r3, [r7, #0]
 800f918:	607a      	str	r2, [r7, #4]
 800f91a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f91e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f922:	f7f0 fcf3 	bl	800030c <__aeabi_uldivmod>
 800f926:	4602      	mov	r2, r0
 800f928:	460b      	mov	r3, r1
 800f92a:	4610      	mov	r0, r2
 800f92c:	4619      	mov	r1, r3
 800f92e:	f04f 0200 	mov.w	r2, #0
 800f932:	f04f 0300 	mov.w	r3, #0
 800f936:	020b      	lsls	r3, r1, #8
 800f938:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f93c:	0202      	lsls	r2, r0, #8
 800f93e:	6979      	ldr	r1, [r7, #20]
 800f940:	6849      	ldr	r1, [r1, #4]
 800f942:	0849      	lsrs	r1, r1, #1
 800f944:	2000      	movs	r0, #0
 800f946:	460c      	mov	r4, r1
 800f948:	4605      	mov	r5, r0
 800f94a:	eb12 0804 	adds.w	r8, r2, r4
 800f94e:	eb43 0905 	adc.w	r9, r3, r5
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	469a      	mov	sl, r3
 800f95a:	4693      	mov	fp, r2
 800f95c:	4652      	mov	r2, sl
 800f95e:	465b      	mov	r3, fp
 800f960:	4640      	mov	r0, r8
 800f962:	4649      	mov	r1, r9
 800f964:	f7f0 fcd2 	bl	800030c <__aeabi_uldivmod>
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4613      	mov	r3, r2
 800f96e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f976:	d308      	bcc.n	800f98a <UART_SetConfig+0x9a2>
 800f978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f97e:	d204      	bcs.n	800f98a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f986:	60da      	str	r2, [r3, #12]
 800f988:	e17f      	b.n	800fc8a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f990:	e17b      	b.n	800fc8a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f99a:	f040 80bd 	bne.w	800fb18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f99e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f9a2:	2b20      	cmp	r3, #32
 800f9a4:	dc48      	bgt.n	800fa38 <UART_SetConfig+0xa50>
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	db7b      	blt.n	800faa2 <UART_SetConfig+0xaba>
 800f9aa:	2b20      	cmp	r3, #32
 800f9ac:	d879      	bhi.n	800faa2 <UART_SetConfig+0xaba>
 800f9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f9b4 <UART_SetConfig+0x9cc>)
 800f9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b4:	0800fa3f 	.word	0x0800fa3f
 800f9b8:	0800fa47 	.word	0x0800fa47
 800f9bc:	0800faa3 	.word	0x0800faa3
 800f9c0:	0800faa3 	.word	0x0800faa3
 800f9c4:	0800fa4f 	.word	0x0800fa4f
 800f9c8:	0800faa3 	.word	0x0800faa3
 800f9cc:	0800faa3 	.word	0x0800faa3
 800f9d0:	0800faa3 	.word	0x0800faa3
 800f9d4:	0800fa5f 	.word	0x0800fa5f
 800f9d8:	0800faa3 	.word	0x0800faa3
 800f9dc:	0800faa3 	.word	0x0800faa3
 800f9e0:	0800faa3 	.word	0x0800faa3
 800f9e4:	0800faa3 	.word	0x0800faa3
 800f9e8:	0800faa3 	.word	0x0800faa3
 800f9ec:	0800faa3 	.word	0x0800faa3
 800f9f0:	0800faa3 	.word	0x0800faa3
 800f9f4:	0800fa6f 	.word	0x0800fa6f
 800f9f8:	0800faa3 	.word	0x0800faa3
 800f9fc:	0800faa3 	.word	0x0800faa3
 800fa00:	0800faa3 	.word	0x0800faa3
 800fa04:	0800faa3 	.word	0x0800faa3
 800fa08:	0800faa3 	.word	0x0800faa3
 800fa0c:	0800faa3 	.word	0x0800faa3
 800fa10:	0800faa3 	.word	0x0800faa3
 800fa14:	0800faa3 	.word	0x0800faa3
 800fa18:	0800faa3 	.word	0x0800faa3
 800fa1c:	0800faa3 	.word	0x0800faa3
 800fa20:	0800faa3 	.word	0x0800faa3
 800fa24:	0800faa3 	.word	0x0800faa3
 800fa28:	0800faa3 	.word	0x0800faa3
 800fa2c:	0800faa3 	.word	0x0800faa3
 800fa30:	0800faa3 	.word	0x0800faa3
 800fa34:	0800fa95 	.word	0x0800fa95
 800fa38:	2b40      	cmp	r3, #64	@ 0x40
 800fa3a:	d02e      	beq.n	800fa9a <UART_SetConfig+0xab2>
 800fa3c:	e031      	b.n	800faa2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa3e:	f7fa f8fd 	bl	8009c3c <HAL_RCC_GetPCLK1Freq>
 800fa42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa44:	e033      	b.n	800faae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa46:	f7fa f90f 	bl	8009c68 <HAL_RCC_GetPCLK2Freq>
 800fa4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa4c:	e02f      	b.n	800faae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fb ffa6 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa5c:	e027      	b.n	800faae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa5e:	f107 0318 	add.w	r3, r7, #24
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fc f8f2 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa6c:	e01f      	b.n	800faae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa6e:	4b69      	ldr	r3, [pc, #420]	@ (800fc14 <UART_SetConfig+0xc2c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	f003 0320 	and.w	r3, r3, #32
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d009      	beq.n	800fa8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa7a:	4b66      	ldr	r3, [pc, #408]	@ (800fc14 <UART_SetConfig+0xc2c>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	08db      	lsrs	r3, r3, #3
 800fa80:	f003 0303 	and.w	r3, r3, #3
 800fa84:	4a64      	ldr	r2, [pc, #400]	@ (800fc18 <UART_SetConfig+0xc30>)
 800fa86:	fa22 f303 	lsr.w	r3, r2, r3
 800fa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa8c:	e00f      	b.n	800faae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fa8e:	4b62      	ldr	r3, [pc, #392]	@ (800fc18 <UART_SetConfig+0xc30>)
 800fa90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa92:	e00c      	b.n	800faae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa94:	4b61      	ldr	r3, [pc, #388]	@ (800fc1c <UART_SetConfig+0xc34>)
 800fa96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa98:	e009      	b.n	800faae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faa0:	e005      	b.n	800faae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800faa2:	2300      	movs	r3, #0
 800faa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800faac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800faae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 80ea 	beq.w	800fc8a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faba:	4a55      	ldr	r2, [pc, #340]	@ (800fc10 <UART_SetConfig+0xc28>)
 800fabc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fac0:	461a      	mov	r2, r3
 800fac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fac4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fac8:	005a      	lsls	r2, r3, #1
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	085b      	lsrs	r3, r3, #1
 800fad0:	441a      	add	r2, r3
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fada:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fade:	2b0f      	cmp	r3, #15
 800fae0:	d916      	bls.n	800fb10 <UART_SetConfig+0xb28>
 800fae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fae8:	d212      	bcs.n	800fb10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800faea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faec:	b29b      	uxth	r3, r3
 800faee:	f023 030f 	bic.w	r3, r3, #15
 800faf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800faf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf6:	085b      	lsrs	r3, r3, #1
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	f003 0307 	and.w	r3, r3, #7
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb02:	4313      	orrs	r3, r2
 800fb04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fb0c:	60da      	str	r2, [r3, #12]
 800fb0e:	e0bc      	b.n	800fc8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fb10:	2301      	movs	r3, #1
 800fb12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fb16:	e0b8      	b.n	800fc8a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fb18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fb1c:	2b20      	cmp	r3, #32
 800fb1e:	dc4b      	bgt.n	800fbb8 <UART_SetConfig+0xbd0>
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f2c0 8087 	blt.w	800fc34 <UART_SetConfig+0xc4c>
 800fb26:	2b20      	cmp	r3, #32
 800fb28:	f200 8084 	bhi.w	800fc34 <UART_SetConfig+0xc4c>
 800fb2c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb34 <UART_SetConfig+0xb4c>)
 800fb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb32:	bf00      	nop
 800fb34:	0800fbbf 	.word	0x0800fbbf
 800fb38:	0800fbc7 	.word	0x0800fbc7
 800fb3c:	0800fc35 	.word	0x0800fc35
 800fb40:	0800fc35 	.word	0x0800fc35
 800fb44:	0800fbcf 	.word	0x0800fbcf
 800fb48:	0800fc35 	.word	0x0800fc35
 800fb4c:	0800fc35 	.word	0x0800fc35
 800fb50:	0800fc35 	.word	0x0800fc35
 800fb54:	0800fbdf 	.word	0x0800fbdf
 800fb58:	0800fc35 	.word	0x0800fc35
 800fb5c:	0800fc35 	.word	0x0800fc35
 800fb60:	0800fc35 	.word	0x0800fc35
 800fb64:	0800fc35 	.word	0x0800fc35
 800fb68:	0800fc35 	.word	0x0800fc35
 800fb6c:	0800fc35 	.word	0x0800fc35
 800fb70:	0800fc35 	.word	0x0800fc35
 800fb74:	0800fbef 	.word	0x0800fbef
 800fb78:	0800fc35 	.word	0x0800fc35
 800fb7c:	0800fc35 	.word	0x0800fc35
 800fb80:	0800fc35 	.word	0x0800fc35
 800fb84:	0800fc35 	.word	0x0800fc35
 800fb88:	0800fc35 	.word	0x0800fc35
 800fb8c:	0800fc35 	.word	0x0800fc35
 800fb90:	0800fc35 	.word	0x0800fc35
 800fb94:	0800fc35 	.word	0x0800fc35
 800fb98:	0800fc35 	.word	0x0800fc35
 800fb9c:	0800fc35 	.word	0x0800fc35
 800fba0:	0800fc35 	.word	0x0800fc35
 800fba4:	0800fc35 	.word	0x0800fc35
 800fba8:	0800fc35 	.word	0x0800fc35
 800fbac:	0800fc35 	.word	0x0800fc35
 800fbb0:	0800fc35 	.word	0x0800fc35
 800fbb4:	0800fc27 	.word	0x0800fc27
 800fbb8:	2b40      	cmp	r3, #64	@ 0x40
 800fbba:	d037      	beq.n	800fc2c <UART_SetConfig+0xc44>
 800fbbc:	e03a      	b.n	800fc34 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbbe:	f7fa f83d 	bl	8009c3c <HAL_RCC_GetPCLK1Freq>
 800fbc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fbc4:	e03c      	b.n	800fc40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbc6:	f7fa f84f 	bl	8009c68 <HAL_RCC_GetPCLK2Freq>
 800fbca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fbcc:	e038      	b.n	800fc40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fb fee6 	bl	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbdc:	e030      	b.n	800fc40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbde:	f107 0318 	add.w	r3, r7, #24
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fc f832 	bl	800bc4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbec:	e028      	b.n	800fc40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbee:	4b09      	ldr	r3, [pc, #36]	@ (800fc14 <UART_SetConfig+0xc2c>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f003 0320 	and.w	r3, r3, #32
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d012      	beq.n	800fc20 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbfa:	4b06      	ldr	r3, [pc, #24]	@ (800fc14 <UART_SetConfig+0xc2c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	08db      	lsrs	r3, r3, #3
 800fc00:	f003 0303 	and.w	r3, r3, #3
 800fc04:	4a04      	ldr	r2, [pc, #16]	@ (800fc18 <UART_SetConfig+0xc30>)
 800fc06:	fa22 f303 	lsr.w	r3, r2, r3
 800fc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc0c:	e018      	b.n	800fc40 <UART_SetConfig+0xc58>
 800fc0e:	bf00      	nop
 800fc10:	080113e0 	.word	0x080113e0
 800fc14:	58024400 	.word	0x58024400
 800fc18:	03d09000 	.word	0x03d09000
 800fc1c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fc20:	4b24      	ldr	r3, [pc, #144]	@ (800fcb4 <UART_SetConfig+0xccc>)
 800fc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc24:	e00c      	b.n	800fc40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc26:	4b24      	ldr	r3, [pc, #144]	@ (800fcb8 <UART_SetConfig+0xcd0>)
 800fc28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc2a:	e009      	b.n	800fc40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc32:	e005      	b.n	800fc40 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fc34:	2300      	movs	r3, #0
 800fc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fc3e:	bf00      	nop
    }

    if (pclk != 0U)
 800fc40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d021      	beq.n	800fc8a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc4a:	4a1c      	ldr	r2, [pc, #112]	@ (800fcbc <UART_SetConfig+0xcd4>)
 800fc4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc50:	461a      	mov	r2, r3
 800fc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc54:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	085b      	lsrs	r3, r3, #1
 800fc5e:	441a      	add	r2, r3
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc68:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6c:	2b0f      	cmp	r3, #15
 800fc6e:	d909      	bls.n	800fc84 <UART_SetConfig+0xc9c>
 800fc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc76:	d205      	bcs.n	800fc84 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	60da      	str	r2, [r3, #12]
 800fc82:	e002      	b.n	800fc8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fc84:	2301      	movs	r3, #1
 800fc86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2201      	movs	r2, #1
 800fc96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	2200      	movs	r2, #0
 800fca4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fca6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3748      	adds	r7, #72	@ 0x48
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fcb4:	03d09000 	.word	0x03d09000
 800fcb8:	003d0900 	.word	0x003d0900
 800fcbc:	080113e0 	.word	0x080113e0

0800fcc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fccc:	f003 0308 	and.w	r3, r3, #8
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d00a      	beq.n	800fcea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	430a      	orrs	r2, r1
 800fce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00a      	beq.n	800fd0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	430a      	orrs	r2, r1
 800fd0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd10:	f003 0302 	and.w	r3, r3, #2
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00a      	beq.n	800fd2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	430a      	orrs	r2, r1
 800fd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd32:	f003 0304 	and.w	r3, r3, #4
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00a      	beq.n	800fd50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	430a      	orrs	r2, r1
 800fd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd54:	f003 0310 	and.w	r3, r3, #16
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00a      	beq.n	800fd72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	689b      	ldr	r3, [r3, #8]
 800fd62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd76:	f003 0320 	and.w	r3, r3, #32
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00a      	beq.n	800fd94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	430a      	orrs	r2, r1
 800fd92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d01a      	beq.n	800fdd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	430a      	orrs	r2, r1
 800fdb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdbe:	d10a      	bne.n	800fdd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	430a      	orrs	r2, r1
 800fdd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00a      	beq.n	800fdf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	430a      	orrs	r2, r1
 800fdf6:	605a      	str	r2, [r3, #4]
  }
}
 800fdf8:	bf00      	nop
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b098      	sub	sp, #96	@ 0x60
 800fe08:	af02      	add	r7, sp, #8
 800fe0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fe14:	f7f3 fd72 	bl	80038fc <HAL_GetTick>
 800fe18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f003 0308 	and.w	r3, r3, #8
 800fe24:	2b08      	cmp	r3, #8
 800fe26:	d12f      	bne.n	800fe88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe30:	2200      	movs	r2, #0
 800fe32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 f88e 	bl	800ff58 <UART_WaitOnFlagUntilTimeout>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d022      	beq.n	800fe88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe4a:	e853 3f00 	ldrex	r3, [r3]
 800fe4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe56:	653b      	str	r3, [r7, #80]	@ 0x50
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe60:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe68:	e841 2300 	strex	r3, r2, [r1]
 800fe6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1e6      	bne.n	800fe42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2220      	movs	r2, #32
 800fe78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe84:	2303      	movs	r3, #3
 800fe86:	e063      	b.n	800ff50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f003 0304 	and.w	r3, r3, #4
 800fe92:	2b04      	cmp	r3, #4
 800fe94:	d149      	bne.n	800ff2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f857 	bl	800ff58 <UART_WaitOnFlagUntilTimeout>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d03c      	beq.n	800ff2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb8:	e853 3f00 	ldrex	r3, [r3]
 800febc:	623b      	str	r3, [r7, #32]
   return(result);
 800febe:	6a3b      	ldr	r3, [r7, #32]
 800fec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	461a      	mov	r2, r3
 800fecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fece:	633b      	str	r3, [r7, #48]	@ 0x30
 800fed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fed6:	e841 2300 	strex	r3, r2, [r1]
 800feda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1e6      	bne.n	800feb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	3308      	adds	r3, #8
 800fee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	e853 3f00 	ldrex	r3, [r3]
 800fef0:	60fb      	str	r3, [r7, #12]
   return(result);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f023 0301 	bic.w	r3, r3, #1
 800fef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	3308      	adds	r3, #8
 800ff00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff02:	61fa      	str	r2, [r7, #28]
 800ff04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff06:	69b9      	ldr	r1, [r7, #24]
 800ff08:	69fa      	ldr	r2, [r7, #28]
 800ff0a:	e841 2300 	strex	r3, r2, [r1]
 800ff0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d1e5      	bne.n	800fee2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2220      	movs	r2, #32
 800ff1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff26:	2303      	movs	r3, #3
 800ff28:	e012      	b.n	800ff50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2220      	movs	r2, #32
 800ff2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2220      	movs	r2, #32
 800ff36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3758      	adds	r7, #88	@ 0x58
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	603b      	str	r3, [r7, #0]
 800ff64:	4613      	mov	r3, r2
 800ff66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff68:	e04f      	b.n	801000a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff6a:	69bb      	ldr	r3, [r7, #24]
 800ff6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff70:	d04b      	beq.n	801000a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff72:	f7f3 fcc3 	bl	80038fc <HAL_GetTick>
 800ff76:	4602      	mov	r2, r0
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	69ba      	ldr	r2, [r7, #24]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d302      	bcc.n	800ff88 <UART_WaitOnFlagUntilTimeout+0x30>
 800ff82:	69bb      	ldr	r3, [r7, #24]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d101      	bne.n	800ff8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ff88:	2303      	movs	r3, #3
 800ff8a:	e04e      	b.n	801002a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 0304 	and.w	r3, r3, #4
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d037      	beq.n	801000a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2b80      	cmp	r3, #128	@ 0x80
 800ff9e:	d034      	beq.n	801000a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2b40      	cmp	r3, #64	@ 0x40
 800ffa4:	d031      	beq.n	801000a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	69db      	ldr	r3, [r3, #28]
 800ffac:	f003 0308 	and.w	r3, r3, #8
 800ffb0:	2b08      	cmp	r3, #8
 800ffb2:	d110      	bne.n	800ffd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2208      	movs	r2, #8
 800ffba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f000 f95b 	bl	8010278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2208      	movs	r2, #8
 800ffc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e029      	b.n	801002a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	69db      	ldr	r3, [r3, #28]
 800ffdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ffe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffe4:	d111      	bne.n	801000a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ffee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f000 f941 	bl	8010278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2220      	movs	r2, #32
 800fffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2200      	movs	r2, #0
 8010002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010006:	2303      	movs	r3, #3
 8010008:	e00f      	b.n	801002a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	69da      	ldr	r2, [r3, #28]
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	4013      	ands	r3, r2
 8010014:	68ba      	ldr	r2, [r7, #8]
 8010016:	429a      	cmp	r2, r3
 8010018:	bf0c      	ite	eq
 801001a:	2301      	moveq	r3, #1
 801001c:	2300      	movne	r3, #0
 801001e:	b2db      	uxtb	r3, r3
 8010020:	461a      	mov	r2, r3
 8010022:	79fb      	ldrb	r3, [r7, #7]
 8010024:	429a      	cmp	r2, r3
 8010026:	d0a0      	beq.n	800ff6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010028:	2300      	movs	r3, #0
}
 801002a:	4618      	mov	r0, r3
 801002c:	3710      	adds	r7, #16
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
	...

08010034 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010034:	b480      	push	{r7}
 8010036:	b0a3      	sub	sp, #140	@ 0x8c
 8010038:	af00      	add	r7, sp, #0
 801003a:	60f8      	str	r0, [r7, #12]
 801003c:	60b9      	str	r1, [r7, #8]
 801003e:	4613      	mov	r3, r2
 8010040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	68ba      	ldr	r2, [r7, #8]
 8010046:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	88fa      	ldrh	r2, [r7, #6]
 801004c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	88fa      	ldrh	r2, [r7, #6]
 8010054:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2200      	movs	r2, #0
 801005c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010066:	d10e      	bne.n	8010086 <UART_Start_Receive_IT+0x52>
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	691b      	ldr	r3, [r3, #16]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d105      	bne.n	801007c <UART_Start_Receive_IT+0x48>
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010076:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801007a:	e02d      	b.n	80100d8 <UART_Start_Receive_IT+0xa4>
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	22ff      	movs	r2, #255	@ 0xff
 8010080:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010084:	e028      	b.n	80100d8 <UART_Start_Receive_IT+0xa4>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	689b      	ldr	r3, [r3, #8]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d10d      	bne.n	80100aa <UART_Start_Receive_IT+0x76>
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	691b      	ldr	r3, [r3, #16]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d104      	bne.n	80100a0 <UART_Start_Receive_IT+0x6c>
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	22ff      	movs	r2, #255	@ 0xff
 801009a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801009e:	e01b      	b.n	80100d8 <UART_Start_Receive_IT+0xa4>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	227f      	movs	r2, #127	@ 0x7f
 80100a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80100a8:	e016      	b.n	80100d8 <UART_Start_Receive_IT+0xa4>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100b2:	d10d      	bne.n	80100d0 <UART_Start_Receive_IT+0x9c>
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d104      	bne.n	80100c6 <UART_Start_Receive_IT+0x92>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	227f      	movs	r2, #127	@ 0x7f
 80100c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80100c4:	e008      	b.n	80100d8 <UART_Start_Receive_IT+0xa4>
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	223f      	movs	r2, #63	@ 0x3f
 80100ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80100ce:	e003      	b.n	80100d8 <UART_Start_Receive_IT+0xa4>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2200      	movs	r2, #0
 80100d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2200      	movs	r2, #0
 80100dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2222      	movs	r2, #34	@ 0x22
 80100e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	3308      	adds	r3, #8
 80100ee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100f2:	e853 3f00 	ldrex	r3, [r3]
 80100f6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80100f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100fa:	f043 0301 	orr.w	r3, r3, #1
 80100fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3308      	adds	r3, #8
 8010108:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801010c:	673a      	str	r2, [r7, #112]	@ 0x70
 801010e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010110:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010112:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010114:	e841 2300 	strex	r3, r2, [r1]
 8010118:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801011a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1e3      	bne.n	80100e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010128:	d14f      	bne.n	80101ca <UART_Start_Receive_IT+0x196>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010130:	88fa      	ldrh	r2, [r7, #6]
 8010132:	429a      	cmp	r2, r3
 8010134:	d349      	bcc.n	80101ca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801013e:	d107      	bne.n	8010150 <UART_Start_Receive_IT+0x11c>
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	691b      	ldr	r3, [r3, #16]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d103      	bne.n	8010150 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	4a47      	ldr	r2, [pc, #284]	@ (8010268 <UART_Start_Receive_IT+0x234>)
 801014c:	675a      	str	r2, [r3, #116]	@ 0x74
 801014e:	e002      	b.n	8010156 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	4a46      	ldr	r2, [pc, #280]	@ (801026c <UART_Start_Receive_IT+0x238>)
 8010154:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d01a      	beq.n	8010194 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010166:	e853 3f00 	ldrex	r3, [r3]
 801016a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801016c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801016e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010172:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010182:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010184:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010186:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010188:	e841 2300 	strex	r3, r2, [r1]
 801018c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801018e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1e4      	bne.n	801015e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	3308      	adds	r3, #8
 801019a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801019e:	e853 3f00 	ldrex	r3, [r3]
 80101a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80101a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80101aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3308      	adds	r3, #8
 80101b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80101b4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80101b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101bc:	e841 2300 	strex	r3, r2, [r1]
 80101c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80101c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1e5      	bne.n	8010194 <UART_Start_Receive_IT+0x160>
 80101c8:	e046      	b.n	8010258 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80101d2:	d107      	bne.n	80101e4 <UART_Start_Receive_IT+0x1b0>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	691b      	ldr	r3, [r3, #16]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d103      	bne.n	80101e4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	4a24      	ldr	r2, [pc, #144]	@ (8010270 <UART_Start_Receive_IT+0x23c>)
 80101e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80101e2:	e002      	b.n	80101ea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	4a23      	ldr	r2, [pc, #140]	@ (8010274 <UART_Start_Receive_IT+0x240>)
 80101e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	691b      	ldr	r3, [r3, #16]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d019      	beq.n	8010226 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101fa:	e853 3f00 	ldrex	r3, [r3]
 80101fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010202:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8010206:	677b      	str	r3, [r7, #116]	@ 0x74
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010210:	637b      	str	r3, [r7, #52]	@ 0x34
 8010212:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010214:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010216:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010218:	e841 2300 	strex	r3, r2, [r1]
 801021c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801021e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e6      	bne.n	80101f2 <UART_Start_Receive_IT+0x1be>
 8010224:	e018      	b.n	8010258 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	e853 3f00 	ldrex	r3, [r3]
 8010232:	613b      	str	r3, [r7, #16]
   return(result);
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	f043 0320 	orr.w	r3, r3, #32
 801023a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	461a      	mov	r2, r3
 8010242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010244:	623b      	str	r3, [r7, #32]
 8010246:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010248:	69f9      	ldr	r1, [r7, #28]
 801024a:	6a3a      	ldr	r2, [r7, #32]
 801024c:	e841 2300 	strex	r3, r2, [r1]
 8010250:	61bb      	str	r3, [r7, #24]
   return(result);
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1e6      	bne.n	8010226 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010258:	2300      	movs	r3, #0
}
 801025a:	4618      	mov	r0, r3
 801025c:	378c      	adds	r7, #140	@ 0x8c
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	08010a99 	.word	0x08010a99
 801026c:	08010739 	.word	0x08010739
 8010270:	08010581 	.word	0x08010581
 8010274:	080103c9 	.word	0x080103c9

08010278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010278:	b480      	push	{r7}
 801027a:	b095      	sub	sp, #84	@ 0x54
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010288:	e853 3f00 	ldrex	r3, [r3]
 801028c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801028e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	461a      	mov	r2, r3
 801029c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801029e:	643b      	str	r3, [r7, #64]	@ 0x40
 80102a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80102a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102a6:	e841 2300 	strex	r3, r2, [r1]
 80102aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80102ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1e6      	bne.n	8010280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	3308      	adds	r3, #8
 80102b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ba:	6a3b      	ldr	r3, [r7, #32]
 80102bc:	e853 3f00 	ldrex	r3, [r3]
 80102c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80102c2:	69fa      	ldr	r2, [r7, #28]
 80102c4:	4b1e      	ldr	r3, [pc, #120]	@ (8010340 <UART_EndRxTransfer+0xc8>)
 80102c6:	4013      	ands	r3, r2
 80102c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	3308      	adds	r3, #8
 80102d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80102d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80102d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102da:	e841 2300 	strex	r3, r2, [r1]
 80102de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80102e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1e5      	bne.n	80102b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d118      	bne.n	8010320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	e853 3f00 	ldrex	r3, [r3]
 80102fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	f023 0310 	bic.w	r3, r3, #16
 8010302:	647b      	str	r3, [r7, #68]	@ 0x44
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	461a      	mov	r2, r3
 801030a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801030c:	61bb      	str	r3, [r7, #24]
 801030e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010310:	6979      	ldr	r1, [r7, #20]
 8010312:	69ba      	ldr	r2, [r7, #24]
 8010314:	e841 2300 	strex	r3, r2, [r1]
 8010318:	613b      	str	r3, [r7, #16]
   return(result);
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d1e6      	bne.n	80102ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2220      	movs	r2, #32
 8010324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2200      	movs	r2, #0
 801032c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2200      	movs	r2, #0
 8010332:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010334:	bf00      	nop
 8010336:	3754      	adds	r7, #84	@ 0x54
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	effffffe 	.word	0xeffffffe

08010344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2200      	movs	r2, #0
 8010356:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2200      	movs	r2, #0
 801035e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7fe fe36 	bl	800efd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010368:	bf00      	nop
 801036a:	3710      	adds	r7, #16
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b088      	sub	sp, #32
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	e853 3f00 	ldrex	r3, [r3]
 8010384:	60bb      	str	r3, [r7, #8]
   return(result);
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801038c:	61fb      	str	r3, [r7, #28]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	461a      	mov	r2, r3
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	61bb      	str	r3, [r7, #24]
 8010398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039a:	6979      	ldr	r1, [r7, #20]
 801039c:	69ba      	ldr	r2, [r7, #24]
 801039e:	e841 2300 	strex	r3, r2, [r1]
 80103a2:	613b      	str	r3, [r7, #16]
   return(result);
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1e6      	bne.n	8010378 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2220      	movs	r2, #32
 80103ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7fe fdf7 	bl	800efac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103be:	bf00      	nop
 80103c0:	3720      	adds	r7, #32
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
	...

080103c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b09c      	sub	sp, #112	@ 0x70
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80103e0:	2b22      	cmp	r3, #34	@ 0x22
 80103e2:	f040 80be 	bne.w	8010562 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80103f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80103f4:	b2d9      	uxtb	r1, r3
 80103f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80103fa:	b2da      	uxtb	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010400:	400a      	ands	r2, r1
 8010402:	b2d2      	uxtb	r2, r2
 8010404:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801040a:	1c5a      	adds	r2, r3, #1
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010416:	b29b      	uxth	r3, r3
 8010418:	3b01      	subs	r3, #1
 801041a:	b29a      	uxth	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010428:	b29b      	uxth	r3, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	f040 80a1 	bne.w	8010572 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010438:	e853 3f00 	ldrex	r3, [r3]
 801043c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801043e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801044e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010450:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010452:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010454:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010456:	e841 2300 	strex	r3, r2, [r1]
 801045a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801045c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1e6      	bne.n	8010430 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3308      	adds	r3, #8
 8010468:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801046c:	e853 3f00 	ldrex	r3, [r3]
 8010470:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010474:	f023 0301 	bic.w	r3, r3, #1
 8010478:	667b      	str	r3, [r7, #100]	@ 0x64
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3308      	adds	r3, #8
 8010480:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010482:	647a      	str	r2, [r7, #68]	@ 0x44
 8010484:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010486:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010488:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801048a:	e841 2300 	strex	r3, r2, [r1]
 801048e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1e5      	bne.n	8010462 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2220      	movs	r2, #32
 801049a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2200      	movs	r2, #0
 80104a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a33      	ldr	r2, [pc, #204]	@ (801057c <UART_RxISR_8BIT+0x1b4>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d01f      	beq.n	80104f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d018      	beq.n	80104f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ca:	e853 3f00 	ldrex	r3, [r3]
 80104ce:	623b      	str	r3, [r7, #32]
   return(result);
 80104d0:	6a3b      	ldr	r3, [r7, #32]
 80104d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80104d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	461a      	mov	r2, r3
 80104de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80104e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80104e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104e8:	e841 2300 	strex	r3, r2, [r1]
 80104ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80104ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1e6      	bne.n	80104c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d12e      	bne.n	801055a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	e853 3f00 	ldrex	r3, [r3]
 801050e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f023 0310 	bic.w	r3, r3, #16
 8010516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	461a      	mov	r2, r3
 801051e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010520:	61fb      	str	r3, [r7, #28]
 8010522:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010524:	69b9      	ldr	r1, [r7, #24]
 8010526:	69fa      	ldr	r2, [r7, #28]
 8010528:	e841 2300 	strex	r3, r2, [r1]
 801052c:	617b      	str	r3, [r7, #20]
   return(result);
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1e6      	bne.n	8010502 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	69db      	ldr	r3, [r3, #28]
 801053a:	f003 0310 	and.w	r3, r3, #16
 801053e:	2b10      	cmp	r3, #16
 8010540:	d103      	bne.n	801054a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2210      	movs	r2, #16
 8010548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010550:	4619      	mov	r1, r3
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7f1 f9e4 	bl	8001920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010558:	e00b      	b.n	8010572 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7fe fd30 	bl	800efc0 <HAL_UART_RxCpltCallback>
}
 8010560:	e007      	b.n	8010572 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	699a      	ldr	r2, [r3, #24]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f042 0208 	orr.w	r2, r2, #8
 8010570:	619a      	str	r2, [r3, #24]
}
 8010572:	bf00      	nop
 8010574:	3770      	adds	r7, #112	@ 0x70
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	58000c00 	.word	0x58000c00

08010580 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b09c      	sub	sp, #112	@ 0x70
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801058e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010598:	2b22      	cmp	r3, #34	@ 0x22
 801059a:	f040 80be 	bne.w	801071a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80105ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80105b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80105b6:	4013      	ands	r3, r2
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80105bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105c2:	1c9a      	adds	r2, r3, #2
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	3b01      	subs	r3, #1
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105e0:	b29b      	uxth	r3, r3
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f040 80a1 	bne.w	801072a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80105f0:	e853 3f00 	ldrex	r3, [r3]
 80105f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80105f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80105fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	461a      	mov	r2, r3
 8010604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010606:	657b      	str	r3, [r7, #84]	@ 0x54
 8010608:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801060c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801060e:	e841 2300 	strex	r3, r2, [r1]
 8010612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1e6      	bne.n	80105e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	3308      	adds	r3, #8
 8010620:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010624:	e853 3f00 	ldrex	r3, [r3]
 8010628:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801062a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801062c:	f023 0301 	bic.w	r3, r3, #1
 8010630:	663b      	str	r3, [r7, #96]	@ 0x60
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	3308      	adds	r3, #8
 8010638:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801063a:	643a      	str	r2, [r7, #64]	@ 0x40
 801063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801063e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010640:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010642:	e841 2300 	strex	r3, r2, [r1]
 8010646:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1e5      	bne.n	801061a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2220      	movs	r2, #32
 8010652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4a33      	ldr	r2, [pc, #204]	@ (8010734 <UART_RxISR_16BIT+0x1b4>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d01f      	beq.n	80106ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010676:	2b00      	cmp	r3, #0
 8010678:	d018      	beq.n	80106ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	e853 3f00 	ldrex	r3, [r3]
 8010686:	61fb      	str	r3, [r7, #28]
   return(result);
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801068e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	461a      	mov	r2, r3
 8010696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801069a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801069e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106a0:	e841 2300 	strex	r3, r2, [r1]
 80106a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1e6      	bne.n	801067a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d12e      	bne.n	8010712 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	e853 3f00 	ldrex	r3, [r3]
 80106c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	f023 0310 	bic.w	r3, r3, #16
 80106ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	461a      	mov	r2, r3
 80106d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106d8:	61bb      	str	r3, [r7, #24]
 80106da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106dc:	6979      	ldr	r1, [r7, #20]
 80106de:	69ba      	ldr	r2, [r7, #24]
 80106e0:	e841 2300 	strex	r3, r2, [r1]
 80106e4:	613b      	str	r3, [r7, #16]
   return(result);
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d1e6      	bne.n	80106ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	69db      	ldr	r3, [r3, #28]
 80106f2:	f003 0310 	and.w	r3, r3, #16
 80106f6:	2b10      	cmp	r3, #16
 80106f8:	d103      	bne.n	8010702 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2210      	movs	r2, #16
 8010700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010708:	4619      	mov	r1, r3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7f1 f908 	bl	8001920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010710:	e00b      	b.n	801072a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f7fe fc54 	bl	800efc0 <HAL_UART_RxCpltCallback>
}
 8010718:	e007      	b.n	801072a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	699a      	ldr	r2, [r3, #24]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f042 0208 	orr.w	r2, r2, #8
 8010728:	619a      	str	r2, [r3, #24]
}
 801072a:	bf00      	nop
 801072c:	3770      	adds	r7, #112	@ 0x70
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	58000c00 	.word	0x58000c00

08010738 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b0ac      	sub	sp, #176	@ 0xb0
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010746:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	69db      	ldr	r3, [r3, #28]
 8010750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801076e:	2b22      	cmp	r3, #34	@ 0x22
 8010770:	f040 8180 	bne.w	8010a74 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801077a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801077e:	e123      	b.n	80109c8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010786:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801078a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801078e:	b2d9      	uxtb	r1, r3
 8010790:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010794:	b2da      	uxtb	r2, r3
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801079a:	400a      	ands	r2, r1
 801079c:	b2d2      	uxtb	r2, r2
 801079e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107a4:	1c5a      	adds	r2, r3, #1
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	3b01      	subs	r3, #1
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	69db      	ldr	r3, [r3, #28]
 80107c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80107c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107ca:	f003 0307 	and.w	r3, r3, #7
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d053      	beq.n	801087a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80107d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107d6:	f003 0301 	and.w	r3, r3, #1
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d011      	beq.n	8010802 <UART_RxISR_8BIT_FIFOEN+0xca>
 80107de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80107e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d00b      	beq.n	8010802 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2201      	movs	r2, #1
 80107f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107f8:	f043 0201 	orr.w	r2, r3, #1
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010806:	f003 0302 	and.w	r3, r3, #2
 801080a:	2b00      	cmp	r3, #0
 801080c:	d011      	beq.n	8010832 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801080e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010812:	f003 0301 	and.w	r3, r3, #1
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00b      	beq.n	8010832 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2202      	movs	r2, #2
 8010820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010828:	f043 0204 	orr.w	r2, r3, #4
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010836:	f003 0304 	and.w	r3, r3, #4
 801083a:	2b00      	cmp	r3, #0
 801083c:	d011      	beq.n	8010862 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801083e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010842:	f003 0301 	and.w	r3, r3, #1
 8010846:	2b00      	cmp	r3, #0
 8010848:	d00b      	beq.n	8010862 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2204      	movs	r2, #4
 8010850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010858:	f043 0202 	orr.w	r2, r3, #2
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010868:	2b00      	cmp	r3, #0
 801086a:	d006      	beq.n	801087a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7fe fbb1 	bl	800efd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010880:	b29b      	uxth	r3, r3
 8010882:	2b00      	cmp	r3, #0
 8010884:	f040 80a0 	bne.w	80109c8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010890:	e853 3f00 	ldrex	r3, [r3]
 8010894:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8010896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801089c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	461a      	mov	r2, r3
 80108a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80108aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80108ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80108b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80108b2:	e841 2300 	strex	r3, r2, [r1]
 80108b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80108b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1e4      	bne.n	8010888 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	3308      	adds	r3, #8
 80108c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108c8:	e853 3f00 	ldrex	r3, [r3]
 80108cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80108ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80108d0:	4b6e      	ldr	r3, [pc, #440]	@ (8010a8c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80108d2:	4013      	ands	r3, r2
 80108d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	3308      	adds	r3, #8
 80108de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80108e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80108e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80108e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80108ea:	e841 2300 	strex	r3, r2, [r1]
 80108ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80108f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1e3      	bne.n	80108be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2220      	movs	r2, #32
 80108fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	4a60      	ldr	r2, [pc, #384]	@ (8010a90 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010910:	4293      	cmp	r3, r2
 8010912:	d021      	beq.n	8010958 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801091e:	2b00      	cmp	r3, #0
 8010920:	d01a      	beq.n	8010958 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801092a:	e853 3f00 	ldrex	r3, [r3]
 801092e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	461a      	mov	r2, r3
 8010940:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010944:	657b      	str	r3, [r7, #84]	@ 0x54
 8010946:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010948:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801094a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801094c:	e841 2300 	strex	r3, r2, [r1]
 8010950:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1e4      	bne.n	8010922 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801095c:	2b01      	cmp	r3, #1
 801095e:	d130      	bne.n	80109c2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801096c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801096e:	e853 3f00 	ldrex	r3, [r3]
 8010972:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010976:	f023 0310 	bic.w	r3, r3, #16
 801097a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	461a      	mov	r2, r3
 8010984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010988:	643b      	str	r3, [r7, #64]	@ 0x40
 801098a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801098c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801098e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010990:	e841 2300 	strex	r3, r2, [r1]
 8010994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1e4      	bne.n	8010966 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	69db      	ldr	r3, [r3, #28]
 80109a2:	f003 0310 	and.w	r3, r3, #16
 80109a6:	2b10      	cmp	r3, #16
 80109a8:	d103      	bne.n	80109b2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2210      	movs	r2, #16
 80109b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80109b8:	4619      	mov	r1, r3
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7f0 ffb0 	bl	8001920 <HAL_UARTEx_RxEventCallback>
 80109c0:	e002      	b.n	80109c8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7fe fafc 	bl	800efc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80109c8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d006      	beq.n	80109de <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80109d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80109d4:	f003 0320 	and.w	r3, r3, #32
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f47f aed1 	bne.w	8010780 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80109e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80109e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d049      	beq.n	8010a84 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80109f6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d242      	bcs.n	8010a84 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	3308      	adds	r3, #8
 8010a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a06:	6a3b      	ldr	r3, [r7, #32]
 8010a08:	e853 3f00 	ldrex	r3, [r3]
 8010a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a2a:	e841 2300 	strex	r3, r2, [r1]
 8010a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1e3      	bne.n	80109fe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4a16      	ldr	r2, [pc, #88]	@ (8010a94 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010a3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	e853 3f00 	ldrex	r3, [r3]
 8010a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	f043 0320 	orr.w	r3, r3, #32
 8010a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010a5e:	61bb      	str	r3, [r7, #24]
 8010a60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a62:	6979      	ldr	r1, [r7, #20]
 8010a64:	69ba      	ldr	r2, [r7, #24]
 8010a66:	e841 2300 	strex	r3, r2, [r1]
 8010a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1e4      	bne.n	8010a3c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a72:	e007      	b.n	8010a84 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	699a      	ldr	r2, [r3, #24]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f042 0208 	orr.w	r2, r2, #8
 8010a82:	619a      	str	r2, [r3, #24]
}
 8010a84:	bf00      	nop
 8010a86:	37b0      	adds	r7, #176	@ 0xb0
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	effffffe 	.word	0xeffffffe
 8010a90:	58000c00 	.word	0x58000c00
 8010a94:	080103c9 	.word	0x080103c9

08010a98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b0ae      	sub	sp, #184	@ 0xb8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010aa6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	69db      	ldr	r3, [r3, #28]
 8010ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ace:	2b22      	cmp	r3, #34	@ 0x22
 8010ad0:	f040 8184 	bne.w	8010ddc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010ada:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ade:	e127      	b.n	8010d30 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010af2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8010af6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8010afa:	4013      	ands	r3, r2
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010b02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b08:	1c9a      	adds	r2, r3, #2
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	3b01      	subs	r3, #1
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	69db      	ldr	r3, [r3, #28]
 8010b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010b2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010b2e:	f003 0307 	and.w	r3, r3, #7
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d053      	beq.n	8010bde <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010b3a:	f003 0301 	and.w	r3, r3, #1
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d011      	beq.n	8010b66 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00b      	beq.n	8010b66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2201      	movs	r2, #1
 8010b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b5c:	f043 0201 	orr.w	r2, r3, #1
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010b6a:	f003 0302 	and.w	r3, r3, #2
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d011      	beq.n	8010b96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010b76:	f003 0301 	and.w	r3, r3, #1
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00b      	beq.n	8010b96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2202      	movs	r2, #2
 8010b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b8c:	f043 0204 	orr.w	r2, r3, #4
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010b9a:	f003 0304 	and.w	r3, r3, #4
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d011      	beq.n	8010bc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010ba6:	f003 0301 	and.w	r3, r3, #1
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d00b      	beq.n	8010bc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	2204      	movs	r2, #4
 8010bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bbc:	f043 0202 	orr.w	r2, r3, #2
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d006      	beq.n	8010bde <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7fe f9ff 	bl	800efd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f040 80a2 	bne.w	8010d30 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bf4:	e853 3f00 	ldrex	r3, [r3]
 8010bf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	461a      	mov	r2, r3
 8010c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010c0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010c12:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010c1a:	e841 2300 	strex	r3, r2, [r1]
 8010c1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1e2      	bne.n	8010bec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	3308      	adds	r3, #8
 8010c2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c30:	e853 3f00 	ldrex	r3, [r3]
 8010c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010c36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010c38:	4b6e      	ldr	r3, [pc, #440]	@ (8010df4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010c3a:	4013      	ands	r3, r2
 8010c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3308      	adds	r3, #8
 8010c46:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010c4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010c50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c52:	e841 2300 	strex	r3, r2, [r1]
 8010c56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1e3      	bne.n	8010c26 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2220      	movs	r2, #32
 8010c62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	4a60      	ldr	r2, [pc, #384]	@ (8010df8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d021      	beq.n	8010cc0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d01a      	beq.n	8010cc0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c92:	e853 3f00 	ldrex	r3, [r3]
 8010c96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010c9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010cac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010cae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010cb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010cb4:	e841 2300 	strex	r3, r2, [r1]
 8010cb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1e4      	bne.n	8010c8a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d130      	bne.n	8010d2a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cde:	f023 0310 	bic.w	r3, r3, #16
 8010ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	461a      	mov	r2, r3
 8010cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cf8:	e841 2300 	strex	r3, r2, [r1]
 8010cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d1e4      	bne.n	8010cce <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	69db      	ldr	r3, [r3, #28]
 8010d0a:	f003 0310 	and.w	r3, r3, #16
 8010d0e:	2b10      	cmp	r3, #16
 8010d10:	d103      	bne.n	8010d1a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2210      	movs	r2, #16
 8010d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d20:	4619      	mov	r1, r3
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f7f0 fdfc 	bl	8001920 <HAL_UARTEx_RxEventCallback>
 8010d28:	e002      	b.n	8010d30 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f7fe f948 	bl	800efc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d30:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d006      	beq.n	8010d46 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010d38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010d3c:	f003 0320 	and.w	r3, r3, #32
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f47f aecd 	bne.w	8010ae0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010d4c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010d50:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d049      	beq.n	8010dec <UART_RxISR_16BIT_FIFOEN+0x354>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010d5e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d242      	bcs.n	8010dec <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3308      	adds	r3, #8
 8010d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d70:	e853 3f00 	ldrex	r3, [r3]
 8010d74:	623b      	str	r3, [r7, #32]
   return(result);
 8010d76:	6a3b      	ldr	r3, [r7, #32]
 8010d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	3308      	adds	r3, #8
 8010d86:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010d8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d92:	e841 2300 	strex	r3, r2, [r1]
 8010d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1e3      	bne.n	8010d66 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4a16      	ldr	r2, [pc, #88]	@ (8010dfc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010da2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	e853 3f00 	ldrex	r3, [r3]
 8010db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f043 0320 	orr.w	r3, r3, #32
 8010db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010dc6:	61fb      	str	r3, [r7, #28]
 8010dc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dca:	69b9      	ldr	r1, [r7, #24]
 8010dcc:	69fa      	ldr	r2, [r7, #28]
 8010dce:	e841 2300 	strex	r3, r2, [r1]
 8010dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d1e4      	bne.n	8010da4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010dda:	e007      	b.n	8010dec <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	699a      	ldr	r2, [r3, #24]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f042 0208 	orr.w	r2, r2, #8
 8010dea:	619a      	str	r2, [r3, #24]
}
 8010dec:	bf00      	nop
 8010dee:	37b8      	adds	r7, #184	@ 0xb8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	effffffe 	.word	0xeffffffe
 8010df8:	58000c00 	.word	0x58000c00
 8010dfc:	08010581 	.word	0x08010581

08010e00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010e30:	bf00      	nop
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d101      	bne.n	8010e52 <HAL_UARTEx_DisableFifoMode+0x16>
 8010e4e:	2302      	movs	r3, #2
 8010e50:	e027      	b.n	8010ea2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2201      	movs	r2, #1
 8010e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2224      	movs	r2, #36	@ 0x24
 8010e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f022 0201 	bic.w	r2, r2, #1
 8010e78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010e80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2220      	movs	r2, #32
 8010e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ea0:	2300      	movs	r3, #0
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3714      	adds	r7, #20
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr

08010eae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b084      	sub	sp, #16
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
 8010eb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ebe:	2b01      	cmp	r3, #1
 8010ec0:	d101      	bne.n	8010ec6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010ec2:	2302      	movs	r3, #2
 8010ec4:	e02d      	b.n	8010f22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2201      	movs	r2, #1
 8010eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2224      	movs	r2, #36	@ 0x24
 8010ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f022 0201 	bic.w	r2, r2, #1
 8010eec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	430a      	orrs	r2, r1
 8010f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f8a0 	bl	8011048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2220      	movs	r2, #32
 8010f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f20:	2300      	movs	r3, #0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f2a:	b580      	push	{r7, lr}
 8010f2c:	b084      	sub	sp, #16
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
 8010f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d101      	bne.n	8010f42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f3e:	2302      	movs	r3, #2
 8010f40:	e02d      	b.n	8010f9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2201      	movs	r2, #1
 8010f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2224      	movs	r2, #36	@ 0x24
 8010f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f022 0201 	bic.w	r2, r2, #1
 8010f68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	683a      	ldr	r2, [r7, #0]
 8010f7a:	430a      	orrs	r2, r1
 8010f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f862 	bl	8011048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2220      	movs	r2, #32
 8010f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f9c:	2300      	movs	r3, #0
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}

08010fa6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fa6:	b580      	push	{r7, lr}
 8010fa8:	b08c      	sub	sp, #48	@ 0x30
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	60f8      	str	r0, [r7, #12]
 8010fae:	60b9      	str	r1, [r7, #8]
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010fc0:	2b20      	cmp	r3, #32
 8010fc2:	d13b      	bne.n	801103c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8010fca:	88fb      	ldrh	r3, [r7, #6]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d101      	bne.n	8010fd4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e034      	b.n	801103e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8010fe0:	88fb      	ldrh	r3, [r7, #6]
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	68b9      	ldr	r1, [r7, #8]
 8010fe6:	68f8      	ldr	r0, [r7, #12]
 8010fe8:	f7ff f824 	bl	8010034 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d11d      	bne.n	8011030 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2210      	movs	r2, #16
 8010ffa:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011002:	69bb      	ldr	r3, [r7, #24]
 8011004:	e853 3f00 	ldrex	r3, [r3]
 8011008:	617b      	str	r3, [r7, #20]
   return(result);
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	f043 0310 	orr.w	r3, r3, #16
 8011010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	461a      	mov	r2, r3
 8011018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801101a:	627b      	str	r3, [r7, #36]	@ 0x24
 801101c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101e:	6a39      	ldr	r1, [r7, #32]
 8011020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011022:	e841 2300 	strex	r3, r2, [r1]
 8011026:	61fb      	str	r3, [r7, #28]
   return(result);
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d1e6      	bne.n	8010ffc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 801102e:	e002      	b.n	8011036 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8011030:	2301      	movs	r3, #1
 8011032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8011036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801103a:	e000      	b.n	801103e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 801103c:	2302      	movs	r3, #2
  }
}
 801103e:	4618      	mov	r0, r3
 8011040:	3730      	adds	r7, #48	@ 0x30
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
	...

08011048 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011048:	b480      	push	{r7}
 801104a:	b085      	sub	sp, #20
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011054:	2b00      	cmp	r3, #0
 8011056:	d108      	bne.n	801106a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2201      	movs	r2, #1
 801105c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2201      	movs	r2, #1
 8011064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011068:	e031      	b.n	80110ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801106a:	2310      	movs	r3, #16
 801106c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801106e:	2310      	movs	r3, #16
 8011070:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	689b      	ldr	r3, [r3, #8]
 8011078:	0e5b      	lsrs	r3, r3, #25
 801107a:	b2db      	uxtb	r3, r3
 801107c:	f003 0307 	and.w	r3, r3, #7
 8011080:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	0f5b      	lsrs	r3, r3, #29
 801108a:	b2db      	uxtb	r3, r3
 801108c:	f003 0307 	and.w	r3, r3, #7
 8011090:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011092:	7bbb      	ldrb	r3, [r7, #14]
 8011094:	7b3a      	ldrb	r2, [r7, #12]
 8011096:	4911      	ldr	r1, [pc, #68]	@ (80110dc <UARTEx_SetNbDataToProcess+0x94>)
 8011098:	5c8a      	ldrb	r2, [r1, r2]
 801109a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801109e:	7b3a      	ldrb	r2, [r7, #12]
 80110a0:	490f      	ldr	r1, [pc, #60]	@ (80110e0 <UARTEx_SetNbDataToProcess+0x98>)
 80110a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80110a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
 80110b2:	7b7a      	ldrb	r2, [r7, #13]
 80110b4:	4909      	ldr	r1, [pc, #36]	@ (80110dc <UARTEx_SetNbDataToProcess+0x94>)
 80110b6:	5c8a      	ldrb	r2, [r1, r2]
 80110b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80110bc:	7b7a      	ldrb	r2, [r7, #13]
 80110be:	4908      	ldr	r1, [pc, #32]	@ (80110e0 <UARTEx_SetNbDataToProcess+0x98>)
 80110c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80110c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80110ce:	bf00      	nop
 80110d0:	3714      	adds	r7, #20
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop
 80110dc:	080113f8 	.word	0x080113f8
 80110e0:	08011400 	.word	0x08011400

080110e4 <memset>:
 80110e4:	4402      	add	r2, r0
 80110e6:	4603      	mov	r3, r0
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d100      	bne.n	80110ee <memset+0xa>
 80110ec:	4770      	bx	lr
 80110ee:	f803 1b01 	strb.w	r1, [r3], #1
 80110f2:	e7f9      	b.n	80110e8 <memset+0x4>

080110f4 <__libc_init_array>:
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	4d0d      	ldr	r5, [pc, #52]	@ (801112c <__libc_init_array+0x38>)
 80110f8:	4c0d      	ldr	r4, [pc, #52]	@ (8011130 <__libc_init_array+0x3c>)
 80110fa:	1b64      	subs	r4, r4, r5
 80110fc:	10a4      	asrs	r4, r4, #2
 80110fe:	2600      	movs	r6, #0
 8011100:	42a6      	cmp	r6, r4
 8011102:	d109      	bne.n	8011118 <__libc_init_array+0x24>
 8011104:	4d0b      	ldr	r5, [pc, #44]	@ (8011134 <__libc_init_array+0x40>)
 8011106:	4c0c      	ldr	r4, [pc, #48]	@ (8011138 <__libc_init_array+0x44>)
 8011108:	f000 f826 	bl	8011158 <_init>
 801110c:	1b64      	subs	r4, r4, r5
 801110e:	10a4      	asrs	r4, r4, #2
 8011110:	2600      	movs	r6, #0
 8011112:	42a6      	cmp	r6, r4
 8011114:	d105      	bne.n	8011122 <__libc_init_array+0x2e>
 8011116:	bd70      	pop	{r4, r5, r6, pc}
 8011118:	f855 3b04 	ldr.w	r3, [r5], #4
 801111c:	4798      	blx	r3
 801111e:	3601      	adds	r6, #1
 8011120:	e7ee      	b.n	8011100 <__libc_init_array+0xc>
 8011122:	f855 3b04 	ldr.w	r3, [r5], #4
 8011126:	4798      	blx	r3
 8011128:	3601      	adds	r6, #1
 801112a:	e7f2      	b.n	8011112 <__libc_init_array+0x1e>
 801112c:	08011410 	.word	0x08011410
 8011130:	08011410 	.word	0x08011410
 8011134:	08011410 	.word	0x08011410
 8011138:	08011414 	.word	0x08011414

0801113c <memcpy>:
 801113c:	440a      	add	r2, r1
 801113e:	4291      	cmp	r1, r2
 8011140:	f100 33ff 	add.w	r3, r0, #4294967295
 8011144:	d100      	bne.n	8011148 <memcpy+0xc>
 8011146:	4770      	bx	lr
 8011148:	b510      	push	{r4, lr}
 801114a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801114e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011152:	4291      	cmp	r1, r2
 8011154:	d1f9      	bne.n	801114a <memcpy+0xe>
 8011156:	bd10      	pop	{r4, pc}

08011158 <_init>:
 8011158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115a:	bf00      	nop
 801115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801115e:	bc08      	pop	{r3}
 8011160:	469e      	mov	lr, r3
 8011162:	4770      	bx	lr

08011164 <_fini>:
 8011164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011166:	bf00      	nop
 8011168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116a:	bc08      	pop	{r3}
 801116c:	469e      	mov	lr, r3
 801116e:	4770      	bx	lr
