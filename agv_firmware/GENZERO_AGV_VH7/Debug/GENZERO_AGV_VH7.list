
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f624  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800f8f0  0800f8f0  000108f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fb88  0800fb88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fb90  0800fb90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fb94  0800fb94  00010b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800fb98  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c8  24000064  0800fbfc  00011064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400062c  0800fbfc  0001162c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ec3d  00000000  00000000  00011092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003323  00000000  00000000  0002fccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00032ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001314  00000000  00000000  00034860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f7c  00000000  00000000  00035b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000207dc  00000000  00000000  0006baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166e69  00000000  00000000  0008c2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f3135  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a3c  00000000  00000000  001f3178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001f9bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000064 	.word	0x24000064
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f8d8 	.word	0x0800f8d8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000068 	.word	0x24000068
 8000308:	0800f8d8 	.word	0x0800f8d8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 fa46 	bl	8007bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00a ff36 	bl	800b5ac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fb90 	bl	800be6c <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b f913 	bl	800b988 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fb7f 	bl	800be6c <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fa1c 	bl	8007bbc <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fa08 	bl	8007bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00a fef8 	bl	800b5ac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fb52 	bl	800be6c <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00a fee7 	bl	800b5ac <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fb41 	bl	800be6c <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 f9de 	bl	8007bbc <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f001 ffe7 	bl	8002818 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f828 	bl	800f8bc <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800f8f0 	.word	0x0800f8f0

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f001 ff99 	bl	8002818 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f001 ff8d 	bl	8002818 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f001 ff82 	bl	8002818 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 ff66 	bl	8002818 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f001 ff53 	bl	8002818 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 ff3d 	bl	8002818 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f001 ff01 	bl	8002818 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f001 fee3 	bl	8002818 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fdb0 	bl	800064e <LoRa_gotoMode>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b089      	sub	sp, #36	@ 0x24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e007      	b.n	8000b1e <LoRa_receive+0x28>
		data[i]=0;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf3      	blt.n	8000b0e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd90 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	2112      	movs	r1, #18
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff92 	bl	8000a5a <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02f      	beq.n	8000ba4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	2112      	movs	r1, #18
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffa0 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b4e:	2113      	movs	r1, #19
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff82 	bl	8000a5a <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7c 	bl	8000a5a <LoRa_read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff8e 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b72:	7cba      	ldrb	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00b      	b.n	8000b9c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff ff64 	bl	8000a5a <LoRa_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbef      	blt.n	8000b84 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fd51 	bl	800064e <LoRa_gotoMode>
    return min;
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <LoRa_isvalid>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8096 	beq.w	8000cf8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd3d 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f001 fe1f 	bl	8002818 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff3c 	bl	8000a5a <LoRa_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f001 fe16 	bl	8002818 <HAL_Delay>
			data = read | 0x80;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff47 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f001 fe09 	bl	8002818 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe55 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feb0 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febd 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	210c      	movs	r1, #12
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff2b 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fef3 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe68 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c4c:	22ff      	movs	r2, #255	@ 0xff
 8000c4e:	211f      	movs	r1, #31
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1c 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	461a      	mov	r2, r3
 8000c76:	211d      	movs	r1, #29
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff08 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fde8 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2120      	movs	r1, #32
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fefb 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2121      	movs	r1, #33	@ 0x21
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef3 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fed5 	bl	8000a5a <LoRa_read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fee3 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fcbf 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f001 fd9e 	bl	8002818 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cdc:	2142      	movs	r1, #66	@ 0x42
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff febb 	bl	8000a5a <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d101      	bne.n	8000cf2 <LoRa_init+0x13c>
				return LORA_OK;
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	e004      	b.n	8000cfc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000cf2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000cf6:	e001      	b.n	8000cfc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000cf8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e025      	b.n	8000d64 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	441a      	add	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	b291      	uxth	r1, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3214      	adds	r2, #20
 8000d42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	8811      	ldrh	r1, [r2, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	331c      	adds	r3, #28
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d6      	bls.n	8000d18 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <Line_Sensor_Calculation>:

void Line_Sensor_Calculation(ir_array *ir_struct){
 8000dce:	b480      	push	{r7}
 8000dd0:	b08b      	sub	sp, #44	@ 0x2c
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    uint8_t i, on_line = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t avg = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    uint32_t sum = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    uint16_t value;
    uint8_t on_sensor_total_number = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	76fb      	strb	r3, [r7, #27]

    uint8_t middle_on_line = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	76bb      	strb	r3, [r7, #26]


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000df2:	e075      	b.n	8000ee0 <Line_Sensor_Calculation+0x112>
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
 8000df4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3214      	adds	r2, #20
 8000dfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e00:	827b      	strh	r3, [r7, #18]
        calmin = ir_struct->ir_sen_min_val[i];
 8000e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	331c      	adds	r3, #28
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	889b      	ldrh	r3, [r3, #4]
 8000e10:	823b      	strh	r3, [r7, #16]

        denominator = calmax - calmin;
 8000e12:	8a7a      	ldrh	r2, [r7, #18]
 8000e14:	8a3b      	ldrh	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	81fb      	strh	r3, [r7, #14]

        int x = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
        if(denominator != 0){
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d010      	beq.n	8000e46 <Line_Sensor_Calculation+0x78>
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
 8000e24:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	8a3b      	ldrh	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e3a:	fb03 f202 	mul.w	r2, r3, r2
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
        }
        if(x <0){
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	da01      	bge.n	8000e50 <Line_Sensor_Calculation+0x82>
            x = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
        }
        if(x>1000){
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e56:	dd02      	ble.n	8000e5e <Line_Sensor_Calculation+0x90>
            x = 1000;
 8000e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5c:	617b      	str	r3, [r7, #20]
        }
        value = (1000-x);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000e66:	81bb      	strh	r3, [r7, #12]
        ir_struct->ir_sen_val_cal[i] = value;
 8000e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	3308      	adds	r3, #8
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	89ba      	ldrh	r2, [r7, #12]
 8000e76:	809a      	strh	r2, [r3, #4]

        // start read line number section
        if(value > 600){
 8000e78:	89bb      	ldrh	r3, [r7, #12]
 8000e7a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e7e:	d902      	bls.n	8000e86 <Line_Sensor_Calculation+0xb8>
            on_line = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        if(value > 200){
 8000e86:	89bb      	ldrh	r3, [r7, #12]
 8000e88:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e8a:	d910      	bls.n	8000eae <Line_Sensor_Calculation+0xe0>
            avg += (long)(value)*(i*1000);
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e92:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	623b      	str	r3, [r7, #32]
            sum += value;
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	4413      	add	r3, r2
 8000eac:	61fb      	str	r3, [r7, #28]
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000eb4:	89ba      	ldrh	r2, [r7, #12]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d90d      	bls.n	8000ed6 <Line_Sensor_Calculation+0x108>
            on_sensor_total_number++;
 8000eba:	7efb      	ldrb	r3, [r7, #27]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	76fb      	strb	r3, [r7, #27]
            if(i >= 2 && i <= 7){
 8000ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d906      	bls.n	8000ed6 <Line_Sensor_Calculation+0x108>
 8000ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ecc:	2b07      	cmp	r3, #7
 8000ece:	d802      	bhi.n	8000ed6 <Line_Sensor_Calculation+0x108>
                middle_on_line++;
 8000ed0:	7ebb      	ldrb	r3, [r7, #26]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	76bb      	strb	r3, [r7, #26]
    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eda:	3301      	adds	r3, #1
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ee6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d382      	bcc.n	8000df4 <Line_Sensor_Calculation+0x26>
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
 8000eee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d11a      	bne.n	8000f2c <Line_Sensor_Calculation+0x15e>
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f00:	3b01      	subs	r3, #1
 8000f02:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	da03      	bge.n	8000f16 <Line_Sensor_Calculation+0x148>
            ir_struct->ir_sen_read_line_old_val = 0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f14:	e011      	b.n	8000f3a <Line_Sensor_Calculation+0x16c>
        }
        else{
            ir_struct->ir_sen_read_line_old_val = (ir_struct->ir_sen_channel_num - 1)*1000;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f22:	fb03 f202 	mul.w	r2, r3, r2
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f2a:	e006      	b.n	8000f3a <Line_Sensor_Calculation+0x16c>
        }
    }
    else{
        ir_struct->ir_sen_read_line_old_val = avg/sum;
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    ir_struct->ir_sen_read_line_val = ir_struct->ir_sen_read_line_old_val;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = 100;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2264      	movs	r2, #100	@ 0x64
 8000f4a:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = 111;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	226f      	movs	r2, #111	@ 0x6f
 8000f52:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7eba      	ldrb	r2, [r7, #26]
 8000f5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7efa      	ldrb	r2, [r7, #27]
 8000f62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
 8000f66:	bf00      	nop
 8000f68:	372c      	adds	r7, #44	@ 0x2c
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d102      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d102      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d102      	bne.n	8000fae <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	2b10      	cmp	r3, #16
 8000fb2:	d103      	bne.n	8000fbc <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x78>)
 8000fb8:	f006 fe19 	bl	8007bee <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fbe:	8a9b      	ldrh	r3, [r3, #20]
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d10b      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	490a      	ldr	r1, [pc, #40]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000fca:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fcc:	f7ff fd93 	bl	8000af6 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8000fd0:	2140      	movs	r1, #64	@ 0x40
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000fd4:	f006 fe0b 	bl	8007bee <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x88>)
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	701a      	strb	r2, [r3, #0]

	}
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	240004f0 	.word	0x240004f0
 8000fec:	58021800 	.word	0x58021800
 8000ff0:	240004f4 	.word	0x240004f4
 8000ff4:	240005a4 	.word	0x240005a4
 8000ff8:	58020c00 	.word	0x58020c00
 8000ffc:	24000624 	.word	0x24000624

08001000 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
	Data[0] = RxData[3]<<8 | RxData[4];
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 800100e:	78db      	ldrb	r3, [r3, #3]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21b      	sxth	r3, r3
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x94>)
 8001022:	801a      	strh	r2, [r3, #0]
	Data[1] = RxData[5]<<8 | RxData[6];
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 800102e:	799b      	ldrb	r3, [r3, #6]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x94>)
 800103a:	805a      	strh	r2, [r3, #2]
	Data[2] = RxData[7]<<8 | RxData[8];
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 800103e:	79db      	ldrb	r3, [r3, #7]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 8001046:	7a1b      	ldrb	r3, [r3, #8]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x94>)
 8001052:	809a      	strh	r2, [r3, #4]
	Data[3] = RxData[9]<<8 | RxData[10];
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 8001056:	7a5b      	ldrb	r3, [r3, #9]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 800105e:	7a9b      	ldrb	r3, [r3, #10]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x94>)
 800106a:	80da      	strh	r2, [r3, #6]
	Data[4] = RxData[11]<<8 | RxData[12];
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 800106e:	7adb      	ldrb	r3, [r3, #11]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x90>)
 8001076:	7b1b      	ldrb	r3, [r3, #12]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x94>)
 8001082:	811a      	strh	r2, [r3, #8]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	240003b8 	.word	0x240003b8
 8001094:	240003e0 	.word	0x240003e0

08001098 <sendData>:

void sendData (uint8_t *data)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a6:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <sendData+0x38>)
 80010a8:	f006 fd88 	bl	8007bbc <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, 8, 1000);
 80010ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b0:	2208      	movs	r2, #8
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <sendData+0x3c>)
 80010b6:	f00b fef1 	bl	800ce9c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin , GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c0:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <sendData+0x38>)
 80010c2:	f006 fd7b 	bl	8007bbc <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	58020400 	.word	0x58020400
 80010d4:	24000324 	.word	0x24000324

080010d8 <motor_enable_velocity_mode>:

void motor_enable_velocity_mode(uint8_t id){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	  TxData[0] = id;  // slave address
 80010e2:	4a2a      	ldr	r2, [pc, #168]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	7013      	strb	r3, [r2, #0]
	  TxData[1] = 0x06;  // Function code for Read Holding Registers
 80010e8:	4b28      	ldr	r3, [pc, #160]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 80010ea:	2206      	movs	r2, #6
 80010ec:	705a      	strb	r2, [r3, #1]

	  TxData[2] = 0x20;
 80010ee:	4b27      	ldr	r3, [pc, #156]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 80010f0:	2220      	movs	r2, #32
 80010f2:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0x32;
 80010f4:	4b25      	ldr	r3, [pc, #148]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 80010f6:	2232      	movs	r2, #50	@ 0x32
 80010f8:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  TxData[4] = 0x00;
 80010fa:	4b24      	ldr	r3, [pc, #144]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x03;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001102:	2203      	movs	r2, #3
 8001104:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  uint16_t crc = crc16(TxData, 6);
 8001106:	2106      	movs	r1, #6
 8001108:	4820      	ldr	r0, [pc, #128]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 800110a:	f000 febb 	bl	8001e84 <crc16>
 800110e:	4603      	mov	r3, r0
 8001110:	81fb      	strh	r3, [r7, #14]
	  TxData[6] = crc&0xFF;   // CRC LOW
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001118:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001124:	71da      	strb	r2, [r3, #7]
	  sendData(TxData);
 8001126:	4819      	ldr	r0, [pc, #100]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001128:	f7ff ffb6 	bl	8001098 <sendData>

	  HAL_Delay(10);
 800112c:	200a      	movs	r0, #10
 800112e:	f001 fb73 	bl	8002818 <HAL_Delay>

	  TxData[0] = id;  // slave address
 8001132:	4a16      	ldr	r2, [pc, #88]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	7013      	strb	r3, [r2, #0]
	  TxData[1] = 0x06;  // Function code for Read Holding Registers
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 800113a:	2206      	movs	r2, #6
 800113c:	705a      	strb	r2, [r3, #1]

	  TxData[2] = 0x20;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001140:	2220      	movs	r2, #32
 8001142:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0x31;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001146:	2231      	movs	r2, #49	@ 0x31
 8001148:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  TxData[4] = 0x00;
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 800114c:	2200      	movs	r2, #0
 800114e:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x08;
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001152:	2208      	movs	r2, #8
 8001154:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  crc = crc16(TxData, 6);
 8001156:	2106      	movs	r1, #6
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 800115a:	f000 fe93 	bl	8001e84 <crc16>
 800115e:	4603      	mov	r3, r0
 8001160:	81fb      	strh	r3, [r7, #14]
	  TxData[6] = crc&0xFF;   // CRC LOW
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001168:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001174:	71da      	strb	r2, [r3, #7]

	  sendData(TxData);
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <motor_enable_velocity_mode+0xb4>)
 8001178:	f7ff ff8e 	bl	8001098 <sendData>
	  HAL_Delay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f001 fb4b 	bl	8002818 <HAL_Delay>
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	240003d8 	.word	0x240003d8

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f001 faad 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f929 	bl	80013f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800119e:	f000 f999 	bl	80014d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 fd11 	bl	8001bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a6:	f000 fce7 	bl	8001b78 <MX_DMA_Init>
  MX_ADC1_Init();
 80011aa:	f000 f9c7 	bl	800153c <MX_ADC1_Init>
  MX_ADC3_Init();
 80011ae:	f000 fad7 	bl	8001760 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 80011b2:	f000 fc95 	bl	8001ae0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011b6:	f000 fc2f 	bl	8001a18 <MX_TIM2_Init>
  MX_SPI1_Init();
 80011ba:	f000 fbd7 	bl	800196c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 32);
 80011be:	2220      	movs	r2, #32
 80011c0:	4968      	ldr	r1, [pc, #416]	@ (8001364 <main+0x1d4>)
 80011c2:	4869      	ldr	r0, [pc, #420]	@ (8001368 <main+0x1d8>)
 80011c4:	f00e faaf 	bl	800f726 <HAL_UARTEx_ReceiveToIdle_IT>



  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	4868      	ldr	r0, [pc, #416]	@ (800136c <main+0x1dc>)
 80011cc:	f00a ff9c 	bl	800c108 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011d0:	2104      	movs	r1, #4
 80011d2:	4866      	ldr	r0, [pc, #408]	@ (800136c <main+0x1dc>)
 80011d4:	f00a ff98 	bl	800c108 <HAL_TIM_PWM_Start>

  motor_enable_velocity_mode(0x01);
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff ff7d 	bl	80010d8 <motor_enable_velocity_mode>
  HAL_Delay(10);
 80011de:	200a      	movs	r0, #10
 80011e0:	f001 fb1a 	bl	8002818 <HAL_Delay>
  motor_enable_velocity_mode(0x02);
 80011e4:	2002      	movs	r0, #2
 80011e6:	f7ff ff77 	bl	80010d8 <motor_enable_velocity_mode>
  HAL_Delay(10);
 80011ea:	200a      	movs	r0, #10
 80011ec:	f001 fb14 	bl	8002818 <HAL_Delay>
//						 &line_sensor_back_on_line_total_number,
//						  line_sensor_back_trigger_threshhold,
//						  line_sensor_back_total_channel,
//						 &line_sensor_back_read_line_value);

  if((line_sensor_back_on_line_total_number >= 9) &&(line_sensor_front_on_line_total_number >= 1)){
 80011f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001370 <main+0x1e0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d908      	bls.n	800120c <main+0x7c>
 80011fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <main+0x1e4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <main+0x7c>
	  agv_orientation = 0xF00F;
 8001204:	4b5c      	ldr	r3, [pc, #368]	@ (8001378 <main+0x1e8>)
 8001206:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800120a:	801a      	strh	r2, [r3, #0]
  }
  if((line_sensor_front_on_line_total_number >= 9) && (line_sensor_back_on_line_total_number >= 1)){
 800120c:	4b59      	ldr	r3, [pc, #356]	@ (8001374 <main+0x1e4>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b08      	cmp	r3, #8
 8001214:	d908      	bls.n	8001228 <main+0x98>
 8001216:	4b56      	ldr	r3, [pc, #344]	@ (8001370 <main+0x1e0>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <main+0x98>
	  agv_orientation = 0xF11F;
 8001220:	4b55      	ldr	r3, [pc, #340]	@ (8001378 <main+0x1e8>)
 8001222:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001226:	801a      	strh	r2, [r3, #0]
  }

  myLoRa = newLoRa();
 8001228:	4c54      	ldr	r4, [pc, #336]	@ (800137c <main+0x1ec>)
 800122a:	463b      	mov	r3, r7
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f9e5 	bl	80005fc <newLoRa>
 8001232:	4625      	mov	r5, r4
 8001234:	463c      	mov	r4, r7
 8001236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001242:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001246:	4b4d      	ldr	r3, [pc, #308]	@ (800137c <main+0x1ec>)
 8001248:	4a4d      	ldr	r2, [pc, #308]	@ (8001380 <main+0x1f0>)
 800124a:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 800124c:	4b4b      	ldr	r3, [pc, #300]	@ (800137c <main+0x1ec>)
 800124e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001252:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001254:	4b49      	ldr	r3, [pc, #292]	@ (800137c <main+0x1ec>)
 8001256:	4a4a      	ldr	r2, [pc, #296]	@ (8001380 <main+0x1f0>)
 8001258:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 800125a:	4b48      	ldr	r3, [pc, #288]	@ (800137c <main+0x1ec>)
 800125c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001260:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 8001262:	4b46      	ldr	r3, [pc, #280]	@ (800137c <main+0x1ec>)
 8001264:	4a46      	ldr	r2, [pc, #280]	@ (8001380 <main+0x1f0>)
 8001266:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001268:	4b44      	ldr	r3, [pc, #272]	@ (800137c <main+0x1ec>)
 800126a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800126e:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001270:	4b42      	ldr	r3, [pc, #264]	@ (800137c <main+0x1ec>)
 8001272:	4a44      	ldr	r2, [pc, #272]	@ (8001384 <main+0x1f4>)
 8001274:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8001276:	4b41      	ldr	r3, [pc, #260]	@ (800137c <main+0x1ec>)
 8001278:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800127c:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 800127e:	4b3f      	ldr	r3, [pc, #252]	@ (800137c <main+0x1ec>)
 8001280:	2207      	movs	r2, #7
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001286:	4b3d      	ldr	r3, [pc, #244]	@ (800137c <main+0x1ec>)
 8001288:	2207      	movs	r2, #7
 800128a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800128e:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <main+0x1ec>)
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001296:	4b39      	ldr	r3, [pc, #228]	@ (800137c <main+0x1ec>)
 8001298:	22ff      	movs	r2, #255	@ 0xff
 800129a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 800129e:	4b37      	ldr	r3, [pc, #220]	@ (800137c <main+0x1ec>)
 80012a0:	2264      	movs	r2, #100	@ 0x64
 80012a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 80012a6:	4b35      	ldr	r3, [pc, #212]	@ (800137c <main+0x1ec>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 80012ac:	4833      	ldr	r0, [pc, #204]	@ (800137c <main+0x1ec>)
 80012ae:	f7ff fc82 	bl	8000bb6 <LoRa_init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2bc8      	cmp	r3, #200	@ 0xc8
 80012b6:	d102      	bne.n	80012be <main+0x12e>
	  LoRa_stat = 1;
 80012b8:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <main+0x1f8>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 80012be:	482f      	ldr	r0, [pc, #188]	@ (800137c <main+0x1ec>)
 80012c0:	f7ff fc0d 	bl	8000ade <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 80012c4:	4b31      	ldr	r3, [pc, #196]	@ (800138c <main+0x1fc>)
 80012c6:	22aa      	movs	r2, #170	@ 0xaa
 80012c8:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 80012ca:	4b30      	ldr	r3, [pc, #192]	@ (800138c <main+0x1fc>)
 80012cc:	22bb      	movs	r2, #187	@ 0xbb
 80012ce:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <main+0x1fc>)
 80012d2:	22cc      	movs	r2, #204	@ 0xcc
 80012d4:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 80012d6:	230a      	movs	r3, #10
 80012d8:	461a      	mov	r2, r3
 80012da:	492d      	ldr	r1, [pc, #180]	@ (8001390 <main+0x200>)
 80012dc:	482d      	ldr	r0, [pc, #180]	@ (8001394 <main+0x204>)
 80012de:	f001 ffc9 	bl	8003274 <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 80012e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <main+0x208>)
 80012e4:	9307      	str	r3, [sp, #28]
 80012e6:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <main+0x20c>)
 80012e8:	9306      	str	r3, [sp, #24]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <main+0x210>)
 80012ec:	9305      	str	r3, [sp, #20]
 80012ee:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <main+0x214>)
 80012f0:	9304      	str	r3, [sp, #16]
 80012f2:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <main+0x1e4>)
 80012f4:	9303      	str	r3, [sp, #12]
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <main+0x218>)
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <main+0x21c>)
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <main+0x220>)
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4b2c      	ldr	r3, [pc, #176]	@ (80013b4 <main+0x224>)
 8001304:	4a2c      	ldr	r2, [pc, #176]	@ (80013b8 <main+0x228>)
 8001306:	492d      	ldr	r1, [pc, #180]	@ (80013bc <main+0x22c>)
 8001308:	4821      	ldr	r0, [pc, #132]	@ (8001390 <main+0x200>)
 800130a:	f7ff fcfb 	bl	8000d04 <ir_array_init>
                &line_sensor_front_on_line_total_number,
                &line_sensor_front_on_line_middle_number,
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);
  Line_Sensor_Calculation(&front_array);
 800130e:	4820      	ldr	r0, [pc, #128]	@ (8001390 <main+0x200>)
 8001310:	f7ff fd5d 	bl	8000dce <Line_Sensor_Calculation>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 8001314:	230a      	movs	r3, #10
 8001316:	461a      	mov	r2, r3
 8001318:	4929      	ldr	r1, [pc, #164]	@ (80013c0 <main+0x230>)
 800131a:	482a      	ldr	r0, [pc, #168]	@ (80013c4 <main+0x234>)
 800131c:	f001 ffaa 	bl	8003274 <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <main+0x238>)
 8001322:	9307      	str	r3, [sp, #28]
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <main+0x23c>)
 8001326:	9306      	str	r3, [sp, #24]
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <main+0x240>)
 800132a:	9305      	str	r3, [sp, #20]
 800132c:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <main+0x244>)
 800132e:	9304      	str	r3, [sp, #16]
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <main+0x1e0>)
 8001332:	9303      	str	r3, [sp, #12]
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <main+0x248>)
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <main+0x24c>)
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <main+0x250>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <main+0x254>)
 8001342:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <main+0x258>)
 8001344:	4929      	ldr	r1, [pc, #164]	@ (80013ec <main+0x25c>)
 8001346:	481e      	ldr	r0, [pc, #120]	@ (80013c0 <main+0x230>)
 8001348:	f7ff fcdc 	bl	8000d04 <ir_array_init>
                &line_sensor_back_on_line_total_number,
                &line_sensor_back_on_line_middle_number,
                &line_sensor_back_on_line_left_number,
                &line_sensor_back_on_line_right_number,
                &line_sensor_back_threshold);
  Line_Sensor_Calculation(&back_array);
 800134c:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <main+0x230>)
 800134e:	f7ff fd3e 	bl	8000dce <Line_Sensor_Calculation>
//			  HAL_GPIO_TogglePin(LORA_TX_LED_GPIO_Port, LORA_TX_LED_Pin);
//		  }
//		  lora_receive_toggle = 0;
//	  }

	  Line_Sensor_Calculation(&front_array);
 8001352:	480f      	ldr	r0, [pc, #60]	@ (8001390 <main+0x200>)
 8001354:	f7ff fd3b 	bl	8000dce <Line_Sensor_Calculation>
	  Line_Sensor_Calculation(&back_array);
 8001358:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <main+0x230>)
 800135a:	f7ff fd38 	bl	8000dce <Line_Sensor_Calculation>
	  Line_Sensor_Calculation(&front_array);
 800135e:	bf00      	nop
 8001360:	e7f7      	b.n	8001352 <main+0x1c2>
 8001362:	bf00      	nop
 8001364:	240003b8 	.word	0x240003b8
 8001368:	24000324 	.word	0x24000324
 800136c:	240002d8 	.word	0x240002d8
 8001370:	2400042b 	.word	0x2400042b
 8001374:	24000427 	.word	0x24000427
 8001378:	24000050 	.word	0x24000050
 800137c:	240004f4 	.word	0x240004f4
 8001380:	58021800 	.word	0x58021800
 8001384:	24000250 	.word	0x24000250
 8001388:	24000520 	.word	0x24000520
 800138c:	24000524 	.word	0x24000524
 8001390:	24000430 	.word	0x24000430
 8001394:	24000080 	.word	0x24000080
 8001398:	0800f942 	.word	0x0800f942
 800139c:	24000426 	.word	0x24000426
 80013a0:	24000424 	.word	0x24000424
 80013a4:	24000425 	.word	0x24000425
 80013a8:	240003f4 	.word	0x240003f4
 80013ac:	2400042c 	.word	0x2400042c
 80013b0:	0800f940 	.word	0x0800f940
 80013b4:	24000014 	.word	0x24000014
 80013b8:	24000000 	.word	0x24000000
 80013bc:	240003fc 	.word	0x240003fc
 80013c0:	24000490 	.word	0x24000490
 80013c4:	240000f0 	.word	0x240000f0
 80013c8:	0800f944 	.word	0x0800f944
 80013cc:	2400042a 	.word	0x2400042a
 80013d0:	24000428 	.word	0x24000428
 80013d4:	24000429 	.word	0x24000429
 80013d8:	240003f8 	.word	0x240003f8
 80013dc:	2400042e 	.word	0x2400042e
 80013e0:	0800f941 	.word	0x0800f941
 80013e4:	2400003c 	.word	0x2400003c
 80013e8:	24000028 	.word	0x24000028
 80013ec:	24000410 	.word	0x24000410

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09c      	sub	sp, #112	@ 0x70
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fa:	224c      	movs	r2, #76	@ 0x4c
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f00e fa30 	bl	800f864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2220      	movs	r2, #32
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f00e fa2a 	bl	800f864 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001410:	2002      	movs	r0, #2
 8001412:	f006 fc21 	bl	8007c58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <SystemClock_Config+0xe0>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a2c      	ldr	r2, [pc, #176]	@ (80014d0 <SystemClock_Config+0xe0>)
 8001420:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <SystemClock_Config+0xe0>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001432:	bf00      	nop
 8001434:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <SystemClock_Config+0xe0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800143c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001440:	d1f8      	bne.n	8001434 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001442:	2303      	movs	r3, #3
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800144c:	2301      	movs	r3, #1
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001450:	2340      	movs	r3, #64	@ 0x40
 8001452:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001458:	2302      	movs	r3, #2
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001460:	232c      	movs	r3, #44	@ 0x2c
 8001462:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001468:	2303      	movs	r3, #3
 800146a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001470:	230c      	movs	r3, #12
 8001472:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001474:	2300      	movs	r3, #0
 8001476:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001480:	4618      	mov	r0, r3
 8001482:	f006 fc23 	bl	8007ccc <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800148c:	f000 fcf4 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	233f      	movs	r3, #63	@ 0x3f
 8001492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2303      	movs	r3, #3
 8001496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800149c:	2308      	movs	r3, #8
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014a0:	2340      	movs	r3, #64	@ 0x40
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014a4:	2340      	movs	r3, #64	@ 0x40
 80014a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014ae:	2340      	movs	r3, #64	@ 0x40
 80014b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2103      	movs	r1, #3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 ffe2 	bl	8008480 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80014c2:	f000 fcd9 	bl	8001e78 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3770      	adds	r7, #112	@ 0x70
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	58024800 	.word	0x58024800

080014d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0ae      	sub	sp, #184	@ 0xb8
 80014d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	22b8      	movs	r2, #184	@ 0xb8
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00e f9bf 	bl	800f864 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <PeriphCommonClock_Config+0x64>)
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 80014f4:	230f      	movs	r3, #15
 80014f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001504:	23c0      	movs	r3, #192	@ 0xc0
 8001506:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 800150c:	f640 3386 	movw	r3, #2950	@ 0xb86
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001512:	2300      	movs	r3, #0
 8001514:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	4618      	mov	r0, r3
 8001520:	f007 fb3a 	bl	8008b98 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800152a:	f000 fca5 	bl	8001e78 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	37b8      	adds	r7, #184	@ 0xb8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	80080000 	.word	0x80080000

0800153c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	463b      	mov	r3, r7
 8001550:	2224      	movs	r2, #36	@ 0x24
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f00e f985 	bl	800f864 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800155a:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 800155c:	4a75      	ldr	r2, [pc, #468]	@ (8001734 <MX_ADC1_Init+0x1f8>)
 800155e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001560:	4b73      	ldr	r3, [pc, #460]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	4b72      	ldr	r3, [pc, #456]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001568:	2208      	movs	r2, #8
 800156a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800156c:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 800156e:	2201      	movs	r2, #1
 8001570:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001572:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001574:	2204      	movs	r2, #4
 8001576:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001578:	4b6d      	ldr	r3, [pc, #436]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 800157a:	2200      	movs	r2, #0
 800157c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800157e:	4b6c      	ldr	r3, [pc, #432]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001580:	2201      	movs	r2, #1
 8001582:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001584:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001586:	220a      	movs	r2, #10
 8001588:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158a:	4b69      	ldr	r3, [pc, #420]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001592:	4b67      	ldr	r3, [pc, #412]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001598:	4b65      	ldr	r3, [pc, #404]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800159e:	4b64      	ldr	r3, [pc, #400]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80015a0:	2203      	movs	r2, #3
 80015a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015a4:	4b62      	ldr	r3, [pc, #392]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80015a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015ac:	4b60      	ldr	r3, [pc, #384]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80015b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80015bc:	2201      	movs	r2, #1
 80015be:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015c0:	485b      	ldr	r0, [pc, #364]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80015c2:	f001 fc4f 	bl	8002e64 <HAL_ADC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015cc:	f000 fc54 	bl	8001e78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4855      	ldr	r0, [pc, #340]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80015dc:	f003 f91c 	bl	8004818 <HAL_ADCEx_MultiModeConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015e6:	f000 fc47 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ea:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <MX_ADC1_Init+0x1fc>)
 80015ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ee:	2306      	movs	r3, #6
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80015f2:	2305      	movs	r3, #5
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015f6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fc:	2304      	movs	r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	4619      	mov	r1, r3
 800160e:	4848      	ldr	r0, [pc, #288]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001610:	f002 f96e 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800161a:	f000 fc2d 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800161e:	4b47      	ldr	r3, [pc, #284]	@ (800173c <MX_ADC1_Init+0x200>)
 8001620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001622:	230c      	movs	r3, #12
 8001624:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4841      	ldr	r0, [pc, #260]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 800162c:	f002 f960 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001636:	f000 fc1f 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <MX_ADC1_Init+0x204>)
 800163c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800163e:	2312      	movs	r3, #18
 8001640:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	483a      	ldr	r0, [pc, #232]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001648:	f002 f952 	bl	80038f0 <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001652:	f000 fc11 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <MX_ADC1_Init+0x208>)
 8001658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800165a:	2318      	movs	r3, #24
 800165c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165e:	463b      	mov	r3, r7
 8001660:	4619      	mov	r1, r3
 8001662:	4833      	ldr	r0, [pc, #204]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001664:	f002 f944 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800166e:	f000 fc03 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001672:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <MX_ADC1_Init+0x20c>)
 8001674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001676:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	4619      	mov	r1, r3
 8001680:	482b      	ldr	r0, [pc, #172]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001682:	f002 f935 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800168c:	f000 fbf4 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001690:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <MX_ADC1_Init+0x210>)
 8001692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001694:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001698:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	4619      	mov	r1, r3
 800169e:	4824      	ldr	r0, [pc, #144]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80016a0:	f002 f926 	bl	80038f0 <HAL_ADC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80016aa:	f000 fbe5 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <MX_ADC1_Init+0x214>)
 80016b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80016b2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	481c      	ldr	r0, [pc, #112]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80016be:	f002 f917 	bl	80038f0 <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 80016c8:	f000 fbd6 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <MX_ADC1_Init+0x218>)
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80016d0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80016d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d6:	463b      	mov	r3, r7
 80016d8:	4619      	mov	r1, r3
 80016da:	4815      	ldr	r0, [pc, #84]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80016dc:	f002 f908 	bl	80038f0 <HAL_ADC_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 80016e6:	f000 fbc7 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80016ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <MX_ADC1_Init+0x21c>)
 80016ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80016ee:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 80016fa:	f002 f8f9 	bl	80038f0 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 8001704:	f000 fbb8 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_ADC1_Init+0x220>)
 800170a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800170c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001710:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	@ (8001730 <MX_ADC1_Init+0x1f4>)
 8001718:	f002 f8ea 	bl	80038f0 <HAL_ADC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8001722:	f000 fba9 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	@ 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24000080 	.word	0x24000080
 8001734:	40022000 	.word	0x40022000
 8001738:	08600004 	.word	0x08600004
 800173c:	0c900008 	.word	0x0c900008
 8001740:	10c00010 	.word	0x10c00010
 8001744:	14f00020 	.word	0x14f00020
 8001748:	19200040 	.word	0x19200040
 800174c:	1d500080 	.word	0x1d500080
 8001750:	21800100 	.word	0x21800100
 8001754:	25b00200 	.word	0x25b00200
 8001758:	2a000400 	.word	0x2a000400
 800175c:	2e300800 	.word	0x2e300800

08001760 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2224      	movs	r2, #36	@ 0x24
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f00e f879 	bl	800f864 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001772:	4b73      	ldr	r3, [pc, #460]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001774:	4a73      	ldr	r2, [pc, #460]	@ (8001944 <MX_ADC3_Init+0x1e4>)
 8001776:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001778:	4b71      	ldr	r3, [pc, #452]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800177e:	4b70      	ldr	r3, [pc, #448]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001780:	2208      	movs	r2, #8
 8001782:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001784:	4b6e      	ldr	r3, [pc, #440]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800178a:	4b6d      	ldr	r3, [pc, #436]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 800178c:	2201      	movs	r2, #1
 800178e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001790:	4b6b      	ldr	r3, [pc, #428]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001792:	2204      	movs	r2, #4
 8001794:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001796:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001798:	2200      	movs	r2, #0
 800179a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800179c:	4b68      	ldr	r3, [pc, #416]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 800179e:	2201      	movs	r2, #1
 80017a0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 80017a2:	4b67      	ldr	r3, [pc, #412]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017a8:	4b65      	ldr	r3, [pc, #404]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b0:	4b63      	ldr	r3, [pc, #396]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b6:	4b62      	ldr	r3, [pc, #392]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80017bc:	4b60      	ldr	r3, [pc, #384]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80017c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80017ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017cc:	2203      	movs	r2, #3
 80017ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80017d8:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80017de:	4b58      	ldr	r3, [pc, #352]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80017e6:	4b56      	ldr	r3, [pc, #344]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017ec:	4854      	ldr	r0, [pc, #336]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80017ee:	f001 fb39 	bl	8002e64 <HAL_ADC_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 80017f8:	f000 fb3e 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017fc:	2301      	movs	r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001800:	2306      	movs	r3, #6
 8001802:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 8001804:	2305      	movs	r3, #5
 8001806:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001808:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800180c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800180e:	2304      	movs	r3, #4
 8001810:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4848      	ldr	r0, [pc, #288]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001820:	f002 f866 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800182a:	f000 fb25 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800182e:	4b46      	ldr	r3, [pc, #280]	@ (8001948 <MX_ADC3_Init+0x1e8>)
 8001830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001832:	230c      	movs	r3, #12
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4841      	ldr	r0, [pc, #260]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 800183c:	f002 f858 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001846:	f000 fb17 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800184a:	4b40      	ldr	r3, [pc, #256]	@ (800194c <MX_ADC3_Init+0x1ec>)
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800184e:	2312      	movs	r3, #18
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	483a      	ldr	r0, [pc, #232]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001858:	f002 f84a 	bl	80038f0 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001862:	f000 fb09 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001866:	4b3a      	ldr	r3, [pc, #232]	@ (8001950 <MX_ADC3_Init+0x1f0>)
 8001868:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800186a:	2318      	movs	r3, #24
 800186c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4619      	mov	r1, r3
 8001872:	4833      	ldr	r0, [pc, #204]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001874:	f002 f83c 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 800187e:	f000 fafb 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <MX_ADC3_Init+0x1f4>)
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800188a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	482b      	ldr	r0, [pc, #172]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001892:	f002 f82d 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 800189c:	f000 faec 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80018a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <MX_ADC3_Init+0x1f8>)
 80018a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80018a4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4824      	ldr	r0, [pc, #144]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80018b0:	f002 f81e 	bl	80038f0 <HAL_ADC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 80018ba:	f000 fadd 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018be:	4b27      	ldr	r3, [pc, #156]	@ (800195c <MX_ADC3_Init+0x1fc>)
 80018c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80018c2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80018c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	481c      	ldr	r0, [pc, #112]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80018ce:	f002 f80f 	bl	80038f0 <HAL_ADC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 80018d8:	f000 face 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <MX_ADC3_Init+0x200>)
 80018de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80018e0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80018e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4815      	ldr	r0, [pc, #84]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 80018ec:	f002 f800 	bl	80038f0 <HAL_ADC_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 80018f6:	f000 fabf 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <MX_ADC3_Init+0x204>)
 80018fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80018fe:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4619      	mov	r1, r3
 8001908:	480d      	ldr	r0, [pc, #52]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 800190a:	f001 fff1 	bl	80038f0 <HAL_ADC_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 8001914:	f000 fab0 	bl	8001e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <MX_ADC3_Init+0x208>)
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800191c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001920:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	@ (8001940 <MX_ADC3_Init+0x1e0>)
 8001928:	f001 ffe2 	bl	80038f0 <HAL_ADC_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 8001932:	f000 faa1 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	@ 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	240000f0 	.word	0x240000f0
 8001944:	58026000 	.word	0x58026000
 8001948:	04300002 	.word	0x04300002
 800194c:	08600004 	.word	0x08600004
 8001950:	0c900008 	.word	0x0c900008
 8001954:	10c00010 	.word	0x10c00010
 8001958:	14f00020 	.word	0x14f00020
 800195c:	19200040 	.word	0x19200040
 8001960:	1d500080 	.word	0x1d500080
 8001964:	21800100 	.word	0x21800100
 8001968:	25b00200 	.word	0x25b00200

0800196c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 8001972:	4a28      	ldr	r2, [pc, #160]	@ (8001a14 <MX_SPI1_Init+0xa8>)
 8001974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001976:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 8001978:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800197c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001984:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 8001986:	2207      	movs	r2, #7
 8001988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001990:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 8001998:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800199c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019a0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80019a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_SPI1_Init+0xa4>)
 80019fe:	f009 fcb1 	bl	800b364 <HAL_SPI_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001a08:	f000 fa36 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000250 	.word	0x24000250
 8001a14:	40013000 	.word	0x40013000

08001a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a3c:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a46:	2240      	movs	r2, #64	@ 0x40
 8001a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001a50:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a52:	22ff      	movs	r2, #255	@ 0xff
 8001a54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a62:	481e      	ldr	r0, [pc, #120]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a64:	f00a faf9 	bl	800c05a <HAL_TIM_PWM_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a6e:	f000 fa03 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4816      	ldr	r0, [pc, #88]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001a82:	f00b f91f 	bl	800ccc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a8c:	f000 f9f4 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a90:	2360      	movs	r3, #96	@ 0x60
 8001a92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480d      	ldr	r0, [pc, #52]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001aa8:	f00a fc4a 	bl	800c340 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ab2:	f000 f9e1 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4807      	ldr	r0, [pc, #28]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001abe:	f00a fc3f 	bl	800c340 <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ac8:	f000 f9d6 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <MX_TIM2_Init+0xc4>)
 8001ace:	f000 fc3f 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	240002d8 	.word	0x240002d8

08001ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001ae6:	4a23      	ldr	r2, [pc, #140]	@ (8001b74 <MX_USART1_UART_Init+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b22:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b28:	4811      	ldr	r0, [pc, #68]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b2a:	f00b f967 	bl	800cdfc <HAL_UART_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b34:	f000 f9a0 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b3c:	f00d fd77 	bl	800f62e <HAL_UARTEx_SetTxFifoThreshold>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b46:	f000 f997 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4808      	ldr	r0, [pc, #32]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b4e:	f00d fdac 	bl	800f6aa <HAL_UARTEx_SetRxFifoThreshold>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b58:	f000 f98e 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b5e:	f00d fd2d 	bl	800f5bc <HAL_UARTEx_DisableFifoMode>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f000 f986 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	24000324 	.word	0x24000324
 8001b74:	40011000 	.word	0x40011000

08001b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_DMA_Init+0x4c>)
 8001b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b84:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <MX_DMA_Init+0x4c>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <MX_DMA_Init+0x4c>)
 8001b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	200b      	movs	r0, #11
 8001ba2:	f002 fff6 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ba6:	200b      	movs	r0, #11
 8001ba8:	f003 f80d 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	200c      	movs	r0, #12
 8001bb2:	f002 ffee 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bb6:	200c      	movs	r0, #12
 8001bb8:	f003 f805 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	58024400 	.word	0x58024400

08001bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	@ 0x38
 8001bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bde:	4b9f      	ldr	r3, [pc, #636]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be4:	4a9d      	ldr	r2, [pc, #628]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bee:	4b9b      	ldr	r3, [pc, #620]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	623b      	str	r3, [r7, #32]
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfc:	4b97      	ldr	r3, [pc, #604]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c02:	4a96      	ldr	r2, [pc, #600]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c0c:	4b93      	ldr	r3, [pc, #588]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c1a:	4b90      	ldr	r3, [pc, #576]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c20:	4a8e      	ldr	r2, [pc, #568]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c22:	f043 0320 	orr.w	r3, r3, #32
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c2a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c38:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c3e:	4a87      	ldr	r2, [pc, #540]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c48:	4b84      	ldr	r3, [pc, #528]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b81      	ldr	r3, [pc, #516]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c66:	4b7d      	ldr	r3, [pc, #500]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b79      	ldr	r3, [pc, #484]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	4a78      	ldr	r2, [pc, #480]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c84:	4b75      	ldr	r3, [pc, #468]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c92:	4b72      	ldr	r3, [pc, #456]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c98:	4a70      	ldr	r2, [pc, #448]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb6:	4a69      	ldr	r2, [pc, #420]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc0:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <MX_GPIO_Init+0x294>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd4:	4862      	ldr	r0, [pc, #392]	@ (8001e60 <MX_GPIO_Init+0x298>)
 8001cd6:	f005 ff71 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	213c      	movs	r1, #60	@ 0x3c
 8001cde:	4861      	ldr	r0, [pc, #388]	@ (8001e64 <MX_GPIO_Init+0x29c>)
 8001ce0:	f005 ff6c 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cea:	485f      	ldr	r0, [pc, #380]	@ (8001e68 <MX_GPIO_Init+0x2a0>)
 8001cec:	f005 ff66 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cf6:	485d      	ldr	r0, [pc, #372]	@ (8001e6c <MX_GPIO_Init+0x2a4>)
 8001cf8:	f005 ff60 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001d02:	485b      	ldr	r0, [pc, #364]	@ (8001e70 <MX_GPIO_Init+0x2a8>)
 8001d04:	f005 ff5a 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2140      	movs	r1, #64	@ 0x40
 8001d0c:	4859      	ldr	r0, [pc, #356]	@ (8001e74 <MX_GPIO_Init+0x2ac>)
 8001d0e:	f005 ff55 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001d18:	4855      	ldr	r0, [pc, #340]	@ (8001e70 <MX_GPIO_Init+0x2a8>)
 8001d1a:	f005 ff4f 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001d1e:	231f      	movs	r3, #31
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d30:	4619      	mov	r1, r3
 8001d32:	484d      	ldr	r0, [pc, #308]	@ (8001e68 <MX_GPIO_Init+0x2a0>)
 8001d34:	f005 fd9a 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4843      	ldr	r0, [pc, #268]	@ (8001e60 <MX_GPIO_Init+0x298>)
 8001d52:	f005 fd8b 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8001d56:	233c      	movs	r3, #60	@ 0x3c
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	483d      	ldr	r0, [pc, #244]	@ (8001e64 <MX_GPIO_Init+0x29c>)
 8001d6e:	f005 fd7d 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001d72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d80:	2302      	movs	r3, #2
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4837      	ldr	r0, [pc, #220]	@ (8001e68 <MX_GPIO_Init+0x2a0>)
 8001d8c:	f005 fd6e 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8001d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4830      	ldr	r0, [pc, #192]	@ (8001e6c <MX_GPIO_Init+0x2a4>)
 8001daa:	f005 fd5f 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8001dae:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	482a      	ldr	r0, [pc, #168]	@ (8001e70 <MX_GPIO_Init+0x2a8>)
 8001dc8:	f005 fd50 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = LORA_RX_LED_Pin;
 8001dcc:	2340      	movs	r3, #64	@ 0x40
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LORA_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de0:	4619      	mov	r1, r3
 8001de2:	4824      	ldr	r0, [pc, #144]	@ (8001e74 <MX_GPIO_Init+0x2ac>)
 8001de4:	f005 fd42 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481c      	ldr	r0, [pc, #112]	@ (8001e70 <MX_GPIO_Init+0x2a8>)
 8001e00:	f005 fd34 	bl	800786c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2006      	movs	r0, #6
 8001e0a:	f002 fec2 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f002 fed9 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	2007      	movs	r0, #7
 8001e1a:	f002 feba 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e1e:	2007      	movs	r0, #7
 8001e20:	f002 fed1 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2008      	movs	r0, #8
 8001e2a:	f002 feb2 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e2e:	2008      	movs	r0, #8
 8001e30:	f002 fec9 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2009      	movs	r0, #9
 8001e3a:	f002 feaa 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e3e:	2009      	movs	r0, #9
 8001e40:	f002 fec1 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2028      	movs	r0, #40	@ 0x28
 8001e4a:	f002 fea2 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e4e:	2028      	movs	r0, #40	@ 0x28
 8001e50:	f002 feb9 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e54:	bf00      	nop
 8001e56:	3738      	adds	r7, #56	@ 0x38
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	58020800 	.word	0x58020800
 8001e64:	58020000 	.word	0x58020000
 8001e68:	58021000 	.word	0x58021000
 8001e6c:	58020400 	.word	0x58020400
 8001e70:	58021800 	.word	0x58021800
 8001e74:	58020c00 	.word	0x58020c00

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <Error_Handler+0x8>

08001e84 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001e90:	23ff      	movs	r3, #255	@ 0xff
 8001e92:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001e94:	23ff      	movs	r3, #255	@ 0xff
 8001e96:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001e98:	e013      	b.n	8001ec2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	4053      	eors	r3, r2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <crc16+0x64>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4413      	add	r3, r2
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	4053      	eors	r3, r2
 8001eb6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001eec <crc16+0x68>)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	807a      	strh	r2, [r7, #2]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e6      	bne.n	8001e9a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	b29b      	uxth	r3, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	0800f948 	.word	0x0800f948
 8001eec:	0800fa48 	.word	0x0800fa48

08001ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_MspInit+0x30>)
 8001ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001efc:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <HAL_MspInit+0x30>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_MspInit+0x30>)
 8001f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	58024400 	.word	0x58024400

08001f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b090      	sub	sp, #64	@ 0x40
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4aa0      	ldr	r2, [pc, #640]	@ (80021c4 <HAL_ADC_MspInit+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f040 80b6 	bne.w	80020b4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f48:	4b9f      	ldr	r3, [pc, #636]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f4e:	4a9e      	ldr	r2, [pc, #632]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f58:	4b9b      	ldr	r3, [pc, #620]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b98      	ldr	r3, [pc, #608]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6c:	4a96      	ldr	r2, [pc, #600]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f76:	4b94      	ldr	r3, [pc, #592]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b90      	ldr	r3, [pc, #576]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8a:	4a8f      	ldr	r2, [pc, #572]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f94:	4b8c      	ldr	r3, [pc, #560]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b89      	ldr	r3, [pc, #548]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa8:	4a87      	ldr	r2, [pc, #540]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb2:	4b85      	ldr	r3, [pc, #532]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc0:	4b81      	ldr	r3, [pc, #516]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc6:	4a80      	ldr	r2, [pc, #512]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd0:	4b7d      	ldr	r3, [pc, #500]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001fde:	2333      	movs	r3, #51	@ 0x33
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4876      	ldr	r0, [pc, #472]	@ (80021cc <HAL_ADC_MspInit+0x2a8>)
 8001ff2:	f005 fc3b 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff6:	23c0      	movs	r3, #192	@ 0xc0
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002006:	4619      	mov	r1, r3
 8002008:	4871      	ldr	r0, [pc, #452]	@ (80021d0 <HAL_ADC_MspInit+0x2ac>)
 800200a:	f005 fc2f 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800200e:	2303      	movs	r3, #3
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002012:	2303      	movs	r3, #3
 8002014:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800201e:	4619      	mov	r1, r3
 8002020:	486c      	ldr	r0, [pc, #432]	@ (80021d4 <HAL_ADC_MspInit+0x2b0>)
 8002022:	f005 fc23 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002026:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202c:	2303      	movs	r3, #3
 800202e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002038:	4619      	mov	r1, r3
 800203a:	4867      	ldr	r0, [pc, #412]	@ (80021d8 <HAL_ADC_MspInit+0x2b4>)
 800203c:	f005 fc16 	bl	800786c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002040:	4b66      	ldr	r3, [pc, #408]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 8002042:	4a67      	ldr	r2, [pc, #412]	@ (80021e0 <HAL_ADC_MspInit+0x2bc>)
 8002044:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002046:	4b65      	ldr	r3, [pc, #404]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 8002048:	2209      	movs	r2, #9
 800204a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800204c:	4b63      	ldr	r3, [pc, #396]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002052:	4b62      	ldr	r3, [pc, #392]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002058:	4b60      	ldr	r3, [pc, #384]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 800205a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800205e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002060:	4b5e      	ldr	r3, [pc, #376]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 8002062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002066:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002068:	4b5c      	ldr	r3, [pc, #368]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 800206a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800206e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002070:	4b5a      	ldr	r3, [pc, #360]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 8002072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002076:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002078:	4b58      	ldr	r3, [pc, #352]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 800207a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800207e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002080:	4b56      	ldr	r3, [pc, #344]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002086:	4855      	ldr	r0, [pc, #340]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 8002088:	f002 fdb8 	bl	8004bfc <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 8002092:	f7ff fef1 	bl	8001e78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a50      	ldr	r2, [pc, #320]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 800209a:	659a      	str	r2, [r3, #88]	@ 0x58
 800209c:	4a4f      	ldr	r2, [pc, #316]	@ (80021dc <HAL_ADC_MspInit+0x2b8>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2012      	movs	r0, #18
 80020a8:	f002 fd73 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020ac:	2012      	movs	r0, #18
 80020ae:	f002 fd8a 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020b2:	e083      	b.n	80021bc <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4a      	ldr	r2, [pc, #296]	@ (80021e4 <HAL_ADC_MspInit+0x2c0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d17e      	bne.n	80021bc <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020be:	4b42      	ldr	r3, [pc, #264]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c4:	4a40      	ldr	r2, [pc, #256]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ce:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020dc:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e2:	4a39      	ldr	r2, [pc, #228]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	4a31      	ldr	r2, [pc, #196]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800210a:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <HAL_ADC_MspInit+0x2a4>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002118:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211e:	2303      	movs	r3, #3
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002126:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212a:	4619      	mov	r1, r3
 800212c:	482a      	ldr	r0, [pc, #168]	@ (80021d8 <HAL_ADC_MspInit+0x2b4>)
 800212e:	f005 fb9d 	bl	800786c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002132:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002136:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800213a:	f000 fb91 	bl	8002860 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800213e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002142:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002146:	f000 fb8b 	bl	8002860 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800214a:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 800214c:	4a27      	ldr	r2, [pc, #156]	@ (80021ec <HAL_ADC_MspInit+0x2c8>)
 800214e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 8002152:	2273      	movs	r2, #115	@ 0x73
 8002154:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002156:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 8002164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002168:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 800216c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002170:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002172:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 8002174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002178:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800217a:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 800217c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002180:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 8002184:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002188:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800218a:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 800218c:	2200      	movs	r2, #0
 800218e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002190:	4815      	ldr	r0, [pc, #84]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 8002192:	f002 fd33 	bl	8004bfc <HAL_DMA_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 800219c:	f7ff fe6c 	bl	8001e78 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a11      	ldr	r2, [pc, #68]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 80021a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80021a6:	4a10      	ldr	r2, [pc, #64]	@ (80021e8 <HAL_ADC_MspInit+0x2c4>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	207f      	movs	r0, #127	@ 0x7f
 80021b2:	f002 fcee 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80021b6:	207f      	movs	r0, #127	@ 0x7f
 80021b8:	f002 fd05 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
}
 80021bc:	bf00      	nop
 80021be:	3740      	adds	r7, #64	@ 0x40
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40022000 	.word	0x40022000
 80021c8:	58024400 	.word	0x58024400
 80021cc:	58020800 	.word	0x58020800
 80021d0:	58020000 	.word	0x58020000
 80021d4:	58020400 	.word	0x58020400
 80021d8:	58021400 	.word	0x58021400
 80021dc:	24000160 	.word	0x24000160
 80021e0:	40020010 	.word	0x40020010
 80021e4:	58026000 	.word	0x58026000
 80021e8:	240001d8 	.word	0x240001d8
 80021ec:	40020028 	.word	0x40020028

080021f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0ba      	sub	sp, #232	@ 0xe8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	22b8      	movs	r2, #184	@ 0xb8
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f00d fb27 	bl	800f864 <memset>
  if(hspi->Instance==SPI1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a39      	ldr	r2, [pc, #228]	@ (8002300 <HAL_SPI_MspInit+0x110>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d16a      	bne.n	80022f6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002220:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800222c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002230:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	4618      	mov	r0, r3
 8002238:	f006 fcae 	bl	8008b98 <HAL_RCCEx_PeriphCLKConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002242:	f7ff fe19 	bl	8001e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002246:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800224c:	4a2d      	ldr	r2, [pc, #180]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 800224e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002252:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002256:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 8002258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800225c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002264:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226a:	4a26      	ldr	r2, [pc, #152]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002274:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002288:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 800228a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800228e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002292:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <HAL_SPI_MspInit+0x114>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022b8:	2305      	movs	r3, #5
 80022ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4810      	ldr	r0, [pc, #64]	@ (8002308 <HAL_SPI_MspInit+0x118>)
 80022c6:	f005 fad1 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80022ca:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80022ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e4:	2305      	movs	r3, #5
 80022e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4806      	ldr	r0, [pc, #24]	@ (800230c <HAL_SPI_MspInit+0x11c>)
 80022f2:	f005 fabb 	bl	800786c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022f6:	bf00      	nop
 80022f8:	37e8      	adds	r7, #232	@ 0xe8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40013000 	.word	0x40013000
 8002304:	58024400 	.word	0x58024400
 8002308:	58020c00 	.word	0x58020c00
 800230c:	58021800 	.word	0x58021800

08002310 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002322:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <HAL_TIM_PWM_MspInit+0x3c>)
 8002324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002328:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_TIM_PWM_MspInit+0x3c>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_TIM_PWM_MspInit+0x3c>)
 8002334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	58024400 	.word	0x58024400

08002350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002370:	d11e      	bne.n	80023b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_TIM_MspPostInit+0x68>)
 8002374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002378:	4a0f      	ldr	r2, [pc, #60]	@ (80023b8 <HAL_TIM_MspPostInit+0x68>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <HAL_TIM_MspPostInit+0x68>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002390:	2303      	movs	r3, #3
 8002392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023a0:	2301      	movs	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4619      	mov	r1, r3
 80023aa:	4804      	ldr	r0, [pc, #16]	@ (80023bc <HAL_TIM_MspPostInit+0x6c>)
 80023ac:	f005 fa5e 	bl	800786c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023b0:	bf00      	nop
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58020000 	.word	0x58020000

080023c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0b8      	sub	sp, #224	@ 0xe0
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	22b8      	movs	r2, #184	@ 0xb8
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00d fa3f 	bl	800f864 <memset>
  if(huart->Instance==USART1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d14e      	bne.n	800248e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023f0:	f04f 0201 	mov.w	r2, #1
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f006 fbc6 	bl	8008b98 <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002412:	f7ff fd31 	bl	8001e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002416:	4b21      	ldr	r3, [pc, #132]	@ (800249c <HAL_UART_MspInit+0xdc>)
 8002418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800241c:	4a1f      	ldr	r2, [pc, #124]	@ (800249c <HAL_UART_MspInit+0xdc>)
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <HAL_UART_MspInit+0xdc>)
 8002428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_UART_MspInit+0xdc>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243a:	4a18      	ldr	r2, [pc, #96]	@ (800249c <HAL_UART_MspInit+0xdc>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002444:	4b15      	ldr	r3, [pc, #84]	@ (800249c <HAL_UART_MspInit+0xdc>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002452:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002456:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800246c:	2304      	movs	r3, #4
 800246e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002476:	4619      	mov	r1, r3
 8002478:	4809      	ldr	r0, [pc, #36]	@ (80024a0 <HAL_UART_MspInit+0xe0>)
 800247a:	f005 f9f7 	bl	800786c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2025      	movs	r0, #37	@ 0x25
 8002484:	f002 fb85 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002488:	2025      	movs	r0, #37	@ 0x25
 800248a:	f002 fb9c 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800248e:	bf00      	nop
 8002490:	37e0      	adds	r7, #224	@ 0xe0
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40011000 	.word	0x40011000
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020400 	.word	0x58020400

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <NMI_Handler+0x4>

080024ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <MemManage_Handler+0x4>

080024bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <UsageFault_Handler+0x4>

080024cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fa:	f000 f96d 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}

08002502 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002506:	2001      	movs	r0, #1
 8002508:	f005 fb8b 	bl	8007c22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002514:	2002      	movs	r0, #2
 8002516:	f005 fb84 	bl	8007c22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}

0800251e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002522:	2004      	movs	r0, #4
 8002524:	f005 fb7d 	bl	8007c22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002530:	2008      	movs	r0, #8
 8002532:	f005 fb76 	bl	8007c22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <DMA1_Stream0_IRQHandler+0x10>)
 8002542:	f003 fe81 	bl	8006248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	24000160 	.word	0x24000160

08002550 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <DMA1_Stream1_IRQHandler+0x10>)
 8002556:	f003 fe77 	bl	8006248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	240001d8 	.word	0x240001d8

08002564 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <ADC_IRQHandler+0x10>)
 800256a:	f000 ff5f 	bl	800342c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	24000080 	.word	0x24000080

08002578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800257c:	4802      	ldr	r0, [pc, #8]	@ (8002588 <USART1_IRQHandler+0x10>)
 800257e:	f00a fd1b 	bl	800cfb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24000324 	.word	0x24000324

0800258c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8002590:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002594:	f005 fb45 	bl	8007c22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <ADC3_IRQHandler+0x10>)
 80025a2:	f000 ff43 	bl	800342c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	240000f0 	.word	0x240000f0

080025b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025b4:	4b32      	ldr	r3, [pc, #200]	@ (8002680 <SystemInit+0xd0>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	4a31      	ldr	r2, [pc, #196]	@ (8002680 <SystemInit+0xd0>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <SystemInit+0xd4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d807      	bhi.n	80025e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002684 <SystemInit+0xd4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 030f 	bic.w	r3, r3, #15
 80025d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002684 <SystemInit+0xd4>)
 80025da:	f043 0307 	orr.w	r3, r3, #7
 80025de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025e0:	4b29      	ldr	r3, [pc, #164]	@ (8002688 <SystemInit+0xd8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a28      	ldr	r2, [pc, #160]	@ (8002688 <SystemInit+0xd8>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025ec:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <SystemInit+0xd8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025f2:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <SystemInit+0xd8>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4924      	ldr	r1, [pc, #144]	@ (8002688 <SystemInit+0xd8>)
 80025f8:	4b24      	ldr	r3, [pc, #144]	@ (800268c <SystemInit+0xdc>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025fe:	4b21      	ldr	r3, [pc, #132]	@ (8002684 <SystemInit+0xd4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800260a:	4b1e      	ldr	r3, [pc, #120]	@ (8002684 <SystemInit+0xd4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 030f 	bic.w	r3, r3, #15
 8002612:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <SystemInit+0xd4>)
 8002614:	f043 0307 	orr.w	r3, r3, #7
 8002618:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <SystemInit+0xd8>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002620:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <SystemInit+0xd8>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002626:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <SystemInit+0xd8>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800262c:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <SystemInit+0xd8>)
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <SystemInit+0xe0>)
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <SystemInit+0xd8>)
 8002634:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <SystemInit+0xe4>)
 8002636:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002638:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <SystemInit+0xd8>)
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <SystemInit+0xe8>)
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <SystemInit+0xd8>)
 8002640:	2200      	movs	r2, #0
 8002642:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002644:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <SystemInit+0xd8>)
 8002646:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <SystemInit+0xe8>)
 8002648:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <SystemInit+0xd8>)
 800264c:	2200      	movs	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002650:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <SystemInit+0xd8>)
 8002652:	4a11      	ldr	r2, [pc, #68]	@ (8002698 <SystemInit+0xe8>)
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <SystemInit+0xd8>)
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <SystemInit+0xd8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a09      	ldr	r2, [pc, #36]	@ (8002688 <SystemInit+0xd8>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002666:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <SystemInit+0xd8>)
 800266a:	2200      	movs	r2, #0
 800266c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <SystemInit+0xec>)
 8002670:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002674:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	52002000 	.word	0x52002000
 8002688:	58024400 	.word	0x58024400
 800268c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002690:	02020200 	.word	0x02020200
 8002694:	01ff0000 	.word	0x01ff0000
 8002698:	01010280 	.word	0x01010280
 800269c:	52004000 	.word	0x52004000

080026a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026a4:	f7ff ff84 	bl	80025b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	@ (80026dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	@ (80026e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	@ (80026ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ce:	f00d f8d1 	bl	800f874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d2:	f7fe fd5d 	bl	8001190 <main>
  bx  lr
 80026d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80026dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026e0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80026e4:	0800fb98 	.word	0x0800fb98
  ldr r2, =_sbss
 80026e8:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80026ec:	2400062c 	.word	0x2400062c

080026f0 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <BDMA_Channel0_IRQHandler>
	...

080026f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fa:	2003      	movs	r0, #3
 80026fc:	f002 fa3e 	bl	8004b7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002700:	f006 f874 	bl	80087ec <HAL_RCC_GetSysClockFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_Init+0x68>)
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	4913      	ldr	r1, [pc, #76]	@ (8002760 <HAL_Init+0x6c>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800271e:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <HAL_Init+0x68>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	4a0e      	ldr	r2, [pc, #56]	@ (8002760 <HAL_Init+0x6c>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	4a0b      	ldr	r2, [pc, #44]	@ (8002764 <HAL_Init+0x70>)
 8002736:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002738:	4a0b      	ldr	r2, [pc, #44]	@ (8002768 <HAL_Init+0x74>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800273e:	200f      	movs	r0, #15
 8002740:	f000 f814 	bl	800276c <HAL_InitTick>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e002      	b.n	8002754 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800274e:	f7ff fbcf 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	58024400 	.word	0x58024400
 8002760:	0800fb48 	.word	0x0800fb48
 8002764:	24000058 	.word	0x24000058
 8002768:	24000054 	.word	0x24000054

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002774:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_InitTick+0x60>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e021      	b.n	80027c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <HAL_InitTick+0x64>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_InitTick+0x60>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fa23 	bl	8004be2 <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f002 f9ed 	bl	8004b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	@ (80027d4 <HAL_InitTick+0x68>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	24000060 	.word	0x24000060
 80027d0:	24000054 	.word	0x24000054
 80027d4:	2400005c 	.word	0x2400005c

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	24000060 	.word	0x24000060
 80027fc:	24000628 	.word	0x24000628

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	24000628 	.word	0x24000628

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	24000060 	.word	0x24000060

08002860 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	4904      	ldr	r1, [pc, #16]	@ (8002888 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	58000400 	.word	0x58000400

0800288c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3360      	adds	r3, #96	@ 0x60
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <LL_ADC_SetOffset+0x60>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d10b      	bne.n	8002930 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800292e:	e00b      	b.n	8002948 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	431a      	orrs	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	58026000 	.word	0x58026000

08002958 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3360      	adds	r3, #96	@ 0x60
 8002966:	461a      	mov	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	611a      	str	r2, [r3, #16]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	@ (80029f8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3360      	adds	r3, #96	@ 0x60
 80029d0:	461a      	mov	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	601a      	str	r2, [r3, #0]
  }
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	58026000 	.word	0x58026000

080029fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a3c <LL_ADC_SetOffsetSaturation+0x40>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10e      	bne.n	8002a2e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3360      	adds	r3, #96	@ 0x60
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	58026000 	.word	0x58026000

08002a40 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a80 <LL_ADC_SetOffsetSign+0x40>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10e      	bne.n	8002a72 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3360      	adds	r3, #96	@ 0x60
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	58026000 	.word	0x58026000

08002a84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3360      	adds	r3, #96	@ 0x60
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad4 <LL_ADC_SetOffsetState+0x50>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002ab6:	e007      	b.n	8002ac8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	58026000 	.word	0x58026000

08002ad8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3330      	adds	r3, #48	@ 0x30
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	4413      	add	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	211f      	movs	r1, #31
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	401a      	ands	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	f003 011f 	and.w	r1, r3, #31
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f023 0203 	bic.w	r2, r3, #3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a08      	ldr	r2, [pc, #32]	@ (8002bcc <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d107      	bne.n	8002bbe <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	58026000 	.word	0x58026000

08002bd0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bdc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b087      	sub	sp, #28
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3314      	adds	r3, #20
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0e5b      	lsrs	r3, r3, #25
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	4413      	add	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	0d1b      	lsrs	r3, r3, #20
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2107      	movs	r1, #7
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	0d1b      	lsrs	r3, r3, #20
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc4 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d115      	bne.n	8002c8c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0318 	and.w	r3, r3, #24
 8002c76:	4914      	ldr	r1, [pc, #80]	@ (8002cc8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c82:	431a      	orrs	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c8a:	e014      	b.n	8002cb6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0318 	and.w	r3, r3, #24
 8002ca2:	4909      	ldr	r1, [pc, #36]	@ (8002cc8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ca4:	40d9      	lsrs	r1, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	400b      	ands	r3, r1
 8002caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	58026000 	.word	0x58026000
 8002cc8:	000fffff 	.word	0x000fffff

08002ccc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6093      	str	r3, [r2, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	5fffffc0 	.word	0x5fffffc0

08002d28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	6fffffc0 	.word	0x6fffffc0

08002d78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <LL_ADC_Enable+0x24>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	7fffffc0 	.word	0x7fffffc0

08002dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_IsEnabled+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_IsEnabled+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <LL_ADC_REG_StartConversion+0x24>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	7fffffc0 	.word	0x7fffffc0

08002e18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d101      	bne.n	8002e56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b089      	sub	sp, #36	@ 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e1ee      	b.n	800325c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff f849 	bl	8001f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff3f 	bl	8002d28 <LL_ADC_IsDeepPowerDownEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff25 	bl	8002d04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff5a 	bl	8002d78 <LL_ADC_IsInternalRegulatorEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d114      	bne.n	8002ef4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff3e 	bl	8002d50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8003110 <HAL_ADC_Init+0x2ac>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	4a8e      	ldr	r2, [pc, #568]	@ (8003114 <HAL_ADC_Init+0x2b0>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ee6:	e002      	b.n	8002eee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f9      	bne.n	8002ee8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff3d 	bl	8002d78 <LL_ADC_IsInternalRegulatorEnabled>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f08:	f043 0210 	orr.w	r2, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff77 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8002f2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8188 	bne.w	800324a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8184 	bne.w	800324a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f46:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff36 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d136      	bne.n	8002fd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6c      	ldr	r2, [pc, #432]	@ (8003118 <HAL_ADC_Init+0x2b4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADC_Init+0x112>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6a      	ldr	r2, [pc, #424]	@ (800311c <HAL_ADC_Init+0x2b8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10e      	bne.n	8002f94 <HAL_ADC_Init+0x130>
 8002f76:	4868      	ldr	r0, [pc, #416]	@ (8003118 <HAL_ADC_Init+0x2b4>)
 8002f78:	f7ff ff26 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	4867      	ldr	r0, [pc, #412]	@ (800311c <HAL_ADC_Init+0x2b8>)
 8002f80:	f7ff ff22 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4323      	orrs	r3, r4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e008      	b.n	8002fa6 <HAL_ADC_Init+0x142>
 8002f94:	4862      	ldr	r0, [pc, #392]	@ (8003120 <HAL_ADC_Init+0x2bc>)
 8002f96:	f7ff ff17 	bl	8002dc8 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5a      	ldr	r2, [pc, #360]	@ (8003118 <HAL_ADC_Init+0x2b4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_Init+0x15a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a58      	ldr	r2, [pc, #352]	@ (800311c <HAL_ADC_Init+0x2b8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_Init+0x15e>
 8002fbe:	4a59      	ldr	r2, [pc, #356]	@ (8003124 <HAL_ADC_Init+0x2c0>)
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_Init+0x160>
 8002fc2:	4a59      	ldr	r2, [pc, #356]	@ (8003128 <HAL_ADC_Init+0x2c4>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7ff fc5e 	bl	800288c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	@ (8003120 <HAL_ADC_Init+0x2bc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d129      	bne.n	800302e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7e5b      	ldrb	r3, [r3, #25]
 8002fde:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002fe4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002fea:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d013      	beq.n	800301c <HAL_ADC_Init+0x1b8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d00d      	beq.n	8003018 <HAL_ADC_Init+0x1b4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b1c      	cmp	r3, #28
 8003002:	d007      	beq.n	8003014 <HAL_ADC_Init+0x1b0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b18      	cmp	r3, #24
 800300a:	d101      	bne.n	8003010 <HAL_ADC_Init+0x1ac>
 800300c:	2318      	movs	r3, #24
 800300e:	e006      	b.n	800301e <HAL_ADC_Init+0x1ba>
 8003010:	2300      	movs	r3, #0
 8003012:	e004      	b.n	800301e <HAL_ADC_Init+0x1ba>
 8003014:	2310      	movs	r3, #16
 8003016:	e002      	b.n	800301e <HAL_ADC_Init+0x1ba>
 8003018:	2308      	movs	r3, #8
 800301a:	e000      	b.n	800301e <HAL_ADC_Init+0x1ba>
 800301c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800301e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003026:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e00e      	b.n	800304c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7e5b      	ldrb	r3, [r3, #25]
 8003032:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003038:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800303e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003046:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d106      	bne.n	8003064 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	045b      	lsls	r3, r3, #17
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <HAL_ADC_Init+0x2bc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d115      	bne.n	80030b6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	4b26      	ldr	r3, [pc, #152]	@ (800312c <HAL_ADC_Init+0x2c8>)
 8003092:	4013      	ands	r3, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	430b      	orrs	r3, r1
 800309c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	611a      	str	r2, [r3, #16]
 80030b4:	e009      	b.n	80030ca <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <HAL_ADC_Init+0x2cc>)
 80030be:	4013      	ands	r3, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	69b9      	ldr	r1, [r7, #24]
 80030c6:	430b      	orrs	r3, r1
 80030c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fea2 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 80030d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff feaf 	bl	8002e3e <LL_ADC_INJ_IsConversionOngoing>
 80030e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 808e 	bne.w	8003206 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 808a 	bne.w	8003206 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <HAL_ADC_Init+0x2bc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d11b      	bne.n	8003134 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7e1b      	ldrb	r3, [r3, #24]
 8003100:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003108:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e018      	b.n	8003142 <HAL_ADC_Init+0x2de>
 8003110:	24000054 	.word	0x24000054
 8003114:	053e2d63 	.word	0x053e2d63
 8003118:	40022000 	.word	0x40022000
 800311c:	40022100 	.word	0x40022100
 8003120:	58026000 	.word	0x58026000
 8003124:	40022300 	.word	0x40022300
 8003128:	58026300 	.word	0x58026300
 800312c:	fff04007 	.word	0xfff04007
 8003130:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7e1b      	ldrb	r3, [r3, #24]
 8003138:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	4b46      	ldr	r3, [pc, #280]	@ (8003264 <HAL_ADC_Init+0x400>)
 800314a:	4013      	ands	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	69b9      	ldr	r1, [r7, #24]
 8003152:	430b      	orrs	r3, r1
 8003154:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800315c:	2b01      	cmp	r3, #1
 800315e:	d137      	bne.n	80031d0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3f      	ldr	r2, [pc, #252]	@ (8003268 <HAL_ADC_Init+0x404>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d116      	bne.n	800319e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_ADC_Init+0x408>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800318e:	430a      	orrs	r2, r1
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	611a      	str	r2, [r3, #16]
 800319c:	e020      	b.n	80031e0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	4b32      	ldr	r3, [pc, #200]	@ (8003270 <HAL_ADC_Init+0x40c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0411      	lsls	r1, r2, #16
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031b4:	4311      	orrs	r1, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031ba:	4311      	orrs	r1, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031c0:	430a      	orrs	r2, r1
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	611a      	str	r2, [r3, #16]
 80031ce:	e007      	b.n	80031e0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <HAL_ADC_Init+0x404>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d002      	beq.n	8003206 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f001 f9c3 	bl	800458c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10c      	bne.n	8003228 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	f023 010f 	bic.w	r1, r3, #15
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	1e5a      	subs	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
 8003226:	e007      	b.n	8003238 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 020f 	bic.w	r2, r2, #15
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	f023 0303 	bic.w	r3, r3, #3
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60
 8003248:	e007      	b.n	800325a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800325a:	7ffb      	ldrb	r3, [r7, #31]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3724      	adds	r7, #36	@ 0x24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}
 8003264:	ffffbffc 	.word	0xffffbffc
 8003268:	58026000 	.word	0x58026000
 800326c:	fc00f81f 	.word	0xfc00f81f
 8003270:	fc00f81e 	.word	0xfc00f81e

08003274 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a60      	ldr	r2, [pc, #384]	@ (8003408 <HAL_ADC_Start_DMA+0x194>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_ADC_Start_DMA+0x20>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5f      	ldr	r2, [pc, #380]	@ (800340c <HAL_ADC_Start_DMA+0x198>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_ADC_Start_DMA+0x24>
 8003294:	4b5e      	ldr	r3, [pc, #376]	@ (8003410 <HAL_ADC_Start_DMA+0x19c>)
 8003296:	e000      	b.n	800329a <HAL_ADC_Start_DMA+0x26>
 8003298:	4b5e      	ldr	r3, [pc, #376]	@ (8003414 <HAL_ADC_Start_DMA+0x1a0>)
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fd16 	bl	8002ccc <LL_ADC_GetMultimode>
 80032a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fdb6 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 80a2 	bne.w	80033f8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Start_DMA+0x4e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e09d      	b.n	80033fe <HAL_ADC_Start_DMA+0x18a>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d003      	beq.n	80032de <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b09      	cmp	r3, #9
 80032da:	f040 8086 	bne.w	80033ea <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f001 f836 	bl	8004350 <ADC_Enable>
 80032e4:	4603      	mov	r3, r0
 80032e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d178      	bne.n	80033e0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032f2:	4b49      	ldr	r3, [pc, #292]	@ (8003418 <HAL_ADC_Start_DMA+0x1a4>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a42      	ldr	r2, [pc, #264]	@ (800340c <HAL_ADC_Start_DMA+0x198>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d002      	beq.n	800330e <HAL_ADC_Start_DMA+0x9a>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	e000      	b.n	8003310 <HAL_ADC_Start_DMA+0x9c>
 800330e:	4b3e      	ldr	r3, [pc, #248]	@ (8003408 <HAL_ADC_Start_DMA+0x194>)
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	4293      	cmp	r3, r2
 8003316:	d002      	beq.n	800331e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d105      	bne.n	800332a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800333a:	f023 0206 	bic.w	r2, r3, #6
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	665a      	str	r2, [r3, #100]	@ 0x64
 8003342:	e002      	b.n	800334a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	4a33      	ldr	r2, [pc, #204]	@ (800341c <HAL_ADC_Start_DMA+0x1a8>)
 8003350:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	4a32      	ldr	r2, [pc, #200]	@ (8003420 <HAL_ADC_Start_DMA+0x1ac>)
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	4a31      	ldr	r2, [pc, #196]	@ (8003424 <HAL_ADC_Start_DMA+0x1b0>)
 8003360:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	221c      	movs	r2, #28
 8003368:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0210 	orr.w	r2, r2, #16
 8003380:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a28      	ldr	r2, [pc, #160]	@ (8003428 <HAL_ADC_Start_DMA+0x1b4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10f      	bne.n	80033ac <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7ff fbfe 	bl	8002b9c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fbe9 	bl	8002b7c <LL_ADC_EnableDMAReq>
 80033aa:	e007      	b.n	80033bc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f7ff fbcd 	bl	8002b56 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3340      	adds	r3, #64	@ 0x40
 80033c6:	4619      	mov	r1, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f001 ff6e 	bl	80052ac <HAL_DMA_Start_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fd09 	bl	8002df0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033de:	e00d      	b.n	80033fc <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80033e8:	e008      	b.n	80033fc <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80033f6:	e001      	b.n	80033fc <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
 80033fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40022000 	.word	0x40022000
 800340c:	40022100 	.word	0x40022100
 8003410:	40022300 	.word	0x40022300
 8003414:	58026300 	.word	0x58026300
 8003418:	fffff0fe 	.word	0xfffff0fe
 800341c:	08004465 	.word	0x08004465
 8003420:	0800453d 	.word	0x0800453d
 8003424:	08004559 	.word	0x08004559
 8003428:	58026000 	.word	0x58026000

0800342c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a87      	ldr	r2, [pc, #540]	@ (800366c <HAL_ADC_IRQHandler+0x240>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_ADC_IRQHandler+0x30>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a86      	ldr	r2, [pc, #536]	@ (8003670 <HAL_ADC_IRQHandler+0x244>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_ADC_IRQHandler+0x34>
 800345c:	4b85      	ldr	r3, [pc, #532]	@ (8003674 <HAL_ADC_IRQHandler+0x248>)
 800345e:	e000      	b.n	8003462 <HAL_ADC_IRQHandler+0x36>
 8003460:	4b85      	ldr	r3, [pc, #532]	@ (8003678 <HAL_ADC_IRQHandler+0x24c>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fc32 	bl	8002ccc <LL_ADC_GetMultimode>
 8003468:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d017      	beq.n	80034a4 <HAL_ADC_IRQHandler+0x78>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d012      	beq.n	80034a4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d105      	bne.n	8003496 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f001 f9b4 	bl	8004804 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2202      	movs	r2, #2
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_ADC_IRQHandler+0x8c>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8083 	beq.w	80035ca <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d07d      	beq.n	80035ca <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff faf4 	bl	8002ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d062      	beq.n	80035bc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5d      	ldr	r2, [pc, #372]	@ (8003670 <HAL_ADC_IRQHandler+0x244>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d002      	beq.n	8003506 <HAL_ADC_IRQHandler+0xda>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	e000      	b.n	8003508 <HAL_ADC_IRQHandler+0xdc>
 8003506:	4b59      	ldr	r3, [pc, #356]	@ (800366c <HAL_ADC_IRQHandler+0x240>)
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	4293      	cmp	r3, r2
 800350e:	d008      	beq.n	8003522 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d002      	beq.n	8003522 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b09      	cmp	r3, #9
 8003520:	d104      	bne.n	800352c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	e00c      	b.n	8003546 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a4f      	ldr	r2, [pc, #316]	@ (8003670 <HAL_ADC_IRQHandler+0x244>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d002      	beq.n	800353c <HAL_ADC_IRQHandler+0x110>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	e000      	b.n	800353e <HAL_ADC_IRQHandler+0x112>
 800353c:	4b4b      	ldr	r3, [pc, #300]	@ (800366c <HAL_ADC_IRQHandler+0x240>)
 800353e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d135      	bne.n	80035bc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b08      	cmp	r3, #8
 800355c:	d12e      	bne.n	80035bc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fc58 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11a      	bne.n	80035a4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020c 	bic.w	r2, r2, #12
 800357c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d112      	bne.n	80035bc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80035a2:	e00b      	b.n	80035bc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a8:	f043 0210 	orr.w	r2, r3, #16
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f96f 	bl	80038a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	220c      	movs	r2, #12
 80035c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_ADC_IRQHandler+0x1b2>
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a0 	beq.w	800372a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 809a 	beq.w	800372a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fadc 	bl	8002bd0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003618:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fa5a 	bl	8002ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003624:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a11      	ldr	r2, [pc, #68]	@ (8003670 <HAL_ADC_IRQHandler+0x244>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d002      	beq.n	8003636 <HAL_ADC_IRQHandler+0x20a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	e000      	b.n	8003638 <HAL_ADC_IRQHandler+0x20c>
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <HAL_ADC_IRQHandler+0x240>)
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	4293      	cmp	r3, r2
 800363e:	d008      	beq.n	8003652 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b06      	cmp	r3, #6
 800364a:	d002      	beq.n	8003652 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b07      	cmp	r3, #7
 8003650:	d104      	bne.n	800365c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	e014      	b.n	8003686 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a03      	ldr	r2, [pc, #12]	@ (8003670 <HAL_ADC_IRQHandler+0x244>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00a      	beq.n	800367c <HAL_ADC_IRQHandler+0x250>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	e008      	b.n	800367e <HAL_ADC_IRQHandler+0x252>
 800366c:	40022000 	.word	0x40022000
 8003670:	40022100 	.word	0x40022100
 8003674:	40022300 	.word	0x40022300
 8003678:	58026300 	.word	0x58026300
 800367c:	4b84      	ldr	r3, [pc, #528]	@ (8003890 <HAL_ADC_IRQHandler+0x464>)
 800367e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d047      	beq.n	800371c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_ADC_IRQHandler+0x27a>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d03f      	beq.n	800371c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d13a      	bne.n	800371c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d133      	bne.n	800371c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d12e      	bne.n	800371c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fbbb 	bl	8002e3e <LL_ADC_INJ_IsConversionOngoing>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11a      	bne.n	8003704 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036dc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d112      	bne.n	800371c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	661a      	str	r2, [r3, #96]	@ 0x60
 8003702:	e00b      	b.n	800371c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003708:	f043 0210 	orr.w	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 f849 	bl	80047b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2260      	movs	r2, #96	@ 0x60
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d011      	beq.n	8003758 <HAL_ADC_IRQHandler+0x32c>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8bc 	bl	80038c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2280      	movs	r2, #128	@ 0x80
 8003756:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d012      	beq.n	8003788 <HAL_ADC_IRQHandler+0x35c>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003770:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f001 f82f 	bl	80047dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003786:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <HAL_ADC_IRQHandler+0x38c>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f001 f821 	bl	80047f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d043      	beq.n	800384a <HAL_ADC_IRQHandler+0x41e>
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03e      	beq.n	800384a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80037d4:	2301      	movs	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d8:	e021      	b.n	800381e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003890 <HAL_ADC_IRQHandler+0x464>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_ADC_IRQHandler+0x3c8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a29      	ldr	r2, [pc, #164]	@ (8003894 <HAL_ADC_IRQHandler+0x468>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_IRQHandler+0x3cc>
 80037f4:	4b28      	ldr	r3, [pc, #160]	@ (8003898 <HAL_ADC_IRQHandler+0x46c>)
 80037f6:	e000      	b.n	80037fa <HAL_ADC_IRQHandler+0x3ce>
 80037f8:	4b28      	ldr	r3, [pc, #160]	@ (800389c <HAL_ADC_IRQHandler+0x470>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fa74 	bl	8002ce8 <LL_ADC_GetMultiDMATransfer>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003806:	2301      	movs	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
 800380a:	e008      	b.n	800381e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800381a:	2301      	movs	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10e      	bne.n	8003842 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003828:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003834:	f043 0202 	orr.w	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f84d 	bl	80038dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2210      	movs	r2, #16
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d018      	beq.n	8003886 <HAL_ADC_IRQHandler+0x45a>
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385a:	2b00      	cmp	r3, #0
 800385c:	d013      	beq.n	8003886 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003862:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800387e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 ffa1 	bl	80047c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003886:	bf00      	nop
 8003888:	3728      	adds	r7, #40	@ 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40022000 	.word	0x40022000
 8003894:	40022100 	.word	0x40022100
 8003898:	40022300 	.word	0x40022300
 800389c:	58026300 	.word	0x58026300

080038a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b0b9      	sub	sp, #228	@ 0xe4
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800390a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4aab      	ldr	r2, [pc, #684]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x2d0>)
 8003912:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d102      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x34>
 800391e:	2302      	movs	r3, #2
 8003920:	f000 bcfe 	b.w	8004320 <HAL_ADC_ConfigChannel+0xa30>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fa71 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 84e2 	bne.w	8004302 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db38      	blt.n	80039b8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a9e      	ldr	r2, [pc, #632]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x2d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d033      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003958:	2b00      	cmp	r3, #0
 800395a:	d108      	bne.n	800396e <HAL_ADC_ConfigChannel+0x7e>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	e01d      	b.n	80039aa <HAL_ADC_ConfigChannel+0xba>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800398a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003992:	2320      	movs	r3, #32
 8003994:	e004      	b.n	80039a0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2201      	movs	r2, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	69d1      	ldr	r1, [r2, #28]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f7ff f89a 	bl	8002afe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fa22 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 80039d4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fa2e 	bl	8002e3e <LL_ADC_INJ_IsConversionOngoing>
 80039e2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 8270 	bne.w	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 826b 	bne.w	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7ff f8f5 	bl	8002bf6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6c      	ldr	r2, [pc, #432]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10d      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a30:	e032      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a32:	4b65      	ldr	r3, [pc, #404]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a3e:	d10b      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x168>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	089b      	lsrs	r3, r3, #2
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	e01d      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x1a4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x18e>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	e00a      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x1a4>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d048      	beq.n	8003b32 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6919      	ldr	r1, [r3, #16]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ab0:	f7fe ff20 	bl	80028f4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a42      	ldr	r2, [pc, #264]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d119      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6919      	ldr	r1, [r3, #16]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f7fe ffb8 	bl	8002a40 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6919      	ldr	r1, [r3, #16]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d102      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1f8>
 8003ae2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ae6:	e000      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1fa>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7fe ff86 	bl	80029fc <LL_ADC_SetOffsetSaturation>
 8003af0:	e1ee      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6919      	ldr	r1, [r3, #16]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d102      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x21a>
 8003b04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x21c>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f7fe ff53 	bl	80029b8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6919      	ldr	r1, [r3, #16]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	7e1b      	ldrb	r3, [r3, #24]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x238>
 8003b22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b26:	e000      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x23a>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fe ff2a 	bl	8002984 <LL_ADC_SetDataRightShift>
 8003b30:	e1ce      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f040 8181 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe ff07 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x27a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fefc 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003b60:	4603      	mov	r3, r0
 8003b62:	0e9b      	lsrs	r3, r3, #26
 8003b64:	f003 021f 	and.w	r2, r3, #31
 8003b68:	e01e      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x2b8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe fef1 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003b88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003b98:	2320      	movs	r3, #32
 8003b9a:	e004      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003b9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x2dc>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	e01e      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x30e>
 8003bc0:	47ff0000 	.word	0x47ff0000
 8003bc4:	58026000 	.word	0x58026000
 8003bc8:	5c001000 	.word	0x5c001000
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003be0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e004      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d106      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe ff3a 	bl	8002a84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fe9e 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x34c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fe93 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003c32:	4603      	mov	r3, r0
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	f003 021f 	and.w	r2, r3, #31
 8003c3a:	e01e      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x38a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fe88 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003c62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	e004      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x3a2>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0e9b      	lsrs	r3, r3, #26
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	e018      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x3d4>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003caa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003cae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	e004      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d106      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fed7 	bl	8002a84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fe3b 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x412>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fe30 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	0e9b      	lsrs	r3, r3, #26
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	e01e      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x450>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2102      	movs	r1, #2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fe25 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003d30:	2320      	movs	r3, #32
 8003d32:	e004      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x468>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0e9b      	lsrs	r3, r3, #26
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	e014      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x492>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003d74:	2320      	movs	r3, #32
 8003d76:	e004      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d106      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fe78 	bl	8002a84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2103      	movs	r1, #3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fddc 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x4d0>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2103      	movs	r1, #3
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fdd1 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	0e9b      	lsrs	r3, r3, #26
 8003dba:	f003 021f 	and.w	r2, r3, #31
 8003dbe:	e017      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x500>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2103      	movs	r1, #3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fdc6 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dda:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003de2:	2320      	movs	r3, #32
 8003de4:	e003      	b.n	8003dee <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x518>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	e011      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x53c>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e18:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e003      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d14f      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2103      	movs	r1, #3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fe23 	bl	8002a84 <LL_ADC_SetOffsetState>
 8003e3e:	e047      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	069b      	lsls	r3, r3, #26
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d107      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e62:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	069b      	lsls	r3, r3, #26
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e86:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	069b      	lsls	r3, r3, #26
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d107      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eaa:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	069b      	lsls	r3, r3, #26
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d107      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ece:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe ff77 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 8219 	bne.w	8004314 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f7fe feac 	bl	8002c4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4aa1      	ldr	r2, [pc, #644]	@ (8004180 <HAL_ADC_ConfigChannel+0x890>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f040 812e 	bne.w	800415c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x638>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	3301      	adds	r3, #1
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	bf94      	ite	ls
 8003f20:	2301      	movls	r3, #1
 8003f22:	2300      	movhi	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e019      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x66c>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e003      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	bf94      	ite	ls
 8003f56:	2301      	movls	r3, #1
 8003f58:	2300      	movhi	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d079      	beq.n	8004054 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d107      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x68c>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0e9b      	lsrs	r3, r3, #26
 8003f72:	3301      	adds	r3, #1
 8003f74:	069b      	lsls	r3, r3, #26
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f7a:	e015      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x6b8>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f84:	fa93 f3a3 	rbit	r3, r3
 8003f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003f94:	2320      	movs	r3, #32
 8003f96:	e003      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	069b      	lsls	r3, r3, #26
 8003fa4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x6d8>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0e9b      	lsrs	r3, r3, #26
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	e017      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x708>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e003      	b.n	8003fec <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	ea42 0103 	orr.w	r1, r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_ADC_ConfigChannel+0x72e>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0e9b      	lsrs	r3, r3, #26
 800400e:	3301      	adds	r3, #1
 8004010:	f003 021f 	and.w	r2, r3, #31
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	051b      	lsls	r3, r3, #20
 800401c:	e018      	b.n	8004050 <HAL_ADC_ConfigChannel+0x760>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800402c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004036:	2320      	movs	r3, #32
 8004038:	e003      	b.n	8004042 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	3301      	adds	r3, #1
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004050:	430b      	orrs	r3, r1
 8004052:	e07e      	b.n	8004152 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x780>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	3301      	adds	r3, #1
 8004068:	069b      	lsls	r3, r3, #26
 800406a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800406e:	e015      	b.n	800409c <HAL_ADC_ConfigChannel+0x7ac>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004078:	fa93 f3a3 	rbit	r3, r3
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004088:	2320      	movs	r3, #32
 800408a:	e003      	b.n	8004094 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	3301      	adds	r3, #1
 8004096:	069b      	lsls	r3, r3, #26
 8004098:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x7cc>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	3301      	adds	r3, #1
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	e017      	b.n	80040ec <HAL_ADC_ConfigChannel+0x7fc>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	61bb      	str	r3, [r7, #24]
  return result;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80040d4:	2320      	movs	r3, #32
 80040d6:	e003      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	3301      	adds	r3, #1
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	ea42 0103 	orr.w	r1, r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10d      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x828>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0e9b      	lsrs	r3, r3, #26
 8004102:	3301      	adds	r3, #1
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	3b1e      	subs	r3, #30
 8004110:	051b      	lsls	r3, r3, #20
 8004112:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004116:	e01b      	b.n	8004150 <HAL_ADC_ConfigChannel+0x860>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	60fb      	str	r3, [r7, #12]
  return result;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e003      	b.n	800413c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f003 021f 	and.w	r2, r3, #31
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	3b1e      	subs	r3, #30
 800414a:	051b      	lsls	r3, r3, #20
 800414c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004150:	430b      	orrs	r3, r1
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	6892      	ldr	r2, [r2, #8]
 8004156:	4619      	mov	r1, r3
 8004158:	f7fe fd4d 	bl	8002bf6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f280 80d7 	bge.w	8004314 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a06      	ldr	r2, [pc, #24]	@ (8004184 <HAL_ADC_ConfigChannel+0x894>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_ADC_ConfigChannel+0x88a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_ADC_ConfigChannel+0x898>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10a      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x8a0>
 800417a:	4b04      	ldr	r3, [pc, #16]	@ (800418c <HAL_ADC_ConfigChannel+0x89c>)
 800417c:	e009      	b.n	8004192 <HAL_ADC_ConfigChannel+0x8a2>
 800417e:	bf00      	nop
 8004180:	47ff0000 	.word	0x47ff0000
 8004184:	40022000 	.word	0x40022000
 8004188:	40022100 	.word	0x40022100
 800418c:	40022300 	.word	0x40022300
 8004190:	4b65      	ldr	r3, [pc, #404]	@ (8004328 <HAL_ADC_ConfigChannel+0xa38>)
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fba0 	bl	80028d8 <LL_ADC_GetCommonPathInternalCh>
 8004198:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a62      	ldr	r2, [pc, #392]	@ (800432c <HAL_ADC_ConfigChannel+0xa3c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_ADC_ConfigChannel+0x8c0>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a61      	ldr	r2, [pc, #388]	@ (8004330 <HAL_ADC_ConfigChannel+0xa40>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10e      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x8de>
 80041b0:	485e      	ldr	r0, [pc, #376]	@ (800432c <HAL_ADC_ConfigChannel+0xa3c>)
 80041b2:	f7fe fe09 	bl	8002dc8 <LL_ADC_IsEnabled>
 80041b6:	4604      	mov	r4, r0
 80041b8:	485d      	ldr	r0, [pc, #372]	@ (8004330 <HAL_ADC_ConfigChannel+0xa40>)
 80041ba:	f7fe fe05 	bl	8002dc8 <LL_ADC_IsEnabled>
 80041be:	4603      	mov	r3, r0
 80041c0:	4323      	orrs	r3, r4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e008      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x8f0>
 80041ce:	4859      	ldr	r0, [pc, #356]	@ (8004334 <HAL_ADC_ConfigChannel+0xa44>)
 80041d0:	f7fe fdfa 	bl	8002dc8 <LL_ADC_IsEnabled>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf0c      	ite	eq
 80041da:	2301      	moveq	r3, #1
 80041dc:	2300      	movne	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8084 	beq.w	80042ee <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a53      	ldr	r2, [pc, #332]	@ (8004338 <HAL_ADC_ConfigChannel+0xa48>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d132      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x966>
 80041f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d12c      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a4c      	ldr	r2, [pc, #304]	@ (8004334 <HAL_ADC_ConfigChannel+0xa44>)
 8004202:	4293      	cmp	r3, r2
 8004204:	f040 8086 	bne.w	8004314 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a47      	ldr	r2, [pc, #284]	@ (800432c <HAL_ADC_ConfigChannel+0xa3c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_ADC_ConfigChannel+0x92c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a46      	ldr	r2, [pc, #280]	@ (8004330 <HAL_ADC_ConfigChannel+0xa40>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x930>
 800421c:	4a47      	ldr	r2, [pc, #284]	@ (800433c <HAL_ADC_ConfigChannel+0xa4c>)
 800421e:	e000      	b.n	8004222 <HAL_ADC_ConfigChannel+0x932>
 8004220:	4a41      	ldr	r2, [pc, #260]	@ (8004328 <HAL_ADC_ConfigChannel+0xa38>)
 8004222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004226:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe fb40 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004232:	4b43      	ldr	r3, [pc, #268]	@ (8004340 <HAL_ADC_ConfigChannel+0xa50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	4a42      	ldr	r2, [pc, #264]	@ (8004344 <HAL_ADC_ConfigChannel+0xa54>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	3301      	adds	r3, #1
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004246:	e002      	b.n	800424e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	3b01      	subs	r3, #1
 800424c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f9      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004254:	e05e      	b.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3b      	ldr	r2, [pc, #236]	@ (8004348 <HAL_ADC_ConfigChannel+0xa58>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d120      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x9b2>
 8004260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11a      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a30      	ldr	r2, [pc, #192]	@ (8004334 <HAL_ADC_ConfigChannel+0xa44>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d14e      	bne.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <HAL_ADC_ConfigChannel+0xa3c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_ADC_ConfigChannel+0x99a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2a      	ldr	r2, [pc, #168]	@ (8004330 <HAL_ADC_ConfigChannel+0xa40>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_ADC_ConfigChannel+0x99e>
 800428a:	4a2c      	ldr	r2, [pc, #176]	@ (800433c <HAL_ADC_ConfigChannel+0xa4c>)
 800428c:	e000      	b.n	8004290 <HAL_ADC_ConfigChannel+0x9a0>
 800428e:	4a26      	ldr	r2, [pc, #152]	@ (8004328 <HAL_ADC_ConfigChannel+0xa38>)
 8004290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004294:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe fb09 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042a0:	e038      	b.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a29      	ldr	r2, [pc, #164]	@ (800434c <HAL_ADC_ConfigChannel+0xa5c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d133      	bne.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
 80042ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d12d      	bne.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004334 <HAL_ADC_ConfigChannel+0xa44>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d128      	bne.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a19      	ldr	r2, [pc, #100]	@ (800432c <HAL_ADC_ConfigChannel+0xa3c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_ADC_ConfigChannel+0x9e6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <HAL_ADC_ConfigChannel+0xa40>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_ADC_ConfigChannel+0x9ea>
 80042d6:	4a19      	ldr	r2, [pc, #100]	@ (800433c <HAL_ADC_ConfigChannel+0xa4c>)
 80042d8:	e000      	b.n	80042dc <HAL_ADC_ConfigChannel+0x9ec>
 80042da:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <HAL_ADC_ConfigChannel+0xa38>)
 80042dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fe fae3 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
 80042ec:	e012      	b.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004300:	e008      	b.n	8004314 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800431c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004320:	4618      	mov	r0, r3
 8004322:	37e4      	adds	r7, #228	@ 0xe4
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}
 8004328:	58026300 	.word	0x58026300
 800432c:	40022000 	.word	0x40022000
 8004330:	40022100 	.word	0x40022100
 8004334:	58026000 	.word	0x58026000
 8004338:	c7520000 	.word	0xc7520000
 800433c:	40022300 	.word	0x40022300
 8004340:	24000054 	.word	0x24000054
 8004344:	053e2d63 	.word	0x053e2d63
 8004348:	c3210000 	.word	0xc3210000
 800434c:	cb840000 	.word	0xcb840000

08004350 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fd33 	bl	8002dc8 <LL_ADC_IsEnabled>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d16e      	bne.n	8004446 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	4b38      	ldr	r3, [pc, #224]	@ (8004450 <ADC_Enable+0x100>)
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437a:	f043 0210 	orr.w	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004386:	f043 0201 	orr.w	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e05a      	b.n	8004448 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fd02 	bl	8002da0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800439c:	f7fe fa30 	bl	8002800 <HAL_GetTick>
 80043a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <ADC_Enable+0x104>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <ADC_Enable+0x66>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <ADC_Enable+0x108>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <ADC_Enable+0x6a>
 80043b6:	4b29      	ldr	r3, [pc, #164]	@ (800445c <ADC_Enable+0x10c>)
 80043b8:	e000      	b.n	80043bc <ADC_Enable+0x6c>
 80043ba:	4b29      	ldr	r3, [pc, #164]	@ (8004460 <ADC_Enable+0x110>)
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe fc85 	bl	8002ccc <LL_ADC_GetMultimode>
 80043c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a23      	ldr	r2, [pc, #140]	@ (8004458 <ADC_Enable+0x108>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d002      	beq.n	80043d4 <ADC_Enable+0x84>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	e000      	b.n	80043d6 <ADC_Enable+0x86>
 80043d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004454 <ADC_Enable+0x104>)
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	4293      	cmp	r3, r2
 80043dc:	d02c      	beq.n	8004438 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d130      	bne.n	8004446 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043e4:	e028      	b.n	8004438 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fcec 	bl	8002dc8 <LL_ADC_IsEnabled>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fcd0 	bl	8002da0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004400:	f7fe f9fe 	bl	8002800 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d914      	bls.n	8004438 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d00d      	beq.n	8004438 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004420:	f043 0210 	orr.w	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d1cf      	bne.n	80043e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	8000003f 	.word	0x8000003f
 8004454:	40022000 	.word	0x40022000
 8004458:	40022100 	.word	0x40022100
 800445c:	40022300 	.word	0x40022300
 8004460:	58026300 	.word	0x58026300

08004464 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004476:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d14b      	bne.n	8004516 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d021      	beq.n	80044dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe fb1b 	bl	8002ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d032      	beq.n	800450e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d12b      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11f      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80044da:	e018      	b.n	800450e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d111      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff f9c6 	bl	80038a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004514:	e00e      	b.n	8004534 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff f9da 	bl	80038dc <HAL_ADC_ErrorCallback>
}
 8004528:	e004      	b.n	8004534 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004548:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff f9b2 	bl	80038b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff f9ac 	bl	80038dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6c      	ldr	r2, [pc, #432]	@ (800474c <ADC_ConfigureBoostMode+0x1c0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <ADC_ConfigureBoostMode+0x1c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6b      	ldr	r2, [pc, #428]	@ (8004750 <ADC_ConfigureBoostMode+0x1c4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d109      	bne.n	80045bc <ADC_ConfigureBoostMode+0x30>
 80045a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004754 <ADC_ConfigureBoostMode+0x1c8>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e008      	b.n	80045ce <ADC_ConfigureBoostMode+0x42>
 80045bc:	4b66      	ldr	r3, [pc, #408]	@ (8004758 <ADC_ConfigureBoostMode+0x1cc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01c      	beq.n	800460c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045d2:	f004 fa85 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 80045d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045e0:	d010      	beq.n	8004604 <ADC_ConfigureBoostMode+0x78>
 80045e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045e6:	d873      	bhi.n	80046d0 <ADC_ConfigureBoostMode+0x144>
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ec:	d002      	beq.n	80045f4 <ADC_ConfigureBoostMode+0x68>
 80045ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045f2:	d16d      	bne.n	80046d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	60fb      	str	r3, [r7, #12]
        break;
 8004602:	e068      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	60fb      	str	r3, [r7, #12]
        break;
 800460a:	e064      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800460c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	f005 fc60 	bl	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004618:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004622:	d051      	beq.n	80046c8 <ADC_ConfigureBoostMode+0x13c>
 8004624:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004628:	d854      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 800462a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800462e:	d047      	beq.n	80046c0 <ADC_ConfigureBoostMode+0x134>
 8004630:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004634:	d84e      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 8004636:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800463a:	d03d      	beq.n	80046b8 <ADC_ConfigureBoostMode+0x12c>
 800463c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004640:	d848      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 8004642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004646:	d033      	beq.n	80046b0 <ADC_ConfigureBoostMode+0x124>
 8004648:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800464c:	d842      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 800464e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004652:	d029      	beq.n	80046a8 <ADC_ConfigureBoostMode+0x11c>
 8004654:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004658:	d83c      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 800465a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800465e:	d01a      	beq.n	8004696 <ADC_ConfigureBoostMode+0x10a>
 8004660:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004664:	d836      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 8004666:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800466a:	d014      	beq.n	8004696 <ADC_ConfigureBoostMode+0x10a>
 800466c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004670:	d830      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004676:	d00e      	beq.n	8004696 <ADC_ConfigureBoostMode+0x10a>
 8004678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800467c:	d82a      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 800467e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004682:	d008      	beq.n	8004696 <ADC_ConfigureBoostMode+0x10a>
 8004684:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004688:	d824      	bhi.n	80046d4 <ADC_ConfigureBoostMode+0x148>
 800468a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800468e:	d002      	beq.n	8004696 <ADC_ConfigureBoostMode+0x10a>
 8004690:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004694:	d11e      	bne.n	80046d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0c9b      	lsrs	r3, r3, #18
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	60fb      	str	r3, [r7, #12]
        break;
 80046a6:	e016      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
        break;
 80046ae:	e012      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	60fb      	str	r3, [r7, #12]
        break;
 80046b6:	e00e      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	60fb      	str	r3, [r7, #12]
        break;
 80046be:	e00a      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	60fb      	str	r3, [r7, #12]
        break;
 80046c6:	e006      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	60fb      	str	r3, [r7, #12]
        break;
 80046ce:	e002      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80046d0:	bf00      	nop
 80046d2:	e000      	b.n	80046d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046d4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a1f      	ldr	r2, [pc, #124]	@ (800475c <ADC_ConfigureBoostMode+0x1d0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d808      	bhi.n	80046f6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80046f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80046f4:	e025      	b.n	8004742 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <ADC_ConfigureBoostMode+0x1d4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d80a      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	e016      	b.n	8004742 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a13      	ldr	r2, [pc, #76]	@ (8004764 <ADC_ConfigureBoostMode+0x1d8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d80a      	bhi.n	8004732 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	e007      	b.n	8004742 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004740:	609a      	str	r2, [r3, #8]
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40022000 	.word	0x40022000
 8004750:	40022100 	.word	0x40022100
 8004754:	40022300 	.word	0x40022300
 8004758:	58026300 	.word	0x58026300
 800475c:	005f5e10 	.word	0x005f5e10
 8004760:	00bebc20 	.word	0x00bebc20
 8004764:	017d7840 	.word	0x017d7840

08004768 <LL_ADC_IsEnabled>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <LL_ADC_IsEnabled+0x18>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <LL_ADC_IsEnabled+0x1a>
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_ADC_REG_IsConversionOngoing>:
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d101      	bne.n	80047a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b0a3      	sub	sp, #140	@ 0x8c
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004832:	2302      	movs	r3, #2
 8004834:	e0c1      	b.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004842:	2300      	movs	r3, #0
 8004844:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a5e      	ldr	r2, [pc, #376]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d102      	bne.n	8004856 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004850:	4b5d      	ldr	r3, [pc, #372]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e001      	b.n	800485a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0a0      	b.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ff87 	bl	800478e <LL_ADC_REG_IsConversionOngoing>
 8004880:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff80 	bl	800478e <LL_ADC_REG_IsConversionOngoing>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 8081 	bne.w	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004896:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d17c      	bne.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a48      	ldr	r2, [pc, #288]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a46      	ldr	r2, [pc, #280]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80048b2:	4b46      	ldr	r3, [pc, #280]	@ (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048b4:	e000      	b.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048b6:	4b46      	ldr	r3, [pc, #280]	@ (80049d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048b8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d039      	beq.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3a      	ldr	r2, [pc, #232]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a39      	ldr	r2, [pc, #228]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d10e      	bne.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80048e8:	4836      	ldr	r0, [pc, #216]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048ea:	f7ff ff3d 	bl	8004768 <LL_ADC_IsEnabled>
 80048ee:	4604      	mov	r4, r0
 80048f0:	4835      	ldr	r0, [pc, #212]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048f2:	f7ff ff39 	bl	8004768 <LL_ADC_IsEnabled>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4323      	orrs	r3, r4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e008      	b.n	8004918 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004906:	4833      	ldr	r0, [pc, #204]	@ (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004908:	f7ff ff2e 	bl	8004768 <LL_ADC_IsEnabled>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d047      	beq.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800491c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	4b2d      	ldr	r3, [pc, #180]	@ (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004922:	4013      	ands	r3, r2
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	6811      	ldr	r1, [r2, #0]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	6892      	ldr	r2, [r2, #8]
 800492c:	430a      	orrs	r2, r1
 800492e:	431a      	orrs	r2, r3
 8004930:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004932:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004934:	e03a      	b.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004936:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800493e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004940:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1f      	ldr	r2, [pc, #124]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10e      	bne.n	8004974 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004956:	481b      	ldr	r0, [pc, #108]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004958:	f7ff ff06 	bl	8004768 <LL_ADC_IsEnabled>
 800495c:	4604      	mov	r4, r0
 800495e:	481a      	ldr	r0, [pc, #104]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004960:	f7ff ff02 	bl	8004768 <LL_ADC_IsEnabled>
 8004964:	4603      	mov	r3, r0
 8004966:	4323      	orrs	r3, r4
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e008      	b.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004974:	4817      	ldr	r0, [pc, #92]	@ (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004976:	f7ff fef7 	bl	8004768 <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800498a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004990:	4013      	ands	r3, r2
 8004992:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004994:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004996:	e009      	b.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80049aa:	e000      	b.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049b6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	378c      	adds	r7, #140	@ 0x8c
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40022000 	.word	0x40022000
 80049c8:	40022100 	.word	0x40022100
 80049cc:	40022300 	.word	0x40022300
 80049d0:	58026300 	.word	0x58026300
 80049d4:	58026000 	.word	0x58026000
 80049d8:	fffff0e0 	.word	0xfffff0e0

080049dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <__NVIC_SetPriorityGrouping+0x40>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049f8:	4013      	ands	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <__NVIC_SetPriorityGrouping+0x44>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a0a:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <__NVIC_SetPriorityGrouping+0x40>)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	60d3      	str	r3, [r2, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000ed00 	.word	0xe000ed00
 8004a20:	05fa0000 	.word	0x05fa0000

08004a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <__NVIC_GetPriorityGrouping+0x18>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 0307 	and.w	r3, r3, #7
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db0b      	blt.n	8004a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	f003 021f 	and.w	r2, r3, #31
 8004a58:	4907      	ldr	r1, [pc, #28]	@ (8004a78 <__NVIC_EnableIRQ+0x38>)
 8004a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2001      	movs	r0, #1
 8004a62:	fa00 f202 	lsl.w	r2, r0, r2
 8004a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	e000e100 	.word	0xe000e100

08004a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	6039      	str	r1, [r7, #0]
 8004a86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db0a      	blt.n	8004aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	490c      	ldr	r1, [pc, #48]	@ (8004ac8 <__NVIC_SetPriority+0x4c>)
 8004a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a9a:	0112      	lsls	r2, r2, #4
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa4:	e00a      	b.n	8004abc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4908      	ldr	r1, [pc, #32]	@ (8004acc <__NVIC_SetPriority+0x50>)
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	3b04      	subs	r3, #4
 8004ab4:	0112      	lsls	r2, r2, #4
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	440b      	add	r3, r1
 8004aba:	761a      	strb	r2, [r3, #24]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000e100 	.word	0xe000e100
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b089      	sub	sp, #36	@ 0x24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f1c3 0307 	rsb	r3, r3, #7
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf28      	it	cs
 8004aee:	2304      	movcs	r3, #4
 8004af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d902      	bls.n	8004b00 <NVIC_EncodePriority+0x30>
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3b03      	subs	r3, #3
 8004afe:	e000      	b.n	8004b02 <NVIC_EncodePriority+0x32>
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	401a      	ands	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b18:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	43d9      	mvns	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b28:	4313      	orrs	r3, r2
         );
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3724      	adds	r7, #36	@ 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b48:	d301      	bcc.n	8004b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e00f      	b.n	8004b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b78 <SysTick_Config+0x40>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b56:	210f      	movs	r1, #15
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	f7ff ff8e 	bl	8004a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <SysTick_Config+0x40>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b66:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <SysTick_Config+0x40>)
 8004b68:	2207      	movs	r2, #7
 8004b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	e000e010 	.word	0xe000e010

08004b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff29 	bl	80049dc <__NVIC_SetPriorityGrouping>
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	4603      	mov	r3, r0
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ba0:	f7ff ff40 	bl	8004a24 <__NVIC_GetPriorityGrouping>
 8004ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ff90 	bl	8004ad0 <NVIC_EncodePriority>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff5f 	bl	8004a7c <__NVIC_SetPriority>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff33 	bl	8004a40 <__NVIC_EnableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff ffa4 	bl	8004b38 <SysTick_Config>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c04:	f7fd fdfc 	bl	8002800 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e312      	b.n	800523a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a66      	ldr	r2, [pc, #408]	@ (8004db4 <HAL_DMA_Init+0x1b8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d04a      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a65      	ldr	r2, [pc, #404]	@ (8004db8 <HAL_DMA_Init+0x1bc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d045      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a63      	ldr	r2, [pc, #396]	@ (8004dbc <HAL_DMA_Init+0x1c0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d040      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a62      	ldr	r2, [pc, #392]	@ (8004dc0 <HAL_DMA_Init+0x1c4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d03b      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a60      	ldr	r2, [pc, #384]	@ (8004dc4 <HAL_DMA_Init+0x1c8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d036      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc8 <HAL_DMA_Init+0x1cc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d031      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5d      	ldr	r2, [pc, #372]	@ (8004dcc <HAL_DMA_Init+0x1d0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02c      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd0 <HAL_DMA_Init+0x1d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d027      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5a      	ldr	r2, [pc, #360]	@ (8004dd4 <HAL_DMA_Init+0x1d8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a59      	ldr	r2, [pc, #356]	@ (8004dd8 <HAL_DMA_Init+0x1dc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a57      	ldr	r2, [pc, #348]	@ (8004ddc <HAL_DMA_Init+0x1e0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a56      	ldr	r2, [pc, #344]	@ (8004de0 <HAL_DMA_Init+0x1e4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a54      	ldr	r2, [pc, #336]	@ (8004de4 <HAL_DMA_Init+0x1e8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a53      	ldr	r2, [pc, #332]	@ (8004de8 <HAL_DMA_Init+0x1ec>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a51      	ldr	r2, [pc, #324]	@ (8004dec <HAL_DMA_Init+0x1f0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a50      	ldr	r2, [pc, #320]	@ (8004df0 <HAL_DMA_Init+0x1f4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DMA_Init+0xbc>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_DMA_Init+0xbe>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 813c 	beq.w	8004f38 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a37      	ldr	r2, [pc, #220]	@ (8004db4 <HAL_DMA_Init+0x1b8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d04a      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a36      	ldr	r2, [pc, #216]	@ (8004db8 <HAL_DMA_Init+0x1bc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d045      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a34      	ldr	r2, [pc, #208]	@ (8004dbc <HAL_DMA_Init+0x1c0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d040      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a33      	ldr	r2, [pc, #204]	@ (8004dc0 <HAL_DMA_Init+0x1c4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d03b      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a31      	ldr	r2, [pc, #196]	@ (8004dc4 <HAL_DMA_Init+0x1c8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d036      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a30      	ldr	r2, [pc, #192]	@ (8004dc8 <HAL_DMA_Init+0x1cc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d031      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2e      	ldr	r2, [pc, #184]	@ (8004dcc <HAL_DMA_Init+0x1d0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02c      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd0 <HAL_DMA_Init+0x1d4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d027      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd4 <HAL_DMA_Init+0x1d8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d022      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd8 <HAL_DMA_Init+0x1dc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d01d      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a28      	ldr	r2, [pc, #160]	@ (8004ddc <HAL_DMA_Init+0x1e0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a27      	ldr	r2, [pc, #156]	@ (8004de0 <HAL_DMA_Init+0x1e4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a25      	ldr	r2, [pc, #148]	@ (8004de4 <HAL_DMA_Init+0x1e8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a24      	ldr	r2, [pc, #144]	@ (8004de8 <HAL_DMA_Init+0x1ec>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a22      	ldr	r2, [pc, #136]	@ (8004dec <HAL_DMA_Init+0x1f0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a21      	ldr	r2, [pc, #132]	@ (8004df0 <HAL_DMA_Init+0x1f4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d108      	bne.n	8004d82 <HAL_DMA_Init+0x186>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e007      	b.n	8004d92 <HAL_DMA_Init+0x196>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d92:	e02f      	b.n	8004df4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d94:	f7fd fd34 	bl	8002800 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d928      	bls.n	8004df4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2203      	movs	r2, #3
 8004dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e242      	b.n	800523a <HAL_DMA_Init+0x63e>
 8004db4:	40020010 	.word	0x40020010
 8004db8:	40020028 	.word	0x40020028
 8004dbc:	40020040 	.word	0x40020040
 8004dc0:	40020058 	.word	0x40020058
 8004dc4:	40020070 	.word	0x40020070
 8004dc8:	40020088 	.word	0x40020088
 8004dcc:	400200a0 	.word	0x400200a0
 8004dd0:	400200b8 	.word	0x400200b8
 8004dd4:	40020410 	.word	0x40020410
 8004dd8:	40020428 	.word	0x40020428
 8004ddc:	40020440 	.word	0x40020440
 8004de0:	40020458 	.word	0x40020458
 8004de4:	40020470 	.word	0x40020470
 8004de8:	40020488 	.word	0x40020488
 8004dec:	400204a0 	.word	0x400204a0
 8004df0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1c8      	bne.n	8004d94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4b83      	ldr	r3, [pc, #524]	@ (800501c <HAL_DMA_Init+0x420>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d107      	bne.n	8004e58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	4313      	orrs	r3, r2
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b28      	cmp	r3, #40	@ 0x28
 8004e5e:	d903      	bls.n	8004e68 <HAL_DMA_Init+0x26c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e66:	d91f      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e6e:	d903      	bls.n	8004e78 <HAL_DMA_Init+0x27c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b42      	cmp	r3, #66	@ 0x42
 8004e76:	d917      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b46      	cmp	r3, #70	@ 0x46
 8004e7e:	d903      	bls.n	8004e88 <HAL_DMA_Init+0x28c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b48      	cmp	r3, #72	@ 0x48
 8004e86:	d90f      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e8e:	d903      	bls.n	8004e98 <HAL_DMA_Init+0x29c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b52      	cmp	r3, #82	@ 0x52
 8004e96:	d907      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b73      	cmp	r3, #115	@ 0x73
 8004e9e:	d905      	bls.n	8004eac <HAL_DMA_Init+0x2b0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b77      	cmp	r3, #119	@ 0x77
 8004ea6:	d801      	bhi.n	8004eac <HAL_DMA_Init+0x2b0>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_DMA_Init+0x2b2>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d117      	bne.n	8004f14 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00e      	beq.n	8004f14 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 fb2e 	bl	8007558 <DMA_CheckFifoParam>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2240      	movs	r2, #64	@ 0x40
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e192      	b.n	800523a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f002 fa69 	bl	80073f4 <DMA_CalcBaseAndBitshift>
 8004f22:	4603      	mov	r3, r0
 8004f24:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	223f      	movs	r2, #63	@ 0x3f
 8004f30:	409a      	lsls	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	e0c8      	b.n	80050ca <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a38      	ldr	r2, [pc, #224]	@ (8005020 <HAL_DMA_Init+0x424>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a37      	ldr	r2, [pc, #220]	@ (8005024 <HAL_DMA_Init+0x428>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01d      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a35      	ldr	r2, [pc, #212]	@ (8005028 <HAL_DMA_Init+0x42c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a34      	ldr	r2, [pc, #208]	@ (800502c <HAL_DMA_Init+0x430>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a32      	ldr	r2, [pc, #200]	@ (8005030 <HAL_DMA_Init+0x434>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a31      	ldr	r2, [pc, #196]	@ (8005034 <HAL_DMA_Init+0x438>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2f      	ldr	r2, [pc, #188]	@ (8005038 <HAL_DMA_Init+0x43c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2e      	ldr	r2, [pc, #184]	@ (800503c <HAL_DMA_Init+0x440>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_DMA_Init+0x390>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_DMA_Init+0x392>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8092 	beq.w	80050b8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a21      	ldr	r2, [pc, #132]	@ (8005020 <HAL_DMA_Init+0x424>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d021      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a20      	ldr	r2, [pc, #128]	@ (8005024 <HAL_DMA_Init+0x428>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01c      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1e      	ldr	r2, [pc, #120]	@ (8005028 <HAL_DMA_Init+0x42c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d017      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800502c <HAL_DMA_Init+0x430>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d012      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005030 <HAL_DMA_Init+0x434>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1a      	ldr	r2, [pc, #104]	@ (8005034 <HAL_DMA_Init+0x438>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d008      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	@ (8005038 <HAL_DMA_Init+0x43c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a17      	ldr	r2, [pc, #92]	@ (800503c <HAL_DMA_Init+0x440>)
 8004fe0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4b10      	ldr	r3, [pc, #64]	@ (8005040 <HAL_DMA_Init+0x444>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	d01c      	beq.n	8005044 <HAL_DMA_Init+0x448>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b80      	cmp	r3, #128	@ 0x80
 8005010:	d102      	bne.n	8005018 <HAL_DMA_Init+0x41c>
 8005012:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005016:	e016      	b.n	8005046 <HAL_DMA_Init+0x44a>
 8005018:	2300      	movs	r3, #0
 800501a:	e014      	b.n	8005046 <HAL_DMA_Init+0x44a>
 800501c:	fe10803f 	.word	0xfe10803f
 8005020:	58025408 	.word	0x58025408
 8005024:	5802541c 	.word	0x5802541c
 8005028:	58025430 	.word	0x58025430
 800502c:	58025444 	.word	0x58025444
 8005030:	58025458 	.word	0x58025458
 8005034:	5802546c 	.word	0x5802546c
 8005038:	58025480 	.word	0x58025480
 800503c:	58025494 	.word	0x58025494
 8005040:	fffe000f 	.word	0xfffe000f
 8005044:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68d2      	ldr	r2, [r2, #12]
 800504a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800504c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005054:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800505c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005064:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800506c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005074:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	4b6e      	ldr	r3, [pc, #440]	@ (8005244 <HAL_DMA_Init+0x648>)
 800508c:	4413      	add	r3, r2
 800508e:	4a6e      	ldr	r2, [pc, #440]	@ (8005248 <HAL_DMA_Init+0x64c>)
 8005090:	fba2 2303 	umull	r2, r3, r2, r3
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	009a      	lsls	r2, r3, #2
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f002 f9a9 	bl	80073f4 <DMA_CalcBaseAndBitshift>
 80050a2:	4603      	mov	r3, r0
 80050a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2201      	movs	r2, #1
 80050b0:	409a      	lsls	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	e008      	b.n	80050ca <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2240      	movs	r2, #64	@ 0x40
 80050bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2203      	movs	r2, #3
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0b7      	b.n	800523a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a5f      	ldr	r2, [pc, #380]	@ (800524c <HAL_DMA_Init+0x650>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d072      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a5d      	ldr	r2, [pc, #372]	@ (8005250 <HAL_DMA_Init+0x654>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d06d      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a5c      	ldr	r2, [pc, #368]	@ (8005254 <HAL_DMA_Init+0x658>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d068      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005258 <HAL_DMA_Init+0x65c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d063      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a59      	ldr	r2, [pc, #356]	@ (800525c <HAL_DMA_Init+0x660>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d05e      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a57      	ldr	r2, [pc, #348]	@ (8005260 <HAL_DMA_Init+0x664>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d059      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a56      	ldr	r2, [pc, #344]	@ (8005264 <HAL_DMA_Init+0x668>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d054      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a54      	ldr	r2, [pc, #336]	@ (8005268 <HAL_DMA_Init+0x66c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d04f      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a53      	ldr	r2, [pc, #332]	@ (800526c <HAL_DMA_Init+0x670>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a51      	ldr	r2, [pc, #324]	@ (8005270 <HAL_DMA_Init+0x674>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a50      	ldr	r2, [pc, #320]	@ (8005274 <HAL_DMA_Init+0x678>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a4e      	ldr	r2, [pc, #312]	@ (8005278 <HAL_DMA_Init+0x67c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4d      	ldr	r2, [pc, #308]	@ (800527c <HAL_DMA_Init+0x680>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4b      	ldr	r2, [pc, #300]	@ (8005280 <HAL_DMA_Init+0x684>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a4a      	ldr	r2, [pc, #296]	@ (8005284 <HAL_DMA_Init+0x688>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a48      	ldr	r2, [pc, #288]	@ (8005288 <HAL_DMA_Init+0x68c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a47      	ldr	r2, [pc, #284]	@ (800528c <HAL_DMA_Init+0x690>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a45      	ldr	r2, [pc, #276]	@ (8005290 <HAL_DMA_Init+0x694>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a44      	ldr	r2, [pc, #272]	@ (8005294 <HAL_DMA_Init+0x698>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <HAL_DMA_Init+0x69c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a41      	ldr	r2, [pc, #260]	@ (800529c <HAL_DMA_Init+0x6a0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a3f      	ldr	r2, [pc, #252]	@ (80052a0 <HAL_DMA_Init+0x6a4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a3e      	ldr	r2, [pc, #248]	@ (80052a4 <HAL_DMA_Init+0x6a8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_DMA_Init+0x5be>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3c      	ldr	r2, [pc, #240]	@ (80052a8 <HAL_DMA_Init+0x6ac>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_DMA_Init+0x5c2>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <HAL_DMA_Init+0x5c4>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d032      	beq.n	800522a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f002 fa43 	bl	8007650 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b80      	cmp	r3, #128	@ 0x80
 80051d0:	d102      	bne.n	80051d8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d010      	beq.n	8005218 <HAL_DMA_Init+0x61c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d80c      	bhi.n	8005218 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f002 fac0 	bl	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	e008      	b.n	800522a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	a7fdabf8 	.word	0xa7fdabf8
 8005248:	cccccccd 	.word	0xcccccccd
 800524c:	40020010 	.word	0x40020010
 8005250:	40020028 	.word	0x40020028
 8005254:	40020040 	.word	0x40020040
 8005258:	40020058 	.word	0x40020058
 800525c:	40020070 	.word	0x40020070
 8005260:	40020088 	.word	0x40020088
 8005264:	400200a0 	.word	0x400200a0
 8005268:	400200b8 	.word	0x400200b8
 800526c:	40020410 	.word	0x40020410
 8005270:	40020428 	.word	0x40020428
 8005274:	40020440 	.word	0x40020440
 8005278:	40020458 	.word	0x40020458
 800527c:	40020470 	.word	0x40020470
 8005280:	40020488 	.word	0x40020488
 8005284:	400204a0 	.word	0x400204a0
 8005288:	400204b8 	.word	0x400204b8
 800528c:	58025408 	.word	0x58025408
 8005290:	5802541c 	.word	0x5802541c
 8005294:	58025430 	.word	0x58025430
 8005298:	58025444 	.word	0x58025444
 800529c:	58025458 	.word	0x58025458
 80052a0:	5802546c 	.word	0x5802546c
 80052a4:	58025480 	.word	0x58025480
 80052a8:	58025494 	.word	0x58025494

080052ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e226      	b.n	8005716 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_DMA_Start_IT+0x2a>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e21f      	b.n	8005716 <HAL_DMA_Start_IT+0x46a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	f040 820a 	bne.w	8005700 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a68      	ldr	r2, [pc, #416]	@ (80054a0 <HAL_DMA_Start_IT+0x1f4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d04a      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a66      	ldr	r2, [pc, #408]	@ (80054a4 <HAL_DMA_Start_IT+0x1f8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d045      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a65      	ldr	r2, [pc, #404]	@ (80054a8 <HAL_DMA_Start_IT+0x1fc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d040      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a63      	ldr	r2, [pc, #396]	@ (80054ac <HAL_DMA_Start_IT+0x200>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d03b      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a62      	ldr	r2, [pc, #392]	@ (80054b0 <HAL_DMA_Start_IT+0x204>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d036      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a60      	ldr	r2, [pc, #384]	@ (80054b4 <HAL_DMA_Start_IT+0x208>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d031      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a5f      	ldr	r2, [pc, #380]	@ (80054b8 <HAL_DMA_Start_IT+0x20c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d02c      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a5d      	ldr	r2, [pc, #372]	@ (80054bc <HAL_DMA_Start_IT+0x210>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d027      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a5c      	ldr	r2, [pc, #368]	@ (80054c0 <HAL_DMA_Start_IT+0x214>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d022      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a5a      	ldr	r2, [pc, #360]	@ (80054c4 <HAL_DMA_Start_IT+0x218>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01d      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a59      	ldr	r2, [pc, #356]	@ (80054c8 <HAL_DMA_Start_IT+0x21c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d018      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a57      	ldr	r2, [pc, #348]	@ (80054cc <HAL_DMA_Start_IT+0x220>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a56      	ldr	r2, [pc, #344]	@ (80054d0 <HAL_DMA_Start_IT+0x224>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00e      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a54      	ldr	r2, [pc, #336]	@ (80054d4 <HAL_DMA_Start_IT+0x228>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a53      	ldr	r2, [pc, #332]	@ (80054d8 <HAL_DMA_Start_IT+0x22c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_DMA_Start_IT+0xee>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a51      	ldr	r2, [pc, #324]	@ (80054dc <HAL_DMA_Start_IT+0x230>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d108      	bne.n	80053ac <HAL_DMA_Start_IT+0x100>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e007      	b.n	80053bc <HAL_DMA_Start_IT+0x110>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f001 fe6a 	bl	800709c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a34      	ldr	r2, [pc, #208]	@ (80054a0 <HAL_DMA_Start_IT+0x1f4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d04a      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a33      	ldr	r2, [pc, #204]	@ (80054a4 <HAL_DMA_Start_IT+0x1f8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d045      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a31      	ldr	r2, [pc, #196]	@ (80054a8 <HAL_DMA_Start_IT+0x1fc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d040      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a30      	ldr	r2, [pc, #192]	@ (80054ac <HAL_DMA_Start_IT+0x200>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d03b      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2e      	ldr	r2, [pc, #184]	@ (80054b0 <HAL_DMA_Start_IT+0x204>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d036      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2d      	ldr	r2, [pc, #180]	@ (80054b4 <HAL_DMA_Start_IT+0x208>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d031      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2b      	ldr	r2, [pc, #172]	@ (80054b8 <HAL_DMA_Start_IT+0x20c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d02c      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2a      	ldr	r2, [pc, #168]	@ (80054bc <HAL_DMA_Start_IT+0x210>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d027      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a28      	ldr	r2, [pc, #160]	@ (80054c0 <HAL_DMA_Start_IT+0x214>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d022      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a27      	ldr	r2, [pc, #156]	@ (80054c4 <HAL_DMA_Start_IT+0x218>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d01d      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a25      	ldr	r2, [pc, #148]	@ (80054c8 <HAL_DMA_Start_IT+0x21c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d018      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a24      	ldr	r2, [pc, #144]	@ (80054cc <HAL_DMA_Start_IT+0x220>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a22      	ldr	r2, [pc, #136]	@ (80054d0 <HAL_DMA_Start_IT+0x224>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a21      	ldr	r2, [pc, #132]	@ (80054d4 <HAL_DMA_Start_IT+0x228>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1f      	ldr	r2, [pc, #124]	@ (80054d8 <HAL_DMA_Start_IT+0x22c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_DMA_Start_IT+0x1bc>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1e      	ldr	r2, [pc, #120]	@ (80054dc <HAL_DMA_Start_IT+0x230>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d101      	bne.n	800546c <HAL_DMA_Start_IT+0x1c0>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <HAL_DMA_Start_IT+0x1c2>
 800546c:	2300      	movs	r3, #0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d036      	beq.n	80054e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f023 021e 	bic.w	r2, r3, #30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0216 	orr.w	r2, r2, #22
 8005484:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d03e      	beq.n	800550c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0208 	orr.w	r2, r2, #8
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e035      	b.n	800550c <HAL_DMA_Start_IT+0x260>
 80054a0:	40020010 	.word	0x40020010
 80054a4:	40020028 	.word	0x40020028
 80054a8:	40020040 	.word	0x40020040
 80054ac:	40020058 	.word	0x40020058
 80054b0:	40020070 	.word	0x40020070
 80054b4:	40020088 	.word	0x40020088
 80054b8:	400200a0 	.word	0x400200a0
 80054bc:	400200b8 	.word	0x400200b8
 80054c0:	40020410 	.word	0x40020410
 80054c4:	40020428 	.word	0x40020428
 80054c8:	40020440 	.word	0x40020440
 80054cc:	40020458 	.word	0x40020458
 80054d0:	40020470 	.word	0x40020470
 80054d4:	40020488 	.word	0x40020488
 80054d8:	400204a0 	.word	0x400204a0
 80054dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 020e 	bic.w	r2, r3, #14
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 020a 	orr.w	r2, r2, #10
 80054f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0204 	orr.w	r2, r2, #4
 800550a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a83      	ldr	r2, [pc, #524]	@ (8005720 <HAL_DMA_Start_IT+0x474>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d072      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a82      	ldr	r2, [pc, #520]	@ (8005724 <HAL_DMA_Start_IT+0x478>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d06d      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a80      	ldr	r2, [pc, #512]	@ (8005728 <HAL_DMA_Start_IT+0x47c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d068      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7f      	ldr	r2, [pc, #508]	@ (800572c <HAL_DMA_Start_IT+0x480>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d063      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a7d      	ldr	r2, [pc, #500]	@ (8005730 <HAL_DMA_Start_IT+0x484>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d05e      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a7c      	ldr	r2, [pc, #496]	@ (8005734 <HAL_DMA_Start_IT+0x488>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d059      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a7a      	ldr	r2, [pc, #488]	@ (8005738 <HAL_DMA_Start_IT+0x48c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d054      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a79      	ldr	r2, [pc, #484]	@ (800573c <HAL_DMA_Start_IT+0x490>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d04f      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a77      	ldr	r2, [pc, #476]	@ (8005740 <HAL_DMA_Start_IT+0x494>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d04a      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a76      	ldr	r2, [pc, #472]	@ (8005744 <HAL_DMA_Start_IT+0x498>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d045      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a74      	ldr	r2, [pc, #464]	@ (8005748 <HAL_DMA_Start_IT+0x49c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d040      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a73      	ldr	r2, [pc, #460]	@ (800574c <HAL_DMA_Start_IT+0x4a0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d03b      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a71      	ldr	r2, [pc, #452]	@ (8005750 <HAL_DMA_Start_IT+0x4a4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d036      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a70      	ldr	r2, [pc, #448]	@ (8005754 <HAL_DMA_Start_IT+0x4a8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d031      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a6e      	ldr	r2, [pc, #440]	@ (8005758 <HAL_DMA_Start_IT+0x4ac>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02c      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a6d      	ldr	r2, [pc, #436]	@ (800575c <HAL_DMA_Start_IT+0x4b0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d027      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005760 <HAL_DMA_Start_IT+0x4b4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6a      	ldr	r2, [pc, #424]	@ (8005764 <HAL_DMA_Start_IT+0x4b8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a68      	ldr	r2, [pc, #416]	@ (8005768 <HAL_DMA_Start_IT+0x4bc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a67      	ldr	r2, [pc, #412]	@ (800576c <HAL_DMA_Start_IT+0x4c0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a65      	ldr	r2, [pc, #404]	@ (8005770 <HAL_DMA_Start_IT+0x4c4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a64      	ldr	r2, [pc, #400]	@ (8005774 <HAL_DMA_Start_IT+0x4c8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a62      	ldr	r2, [pc, #392]	@ (8005778 <HAL_DMA_Start_IT+0x4cc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_Start_IT+0x350>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a61      	ldr	r2, [pc, #388]	@ (800577c <HAL_DMA_Start_IT+0x4d0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_Start_IT+0x354>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_DMA_Start_IT+0x356>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01a      	beq.n	800563c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005622:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800563a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a37      	ldr	r2, [pc, #220]	@ (8005720 <HAL_DMA_Start_IT+0x474>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d04a      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a36      	ldr	r2, [pc, #216]	@ (8005724 <HAL_DMA_Start_IT+0x478>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d045      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a34      	ldr	r2, [pc, #208]	@ (8005728 <HAL_DMA_Start_IT+0x47c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d040      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a33      	ldr	r2, [pc, #204]	@ (800572c <HAL_DMA_Start_IT+0x480>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d03b      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a31      	ldr	r2, [pc, #196]	@ (8005730 <HAL_DMA_Start_IT+0x484>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d036      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a30      	ldr	r2, [pc, #192]	@ (8005734 <HAL_DMA_Start_IT+0x488>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d031      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2e      	ldr	r2, [pc, #184]	@ (8005738 <HAL_DMA_Start_IT+0x48c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d02c      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2d      	ldr	r2, [pc, #180]	@ (800573c <HAL_DMA_Start_IT+0x490>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d027      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2b      	ldr	r2, [pc, #172]	@ (8005740 <HAL_DMA_Start_IT+0x494>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d022      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2a      	ldr	r2, [pc, #168]	@ (8005744 <HAL_DMA_Start_IT+0x498>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d01d      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a28      	ldr	r2, [pc, #160]	@ (8005748 <HAL_DMA_Start_IT+0x49c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a27      	ldr	r2, [pc, #156]	@ (800574c <HAL_DMA_Start_IT+0x4a0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a25      	ldr	r2, [pc, #148]	@ (8005750 <HAL_DMA_Start_IT+0x4a4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a24      	ldr	r2, [pc, #144]	@ (8005754 <HAL_DMA_Start_IT+0x4a8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a22      	ldr	r2, [pc, #136]	@ (8005758 <HAL_DMA_Start_IT+0x4ac>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_DMA_Start_IT+0x430>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a21      	ldr	r2, [pc, #132]	@ (800575c <HAL_DMA_Start_IT+0x4b0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <HAL_DMA_Start_IT+0x442>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e012      	b.n	8005714 <HAL_DMA_Start_IT+0x468>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e009      	b.n	8005714 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005706:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40020010 	.word	0x40020010
 8005724:	40020028 	.word	0x40020028
 8005728:	40020040 	.word	0x40020040
 800572c:	40020058 	.word	0x40020058
 8005730:	40020070 	.word	0x40020070
 8005734:	40020088 	.word	0x40020088
 8005738:	400200a0 	.word	0x400200a0
 800573c:	400200b8 	.word	0x400200b8
 8005740:	40020410 	.word	0x40020410
 8005744:	40020428 	.word	0x40020428
 8005748:	40020440 	.word	0x40020440
 800574c:	40020458 	.word	0x40020458
 8005750:	40020470 	.word	0x40020470
 8005754:	40020488 	.word	0x40020488
 8005758:	400204a0 	.word	0x400204a0
 800575c:	400204b8 	.word	0x400204b8
 8005760:	58025408 	.word	0x58025408
 8005764:	5802541c 	.word	0x5802541c
 8005768:	58025430 	.word	0x58025430
 800576c:	58025444 	.word	0x58025444
 8005770:	58025458 	.word	0x58025458
 8005774:	5802546c 	.word	0x5802546c
 8005778:	58025480 	.word	0x58025480
 800577c:	58025494 	.word	0x58025494

08005780 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005788:	f7fd f83a 	bl	8002800 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e2dc      	b.n	8005d52 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d008      	beq.n	80057b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2280      	movs	r2, #128	@ 0x80
 80057a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e2cd      	b.n	8005d52 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a76      	ldr	r2, [pc, #472]	@ (8005994 <HAL_DMA_Abort+0x214>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d04a      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a74      	ldr	r2, [pc, #464]	@ (8005998 <HAL_DMA_Abort+0x218>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d045      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a73      	ldr	r2, [pc, #460]	@ (800599c <HAL_DMA_Abort+0x21c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d040      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a71      	ldr	r2, [pc, #452]	@ (80059a0 <HAL_DMA_Abort+0x220>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d03b      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a70      	ldr	r2, [pc, #448]	@ (80059a4 <HAL_DMA_Abort+0x224>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d036      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6e      	ldr	r2, [pc, #440]	@ (80059a8 <HAL_DMA_Abort+0x228>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d031      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6d      	ldr	r2, [pc, #436]	@ (80059ac <HAL_DMA_Abort+0x22c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d02c      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6b      	ldr	r2, [pc, #428]	@ (80059b0 <HAL_DMA_Abort+0x230>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d027      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6a      	ldr	r2, [pc, #424]	@ (80059b4 <HAL_DMA_Abort+0x234>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a68      	ldr	r2, [pc, #416]	@ (80059b8 <HAL_DMA_Abort+0x238>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01d      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a67      	ldr	r2, [pc, #412]	@ (80059bc <HAL_DMA_Abort+0x23c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	@ (80059c0 <HAL_DMA_Abort+0x240>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a64      	ldr	r2, [pc, #400]	@ (80059c4 <HAL_DMA_Abort+0x244>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a62      	ldr	r2, [pc, #392]	@ (80059c8 <HAL_DMA_Abort+0x248>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a61      	ldr	r2, [pc, #388]	@ (80059cc <HAL_DMA_Abort+0x24c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_DMA_Abort+0xd6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a5f      	ldr	r2, [pc, #380]	@ (80059d0 <HAL_DMA_Abort+0x250>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <HAL_DMA_Abort+0xda>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_DMA_Abort+0xdc>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d013      	beq.n	8005888 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 021e 	bic.w	r2, r2, #30
 800586e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800587e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e00a      	b.n	800589e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 020e 	bic.w	r2, r2, #14
 8005896:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a3c      	ldr	r2, [pc, #240]	@ (8005994 <HAL_DMA_Abort+0x214>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d072      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005998 <HAL_DMA_Abort+0x218>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d06d      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a39      	ldr	r2, [pc, #228]	@ (800599c <HAL_DMA_Abort+0x21c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d068      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a37      	ldr	r2, [pc, #220]	@ (80059a0 <HAL_DMA_Abort+0x220>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d063      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a36      	ldr	r2, [pc, #216]	@ (80059a4 <HAL_DMA_Abort+0x224>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d05e      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a34      	ldr	r2, [pc, #208]	@ (80059a8 <HAL_DMA_Abort+0x228>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d059      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a33      	ldr	r2, [pc, #204]	@ (80059ac <HAL_DMA_Abort+0x22c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d054      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a31      	ldr	r2, [pc, #196]	@ (80059b0 <HAL_DMA_Abort+0x230>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d04f      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a30      	ldr	r2, [pc, #192]	@ (80059b4 <HAL_DMA_Abort+0x234>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04a      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a2e      	ldr	r2, [pc, #184]	@ (80059b8 <HAL_DMA_Abort+0x238>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d045      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2d      	ldr	r2, [pc, #180]	@ (80059bc <HAL_DMA_Abort+0x23c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d040      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a2b      	ldr	r2, [pc, #172]	@ (80059c0 <HAL_DMA_Abort+0x240>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03b      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2a      	ldr	r2, [pc, #168]	@ (80059c4 <HAL_DMA_Abort+0x244>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d036      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <HAL_DMA_Abort+0x248>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a27      	ldr	r2, [pc, #156]	@ (80059cc <HAL_DMA_Abort+0x24c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d02c      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a25      	ldr	r2, [pc, #148]	@ (80059d0 <HAL_DMA_Abort+0x250>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d027      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a24      	ldr	r2, [pc, #144]	@ (80059d4 <HAL_DMA_Abort+0x254>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d022      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a22      	ldr	r2, [pc, #136]	@ (80059d8 <HAL_DMA_Abort+0x258>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01d      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a21      	ldr	r2, [pc, #132]	@ (80059dc <HAL_DMA_Abort+0x25c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d018      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1f      	ldr	r2, [pc, #124]	@ (80059e0 <HAL_DMA_Abort+0x260>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1e      	ldr	r2, [pc, #120]	@ (80059e4 <HAL_DMA_Abort+0x264>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1c      	ldr	r2, [pc, #112]	@ (80059e8 <HAL_DMA_Abort+0x268>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <HAL_DMA_Abort+0x26c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_DMA_Abort+0x20e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a19      	ldr	r2, [pc, #100]	@ (80059f0 <HAL_DMA_Abort+0x270>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d132      	bne.n	80059f4 <HAL_DMA_Abort+0x274>
 800598e:	2301      	movs	r3, #1
 8005990:	e031      	b.n	80059f6 <HAL_DMA_Abort+0x276>
 8005992:	bf00      	nop
 8005994:	40020010 	.word	0x40020010
 8005998:	40020028 	.word	0x40020028
 800599c:	40020040 	.word	0x40020040
 80059a0:	40020058 	.word	0x40020058
 80059a4:	40020070 	.word	0x40020070
 80059a8:	40020088 	.word	0x40020088
 80059ac:	400200a0 	.word	0x400200a0
 80059b0:	400200b8 	.word	0x400200b8
 80059b4:	40020410 	.word	0x40020410
 80059b8:	40020428 	.word	0x40020428
 80059bc:	40020440 	.word	0x40020440
 80059c0:	40020458 	.word	0x40020458
 80059c4:	40020470 	.word	0x40020470
 80059c8:	40020488 	.word	0x40020488
 80059cc:	400204a0 	.word	0x400204a0
 80059d0:	400204b8 	.word	0x400204b8
 80059d4:	58025408 	.word	0x58025408
 80059d8:	5802541c 	.word	0x5802541c
 80059dc:	58025430 	.word	0x58025430
 80059e0:	58025444 	.word	0x58025444
 80059e4:	58025458 	.word	0x58025458
 80059e8:	5802546c 	.word	0x5802546c
 80059ec:	58025480 	.word	0x58025480
 80059f0:	58025494 	.word	0x58025494
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6d      	ldr	r2, [pc, #436]	@ (8005bc4 <HAL_DMA_Abort+0x444>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d04a      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a6b      	ldr	r2, [pc, #428]	@ (8005bc8 <HAL_DMA_Abort+0x448>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d045      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a6a      	ldr	r2, [pc, #424]	@ (8005bcc <HAL_DMA_Abort+0x44c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d040      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a68      	ldr	r2, [pc, #416]	@ (8005bd0 <HAL_DMA_Abort+0x450>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d03b      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a67      	ldr	r2, [pc, #412]	@ (8005bd4 <HAL_DMA_Abort+0x454>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d036      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a65      	ldr	r2, [pc, #404]	@ (8005bd8 <HAL_DMA_Abort+0x458>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d031      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a64      	ldr	r2, [pc, #400]	@ (8005bdc <HAL_DMA_Abort+0x45c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d02c      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a62      	ldr	r2, [pc, #392]	@ (8005be0 <HAL_DMA_Abort+0x460>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d027      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a61      	ldr	r2, [pc, #388]	@ (8005be4 <HAL_DMA_Abort+0x464>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a5f      	ldr	r2, [pc, #380]	@ (8005be8 <HAL_DMA_Abort+0x468>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a5e      	ldr	r2, [pc, #376]	@ (8005bec <HAL_DMA_Abort+0x46c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a5c      	ldr	r2, [pc, #368]	@ (8005bf0 <HAL_DMA_Abort+0x470>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf4 <HAL_DMA_Abort+0x474>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a59      	ldr	r2, [pc, #356]	@ (8005bf8 <HAL_DMA_Abort+0x478>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a58      	ldr	r2, [pc, #352]	@ (8005bfc <HAL_DMA_Abort+0x47c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_DMA_Abort+0x32a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a56      	ldr	r2, [pc, #344]	@ (8005c00 <HAL_DMA_Abort+0x480>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d108      	bne.n	8005abc <HAL_DMA_Abort+0x33c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e007      	b.n	8005acc <HAL_DMA_Abort+0x34c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005acc:	e013      	b.n	8005af6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ace:	f7fc fe97 	bl	8002800 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d90c      	bls.n	8005af6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e12d      	b.n	8005d52 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc4 <HAL_DMA_Abort+0x444>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d04a      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc8 <HAL_DMA_Abort+0x448>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d045      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005bcc <HAL_DMA_Abort+0x44c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d040      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <HAL_DMA_Abort+0x450>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d03b      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a29      	ldr	r2, [pc, #164]	@ (8005bd4 <HAL_DMA_Abort+0x454>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d036      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a27      	ldr	r2, [pc, #156]	@ (8005bd8 <HAL_DMA_Abort+0x458>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a26      	ldr	r2, [pc, #152]	@ (8005bdc <HAL_DMA_Abort+0x45c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d02c      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a24      	ldr	r2, [pc, #144]	@ (8005be0 <HAL_DMA_Abort+0x460>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d027      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a23      	ldr	r2, [pc, #140]	@ (8005be4 <HAL_DMA_Abort+0x464>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d022      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a21      	ldr	r2, [pc, #132]	@ (8005be8 <HAL_DMA_Abort+0x468>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a20      	ldr	r2, [pc, #128]	@ (8005bec <HAL_DMA_Abort+0x46c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf0 <HAL_DMA_Abort+0x470>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf4 <HAL_DMA_Abort+0x474>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf8 <HAL_DMA_Abort+0x478>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1a      	ldr	r2, [pc, #104]	@ (8005bfc <HAL_DMA_Abort+0x47c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_DMA_Abort+0x422>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a18      	ldr	r2, [pc, #96]	@ (8005c00 <HAL_DMA_Abort+0x480>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_DMA_Abort+0x426>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_DMA_Abort+0x428>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d02b      	beq.n	8005c04 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	223f      	movs	r2, #63	@ 0x3f
 8005bbc:	409a      	lsls	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	609a      	str	r2, [r3, #8]
 8005bc2:	e02a      	b.n	8005c1a <HAL_DMA_Abort+0x49a>
 8005bc4:	40020010 	.word	0x40020010
 8005bc8:	40020028 	.word	0x40020028
 8005bcc:	40020040 	.word	0x40020040
 8005bd0:	40020058 	.word	0x40020058
 8005bd4:	40020070 	.word	0x40020070
 8005bd8:	40020088 	.word	0x40020088
 8005bdc:	400200a0 	.word	0x400200a0
 8005be0:	400200b8 	.word	0x400200b8
 8005be4:	40020410 	.word	0x40020410
 8005be8:	40020428 	.word	0x40020428
 8005bec:	40020440 	.word	0x40020440
 8005bf0:	40020458 	.word	0x40020458
 8005bf4:	40020470 	.word	0x40020470
 8005bf8:	40020488 	.word	0x40020488
 8005bfc:	400204a0 	.word	0x400204a0
 8005c00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a4f      	ldr	r2, [pc, #316]	@ (8005d5c <HAL_DMA_Abort+0x5dc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d072      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a4d      	ldr	r2, [pc, #308]	@ (8005d60 <HAL_DMA_Abort+0x5e0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d06d      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a4c      	ldr	r2, [pc, #304]	@ (8005d64 <HAL_DMA_Abort+0x5e4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d068      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d68 <HAL_DMA_Abort+0x5e8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d063      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a49      	ldr	r2, [pc, #292]	@ (8005d6c <HAL_DMA_Abort+0x5ec>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d05e      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a47      	ldr	r2, [pc, #284]	@ (8005d70 <HAL_DMA_Abort+0x5f0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d059      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a46      	ldr	r2, [pc, #280]	@ (8005d74 <HAL_DMA_Abort+0x5f4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d054      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a44      	ldr	r2, [pc, #272]	@ (8005d78 <HAL_DMA_Abort+0x5f8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d04f      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a43      	ldr	r2, [pc, #268]	@ (8005d7c <HAL_DMA_Abort+0x5fc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d04a      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a41      	ldr	r2, [pc, #260]	@ (8005d80 <HAL_DMA_Abort+0x600>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d045      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a40      	ldr	r2, [pc, #256]	@ (8005d84 <HAL_DMA_Abort+0x604>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d040      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d88 <HAL_DMA_Abort+0x608>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d03b      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a3d      	ldr	r2, [pc, #244]	@ (8005d8c <HAL_DMA_Abort+0x60c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d036      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8005d90 <HAL_DMA_Abort+0x610>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d031      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a3a      	ldr	r2, [pc, #232]	@ (8005d94 <HAL_DMA_Abort+0x614>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d02c      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a38      	ldr	r2, [pc, #224]	@ (8005d98 <HAL_DMA_Abort+0x618>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d027      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a37      	ldr	r2, [pc, #220]	@ (8005d9c <HAL_DMA_Abort+0x61c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d022      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a35      	ldr	r2, [pc, #212]	@ (8005da0 <HAL_DMA_Abort+0x620>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01d      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a34      	ldr	r2, [pc, #208]	@ (8005da4 <HAL_DMA_Abort+0x624>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d018      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a32      	ldr	r2, [pc, #200]	@ (8005da8 <HAL_DMA_Abort+0x628>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a31      	ldr	r2, [pc, #196]	@ (8005dac <HAL_DMA_Abort+0x62c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00e      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8005db0 <HAL_DMA_Abort+0x630>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8005db4 <HAL_DMA_Abort+0x634>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <HAL_DMA_Abort+0x58a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	@ (8005db8 <HAL_DMA_Abort+0x638>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d101      	bne.n	8005d0e <HAL_DMA_Abort+0x58e>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <HAL_DMA_Abort+0x590>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d1c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d34:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d3e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40020010 	.word	0x40020010
 8005d60:	40020028 	.word	0x40020028
 8005d64:	40020040 	.word	0x40020040
 8005d68:	40020058 	.word	0x40020058
 8005d6c:	40020070 	.word	0x40020070
 8005d70:	40020088 	.word	0x40020088
 8005d74:	400200a0 	.word	0x400200a0
 8005d78:	400200b8 	.word	0x400200b8
 8005d7c:	40020410 	.word	0x40020410
 8005d80:	40020428 	.word	0x40020428
 8005d84:	40020440 	.word	0x40020440
 8005d88:	40020458 	.word	0x40020458
 8005d8c:	40020470 	.word	0x40020470
 8005d90:	40020488 	.word	0x40020488
 8005d94:	400204a0 	.word	0x400204a0
 8005d98:	400204b8 	.word	0x400204b8
 8005d9c:	58025408 	.word	0x58025408
 8005da0:	5802541c 	.word	0x5802541c
 8005da4:	58025430 	.word	0x58025430
 8005da8:	58025444 	.word	0x58025444
 8005dac:	58025458 	.word	0x58025458
 8005db0:	5802546c 	.word	0x5802546c
 8005db4:	58025480 	.word	0x58025480
 8005db8:	58025494 	.word	0x58025494

08005dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e237      	b.n	800623e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d004      	beq.n	8005de4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2280      	movs	r2, #128	@ 0x80
 8005dde:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e22c      	b.n	800623e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f5c <HAL_DMA_Abort_IT+0x1a0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d04a      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a5b      	ldr	r2, [pc, #364]	@ (8005f60 <HAL_DMA_Abort_IT+0x1a4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d045      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a59      	ldr	r2, [pc, #356]	@ (8005f64 <HAL_DMA_Abort_IT+0x1a8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d040      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a58      	ldr	r2, [pc, #352]	@ (8005f68 <HAL_DMA_Abort_IT+0x1ac>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d03b      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a56      	ldr	r2, [pc, #344]	@ (8005f6c <HAL_DMA_Abort_IT+0x1b0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d036      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a55      	ldr	r2, [pc, #340]	@ (8005f70 <HAL_DMA_Abort_IT+0x1b4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d031      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a53      	ldr	r2, [pc, #332]	@ (8005f74 <HAL_DMA_Abort_IT+0x1b8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d02c      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a52      	ldr	r2, [pc, #328]	@ (8005f78 <HAL_DMA_Abort_IT+0x1bc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d027      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a50      	ldr	r2, [pc, #320]	@ (8005f7c <HAL_DMA_Abort_IT+0x1c0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d022      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a4f      	ldr	r2, [pc, #316]	@ (8005f80 <HAL_DMA_Abort_IT+0x1c4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d01d      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a4d      	ldr	r2, [pc, #308]	@ (8005f84 <HAL_DMA_Abort_IT+0x1c8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d018      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a4c      	ldr	r2, [pc, #304]	@ (8005f88 <HAL_DMA_Abort_IT+0x1cc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a4a      	ldr	r2, [pc, #296]	@ (8005f8c <HAL_DMA_Abort_IT+0x1d0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a49      	ldr	r2, [pc, #292]	@ (8005f90 <HAL_DMA_Abort_IT+0x1d4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a47      	ldr	r2, [pc, #284]	@ (8005f94 <HAL_DMA_Abort_IT+0x1d8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_DMA_Abort_IT+0xc8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a46      	ldr	r2, [pc, #280]	@ (8005f98 <HAL_DMA_Abort_IT+0x1dc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d101      	bne.n	8005e88 <HAL_DMA_Abort_IT+0xcc>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <HAL_DMA_Abort_IT+0xce>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8086 	beq.w	8005f9c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2204      	movs	r2, #4
 8005e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f5c <HAL_DMA_Abort_IT+0x1a0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8005f60 <HAL_DMA_Abort_IT+0x1a4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f64 <HAL_DMA_Abort_IT+0x1a8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2b      	ldr	r2, [pc, #172]	@ (8005f68 <HAL_DMA_Abort_IT+0x1ac>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a29      	ldr	r2, [pc, #164]	@ (8005f6c <HAL_DMA_Abort_IT+0x1b0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a28      	ldr	r2, [pc, #160]	@ (8005f70 <HAL_DMA_Abort_IT+0x1b4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	@ (8005f74 <HAL_DMA_Abort_IT+0x1b8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a25      	ldr	r2, [pc, #148]	@ (8005f78 <HAL_DMA_Abort_IT+0x1bc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a23      	ldr	r2, [pc, #140]	@ (8005f7c <HAL_DMA_Abort_IT+0x1c0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a22      	ldr	r2, [pc, #136]	@ (8005f80 <HAL_DMA_Abort_IT+0x1c4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a20      	ldr	r2, [pc, #128]	@ (8005f84 <HAL_DMA_Abort_IT+0x1c8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <HAL_DMA_Abort_IT+0x1cc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1d      	ldr	r2, [pc, #116]	@ (8005f8c <HAL_DMA_Abort_IT+0x1d0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f90 <HAL_DMA_Abort_IT+0x1d4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1a      	ldr	r2, [pc, #104]	@ (8005f94 <HAL_DMA_Abort_IT+0x1d8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x17c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <HAL_DMA_Abort_IT+0x1dc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_DMA_Abort_IT+0x18e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e178      	b.n	800623c <HAL_DMA_Abort_IT+0x480>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e16f      	b.n	800623c <HAL_DMA_Abort_IT+0x480>
 8005f5c:	40020010 	.word	0x40020010
 8005f60:	40020028 	.word	0x40020028
 8005f64:	40020040 	.word	0x40020040
 8005f68:	40020058 	.word	0x40020058
 8005f6c:	40020070 	.word	0x40020070
 8005f70:	40020088 	.word	0x40020088
 8005f74:	400200a0 	.word	0x400200a0
 8005f78:	400200b8 	.word	0x400200b8
 8005f7c:	40020410 	.word	0x40020410
 8005f80:	40020428 	.word	0x40020428
 8005f84:	40020440 	.word	0x40020440
 8005f88:	40020458 	.word	0x40020458
 8005f8c:	40020470 	.word	0x40020470
 8005f90:	40020488 	.word	0x40020488
 8005f94:	400204a0 	.word	0x400204a0
 8005f98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 020e 	bic.w	r2, r2, #14
 8005faa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6c      	ldr	r2, [pc, #432]	@ (8006164 <HAL_DMA_Abort_IT+0x3a8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d04a      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6b      	ldr	r2, [pc, #428]	@ (8006168 <HAL_DMA_Abort_IT+0x3ac>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d045      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a69      	ldr	r2, [pc, #420]	@ (800616c <HAL_DMA_Abort_IT+0x3b0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d040      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a68      	ldr	r2, [pc, #416]	@ (8006170 <HAL_DMA_Abort_IT+0x3b4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d03b      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a66      	ldr	r2, [pc, #408]	@ (8006174 <HAL_DMA_Abort_IT+0x3b8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d036      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a65      	ldr	r2, [pc, #404]	@ (8006178 <HAL_DMA_Abort_IT+0x3bc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d031      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a63      	ldr	r2, [pc, #396]	@ (800617c <HAL_DMA_Abort_IT+0x3c0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d02c      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a62      	ldr	r2, [pc, #392]	@ (8006180 <HAL_DMA_Abort_IT+0x3c4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d027      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a60      	ldr	r2, [pc, #384]	@ (8006184 <HAL_DMA_Abort_IT+0x3c8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d022      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a5f      	ldr	r2, [pc, #380]	@ (8006188 <HAL_DMA_Abort_IT+0x3cc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d01d      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5d      	ldr	r2, [pc, #372]	@ (800618c <HAL_DMA_Abort_IT+0x3d0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d018      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a5c      	ldr	r2, [pc, #368]	@ (8006190 <HAL_DMA_Abort_IT+0x3d4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5a      	ldr	r2, [pc, #360]	@ (8006194 <HAL_DMA_Abort_IT+0x3d8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00e      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a59      	ldr	r2, [pc, #356]	@ (8006198 <HAL_DMA_Abort_IT+0x3dc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a57      	ldr	r2, [pc, #348]	@ (800619c <HAL_DMA_Abort_IT+0x3e0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_DMA_Abort_IT+0x290>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a56      	ldr	r2, [pc, #344]	@ (80061a0 <HAL_DMA_Abort_IT+0x3e4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <HAL_DMA_Abort_IT+0x2a2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0201 	bic.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e007      	b.n	800606e <HAL_DMA_Abort_IT+0x2b2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a3c      	ldr	r2, [pc, #240]	@ (8006164 <HAL_DMA_Abort_IT+0x3a8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d072      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3a      	ldr	r2, [pc, #232]	@ (8006168 <HAL_DMA_Abort_IT+0x3ac>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d06d      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a39      	ldr	r2, [pc, #228]	@ (800616c <HAL_DMA_Abort_IT+0x3b0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d068      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a37      	ldr	r2, [pc, #220]	@ (8006170 <HAL_DMA_Abort_IT+0x3b4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d063      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a36      	ldr	r2, [pc, #216]	@ (8006174 <HAL_DMA_Abort_IT+0x3b8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d05e      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a34      	ldr	r2, [pc, #208]	@ (8006178 <HAL_DMA_Abort_IT+0x3bc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d059      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a33      	ldr	r2, [pc, #204]	@ (800617c <HAL_DMA_Abort_IT+0x3c0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d054      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a31      	ldr	r2, [pc, #196]	@ (8006180 <HAL_DMA_Abort_IT+0x3c4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d04f      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a30      	ldr	r2, [pc, #192]	@ (8006184 <HAL_DMA_Abort_IT+0x3c8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d04a      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006188 <HAL_DMA_Abort_IT+0x3cc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d045      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2d      	ldr	r2, [pc, #180]	@ (800618c <HAL_DMA_Abort_IT+0x3d0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d040      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006190 <HAL_DMA_Abort_IT+0x3d4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006194 <HAL_DMA_Abort_IT+0x3d8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d036      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a28      	ldr	r2, [pc, #160]	@ (8006198 <HAL_DMA_Abort_IT+0x3dc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d031      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a27      	ldr	r2, [pc, #156]	@ (800619c <HAL_DMA_Abort_IT+0x3e0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d02c      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a25      	ldr	r2, [pc, #148]	@ (80061a0 <HAL_DMA_Abort_IT+0x3e4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d027      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a24      	ldr	r2, [pc, #144]	@ (80061a4 <HAL_DMA_Abort_IT+0x3e8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a22      	ldr	r2, [pc, #136]	@ (80061a8 <HAL_DMA_Abort_IT+0x3ec>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a21      	ldr	r2, [pc, #132]	@ (80061ac <HAL_DMA_Abort_IT+0x3f0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1f      	ldr	r2, [pc, #124]	@ (80061b0 <HAL_DMA_Abort_IT+0x3f4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1e      	ldr	r2, [pc, #120]	@ (80061b4 <HAL_DMA_Abort_IT+0x3f8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <HAL_DMA_Abort_IT+0x3fc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1b      	ldr	r2, [pc, #108]	@ (80061bc <HAL_DMA_Abort_IT+0x400>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_DMA_Abort_IT+0x3a2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a19      	ldr	r2, [pc, #100]	@ (80061c0 <HAL_DMA_Abort_IT+0x404>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d132      	bne.n	80061c4 <HAL_DMA_Abort_IT+0x408>
 800615e:	2301      	movs	r3, #1
 8006160:	e031      	b.n	80061c6 <HAL_DMA_Abort_IT+0x40a>
 8006162:	bf00      	nop
 8006164:	40020010 	.word	0x40020010
 8006168:	40020028 	.word	0x40020028
 800616c:	40020040 	.word	0x40020040
 8006170:	40020058 	.word	0x40020058
 8006174:	40020070 	.word	0x40020070
 8006178:	40020088 	.word	0x40020088
 800617c:	400200a0 	.word	0x400200a0
 8006180:	400200b8 	.word	0x400200b8
 8006184:	40020410 	.word	0x40020410
 8006188:	40020428 	.word	0x40020428
 800618c:	40020440 	.word	0x40020440
 8006190:	40020458 	.word	0x40020458
 8006194:	40020470 	.word	0x40020470
 8006198:	40020488 	.word	0x40020488
 800619c:	400204a0 	.word	0x400204a0
 80061a0:	400204b8 	.word	0x400204b8
 80061a4:	58025408 	.word	0x58025408
 80061a8:	5802541c 	.word	0x5802541c
 80061ac:	58025430 	.word	0x58025430
 80061b0:	58025444 	.word	0x58025444
 80061b4:	58025458 	.word	0x58025458
 80061b8:	5802546c 	.word	0x5802546c
 80061bc:	58025480 	.word	0x58025480
 80061c0:	58025494 	.word	0x58025494
 80061c4:	2300      	movs	r3, #0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d028      	beq.n	800621c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2201      	movs	r2, #1
 80061ea:	409a      	lsls	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80061f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800620c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006210:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800621a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop

08006248 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	@ 0x28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006254:	4b67      	ldr	r3, [pc, #412]	@ (80063f4 <HAL_DMA_IRQHandler+0x1ac>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a67      	ldr	r2, [pc, #412]	@ (80063f8 <HAL_DMA_IRQHandler+0x1b0>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	0a9b      	lsrs	r3, r3, #10
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006266:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a5f      	ldr	r2, [pc, #380]	@ (80063fc <HAL_DMA_IRQHandler+0x1b4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d04a      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a5d      	ldr	r2, [pc, #372]	@ (8006400 <HAL_DMA_IRQHandler+0x1b8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d045      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a5c      	ldr	r2, [pc, #368]	@ (8006404 <HAL_DMA_IRQHandler+0x1bc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d040      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a5a      	ldr	r2, [pc, #360]	@ (8006408 <HAL_DMA_IRQHandler+0x1c0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d03b      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a59      	ldr	r2, [pc, #356]	@ (800640c <HAL_DMA_IRQHandler+0x1c4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d036      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a57      	ldr	r2, [pc, #348]	@ (8006410 <HAL_DMA_IRQHandler+0x1c8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d031      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a56      	ldr	r2, [pc, #344]	@ (8006414 <HAL_DMA_IRQHandler+0x1cc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d02c      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a54      	ldr	r2, [pc, #336]	@ (8006418 <HAL_DMA_IRQHandler+0x1d0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d027      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a53      	ldr	r2, [pc, #332]	@ (800641c <HAL_DMA_IRQHandler+0x1d4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a51      	ldr	r2, [pc, #324]	@ (8006420 <HAL_DMA_IRQHandler+0x1d8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01d      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a50      	ldr	r2, [pc, #320]	@ (8006424 <HAL_DMA_IRQHandler+0x1dc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a4e      	ldr	r2, [pc, #312]	@ (8006428 <HAL_DMA_IRQHandler+0x1e0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a4d      	ldr	r2, [pc, #308]	@ (800642c <HAL_DMA_IRQHandler+0x1e4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a4b      	ldr	r2, [pc, #300]	@ (8006430 <HAL_DMA_IRQHandler+0x1e8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a4a      	ldr	r2, [pc, #296]	@ (8006434 <HAL_DMA_IRQHandler+0x1ec>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_DMA_IRQHandler+0xd2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a48      	ldr	r2, [pc, #288]	@ (8006438 <HAL_DMA_IRQHandler+0x1f0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d101      	bne.n	800631e <HAL_DMA_IRQHandler+0xd6>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <HAL_DMA_IRQHandler+0xd8>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 842b 	beq.w	8006b7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2208      	movs	r2, #8
 8006330:	409a      	lsls	r2, r3
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80a2 	beq.w	8006480 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a2e      	ldr	r2, [pc, #184]	@ (80063fc <HAL_DMA_IRQHandler+0x1b4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d04a      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2d      	ldr	r2, [pc, #180]	@ (8006400 <HAL_DMA_IRQHandler+0x1b8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d045      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a2b      	ldr	r2, [pc, #172]	@ (8006404 <HAL_DMA_IRQHandler+0x1bc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d040      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2a      	ldr	r2, [pc, #168]	@ (8006408 <HAL_DMA_IRQHandler+0x1c0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d03b      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a28      	ldr	r2, [pc, #160]	@ (800640c <HAL_DMA_IRQHandler+0x1c4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d036      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <HAL_DMA_IRQHandler+0x1c8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d031      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a25      	ldr	r2, [pc, #148]	@ (8006414 <HAL_DMA_IRQHandler+0x1cc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d02c      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a24      	ldr	r2, [pc, #144]	@ (8006418 <HAL_DMA_IRQHandler+0x1d0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d027      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a22      	ldr	r2, [pc, #136]	@ (800641c <HAL_DMA_IRQHandler+0x1d4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d022      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a21      	ldr	r2, [pc, #132]	@ (8006420 <HAL_DMA_IRQHandler+0x1d8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d01d      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006424 <HAL_DMA_IRQHandler+0x1dc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d018      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006428 <HAL_DMA_IRQHandler+0x1e0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1c      	ldr	r2, [pc, #112]	@ (800642c <HAL_DMA_IRQHandler+0x1e4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00e      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006430 <HAL_DMA_IRQHandler+0x1e8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a19      	ldr	r2, [pc, #100]	@ (8006434 <HAL_DMA_IRQHandler+0x1ec>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_DMA_IRQHandler+0x194>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a18      	ldr	r2, [pc, #96]	@ (8006438 <HAL_DMA_IRQHandler+0x1f0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d12f      	bne.n	800643c <HAL_DMA_IRQHandler+0x1f4>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	e02e      	b.n	8006450 <HAL_DMA_IRQHandler+0x208>
 80063f2:	bf00      	nop
 80063f4:	24000054 	.word	0x24000054
 80063f8:	1b4e81b5 	.word	0x1b4e81b5
 80063fc:	40020010 	.word	0x40020010
 8006400:	40020028 	.word	0x40020028
 8006404:	40020040 	.word	0x40020040
 8006408:	40020058 	.word	0x40020058
 800640c:	40020070 	.word	0x40020070
 8006410:	40020088 	.word	0x40020088
 8006414:	400200a0 	.word	0x400200a0
 8006418:	400200b8 	.word	0x400200b8
 800641c:	40020410 	.word	0x40020410
 8006420:	40020428 	.word	0x40020428
 8006424:	40020440 	.word	0x40020440
 8006428:	40020458 	.word	0x40020458
 800642c:	40020470 	.word	0x40020470
 8006430:	40020488 	.word	0x40020488
 8006434:	400204a0 	.word	0x400204a0
 8006438:	400204b8 	.word	0x400204b8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	bf14      	ite	ne
 800644a:	2301      	movne	r3, #1
 800644c:	2300      	moveq	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d015      	beq.n	8006480 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0204 	bic.w	r2, r2, #4
 8006462:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	2208      	movs	r2, #8
 800646e:	409a      	lsls	r2, r3
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006478:	f043 0201 	orr.w	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	fa22 f303 	lsr.w	r3, r2, r3
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d06e      	beq.n	8006574 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a69      	ldr	r2, [pc, #420]	@ (8006640 <HAL_DMA_IRQHandler+0x3f8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d04a      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a67      	ldr	r2, [pc, #412]	@ (8006644 <HAL_DMA_IRQHandler+0x3fc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d045      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a66      	ldr	r2, [pc, #408]	@ (8006648 <HAL_DMA_IRQHandler+0x400>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d040      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a64      	ldr	r2, [pc, #400]	@ (800664c <HAL_DMA_IRQHandler+0x404>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d03b      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a63      	ldr	r2, [pc, #396]	@ (8006650 <HAL_DMA_IRQHandler+0x408>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d036      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a61      	ldr	r2, [pc, #388]	@ (8006654 <HAL_DMA_IRQHandler+0x40c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d031      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a60      	ldr	r2, [pc, #384]	@ (8006658 <HAL_DMA_IRQHandler+0x410>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d02c      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5e      	ldr	r2, [pc, #376]	@ (800665c <HAL_DMA_IRQHandler+0x414>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d027      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a5d      	ldr	r2, [pc, #372]	@ (8006660 <HAL_DMA_IRQHandler+0x418>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d022      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a5b      	ldr	r2, [pc, #364]	@ (8006664 <HAL_DMA_IRQHandler+0x41c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01d      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a5a      	ldr	r2, [pc, #360]	@ (8006668 <HAL_DMA_IRQHandler+0x420>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a58      	ldr	r2, [pc, #352]	@ (800666c <HAL_DMA_IRQHandler+0x424>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a57      	ldr	r2, [pc, #348]	@ (8006670 <HAL_DMA_IRQHandler+0x428>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a55      	ldr	r2, [pc, #340]	@ (8006674 <HAL_DMA_IRQHandler+0x42c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a54      	ldr	r2, [pc, #336]	@ (8006678 <HAL_DMA_IRQHandler+0x430>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_DMA_IRQHandler+0x2ee>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a52      	ldr	r2, [pc, #328]	@ (800667c <HAL_DMA_IRQHandler+0x434>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d10a      	bne.n	800654c <HAL_DMA_IRQHandler+0x304>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf14      	ite	ne
 8006544:	2301      	movne	r3, #1
 8006546:	2300      	moveq	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e003      	b.n	8006554 <HAL_DMA_IRQHandler+0x30c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656c:	f043 0202 	orr.w	r2, r3, #2
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	2204      	movs	r2, #4
 800657e:	409a      	lsls	r2, r3
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 808f 	beq.w	80066a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2c      	ldr	r2, [pc, #176]	@ (8006640 <HAL_DMA_IRQHandler+0x3f8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d04a      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2a      	ldr	r2, [pc, #168]	@ (8006644 <HAL_DMA_IRQHandler+0x3fc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d045      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a29      	ldr	r2, [pc, #164]	@ (8006648 <HAL_DMA_IRQHandler+0x400>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d040      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a27      	ldr	r2, [pc, #156]	@ (800664c <HAL_DMA_IRQHandler+0x404>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d03b      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a26      	ldr	r2, [pc, #152]	@ (8006650 <HAL_DMA_IRQHandler+0x408>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d036      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a24      	ldr	r2, [pc, #144]	@ (8006654 <HAL_DMA_IRQHandler+0x40c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d031      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a23      	ldr	r2, [pc, #140]	@ (8006658 <HAL_DMA_IRQHandler+0x410>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d02c      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a21      	ldr	r2, [pc, #132]	@ (800665c <HAL_DMA_IRQHandler+0x414>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d027      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a20      	ldr	r2, [pc, #128]	@ (8006660 <HAL_DMA_IRQHandler+0x418>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d022      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006664 <HAL_DMA_IRQHandler+0x41c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01d      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006668 <HAL_DMA_IRQHandler+0x420>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d018      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1b      	ldr	r2, [pc, #108]	@ (800666c <HAL_DMA_IRQHandler+0x424>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1a      	ldr	r2, [pc, #104]	@ (8006670 <HAL_DMA_IRQHandler+0x428>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00e      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a18      	ldr	r2, [pc, #96]	@ (8006674 <HAL_DMA_IRQHandler+0x42c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a17      	ldr	r2, [pc, #92]	@ (8006678 <HAL_DMA_IRQHandler+0x430>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_DMA_IRQHandler+0x3e2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a15      	ldr	r2, [pc, #84]	@ (800667c <HAL_DMA_IRQHandler+0x434>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d12a      	bne.n	8006680 <HAL_DMA_IRQHandler+0x438>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e023      	b.n	8006688 <HAL_DMA_IRQHandler+0x440>
 8006640:	40020010 	.word	0x40020010
 8006644:	40020028 	.word	0x40020028
 8006648:	40020040 	.word	0x40020040
 800664c:	40020058 	.word	0x40020058
 8006650:	40020070 	.word	0x40020070
 8006654:	40020088 	.word	0x40020088
 8006658:	400200a0 	.word	0x400200a0
 800665c:	400200b8 	.word	0x400200b8
 8006660:	40020410 	.word	0x40020410
 8006664:	40020428 	.word	0x40020428
 8006668:	40020440 	.word	0x40020440
 800666c:	40020458 	.word	0x40020458
 8006670:	40020470 	.word	0x40020470
 8006674:	40020488 	.word	0x40020488
 8006678:	400204a0 	.word	0x400204a0
 800667c:	400204b8 	.word	0x400204b8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	2204      	movs	r2, #4
 8006696:	409a      	lsls	r2, r3
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a0:	f043 0204 	orr.w	r2, r3, #4
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2210      	movs	r2, #16
 80066b2:	409a      	lsls	r2, r3
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80a6 	beq.w	800680a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a85      	ldr	r2, [pc, #532]	@ (80068d8 <HAL_DMA_IRQHandler+0x690>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d04a      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a83      	ldr	r2, [pc, #524]	@ (80068dc <HAL_DMA_IRQHandler+0x694>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d045      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a82      	ldr	r2, [pc, #520]	@ (80068e0 <HAL_DMA_IRQHandler+0x698>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d040      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a80      	ldr	r2, [pc, #512]	@ (80068e4 <HAL_DMA_IRQHandler+0x69c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d03b      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a7f      	ldr	r2, [pc, #508]	@ (80068e8 <HAL_DMA_IRQHandler+0x6a0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d036      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a7d      	ldr	r2, [pc, #500]	@ (80068ec <HAL_DMA_IRQHandler+0x6a4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d031      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a7c      	ldr	r2, [pc, #496]	@ (80068f0 <HAL_DMA_IRQHandler+0x6a8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d02c      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a7a      	ldr	r2, [pc, #488]	@ (80068f4 <HAL_DMA_IRQHandler+0x6ac>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d027      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a79      	ldr	r2, [pc, #484]	@ (80068f8 <HAL_DMA_IRQHandler+0x6b0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d022      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a77      	ldr	r2, [pc, #476]	@ (80068fc <HAL_DMA_IRQHandler+0x6b4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01d      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a76      	ldr	r2, [pc, #472]	@ (8006900 <HAL_DMA_IRQHandler+0x6b8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d018      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a74      	ldr	r2, [pc, #464]	@ (8006904 <HAL_DMA_IRQHandler+0x6bc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d013      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a73      	ldr	r2, [pc, #460]	@ (8006908 <HAL_DMA_IRQHandler+0x6c0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00e      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a71      	ldr	r2, [pc, #452]	@ (800690c <HAL_DMA_IRQHandler+0x6c4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d009      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a70      	ldr	r2, [pc, #448]	@ (8006910 <HAL_DMA_IRQHandler+0x6c8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_DMA_IRQHandler+0x516>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a6e      	ldr	r2, [pc, #440]	@ (8006914 <HAL_DMA_IRQHandler+0x6cc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10a      	bne.n	8006774 <HAL_DMA_IRQHandler+0x52c>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e009      	b.n	8006788 <HAL_DMA_IRQHandler+0x540>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	bf14      	ite	ne
 8006782:	2301      	movne	r3, #1
 8006784:	2300      	moveq	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d03e      	beq.n	800680a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2210      	movs	r2, #16
 8006796:	409a      	lsls	r2, r3
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d018      	beq.n	80067dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d108      	bne.n	80067ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d024      	beq.n	800680a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
 80067c8:	e01f      	b.n	800680a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01b      	beq.n	800680a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	e016      	b.n	800680a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d107      	bne.n	80067fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0208 	bic.w	r2, r2, #8
 80067f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2220      	movs	r2, #32
 8006814:	409a      	lsls	r2, r3
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8110 	beq.w	8006a40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a2c      	ldr	r2, [pc, #176]	@ (80068d8 <HAL_DMA_IRQHandler+0x690>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d04a      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2b      	ldr	r2, [pc, #172]	@ (80068dc <HAL_DMA_IRQHandler+0x694>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d045      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a29      	ldr	r2, [pc, #164]	@ (80068e0 <HAL_DMA_IRQHandler+0x698>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d040      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a28      	ldr	r2, [pc, #160]	@ (80068e4 <HAL_DMA_IRQHandler+0x69c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d03b      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a26      	ldr	r2, [pc, #152]	@ (80068e8 <HAL_DMA_IRQHandler+0x6a0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d036      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a25      	ldr	r2, [pc, #148]	@ (80068ec <HAL_DMA_IRQHandler+0x6a4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d031      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a23      	ldr	r2, [pc, #140]	@ (80068f0 <HAL_DMA_IRQHandler+0x6a8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d02c      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a22      	ldr	r2, [pc, #136]	@ (80068f4 <HAL_DMA_IRQHandler+0x6ac>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d027      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a20      	ldr	r2, [pc, #128]	@ (80068f8 <HAL_DMA_IRQHandler+0x6b0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d022      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1f      	ldr	r2, [pc, #124]	@ (80068fc <HAL_DMA_IRQHandler+0x6b4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d01d      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1d      	ldr	r2, [pc, #116]	@ (8006900 <HAL_DMA_IRQHandler+0x6b8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1c      	ldr	r2, [pc, #112]	@ (8006904 <HAL_DMA_IRQHandler+0x6bc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <HAL_DMA_IRQHandler+0x6c0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a19      	ldr	r2, [pc, #100]	@ (800690c <HAL_DMA_IRQHandler+0x6c4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a17      	ldr	r2, [pc, #92]	@ (8006910 <HAL_DMA_IRQHandler+0x6c8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x678>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a16      	ldr	r2, [pc, #88]	@ (8006914 <HAL_DMA_IRQHandler+0x6cc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d12b      	bne.n	8006918 <HAL_DMA_IRQHandler+0x6d0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bf14      	ite	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	2300      	moveq	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	e02a      	b.n	800692c <HAL_DMA_IRQHandler+0x6e4>
 80068d6:	bf00      	nop
 80068d8:	40020010 	.word	0x40020010
 80068dc:	40020028 	.word	0x40020028
 80068e0:	40020040 	.word	0x40020040
 80068e4:	40020058 	.word	0x40020058
 80068e8:	40020070 	.word	0x40020070
 80068ec:	40020088 	.word	0x40020088
 80068f0:	400200a0 	.word	0x400200a0
 80068f4:	400200b8 	.word	0x400200b8
 80068f8:	40020410 	.word	0x40020410
 80068fc:	40020428 	.word	0x40020428
 8006900:	40020440 	.word	0x40020440
 8006904:	40020458 	.word	0x40020458
 8006908:	40020470 	.word	0x40020470
 800690c:	40020488 	.word	0x40020488
 8006910:	400204a0 	.word	0x400204a0
 8006914:	400204b8 	.word	0x400204b8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	bf14      	ite	ne
 8006926:	2301      	movne	r3, #1
 8006928:	2300      	moveq	r3, #0
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8087 	beq.w	8006a40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2220      	movs	r2, #32
 800693c:	409a      	lsls	r2, r3
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b04      	cmp	r3, #4
 800694c:	d139      	bne.n	80069c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0216 	bic.w	r2, r2, #22
 800695c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695a      	ldr	r2, [r3, #20]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800696c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <HAL_DMA_IRQHandler+0x736>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0208 	bic.w	r2, r2, #8
 800698c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	223f      	movs	r2, #63	@ 0x3f
 8006998:	409a      	lsls	r2, r3
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 834a 	beq.w	800704c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
          }
          return;
 80069c0:	e344      	b.n	800704c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d018      	beq.n	8006a02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d108      	bne.n	80069f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d02c      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
 80069ee:	e027      	b.n	8006a40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d023      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	e01e      	b.n	8006a40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10f      	bne.n	8006a30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0210 	bic.w	r2, r2, #16
 8006a1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8306 	beq.w	8007056 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8088 	beq.w	8006b68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a7a      	ldr	r2, [pc, #488]	@ (8006c50 <HAL_DMA_IRQHandler+0xa08>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d04a      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a79      	ldr	r2, [pc, #484]	@ (8006c54 <HAL_DMA_IRQHandler+0xa0c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d045      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a77      	ldr	r2, [pc, #476]	@ (8006c58 <HAL_DMA_IRQHandler+0xa10>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d040      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a76      	ldr	r2, [pc, #472]	@ (8006c5c <HAL_DMA_IRQHandler+0xa14>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d03b      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a74      	ldr	r2, [pc, #464]	@ (8006c60 <HAL_DMA_IRQHandler+0xa18>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d036      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a73      	ldr	r2, [pc, #460]	@ (8006c64 <HAL_DMA_IRQHandler+0xa1c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d031      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a71      	ldr	r2, [pc, #452]	@ (8006c68 <HAL_DMA_IRQHandler+0xa20>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d02c      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a70      	ldr	r2, [pc, #448]	@ (8006c6c <HAL_DMA_IRQHandler+0xa24>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d027      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8006c70 <HAL_DMA_IRQHandler+0xa28>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a6d      	ldr	r2, [pc, #436]	@ (8006c74 <HAL_DMA_IRQHandler+0xa2c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d01d      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8006c78 <HAL_DMA_IRQHandler+0xa30>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a6a      	ldr	r2, [pc, #424]	@ (8006c7c <HAL_DMA_IRQHandler+0xa34>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a68      	ldr	r2, [pc, #416]	@ (8006c80 <HAL_DMA_IRQHandler+0xa38>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a67      	ldr	r2, [pc, #412]	@ (8006c84 <HAL_DMA_IRQHandler+0xa3c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a65      	ldr	r2, [pc, #404]	@ (8006c88 <HAL_DMA_IRQHandler+0xa40>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x8b8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a64      	ldr	r2, [pc, #400]	@ (8006c8c <HAL_DMA_IRQHandler+0xa44>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d108      	bne.n	8006b12 <HAL_DMA_IRQHandler+0x8ca>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e007      	b.n	8006b22 <HAL_DMA_IRQHandler+0x8da>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d307      	bcc.n	8006b3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f2      	bne.n	8006b22 <HAL_DMA_IRQHandler+0x8da>
 8006b3c:	e000      	b.n	8006b40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2203      	movs	r2, #3
 8006b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006b56:	e003      	b.n	8006b60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8272 	beq.w	8007056 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
 8006b7a:	e26c      	b.n	8007056 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a43      	ldr	r2, [pc, #268]	@ (8006c90 <HAL_DMA_IRQHandler+0xa48>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d022      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x984>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a42      	ldr	r2, [pc, #264]	@ (8006c94 <HAL_DMA_IRQHandler+0xa4c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d01d      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x984>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a40      	ldr	r2, [pc, #256]	@ (8006c98 <HAL_DMA_IRQHandler+0xa50>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d018      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x984>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c9c <HAL_DMA_IRQHandler+0xa54>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d013      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x984>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ca0 <HAL_DMA_IRQHandler+0xa58>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00e      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x984>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8006ca4 <HAL_DMA_IRQHandler+0xa5c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d009      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x984>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca8 <HAL_DMA_IRQHandler+0xa60>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d004      	beq.n	8006bcc <HAL_DMA_IRQHandler+0x984>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a39      	ldr	r2, [pc, #228]	@ (8006cac <HAL_DMA_IRQHandler+0xa64>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d101      	bne.n	8006bd0 <HAL_DMA_IRQHandler+0x988>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <HAL_DMA_IRQHandler+0x98a>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 823f 	beq.w	8007056 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	2204      	movs	r2, #4
 8006bea:	409a      	lsls	r2, r3
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80cd 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xb48>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80c7 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	409a      	lsls	r2, r3
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d049      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8210 	beq.w	8007050 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c38:	e20a      	b.n	8007050 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 8206 	beq.w	8007050 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c4c:	e200      	b.n	8007050 <HAL_DMA_IRQHandler+0xe08>
 8006c4e:	bf00      	nop
 8006c50:	40020010 	.word	0x40020010
 8006c54:	40020028 	.word	0x40020028
 8006c58:	40020040 	.word	0x40020040
 8006c5c:	40020058 	.word	0x40020058
 8006c60:	40020070 	.word	0x40020070
 8006c64:	40020088 	.word	0x40020088
 8006c68:	400200a0 	.word	0x400200a0
 8006c6c:	400200b8 	.word	0x400200b8
 8006c70:	40020410 	.word	0x40020410
 8006c74:	40020428 	.word	0x40020428
 8006c78:	40020440 	.word	0x40020440
 8006c7c:	40020458 	.word	0x40020458
 8006c80:	40020470 	.word	0x40020470
 8006c84:	40020488 	.word	0x40020488
 8006c88:	400204a0 	.word	0x400204a0
 8006c8c:	400204b8 	.word	0x400204b8
 8006c90:	58025408 	.word	0x58025408
 8006c94:	5802541c 	.word	0x5802541c
 8006c98:	58025430 	.word	0x58025430
 8006c9c:	58025444 	.word	0x58025444
 8006ca0:	58025458 	.word	0x58025458
 8006ca4:	5802546c 	.word	0x5802546c
 8006ca8:	58025480 	.word	0x58025480
 8006cac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d160      	bne.n	8006d7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a7f      	ldr	r2, [pc, #508]	@ (8006ebc <HAL_DMA_IRQHandler+0xc74>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a7d      	ldr	r2, [pc, #500]	@ (8006ec0 <HAL_DMA_IRQHandler+0xc78>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec4 <HAL_DMA_IRQHandler+0xc7c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a7a      	ldr	r2, [pc, #488]	@ (8006ec8 <HAL_DMA_IRQHandler+0xc80>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a79      	ldr	r2, [pc, #484]	@ (8006ecc <HAL_DMA_IRQHandler+0xc84>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a77      	ldr	r2, [pc, #476]	@ (8006ed0 <HAL_DMA_IRQHandler+0xc88>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a76      	ldr	r2, [pc, #472]	@ (8006ed4 <HAL_DMA_IRQHandler+0xc8c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a74      	ldr	r2, [pc, #464]	@ (8006ed8 <HAL_DMA_IRQHandler+0xc90>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a73      	ldr	r2, [pc, #460]	@ (8006edc <HAL_DMA_IRQHandler+0xc94>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a71      	ldr	r2, [pc, #452]	@ (8006ee0 <HAL_DMA_IRQHandler+0xc98>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a70      	ldr	r2, [pc, #448]	@ (8006ee4 <HAL_DMA_IRQHandler+0xc9c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006ee8 <HAL_DMA_IRQHandler+0xca0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a6d      	ldr	r2, [pc, #436]	@ (8006eec <HAL_DMA_IRQHandler+0xca4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a6b      	ldr	r2, [pc, #428]	@ (8006ef0 <HAL_DMA_IRQHandler+0xca8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a6a      	ldr	r2, [pc, #424]	@ (8006ef4 <HAL_DMA_IRQHandler+0xcac>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_IRQHandler+0xb12>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a68      	ldr	r2, [pc, #416]	@ (8006ef8 <HAL_DMA_IRQHandler+0xcb0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d108      	bne.n	8006d6c <HAL_DMA_IRQHandler+0xb24>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0208 	bic.w	r2, r2, #8
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e007      	b.n	8006d7c <HAL_DMA_IRQHandler+0xb34>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0204 	bic.w	r2, r2, #4
 8006d7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8165 	beq.w	8007050 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8e:	e15f      	b.n	8007050 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2202      	movs	r2, #2
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80c5 	beq.w	8006f30 <HAL_DMA_IRQHandler+0xce8>
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80bf 	beq.w	8006f30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	2202      	movs	r2, #2
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d018      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 813a 	beq.w	8007054 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de8:	e134      	b.n	8007054 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8130 	beq.w	8007054 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dfc:	e12a      	b.n	8007054 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 8089 	bne.w	8006f1c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8006ebc <HAL_DMA_IRQHandler+0xc74>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d04a      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a29      	ldr	r2, [pc, #164]	@ (8006ec0 <HAL_DMA_IRQHandler+0xc78>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d045      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a28      	ldr	r2, [pc, #160]	@ (8006ec4 <HAL_DMA_IRQHandler+0xc7c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d040      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a26      	ldr	r2, [pc, #152]	@ (8006ec8 <HAL_DMA_IRQHandler+0xc80>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d03b      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a25      	ldr	r2, [pc, #148]	@ (8006ecc <HAL_DMA_IRQHandler+0xc84>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d036      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a23      	ldr	r2, [pc, #140]	@ (8006ed0 <HAL_DMA_IRQHandler+0xc88>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d031      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a22      	ldr	r2, [pc, #136]	@ (8006ed4 <HAL_DMA_IRQHandler+0xc8c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d02c      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a20      	ldr	r2, [pc, #128]	@ (8006ed8 <HAL_DMA_IRQHandler+0xc90>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d027      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006edc <HAL_DMA_IRQHandler+0xc94>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee0 <HAL_DMA_IRQHandler+0xc98>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01d      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee4 <HAL_DMA_IRQHandler+0xc9c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee8 <HAL_DMA_IRQHandler+0xca0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a19      	ldr	r2, [pc, #100]	@ (8006eec <HAL_DMA_IRQHandler+0xca4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a17      	ldr	r2, [pc, #92]	@ (8006ef0 <HAL_DMA_IRQHandler+0xca8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a16      	ldr	r2, [pc, #88]	@ (8006ef4 <HAL_DMA_IRQHandler+0xcac>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xc62>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a14      	ldr	r2, [pc, #80]	@ (8006ef8 <HAL_DMA_IRQHandler+0xcb0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d128      	bne.n	8006efc <HAL_DMA_IRQHandler+0xcb4>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0214 	bic.w	r2, r2, #20
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e027      	b.n	8006f0c <HAL_DMA_IRQHandler+0xcc4>
 8006ebc:	40020010 	.word	0x40020010
 8006ec0:	40020028 	.word	0x40020028
 8006ec4:	40020040 	.word	0x40020040
 8006ec8:	40020058 	.word	0x40020058
 8006ecc:	40020070 	.word	0x40020070
 8006ed0:	40020088 	.word	0x40020088
 8006ed4:	400200a0 	.word	0x400200a0
 8006ed8:	400200b8 	.word	0x400200b8
 8006edc:	40020410 	.word	0x40020410
 8006ee0:	40020428 	.word	0x40020428
 8006ee4:	40020440 	.word	0x40020440
 8006ee8:	40020458 	.word	0x40020458
 8006eec:	40020470 	.word	0x40020470
 8006ef0:	40020488 	.word	0x40020488
 8006ef4:	400204a0 	.word	0x400204a0
 8006ef8:	400204b8 	.word	0x400204b8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 020a 	bic.w	r2, r2, #10
 8006f0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8097 	beq.w	8007054 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f2e:	e091      	b.n	8007054 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	2208      	movs	r2, #8
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8088 	beq.w	8007056 <HAL_DMA_IRQHandler+0xe0e>
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8082 	beq.w	8007056 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a41      	ldr	r2, [pc, #260]	@ (800705c <HAL_DMA_IRQHandler+0xe14>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d04a      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a3f      	ldr	r2, [pc, #252]	@ (8007060 <HAL_DMA_IRQHandler+0xe18>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d045      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8007064 <HAL_DMA_IRQHandler+0xe1c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d040      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a3c      	ldr	r2, [pc, #240]	@ (8007068 <HAL_DMA_IRQHandler+0xe20>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d03b      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800706c <HAL_DMA_IRQHandler+0xe24>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d036      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a39      	ldr	r2, [pc, #228]	@ (8007070 <HAL_DMA_IRQHandler+0xe28>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d031      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a38      	ldr	r2, [pc, #224]	@ (8007074 <HAL_DMA_IRQHandler+0xe2c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d02c      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a36      	ldr	r2, [pc, #216]	@ (8007078 <HAL_DMA_IRQHandler+0xe30>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d027      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a35      	ldr	r2, [pc, #212]	@ (800707c <HAL_DMA_IRQHandler+0xe34>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d022      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a33      	ldr	r2, [pc, #204]	@ (8007080 <HAL_DMA_IRQHandler+0xe38>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01d      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a32      	ldr	r2, [pc, #200]	@ (8007084 <HAL_DMA_IRQHandler+0xe3c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d018      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a30      	ldr	r2, [pc, #192]	@ (8007088 <HAL_DMA_IRQHandler+0xe40>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a2f      	ldr	r2, [pc, #188]	@ (800708c <HAL_DMA_IRQHandler+0xe44>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8007090 <HAL_DMA_IRQHandler+0xe48>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8007094 <HAL_DMA_IRQHandler+0xe4c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d004      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xdaa>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2a      	ldr	r2, [pc, #168]	@ (8007098 <HAL_DMA_IRQHandler+0xe50>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d108      	bne.n	8007004 <HAL_DMA_IRQHandler+0xdbc>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 021c 	bic.w	r2, r2, #28
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	e007      	b.n	8007014 <HAL_DMA_IRQHandler+0xdcc>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 020e 	bic.w	r2, r2, #14
 8007012:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	2201      	movs	r2, #1
 800701e:	409a      	lsls	r2, r3
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
 800704a:	e004      	b.n	8007056 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800704c:	bf00      	nop
 800704e:	e002      	b.n	8007056 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007050:	bf00      	nop
 8007052:	e000      	b.n	8007056 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007054:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007056:	3728      	adds	r7, #40	@ 0x28
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40020010 	.word	0x40020010
 8007060:	40020028 	.word	0x40020028
 8007064:	40020040 	.word	0x40020040
 8007068:	40020058 	.word	0x40020058
 800706c:	40020070 	.word	0x40020070
 8007070:	40020088 	.word	0x40020088
 8007074:	400200a0 	.word	0x400200a0
 8007078:	400200b8 	.word	0x400200b8
 800707c:	40020410 	.word	0x40020410
 8007080:	40020428 	.word	0x40020428
 8007084:	40020440 	.word	0x40020440
 8007088:	40020458 	.word	0x40020458
 800708c:	40020470 	.word	0x40020470
 8007090:	40020488 	.word	0x40020488
 8007094:	400204a0 	.word	0x400204a0
 8007098:	400204b8 	.word	0x400204b8

0800709c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a7f      	ldr	r2, [pc, #508]	@ (80072b8 <DMA_SetConfig+0x21c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d072      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a7d      	ldr	r2, [pc, #500]	@ (80072bc <DMA_SetConfig+0x220>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d06d      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a7c      	ldr	r2, [pc, #496]	@ (80072c0 <DMA_SetConfig+0x224>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d068      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a7a      	ldr	r2, [pc, #488]	@ (80072c4 <DMA_SetConfig+0x228>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d063      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a79      	ldr	r2, [pc, #484]	@ (80072c8 <DMA_SetConfig+0x22c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d05e      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a77      	ldr	r2, [pc, #476]	@ (80072cc <DMA_SetConfig+0x230>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d059      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a76      	ldr	r2, [pc, #472]	@ (80072d0 <DMA_SetConfig+0x234>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d054      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a74      	ldr	r2, [pc, #464]	@ (80072d4 <DMA_SetConfig+0x238>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d04f      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a73      	ldr	r2, [pc, #460]	@ (80072d8 <DMA_SetConfig+0x23c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d04a      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a71      	ldr	r2, [pc, #452]	@ (80072dc <DMA_SetConfig+0x240>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d045      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a70      	ldr	r2, [pc, #448]	@ (80072e0 <DMA_SetConfig+0x244>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d040      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a6e      	ldr	r2, [pc, #440]	@ (80072e4 <DMA_SetConfig+0x248>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d03b      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a6d      	ldr	r2, [pc, #436]	@ (80072e8 <DMA_SetConfig+0x24c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d036      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a6b      	ldr	r2, [pc, #428]	@ (80072ec <DMA_SetConfig+0x250>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d031      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a6a      	ldr	r2, [pc, #424]	@ (80072f0 <DMA_SetConfig+0x254>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d02c      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a68      	ldr	r2, [pc, #416]	@ (80072f4 <DMA_SetConfig+0x258>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d027      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a67      	ldr	r2, [pc, #412]	@ (80072f8 <DMA_SetConfig+0x25c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d022      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a65      	ldr	r2, [pc, #404]	@ (80072fc <DMA_SetConfig+0x260>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d01d      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a64      	ldr	r2, [pc, #400]	@ (8007300 <DMA_SetConfig+0x264>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d018      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a62      	ldr	r2, [pc, #392]	@ (8007304 <DMA_SetConfig+0x268>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a61      	ldr	r2, [pc, #388]	@ (8007308 <DMA_SetConfig+0x26c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00e      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a5f      	ldr	r2, [pc, #380]	@ (800730c <DMA_SetConfig+0x270>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a5e      	ldr	r2, [pc, #376]	@ (8007310 <DMA_SetConfig+0x274>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d004      	beq.n	80071a6 <DMA_SetConfig+0x10a>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a5c      	ldr	r2, [pc, #368]	@ (8007314 <DMA_SetConfig+0x278>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d101      	bne.n	80071aa <DMA_SetConfig+0x10e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <DMA_SetConfig+0x110>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00d      	beq.n	80071cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d004      	beq.n	80071cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a39      	ldr	r2, [pc, #228]	@ (80072b8 <DMA_SetConfig+0x21c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d04a      	beq.n	800726c <DMA_SetConfig+0x1d0>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a38      	ldr	r2, [pc, #224]	@ (80072bc <DMA_SetConfig+0x220>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d045      	beq.n	800726c <DMA_SetConfig+0x1d0>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a36      	ldr	r2, [pc, #216]	@ (80072c0 <DMA_SetConfig+0x224>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d040      	beq.n	800726c <DMA_SetConfig+0x1d0>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a35      	ldr	r2, [pc, #212]	@ (80072c4 <DMA_SetConfig+0x228>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d03b      	beq.n	800726c <DMA_SetConfig+0x1d0>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a33      	ldr	r2, [pc, #204]	@ (80072c8 <DMA_SetConfig+0x22c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d036      	beq.n	800726c <DMA_SetConfig+0x1d0>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a32      	ldr	r2, [pc, #200]	@ (80072cc <DMA_SetConfig+0x230>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d031      	beq.n	800726c <DMA_SetConfig+0x1d0>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a30      	ldr	r2, [pc, #192]	@ (80072d0 <DMA_SetConfig+0x234>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d02c      	beq.n	800726c <DMA_SetConfig+0x1d0>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2f      	ldr	r2, [pc, #188]	@ (80072d4 <DMA_SetConfig+0x238>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d027      	beq.n	800726c <DMA_SetConfig+0x1d0>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a2d      	ldr	r2, [pc, #180]	@ (80072d8 <DMA_SetConfig+0x23c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d022      	beq.n	800726c <DMA_SetConfig+0x1d0>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a2c      	ldr	r2, [pc, #176]	@ (80072dc <DMA_SetConfig+0x240>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d01d      	beq.n	800726c <DMA_SetConfig+0x1d0>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a2a      	ldr	r2, [pc, #168]	@ (80072e0 <DMA_SetConfig+0x244>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d018      	beq.n	800726c <DMA_SetConfig+0x1d0>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a29      	ldr	r2, [pc, #164]	@ (80072e4 <DMA_SetConfig+0x248>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <DMA_SetConfig+0x1d0>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a27      	ldr	r2, [pc, #156]	@ (80072e8 <DMA_SetConfig+0x24c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <DMA_SetConfig+0x1d0>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a26      	ldr	r2, [pc, #152]	@ (80072ec <DMA_SetConfig+0x250>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d009      	beq.n	800726c <DMA_SetConfig+0x1d0>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a24      	ldr	r2, [pc, #144]	@ (80072f0 <DMA_SetConfig+0x254>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <DMA_SetConfig+0x1d0>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a23      	ldr	r2, [pc, #140]	@ (80072f4 <DMA_SetConfig+0x258>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d101      	bne.n	8007270 <DMA_SetConfig+0x1d4>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <DMA_SetConfig+0x1d6>
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d059      	beq.n	800732a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	223f      	movs	r2, #63	@ 0x3f
 8007280:	409a      	lsls	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007294:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b40      	cmp	r3, #64	@ 0x40
 80072a4:	d138      	bne.n	8007318 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072b6:	e086      	b.n	80073c6 <DMA_SetConfig+0x32a>
 80072b8:	40020010 	.word	0x40020010
 80072bc:	40020028 	.word	0x40020028
 80072c0:	40020040 	.word	0x40020040
 80072c4:	40020058 	.word	0x40020058
 80072c8:	40020070 	.word	0x40020070
 80072cc:	40020088 	.word	0x40020088
 80072d0:	400200a0 	.word	0x400200a0
 80072d4:	400200b8 	.word	0x400200b8
 80072d8:	40020410 	.word	0x40020410
 80072dc:	40020428 	.word	0x40020428
 80072e0:	40020440 	.word	0x40020440
 80072e4:	40020458 	.word	0x40020458
 80072e8:	40020470 	.word	0x40020470
 80072ec:	40020488 	.word	0x40020488
 80072f0:	400204a0 	.word	0x400204a0
 80072f4:	400204b8 	.word	0x400204b8
 80072f8:	58025408 	.word	0x58025408
 80072fc:	5802541c 	.word	0x5802541c
 8007300:	58025430 	.word	0x58025430
 8007304:	58025444 	.word	0x58025444
 8007308:	58025458 	.word	0x58025458
 800730c:	5802546c 	.word	0x5802546c
 8007310:	58025480 	.word	0x58025480
 8007314:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	60da      	str	r2, [r3, #12]
}
 8007328:	e04d      	b.n	80073c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a29      	ldr	r2, [pc, #164]	@ (80073d4 <DMA_SetConfig+0x338>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d022      	beq.n	800737a <DMA_SetConfig+0x2de>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a27      	ldr	r2, [pc, #156]	@ (80073d8 <DMA_SetConfig+0x33c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01d      	beq.n	800737a <DMA_SetConfig+0x2de>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a26      	ldr	r2, [pc, #152]	@ (80073dc <DMA_SetConfig+0x340>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <DMA_SetConfig+0x2de>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a24      	ldr	r2, [pc, #144]	@ (80073e0 <DMA_SetConfig+0x344>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <DMA_SetConfig+0x2de>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a23      	ldr	r2, [pc, #140]	@ (80073e4 <DMA_SetConfig+0x348>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <DMA_SetConfig+0x2de>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a21      	ldr	r2, [pc, #132]	@ (80073e8 <DMA_SetConfig+0x34c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <DMA_SetConfig+0x2de>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a20      	ldr	r2, [pc, #128]	@ (80073ec <DMA_SetConfig+0x350>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <DMA_SetConfig+0x2de>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1e      	ldr	r2, [pc, #120]	@ (80073f0 <DMA_SetConfig+0x354>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d101      	bne.n	800737e <DMA_SetConfig+0x2e2>
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <DMA_SetConfig+0x2e4>
 800737e:	2300      	movs	r3, #0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d020      	beq.n	80073c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007388:	f003 031f 	and.w	r3, r3, #31
 800738c:	2201      	movs	r2, #1
 800738e:	409a      	lsls	r2, r3
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	2b40      	cmp	r3, #64	@ 0x40
 80073a2:	d108      	bne.n	80073b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	60da      	str	r2, [r3, #12]
}
 80073b4:	e007      	b.n	80073c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	60da      	str	r2, [r3, #12]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	58025408 	.word	0x58025408
 80073d8:	5802541c 	.word	0x5802541c
 80073dc:	58025430 	.word	0x58025430
 80073e0:	58025444 	.word	0x58025444
 80073e4:	58025458 	.word	0x58025458
 80073e8:	5802546c 	.word	0x5802546c
 80073ec:	58025480 	.word	0x58025480
 80073f0:	58025494 	.word	0x58025494

080073f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a42      	ldr	r2, [pc, #264]	@ (800750c <DMA_CalcBaseAndBitshift+0x118>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d04a      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a41      	ldr	r2, [pc, #260]	@ (8007510 <DMA_CalcBaseAndBitshift+0x11c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d045      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a3f      	ldr	r2, [pc, #252]	@ (8007514 <DMA_CalcBaseAndBitshift+0x120>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d040      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a3e      	ldr	r2, [pc, #248]	@ (8007518 <DMA_CalcBaseAndBitshift+0x124>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d03b      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3c      	ldr	r2, [pc, #240]	@ (800751c <DMA_CalcBaseAndBitshift+0x128>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d036      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a3b      	ldr	r2, [pc, #236]	@ (8007520 <DMA_CalcBaseAndBitshift+0x12c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d031      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a39      	ldr	r2, [pc, #228]	@ (8007524 <DMA_CalcBaseAndBitshift+0x130>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d02c      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a38      	ldr	r2, [pc, #224]	@ (8007528 <DMA_CalcBaseAndBitshift+0x134>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d027      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a36      	ldr	r2, [pc, #216]	@ (800752c <DMA_CalcBaseAndBitshift+0x138>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d022      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a35      	ldr	r2, [pc, #212]	@ (8007530 <DMA_CalcBaseAndBitshift+0x13c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d01d      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a33      	ldr	r2, [pc, #204]	@ (8007534 <DMA_CalcBaseAndBitshift+0x140>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d018      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a32      	ldr	r2, [pc, #200]	@ (8007538 <DMA_CalcBaseAndBitshift+0x144>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a30      	ldr	r2, [pc, #192]	@ (800753c <DMA_CalcBaseAndBitshift+0x148>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00e      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a2f      	ldr	r2, [pc, #188]	@ (8007540 <DMA_CalcBaseAndBitshift+0x14c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d009      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a2d      	ldr	r2, [pc, #180]	@ (8007544 <DMA_CalcBaseAndBitshift+0x150>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xa8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2c      	ldr	r2, [pc, #176]	@ (8007548 <DMA_CalcBaseAndBitshift+0x154>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d101      	bne.n	80074a0 <DMA_CalcBaseAndBitshift+0xac>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <DMA_CalcBaseAndBitshift+0xae>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d024      	beq.n	80074f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	3b10      	subs	r3, #16
 80074ae:	4a27      	ldr	r2, [pc, #156]	@ (800754c <DMA_CalcBaseAndBitshift+0x158>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	091b      	lsrs	r3, r3, #4
 80074b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	4a24      	ldr	r2, [pc, #144]	@ (8007550 <DMA_CalcBaseAndBitshift+0x15c>)
 80074c0:	5cd3      	ldrb	r3, [r2, r3]
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d908      	bls.n	80074e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007554 <DMA_CalcBaseAndBitshift+0x160>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	1d1a      	adds	r2, r3, #4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80074de:	e00d      	b.n	80074fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007554 <DMA_CalcBaseAndBitshift+0x160>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80074ee:	e005      	b.n	80074fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40020010 	.word	0x40020010
 8007510:	40020028 	.word	0x40020028
 8007514:	40020040 	.word	0x40020040
 8007518:	40020058 	.word	0x40020058
 800751c:	40020070 	.word	0x40020070
 8007520:	40020088 	.word	0x40020088
 8007524:	400200a0 	.word	0x400200a0
 8007528:	400200b8 	.word	0x400200b8
 800752c:	40020410 	.word	0x40020410
 8007530:	40020428 	.word	0x40020428
 8007534:	40020440 	.word	0x40020440
 8007538:	40020458 	.word	0x40020458
 800753c:	40020470 	.word	0x40020470
 8007540:	40020488 	.word	0x40020488
 8007544:	400204a0 	.word	0x400204a0
 8007548:	400204b8 	.word	0x400204b8
 800754c:	aaaaaaab 	.word	0xaaaaaaab
 8007550:	0800fb58 	.word	0x0800fb58
 8007554:	fffffc00 	.word	0xfffffc00

08007558 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d120      	bne.n	80075ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007570:	2b03      	cmp	r3, #3
 8007572:	d858      	bhi.n	8007626 <DMA_CheckFifoParam+0xce>
 8007574:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <DMA_CheckFifoParam+0x24>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	0800758d 	.word	0x0800758d
 8007580:	0800759f 	.word	0x0800759f
 8007584:	0800758d 	.word	0x0800758d
 8007588:	08007627 	.word	0x08007627
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d048      	beq.n	800762a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800759c:	e045      	b.n	800762a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075a6:	d142      	bne.n	800762e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075ac:	e03f      	b.n	800762e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b6:	d123      	bne.n	8007600 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d838      	bhi.n	8007632 <DMA_CheckFifoParam+0xda>
 80075c0:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <DMA_CheckFifoParam+0x70>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	080075df 	.word	0x080075df
 80075d0:	080075d9 	.word	0x080075d9
 80075d4:	080075f1 	.word	0x080075f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
        break;
 80075dc:	e030      	b.n	8007640 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d025      	beq.n	8007636 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075ee:	e022      	b.n	8007636 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075f8:	d11f      	bne.n	800763a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075fe:	e01c      	b.n	800763a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	2b02      	cmp	r3, #2
 8007606:	d902      	bls.n	800760e <DMA_CheckFifoParam+0xb6>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d003      	beq.n	8007614 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800760c:	e018      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	73fb      	strb	r3, [r7, #15]
        break;
 8007612:	e015      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00e      	beq.n	800763e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
    break;
 8007624:	e00b      	b.n	800763e <DMA_CheckFifoParam+0xe6>
        break;
 8007626:	bf00      	nop
 8007628:	e00a      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
        break;
 800762a:	bf00      	nop
 800762c:	e008      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
        break;
 800762e:	bf00      	nop
 8007630:	e006      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
        break;
 8007632:	bf00      	nop
 8007634:	e004      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
        break;
 8007636:	bf00      	nop
 8007638:	e002      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
        break;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <DMA_CheckFifoParam+0xe8>
    break;
 800763e:	bf00      	nop
    }
  }

  return status;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop

08007650 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a38      	ldr	r2, [pc, #224]	@ (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d022      	beq.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a36      	ldr	r2, [pc, #216]	@ (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d01d      	beq.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a35      	ldr	r2, [pc, #212]	@ (800774c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d018      	beq.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a33      	ldr	r2, [pc, #204]	@ (8007750 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d013      	beq.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a32      	ldr	r2, [pc, #200]	@ (8007754 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00e      	beq.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a30      	ldr	r2, [pc, #192]	@ (8007758 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d009      	beq.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a2f      	ldr	r2, [pc, #188]	@ (800775c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d004      	beq.n	80076ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007760 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d101      	bne.n	80076b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076b2:	2300      	movs	r3, #0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01a      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	3b08      	subs	r3, #8
 80076c0:	4a28      	ldr	r2, [pc, #160]	@ (8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	091b      	lsrs	r3, r3, #4
 80076c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4b26      	ldr	r3, [pc, #152]	@ (8007768 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a24      	ldr	r2, [pc, #144]	@ (800776c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2201      	movs	r2, #1
 80076e6:	409a      	lsls	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076ec:	e024      	b.n	8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	3b10      	subs	r3, #16
 80076f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007770 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076f8:	fba2 2303 	umull	r2, r3, r2, r3
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4a1c      	ldr	r2, [pc, #112]	@ (8007774 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d806      	bhi.n	8007716 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4a1b      	ldr	r2, [pc, #108]	@ (8007778 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d902      	bls.n	8007716 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3308      	adds	r3, #8
 8007714:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4b18      	ldr	r3, [pc, #96]	@ (800777c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	461a      	mov	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a16      	ldr	r2, [pc, #88]	@ (8007780 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007728:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 031f 	and.w	r3, r3, #31
 8007730:	2201      	movs	r2, #1
 8007732:	409a      	lsls	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	58025408 	.word	0x58025408
 8007748:	5802541c 	.word	0x5802541c
 800774c:	58025430 	.word	0x58025430
 8007750:	58025444 	.word	0x58025444
 8007754:	58025458 	.word	0x58025458
 8007758:	5802546c 	.word	0x5802546c
 800775c:	58025480 	.word	0x58025480
 8007760:	58025494 	.word	0x58025494
 8007764:	cccccccd 	.word	0xcccccccd
 8007768:	16009600 	.word	0x16009600
 800776c:	58025880 	.word	0x58025880
 8007770:	aaaaaaab 	.word	0xaaaaaaab
 8007774:	400204b8 	.word	0x400204b8
 8007778:	4002040f 	.word	0x4002040f
 800777c:	10008200 	.word	0x10008200
 8007780:	40020880 	.word	0x40020880

08007784 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04a      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b08      	cmp	r3, #8
 800779e:	d847      	bhi.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a25      	ldr	r2, [pc, #148]	@ (800783c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d022      	beq.n	80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a24      	ldr	r2, [pc, #144]	@ (8007840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d01d      	beq.n	80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a22      	ldr	r2, [pc, #136]	@ (8007844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d018      	beq.n	80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a21      	ldr	r2, [pc, #132]	@ (8007848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d013      	beq.n	80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a1f      	ldr	r2, [pc, #124]	@ (800784c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00e      	beq.n	80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d009      	beq.n	80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d004      	beq.n	80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d101      	bne.n	80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077f4:	2300      	movs	r3, #0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4b17      	ldr	r3, [pc, #92]	@ (800785c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	461a      	mov	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a15      	ldr	r2, [pc, #84]	@ (8007860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800780c:	671a      	str	r2, [r3, #112]	@ 0x70
 800780e:	e009      	b.n	8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4b14      	ldr	r3, [pc, #80]	@ (8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	461a      	mov	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a11      	ldr	r2, [pc, #68]	@ (8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007822:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3b01      	subs	r3, #1
 8007828:	2201      	movs	r2, #1
 800782a:	409a      	lsls	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	58025408 	.word	0x58025408
 8007840:	5802541c 	.word	0x5802541c
 8007844:	58025430 	.word	0x58025430
 8007848:	58025444 	.word	0x58025444
 800784c:	58025458 	.word	0x58025458
 8007850:	5802546c 	.word	0x5802546c
 8007854:	58025480 	.word	0x58025480
 8007858:	58025494 	.word	0x58025494
 800785c:	1600963f 	.word	0x1600963f
 8007860:	58025940 	.word	0x58025940
 8007864:	1000823f 	.word	0x1000823f
 8007868:	40020940 	.word	0x40020940

0800786c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800786c:	b480      	push	{r7}
 800786e:	b089      	sub	sp, #36	@ 0x24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800787a:	4b86      	ldr	r3, [pc, #536]	@ (8007a94 <HAL_GPIO_Init+0x228>)
 800787c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800787e:	e18c      	b.n	8007b9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	2101      	movs	r1, #1
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	4013      	ands	r3, r2
 800788e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 817e 	beq.w	8007b94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d005      	beq.n	80078b0 <HAL_GPIO_Init+0x44>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d130      	bne.n	8007912 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	2203      	movs	r2, #3
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	43db      	mvns	r3, r3
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	4013      	ands	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078e6:	2201      	movs	r2, #1
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43db      	mvns	r3, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	4013      	ands	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	091b      	lsrs	r3, r3, #4
 80078fc:	f003 0201 	and.w	r2, r3, #1
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	4313      	orrs	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d017      	beq.n	800794e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	2203      	movs	r2, #3
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4013      	ands	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	fa02 f303 	lsl.w	r3, r2, r3
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	4313      	orrs	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d123      	bne.n	80079a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	08da      	lsrs	r2, r3, #3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3208      	adds	r2, #8
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	220f      	movs	r2, #15
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	43db      	mvns	r3, r3
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4013      	ands	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691a      	ldr	r2, [r3, #16]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4313      	orrs	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	08da      	lsrs	r2, r3, #3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3208      	adds	r2, #8
 800799c:	69b9      	ldr	r1, [r7, #24]
 800799e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	2203      	movs	r2, #3
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	4013      	ands	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f003 0203 	and.w	r2, r3, #3
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80d8 	beq.w	8007b94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079e4:	4b2c      	ldr	r3, [pc, #176]	@ (8007a98 <HAL_GPIO_Init+0x22c>)
 80079e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007a98 <HAL_GPIO_Init+0x22c>)
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80079f4:	4b28      	ldr	r3, [pc, #160]	@ (8007a98 <HAL_GPIO_Init+0x22c>)
 80079f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a02:	4a26      	ldr	r2, [pc, #152]	@ (8007a9c <HAL_GPIO_Init+0x230>)
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	089b      	lsrs	r3, r3, #2
 8007a08:	3302      	adds	r3, #2
 8007a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	220f      	movs	r2, #15
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4013      	ands	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <HAL_GPIO_Init+0x234>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d04a      	beq.n	8007ac4 <HAL_GPIO_Init+0x258>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1c      	ldr	r2, [pc, #112]	@ (8007aa4 <HAL_GPIO_Init+0x238>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d02b      	beq.n	8007a8e <HAL_GPIO_Init+0x222>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa8 <HAL_GPIO_Init+0x23c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d025      	beq.n	8007a8a <HAL_GPIO_Init+0x21e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a1a      	ldr	r2, [pc, #104]	@ (8007aac <HAL_GPIO_Init+0x240>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d01f      	beq.n	8007a86 <HAL_GPIO_Init+0x21a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a19      	ldr	r2, [pc, #100]	@ (8007ab0 <HAL_GPIO_Init+0x244>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d019      	beq.n	8007a82 <HAL_GPIO_Init+0x216>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a18      	ldr	r2, [pc, #96]	@ (8007ab4 <HAL_GPIO_Init+0x248>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_GPIO_Init+0x212>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a17      	ldr	r2, [pc, #92]	@ (8007ab8 <HAL_GPIO_Init+0x24c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00d      	beq.n	8007a7a <HAL_GPIO_Init+0x20e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a16      	ldr	r2, [pc, #88]	@ (8007abc <HAL_GPIO_Init+0x250>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <HAL_GPIO_Init+0x20a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a15      	ldr	r2, [pc, #84]	@ (8007ac0 <HAL_GPIO_Init+0x254>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d101      	bne.n	8007a72 <HAL_GPIO_Init+0x206>
 8007a6e:	2309      	movs	r3, #9
 8007a70:	e029      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a72:	230a      	movs	r3, #10
 8007a74:	e027      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a76:	2307      	movs	r3, #7
 8007a78:	e025      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a7a:	2306      	movs	r3, #6
 8007a7c:	e023      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a7e:	2305      	movs	r3, #5
 8007a80:	e021      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a82:	2304      	movs	r3, #4
 8007a84:	e01f      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a86:	2303      	movs	r3, #3
 8007a88:	e01d      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e01b      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e019      	b.n	8007ac6 <HAL_GPIO_Init+0x25a>
 8007a92:	bf00      	nop
 8007a94:	58000080 	.word	0x58000080
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	58000400 	.word	0x58000400
 8007aa0:	58020000 	.word	0x58020000
 8007aa4:	58020400 	.word	0x58020400
 8007aa8:	58020800 	.word	0x58020800
 8007aac:	58020c00 	.word	0x58020c00
 8007ab0:	58021000 	.word	0x58021000
 8007ab4:	58021400 	.word	0x58021400
 8007ab8:	58021800 	.word	0x58021800
 8007abc:	58021c00 	.word	0x58021c00
 8007ac0:	58022400 	.word	0x58022400
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	f002 0203 	and.w	r2, r2, #3
 8007acc:	0092      	lsls	r2, r2, #2
 8007ace:	4093      	lsls	r3, r2
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ad6:	4938      	ldr	r1, [pc, #224]	@ (8007bb8 <HAL_GPIO_Init+0x34c>)
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	089b      	lsrs	r3, r3, #2
 8007adc:	3302      	adds	r3, #2
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	43db      	mvns	r3, r3
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	4013      	ands	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	4013      	ands	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	43db      	mvns	r3, r3
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4013      	ands	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	3301      	adds	r3, #1
 8007b98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f47f ae6b 	bne.w	8007880 <HAL_GPIO_Init+0x14>
  }
}
 8007baa:	bf00      	nop
 8007bac:	bf00      	nop
 8007bae:	3724      	adds	r7, #36	@ 0x24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	58000400 	.word	0x58000400

08007bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	807b      	strh	r3, [r7, #2]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bcc:	787b      	ldrb	r3, [r7, #1]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bd2:	887a      	ldrh	r2, [r7, #2]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007bd8:	e003      	b.n	8007be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007bda:	887b      	ldrh	r3, [r7, #2]
 8007bdc:	041a      	lsls	r2, r3, #16
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	619a      	str	r2, [r3, #24]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c00:	887a      	ldrh	r2, [r7, #2]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4013      	ands	r3, r2
 8007c06:	041a      	lsls	r2, r3, #16
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	43d9      	mvns	r1, r3
 8007c0c:	887b      	ldrh	r3, [r7, #2]
 8007c0e:	400b      	ands	r3, r1
 8007c10:	431a      	orrs	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	619a      	str	r2, [r3, #24]
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	4603      	mov	r3, r0
 8007c2a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	4013      	ands	r3, r2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d008      	beq.n	8007c4e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c40:	88fb      	ldrh	r3, [r7, #6]
 8007c42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c46:	88fb      	ldrh	r3, [r7, #6]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7f9 f993 	bl	8000f74 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c60:	4b19      	ldr	r3, [pc, #100]	@ (8007cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d00a      	beq.n	8007c82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c6c:	4b16      	ldr	r3, [pc, #88]	@ (8007cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d001      	beq.n	8007c7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e01f      	b.n	8007cbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e01d      	b.n	8007cbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c82:	4b11      	ldr	r3, [pc, #68]	@ (8007cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f023 0207 	bic.w	r2, r3, #7
 8007c8a:	490f      	ldr	r1, [pc, #60]	@ (8007cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c92:	f7fa fdb5 	bl	8002800 <HAL_GetTick>
 8007c96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c98:	e009      	b.n	8007cae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c9a:	f7fa fdb1 	bl	8002800 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ca8:	d901      	bls.n	8007cae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e007      	b.n	8007cbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cae:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cba:	d1ee      	bne.n	8007c9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	58024800 	.word	0x58024800

08007ccc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	@ 0x30
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e3c8      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 8087 	beq.w	8007dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cec:	4b88      	ldr	r3, [pc, #544]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cf6:	4b86      	ldr	r3, [pc, #536]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d007      	beq.n	8007d12 <HAL_RCC_OscConfig+0x46>
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	2b18      	cmp	r3, #24
 8007d06:	d110      	bne.n	8007d2a <HAL_RCC_OscConfig+0x5e>
 8007d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d10b      	bne.n	8007d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d12:	4b7f      	ldr	r3, [pc, #508]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d06c      	beq.n	8007df8 <HAL_RCC_OscConfig+0x12c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d168      	bne.n	8007df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e3a2      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d32:	d106      	bne.n	8007d42 <HAL_RCC_OscConfig+0x76>
 8007d34:	4b76      	ldr	r3, [pc, #472]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a75      	ldr	r2, [pc, #468]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	e02e      	b.n	8007da0 <HAL_RCC_OscConfig+0xd4>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCC_OscConfig+0x98>
 8007d4a:	4b71      	ldr	r3, [pc, #452]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a70      	ldr	r2, [pc, #448]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	4b6e      	ldr	r3, [pc, #440]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e01d      	b.n	8007da0 <HAL_RCC_OscConfig+0xd4>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d6c:	d10c      	bne.n	8007d88 <HAL_RCC_OscConfig+0xbc>
 8007d6e:	4b68      	ldr	r3, [pc, #416]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a67      	ldr	r2, [pc, #412]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	4b65      	ldr	r3, [pc, #404]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a64      	ldr	r2, [pc, #400]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	e00b      	b.n	8007da0 <HAL_RCC_OscConfig+0xd4>
 8007d88:	4b61      	ldr	r3, [pc, #388]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a60      	ldr	r2, [pc, #384]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	4b5e      	ldr	r3, [pc, #376]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a5d      	ldr	r2, [pc, #372]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d013      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fa fd2a 	bl	8002800 <HAL_GetTick>
 8007dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007db0:	f7fa fd26 	bl	8002800 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b64      	cmp	r3, #100	@ 0x64
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e356      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dc2:	4b53      	ldr	r3, [pc, #332]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <HAL_RCC_OscConfig+0xe4>
 8007dce:	e014      	b.n	8007dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fa fd16 	bl	8002800 <HAL_GetTick>
 8007dd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dd8:	f7fa fd12 	bl	8002800 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b64      	cmp	r3, #100	@ 0x64
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e342      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dea:	4b49      	ldr	r3, [pc, #292]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x10c>
 8007df6:	e000      	b.n	8007dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 808c 	beq.w	8007f20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e08:	4b41      	ldr	r3, [pc, #260]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e12:	4b3f      	ldr	r3, [pc, #252]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <HAL_RCC_OscConfig+0x162>
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	2b18      	cmp	r3, #24
 8007e22:	d137      	bne.n	8007e94 <HAL_RCC_OscConfig+0x1c8>
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d132      	bne.n	8007e94 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e2e:	4b38      	ldr	r3, [pc, #224]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0304 	and.w	r3, r3, #4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <HAL_RCC_OscConfig+0x17a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e314      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e46:	4b32      	ldr	r3, [pc, #200]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f023 0219 	bic.w	r2, r3, #25
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	492f      	ldr	r1, [pc, #188]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e58:	f7fa fcd2 	bl	8002800 <HAL_GetTick>
 8007e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e60:	f7fa fcce 	bl	8002800 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e2fe      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e72:	4b27      	ldr	r3, [pc, #156]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0f0      	beq.n	8007e60 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e7e:	4b24      	ldr	r3, [pc, #144]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	061b      	lsls	r3, r3, #24
 8007e8c:	4920      	ldr	r1, [pc, #128]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e92:	e045      	b.n	8007f20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d026      	beq.n	8007eea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f023 0219 	bic.w	r2, r3, #25
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4919      	ldr	r1, [pc, #100]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eae:	f7fa fca7 	bl	8002800 <HAL_GetTick>
 8007eb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb4:	e008      	b.n	8007ec8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eb6:	f7fa fca3 	bl	8002800 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e2d3      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ec8:	4b11      	ldr	r3, [pc, #68]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0f0      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	061b      	lsls	r3, r3, #24
 8007ee2:	490b      	ldr	r1, [pc, #44]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	604b      	str	r3, [r1, #4]
 8007ee8:	e01a      	b.n	8007f20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eea:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a08      	ldr	r2, [pc, #32]	@ (8007f10 <HAL_RCC_OscConfig+0x244>)
 8007ef0:	f023 0301 	bic.w	r3, r3, #1
 8007ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef6:	f7fa fc83 	bl	8002800 <HAL_GetTick>
 8007efa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007efc:	e00a      	b.n	8007f14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007efe:	f7fa fc7f 	bl	8002800 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d903      	bls.n	8007f14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e2af      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
 8007f10:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f14:	4b96      	ldr	r3, [pc, #600]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1ee      	bne.n	8007efe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d06a      	beq.n	8008002 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f2c:	4b90      	ldr	r3, [pc, #576]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f36:	4b8e      	ldr	r3, [pc, #568]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b08      	cmp	r3, #8
 8007f40:	d007      	beq.n	8007f52 <HAL_RCC_OscConfig+0x286>
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b18      	cmp	r3, #24
 8007f46:	d11b      	bne.n	8007f80 <HAL_RCC_OscConfig+0x2b4>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d116      	bne.n	8007f80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f52:	4b87      	ldr	r3, [pc, #540]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d005      	beq.n	8007f6a <HAL_RCC_OscConfig+0x29e>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	2b80      	cmp	r3, #128	@ 0x80
 8007f64:	d001      	beq.n	8007f6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e282      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f6a:	4b81      	ldr	r3, [pc, #516]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	061b      	lsls	r3, r3, #24
 8007f78:	497d      	ldr	r1, [pc, #500]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f7e:	e040      	b.n	8008002 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d023      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f88:	4b79      	ldr	r3, [pc, #484]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a78      	ldr	r2, [pc, #480]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f94:	f7fa fc34 	bl	8002800 <HAL_GetTick>
 8007f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007f9c:	f7fa fc30 	bl	8002800 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e260      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fae:	4b70      	ldr	r3, [pc, #448]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f0      	beq.n	8007f9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fba:	4b6d      	ldr	r3, [pc, #436]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	061b      	lsls	r3, r3, #24
 8007fc8:	4969      	ldr	r1, [pc, #420]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60cb      	str	r3, [r1, #12]
 8007fce:	e018      	b.n	8008002 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007fd0:	4b67      	ldr	r3, [pc, #412]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a66      	ldr	r2, [pc, #408]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fa fc10 	bl	8002800 <HAL_GetTick>
 8007fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007fe4:	f7fa fc0c 	bl	8002800 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e23c      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ff6:	4b5e      	ldr	r3, [pc, #376]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f0      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d036      	beq.n	800807c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d019      	beq.n	800804a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008016:	4b56      	ldr	r3, [pc, #344]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800801a:	4a55      	ldr	r2, [pc, #340]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 800801c:	f043 0301 	orr.w	r3, r3, #1
 8008020:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008022:	f7fa fbed 	bl	8002800 <HAL_GetTick>
 8008026:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008028:	e008      	b.n	800803c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800802a:	f7fa fbe9 	bl	8002800 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	2b02      	cmp	r3, #2
 8008036:	d901      	bls.n	800803c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e219      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800803c:	4b4c      	ldr	r3, [pc, #304]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 800803e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0f0      	beq.n	800802a <HAL_RCC_OscConfig+0x35e>
 8008048:	e018      	b.n	800807c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800804a:	4b49      	ldr	r3, [pc, #292]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 800804c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804e:	4a48      	ldr	r2, [pc, #288]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008050:	f023 0301 	bic.w	r3, r3, #1
 8008054:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008056:	f7fa fbd3 	bl	8002800 <HAL_GetTick>
 800805a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800805c:	e008      	b.n	8008070 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800805e:	f7fa fbcf 	bl	8002800 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e1ff      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008070:	4b3f      	ldr	r3, [pc, #252]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f0      	bne.n	800805e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b00      	cmp	r3, #0
 8008086:	d036      	beq.n	80080f6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d019      	beq.n	80080c4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008090:	4b37      	ldr	r3, [pc, #220]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a36      	ldr	r2, [pc, #216]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008096:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800809a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800809c:	f7fa fbb0 	bl	8002800 <HAL_GetTick>
 80080a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080a2:	e008      	b.n	80080b6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080a4:	f7fa fbac 	bl	8002800 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e1dc      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080b6:	4b2e      	ldr	r3, [pc, #184]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0f0      	beq.n	80080a4 <HAL_RCC_OscConfig+0x3d8>
 80080c2:	e018      	b.n	80080f6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080c4:	4b2a      	ldr	r3, [pc, #168]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a29      	ldr	r2, [pc, #164]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 80080ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080d0:	f7fa fb96 	bl	8002800 <HAL_GetTick>
 80080d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080d8:	f7fa fb92 	bl	8002800 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e1c2      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080ea:	4b21      	ldr	r3, [pc, #132]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8086 	beq.w	8008210 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008104:	4b1b      	ldr	r3, [pc, #108]	@ (8008174 <HAL_RCC_OscConfig+0x4a8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1a      	ldr	r2, [pc, #104]	@ (8008174 <HAL_RCC_OscConfig+0x4a8>)
 800810a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800810e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008110:	f7fa fb76 	bl	8002800 <HAL_GetTick>
 8008114:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008118:	f7fa fb72 	bl	8002800 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	@ 0x64
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e1a2      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800812a:	4b12      	ldr	r3, [pc, #72]	@ (8008174 <HAL_RCC_OscConfig+0x4a8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f0      	beq.n	8008118 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d106      	bne.n	800814c <HAL_RCC_OscConfig+0x480>
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008142:	4a0b      	ldr	r2, [pc, #44]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	6713      	str	r3, [r2, #112]	@ 0x70
 800814a:	e032      	b.n	80081b2 <HAL_RCC_OscConfig+0x4e6>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d111      	bne.n	8008178 <HAL_RCC_OscConfig+0x4ac>
 8008154:	4b06      	ldr	r3, [pc, #24]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008158:	4a05      	ldr	r2, [pc, #20]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 800815a:	f023 0301 	bic.w	r3, r3, #1
 800815e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008160:	4b03      	ldr	r3, [pc, #12]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008164:	4a02      	ldr	r2, [pc, #8]	@ (8008170 <HAL_RCC_OscConfig+0x4a4>)
 8008166:	f023 0304 	bic.w	r3, r3, #4
 800816a:	6713      	str	r3, [r2, #112]	@ 0x70
 800816c:	e021      	b.n	80081b2 <HAL_RCC_OscConfig+0x4e6>
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400
 8008174:	58024800 	.word	0x58024800
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b05      	cmp	r3, #5
 800817e:	d10c      	bne.n	800819a <HAL_RCC_OscConfig+0x4ce>
 8008180:	4b83      	ldr	r3, [pc, #524]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008184:	4a82      	ldr	r2, [pc, #520]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008186:	f043 0304 	orr.w	r3, r3, #4
 800818a:	6713      	str	r3, [r2, #112]	@ 0x70
 800818c:	4b80      	ldr	r3, [pc, #512]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800818e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008190:	4a7f      	ldr	r2, [pc, #508]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008192:	f043 0301 	orr.w	r3, r3, #1
 8008196:	6713      	str	r3, [r2, #112]	@ 0x70
 8008198:	e00b      	b.n	80081b2 <HAL_RCC_OscConfig+0x4e6>
 800819a:	4b7d      	ldr	r3, [pc, #500]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819e:	4a7c      	ldr	r2, [pc, #496]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80081a6:	4b7a      	ldr	r3, [pc, #488]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081aa:	4a79      	ldr	r2, [pc, #484]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80081ac:	f023 0304 	bic.w	r3, r3, #4
 80081b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d015      	beq.n	80081e6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ba:	f7fa fb21 	bl	8002800 <HAL_GetTick>
 80081be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081c0:	e00a      	b.n	80081d8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081c2:	f7fa fb1d 	bl	8002800 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e14b      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081d8:	4b6d      	ldr	r3, [pc, #436]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80081da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0ee      	beq.n	80081c2 <HAL_RCC_OscConfig+0x4f6>
 80081e4:	e014      	b.n	8008210 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e6:	f7fa fb0b 	bl	8002800 <HAL_GetTick>
 80081ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081ec:	e00a      	b.n	8008204 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ee:	f7fa fb07 	bl	8002800 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d901      	bls.n	8008204 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e135      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008204:	4b62      	ldr	r3, [pc, #392]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1ee      	bne.n	80081ee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 812a 	beq.w	800846e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800821a:	4b5d      	ldr	r3, [pc, #372]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008222:	2b18      	cmp	r3, #24
 8008224:	f000 80ba 	beq.w	800839c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822c:	2b02      	cmp	r3, #2
 800822e:	f040 8095 	bne.w	800835c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008232:	4b57      	ldr	r3, [pc, #348]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a56      	ldr	r2, [pc, #344]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800823c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823e:	f7fa fadf 	bl	8002800 <HAL_GetTick>
 8008242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008244:	e008      	b.n	8008258 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008246:	f7fa fadb 	bl	8002800 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e10b      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008258:	4b4d      	ldr	r3, [pc, #308]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1f0      	bne.n	8008246 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008264:	4b4a      	ldr	r3, [pc, #296]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008268:	4b4a      	ldr	r3, [pc, #296]	@ (8008394 <HAL_RCC_OscConfig+0x6c8>)
 800826a:	4013      	ands	r3, r2
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008274:	0112      	lsls	r2, r2, #4
 8008276:	430a      	orrs	r2, r1
 8008278:	4945      	ldr	r1, [pc, #276]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800827a:	4313      	orrs	r3, r2
 800827c:	628b      	str	r3, [r1, #40]	@ 0x28
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	3b01      	subs	r3, #1
 8008284:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800828c:	3b01      	subs	r3, #1
 800828e:	025b      	lsls	r3, r3, #9
 8008290:	b29b      	uxth	r3, r3
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	3b01      	subs	r3, #1
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a6:	3b01      	subs	r3, #1
 80082a8:	061b      	lsls	r3, r3, #24
 80082aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082ae:	4938      	ldr	r1, [pc, #224]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80082b4:	4b36      	ldr	r3, [pc, #216]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	4a35      	ldr	r2, [pc, #212]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082ba:	f023 0301 	bic.w	r3, r3, #1
 80082be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082c0:	4b33      	ldr	r3, [pc, #204]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082c4:	4b34      	ldr	r3, [pc, #208]	@ (8008398 <HAL_RCC_OscConfig+0x6cc>)
 80082c6:	4013      	ands	r3, r2
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082cc:	00d2      	lsls	r2, r2, #3
 80082ce:	4930      	ldr	r1, [pc, #192]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80082d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	f023 020c 	bic.w	r2, r3, #12
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e0:	492b      	ldr	r1, [pc, #172]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80082e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	f023 0202 	bic.w	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f2:	4927      	ldr	r1, [pc, #156]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80082f8:	4b25      	ldr	r3, [pc, #148]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fc:	4a24      	ldr	r2, [pc, #144]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 80082fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008304:	4b22      	ldr	r3, [pc, #136]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	4a21      	ldr	r2, [pc, #132]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800830a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800830e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008310:	4b1f      	ldr	r3, [pc, #124]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008314:	4a1e      	ldr	r2, [pc, #120]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008316:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800831a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800831c:	4b1c      	ldr	r3, [pc, #112]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	4a1b      	ldr	r2, [pc, #108]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008322:	f043 0301 	orr.w	r3, r3, #1
 8008326:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008328:	4b19      	ldr	r3, [pc, #100]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a18      	ldr	r2, [pc, #96]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800832e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008334:	f7fa fa64 	bl	8002800 <HAL_GetTick>
 8008338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800833a:	e008      	b.n	800834e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800833c:	f7fa fa60 	bl	8002800 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d901      	bls.n	800834e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e090      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800834e:	4b10      	ldr	r3, [pc, #64]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0f0      	beq.n	800833c <HAL_RCC_OscConfig+0x670>
 800835a:	e088      	b.n	800846e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835c:	4b0c      	ldr	r3, [pc, #48]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a0b      	ldr	r2, [pc, #44]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008368:	f7fa fa4a 	bl	8002800 <HAL_GetTick>
 800836c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800836e:	e008      	b.n	8008382 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008370:	f7fa fa46 	bl	8002800 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e076      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008382:	4b03      	ldr	r3, [pc, #12]	@ (8008390 <HAL_RCC_OscConfig+0x6c4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f0      	bne.n	8008370 <HAL_RCC_OscConfig+0x6a4>
 800838e:	e06e      	b.n	800846e <HAL_RCC_OscConfig+0x7a2>
 8008390:	58024400 	.word	0x58024400
 8008394:	fffffc0c 	.word	0xfffffc0c
 8008398:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800839c:	4b36      	ldr	r3, [pc, #216]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083a2:	4b35      	ldr	r3, [pc, #212]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 80083a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d031      	beq.n	8008414 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f003 0203 	and.w	r2, r3, #3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d12a      	bne.n	8008414 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d122      	bne.n	8008414 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083da:	429a      	cmp	r2, r3
 80083dc:	d11a      	bne.n	8008414 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	0a5b      	lsrs	r3, r3, #9
 80083e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d111      	bne.n	8008414 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083fe:	429a      	cmp	r2, r3
 8008400:	d108      	bne.n	8008414 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	0e1b      	lsrs	r3, r3, #24
 8008406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008410:	429a      	cmp	r2, r3
 8008412:	d001      	beq.n	8008418 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e02b      	b.n	8008470 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008418:	4b17      	ldr	r3, [pc, #92]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 800841a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800841c:	08db      	lsrs	r3, r3, #3
 800841e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008422:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	d01f      	beq.n	800846e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800842e:	4b12      	ldr	r3, [pc, #72]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 8008430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008432:	4a11      	ldr	r2, [pc, #68]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800843a:	f7fa f9e1 	bl	8002800 <HAL_GetTick>
 800843e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008440:	bf00      	nop
 8008442:	f7fa f9dd 	bl	8002800 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	4293      	cmp	r3, r2
 800844c:	d0f9      	beq.n	8008442 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800844e:	4b0a      	ldr	r3, [pc, #40]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 8008450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008452:	4b0a      	ldr	r3, [pc, #40]	@ (800847c <HAL_RCC_OscConfig+0x7b0>)
 8008454:	4013      	ands	r3, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800845a:	00d2      	lsls	r2, r2, #3
 800845c:	4906      	ldr	r1, [pc, #24]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 800845e:	4313      	orrs	r3, r2
 8008460:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008462:	4b05      	ldr	r3, [pc, #20]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 8008464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008466:	4a04      	ldr	r2, [pc, #16]	@ (8008478 <HAL_RCC_OscConfig+0x7ac>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3730      	adds	r7, #48	@ 0x30
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	58024400 	.word	0x58024400
 800847c:	ffff0007 	.word	0xffff0007

08008480 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e19c      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008494:	4b8a      	ldr	r3, [pc, #552]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d910      	bls.n	80084c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084a2:	4b87      	ldr	r3, [pc, #540]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f023 020f 	bic.w	r2, r3, #15
 80084aa:	4985      	ldr	r1, [pc, #532]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b2:	4b83      	ldr	r3, [pc, #524]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d001      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e184      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d010      	beq.n	80084f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	4b7b      	ldr	r3, [pc, #492]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084dc:	429a      	cmp	r2, r3
 80084de:	d908      	bls.n	80084f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084e0:	4b78      	ldr	r3, [pc, #480]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	4975      	ldr	r1, [pc, #468]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0308 	and.w	r3, r3, #8
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d010      	beq.n	8008520 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695a      	ldr	r2, [r3, #20]
 8008502:	4b70      	ldr	r3, [pc, #448]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800850a:	429a      	cmp	r2, r3
 800850c:	d908      	bls.n	8008520 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800850e:	4b6d      	ldr	r3, [pc, #436]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	496a      	ldr	r1, [pc, #424]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800851c:	4313      	orrs	r3, r2
 800851e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d010      	beq.n	800854e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699a      	ldr	r2, [r3, #24]
 8008530:	4b64      	ldr	r3, [pc, #400]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008538:	429a      	cmp	r2, r3
 800853a:	d908      	bls.n	800854e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800853c:	4b61      	ldr	r3, [pc, #388]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	495e      	ldr	r1, [pc, #376]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800854a:	4313      	orrs	r3, r2
 800854c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d010      	beq.n	800857c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69da      	ldr	r2, [r3, #28]
 800855e:	4b59      	ldr	r3, [pc, #356]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008566:	429a      	cmp	r2, r3
 8008568:	d908      	bls.n	800857c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800856a:	4b56      	ldr	r3, [pc, #344]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	4953      	ldr	r1, [pc, #332]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008578:	4313      	orrs	r3, r2
 800857a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d010      	beq.n	80085aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	4b4d      	ldr	r3, [pc, #308]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	429a      	cmp	r2, r3
 8008596:	d908      	bls.n	80085aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008598:	4b4a      	ldr	r3, [pc, #296]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	f023 020f 	bic.w	r2, r3, #15
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	4947      	ldr	r1, [pc, #284]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d055      	beq.n	8008662 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085b6:	4b43      	ldr	r3, [pc, #268]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	4940      	ldr	r1, [pc, #256]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d107      	bne.n	80085e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085d0:	4b3c      	ldr	r3, [pc, #240]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d121      	bne.n	8008620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e0f6      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d107      	bne.n	80085f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085e8:	4b36      	ldr	r3, [pc, #216]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d115      	bne.n	8008620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e0ea      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d107      	bne.n	8008610 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008600:	4b30      	ldr	r3, [pc, #192]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	d109      	bne.n	8008620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0de      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008610:	4b2c      	ldr	r3, [pc, #176]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e0d6      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008620:	4b28      	ldr	r3, [pc, #160]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f023 0207 	bic.w	r2, r3, #7
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	4925      	ldr	r1, [pc, #148]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800862e:	4313      	orrs	r3, r2
 8008630:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008632:	f7fa f8e5 	bl	8002800 <HAL_GetTick>
 8008636:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008638:	e00a      	b.n	8008650 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800863a:	f7fa f8e1 	bl	8002800 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008648:	4293      	cmp	r3, r2
 800864a:	d901      	bls.n	8008650 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e0be      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008650:	4b1c      	ldr	r3, [pc, #112]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	429a      	cmp	r2, r3
 8008660:	d1eb      	bne.n	800863a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d010      	beq.n	8008690 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	4b14      	ldr	r3, [pc, #80]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	429a      	cmp	r2, r3
 800867c:	d208      	bcs.n	8008690 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800867e:	4b11      	ldr	r3, [pc, #68]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f023 020f 	bic.w	r2, r3, #15
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	490e      	ldr	r1, [pc, #56]	@ (80086c4 <HAL_RCC_ClockConfig+0x244>)
 800868c:	4313      	orrs	r3, r2
 800868e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008690:	4b0b      	ldr	r3, [pc, #44]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d214      	bcs.n	80086c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800869e:	4b08      	ldr	r3, [pc, #32]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f023 020f 	bic.w	r2, r3, #15
 80086a6:	4906      	ldr	r1, [pc, #24]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ae:	4b04      	ldr	r3, [pc, #16]	@ (80086c0 <HAL_RCC_ClockConfig+0x240>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d005      	beq.n	80086c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e086      	b.n	80087ce <HAL_RCC_ClockConfig+0x34e>
 80086c0:	52002000 	.word	0x52002000
 80086c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d010      	beq.n	80086f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	4b3f      	ldr	r3, [pc, #252]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d208      	bcs.n	80086f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086e4:	4b3c      	ldr	r3, [pc, #240]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	4939      	ldr	r1, [pc, #228]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d010      	beq.n	8008724 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	695a      	ldr	r2, [r3, #20]
 8008706:	4b34      	ldr	r3, [pc, #208]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800870e:	429a      	cmp	r2, r3
 8008710:	d208      	bcs.n	8008724 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008712:	4b31      	ldr	r3, [pc, #196]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	492e      	ldr	r1, [pc, #184]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008720:	4313      	orrs	r3, r2
 8008722:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d010      	beq.n	8008752 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699a      	ldr	r2, [r3, #24]
 8008734:	4b28      	ldr	r3, [pc, #160]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800873c:	429a      	cmp	r2, r3
 800873e:	d208      	bcs.n	8008752 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008740:	4b25      	ldr	r3, [pc, #148]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	4922      	ldr	r1, [pc, #136]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 800874e:	4313      	orrs	r3, r2
 8008750:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d010      	beq.n	8008780 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69da      	ldr	r2, [r3, #28]
 8008762:	4b1d      	ldr	r3, [pc, #116]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800876a:	429a      	cmp	r2, r3
 800876c:	d208      	bcs.n	8008780 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800876e:	4b1a      	ldr	r3, [pc, #104]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	4917      	ldr	r1, [pc, #92]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 800877c:	4313      	orrs	r3, r2
 800877e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008780:	f000 f834 	bl	80087ec <HAL_RCC_GetSysClockFreq>
 8008784:	4602      	mov	r2, r0
 8008786:	4b14      	ldr	r3, [pc, #80]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	0a1b      	lsrs	r3, r3, #8
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	4912      	ldr	r1, [pc, #72]	@ (80087dc <HAL_RCC_ClockConfig+0x35c>)
 8008792:	5ccb      	ldrb	r3, [r1, r3]
 8008794:	f003 031f 	and.w	r3, r3, #31
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800879e:	4b0e      	ldr	r3, [pc, #56]	@ (80087d8 <HAL_RCC_ClockConfig+0x358>)
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	4a0d      	ldr	r2, [pc, #52]	@ (80087dc <HAL_RCC_ClockConfig+0x35c>)
 80087a8:	5cd3      	ldrb	r3, [r2, r3]
 80087aa:	f003 031f 	and.w	r3, r3, #31
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	fa22 f303 	lsr.w	r3, r2, r3
 80087b4:	4a0a      	ldr	r2, [pc, #40]	@ (80087e0 <HAL_RCC_ClockConfig+0x360>)
 80087b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087b8:	4a0a      	ldr	r2, [pc, #40]	@ (80087e4 <HAL_RCC_ClockConfig+0x364>)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80087be:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <HAL_RCC_ClockConfig+0x368>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f9 ffd2 	bl	800276c <HAL_InitTick>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	58024400 	.word	0x58024400
 80087dc:	0800fb48 	.word	0x0800fb48
 80087e0:	24000058 	.word	0x24000058
 80087e4:	24000054 	.word	0x24000054
 80087e8:	2400005c 	.word	0x2400005c

080087ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b089      	sub	sp, #36	@ 0x24
 80087f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087f2:	4bb3      	ldr	r3, [pc, #716]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087fa:	2b18      	cmp	r3, #24
 80087fc:	f200 8155 	bhi.w	8008aaa <HAL_RCC_GetSysClockFreq+0x2be>
 8008800:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800886d 	.word	0x0800886d
 800880c:	08008aab 	.word	0x08008aab
 8008810:	08008aab 	.word	0x08008aab
 8008814:	08008aab 	.word	0x08008aab
 8008818:	08008aab 	.word	0x08008aab
 800881c:	08008aab 	.word	0x08008aab
 8008820:	08008aab 	.word	0x08008aab
 8008824:	08008aab 	.word	0x08008aab
 8008828:	08008893 	.word	0x08008893
 800882c:	08008aab 	.word	0x08008aab
 8008830:	08008aab 	.word	0x08008aab
 8008834:	08008aab 	.word	0x08008aab
 8008838:	08008aab 	.word	0x08008aab
 800883c:	08008aab 	.word	0x08008aab
 8008840:	08008aab 	.word	0x08008aab
 8008844:	08008aab 	.word	0x08008aab
 8008848:	08008899 	.word	0x08008899
 800884c:	08008aab 	.word	0x08008aab
 8008850:	08008aab 	.word	0x08008aab
 8008854:	08008aab 	.word	0x08008aab
 8008858:	08008aab 	.word	0x08008aab
 800885c:	08008aab 	.word	0x08008aab
 8008860:	08008aab 	.word	0x08008aab
 8008864:	08008aab 	.word	0x08008aab
 8008868:	0800889f 	.word	0x0800889f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800886c:	4b94      	ldr	r3, [pc, #592]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0320 	and.w	r3, r3, #32
 8008874:	2b00      	cmp	r3, #0
 8008876:	d009      	beq.n	800888c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008878:	4b91      	ldr	r3, [pc, #580]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	08db      	lsrs	r3, r3, #3
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	4a90      	ldr	r2, [pc, #576]	@ (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
 8008888:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800888a:	e111      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800888c:	4b8d      	ldr	r3, [pc, #564]	@ (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800888e:	61bb      	str	r3, [r7, #24]
      break;
 8008890:	e10e      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008892:	4b8d      	ldr	r3, [pc, #564]	@ (8008ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008894:	61bb      	str	r3, [r7, #24]
      break;
 8008896:	e10b      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008898:	4b8c      	ldr	r3, [pc, #560]	@ (8008acc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800889a:	61bb      	str	r3, [r7, #24]
      break;
 800889c:	e108      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800889e:	4b88      	ldr	r3, [pc, #544]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80088a8:	4b85      	ldr	r3, [pc, #532]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	091b      	lsrs	r3, r3, #4
 80088ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088b4:	4b82      	ldr	r3, [pc, #520]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80088be:	4b80      	ldr	r3, [pc, #512]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c2:	08db      	lsrs	r3, r3, #3
 80088c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	fb02 f303 	mul.w	r3, r2, r3
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 80e1 	beq.w	8008aa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	f000 8083 	beq.w	80089f0 <HAL_RCC_GetSysClockFreq+0x204>
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	f200 80a1 	bhi.w	8008a34 <HAL_RCC_GetSysClockFreq+0x248>
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <HAL_RCC_GetSysClockFreq+0x114>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d056      	beq.n	80089ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80088fe:	e099      	b.n	8008a34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008900:	4b6f      	ldr	r3, [pc, #444]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0320 	and.w	r3, r3, #32
 8008908:	2b00      	cmp	r3, #0
 800890a:	d02d      	beq.n	8008968 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800890c:	4b6c      	ldr	r3, [pc, #432]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	08db      	lsrs	r3, r3, #3
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	4a6b      	ldr	r2, [pc, #428]	@ (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
 800891c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008936:	4b62      	ldr	r3, [pc, #392]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008946:	ed97 6a02 	vldr	s12, [r7, #8]
 800894a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800894e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800895a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008962:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008966:	e087      	b.n	8008a78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008972:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008ad4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897a:	4b51      	ldr	r3, [pc, #324]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898a:	ed97 6a02 	vldr	s12, [r7, #8]
 800898e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800899e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089aa:	e065      	b.n	8008a78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80089ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089be:	4b40      	ldr	r3, [pc, #256]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80089d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089ee:	e043      	b.n	8008a78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008adc <HAL_RCC_GetSysClockFreq+0x2f0>
 80089fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a02:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a16:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a32:	e021      	b.n	8008a78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a46:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a5a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008a78:	4b11      	ldr	r3, [pc, #68]	@ (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7c:	0a5b      	lsrs	r3, r3, #9
 8008a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a82:	3301      	adds	r3, #1
 8008a84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a9c:	ee17 3a90 	vmov	r3, s15
 8008aa0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008aa2:	e005      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61bb      	str	r3, [r7, #24]
      break;
 8008aa8:	e002      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008aaa:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008aac:	61bb      	str	r3, [r7, #24]
      break;
 8008aae:	bf00      	nop
  }

  return sysclockfreq;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3724      	adds	r7, #36	@ 0x24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	58024400 	.word	0x58024400
 8008ac4:	03d09000 	.word	0x03d09000
 8008ac8:	003d0900 	.word	0x003d0900
 8008acc:	017d7840 	.word	0x017d7840
 8008ad0:	46000000 	.word	0x46000000
 8008ad4:	4c742400 	.word	0x4c742400
 8008ad8:	4a742400 	.word	0x4a742400
 8008adc:	4bbebc20 	.word	0x4bbebc20

08008ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ae6:	f7ff fe81 	bl	80087ec <HAL_RCC_GetSysClockFreq>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <HAL_RCC_GetHCLKFreq+0x50>)
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	0a1b      	lsrs	r3, r3, #8
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	490f      	ldr	r1, [pc, #60]	@ (8008b34 <HAL_RCC_GetHCLKFreq+0x54>)
 8008af8:	5ccb      	ldrb	r3, [r1, r3]
 8008afa:	f003 031f 	and.w	r3, r3, #31
 8008afe:	fa22 f303 	lsr.w	r3, r2, r3
 8008b02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b04:	4b0a      	ldr	r3, [pc, #40]	@ (8008b30 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	4a09      	ldr	r2, [pc, #36]	@ (8008b34 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b0e:	5cd3      	ldrb	r3, [r2, r3]
 8008b10:	f003 031f 	and.w	r3, r3, #31
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1a:	4a07      	ldr	r2, [pc, #28]	@ (8008b38 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b1e:	4a07      	ldr	r2, [pc, #28]	@ (8008b3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b24:	4b04      	ldr	r3, [pc, #16]	@ (8008b38 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b26:	681b      	ldr	r3, [r3, #0]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	58024400 	.word	0x58024400
 8008b34:	0800fb48 	.word	0x0800fb48
 8008b38:	24000058 	.word	0x24000058
 8008b3c:	24000054 	.word	0x24000054

08008b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b44:	f7ff ffcc 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	091b      	lsrs	r3, r3, #4
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	4904      	ldr	r1, [pc, #16]	@ (8008b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b56:	5ccb      	ldrb	r3, [r1, r3]
 8008b58:	f003 031f 	and.w	r3, r3, #31
 8008b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	58024400 	.word	0x58024400
 8008b68:	0800fb48 	.word	0x0800fb48

08008b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b70:	f7ff ffb6 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 8008b74:	4602      	mov	r2, r0
 8008b76:	4b06      	ldr	r3, [pc, #24]	@ (8008b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	0a1b      	lsrs	r3, r3, #8
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	4904      	ldr	r1, [pc, #16]	@ (8008b94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b82:	5ccb      	ldrb	r3, [r1, r3]
 8008b84:	f003 031f 	and.w	r3, r3, #31
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	58024400 	.word	0x58024400
 8008b94:	0800fb48 	.word	0x0800fb48

08008b98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b9c:	b0c6      	sub	sp, #280	@ 0x118
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008baa:	2300      	movs	r3, #0
 8008bac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	ea54 0305 	orrs.w	r3, r4, r5
 8008bc2:	d049      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bce:	d02f      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008bd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bd4:	d828      	bhi.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bda:	d01a      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008bdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008be0:	d822      	bhi.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bea:	d007      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bec:	e01c      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bee:	4bab      	ldr	r3, [pc, #684]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf2:	4aaa      	ldr	r2, [pc, #680]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008bfa:	e01a      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c00:	3308      	adds	r3, #8
 8008c02:	2102      	movs	r1, #2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f002 fa49 	bl	800b09c <RCCEx_PLL2_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c10:	e00f      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c16:	3328      	adds	r3, #40	@ 0x28
 8008c18:	2102      	movs	r1, #2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f002 faf0 	bl	800b200 <RCCEx_PLL3_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c26:	e004      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c2e:	e000      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c3a:	4b98      	ldr	r3, [pc, #608]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c48:	4a94      	ldr	r2, [pc, #592]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c4a:	430b      	orrs	r3, r1
 8008c4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c4e:	e003      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008c64:	f04f 0900 	mov.w	r9, #0
 8008c68:	ea58 0309 	orrs.w	r3, r8, r9
 8008c6c:	d047      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d82a      	bhi.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008c78:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008c95 	.word	0x08008c95
 8008c84:	08008ca3 	.word	0x08008ca3
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008cd7 	.word	0x08008cd7
 8008c90:	08008cd7 	.word	0x08008cd7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c94:	4b81      	ldr	r3, [pc, #516]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c98:	4a80      	ldr	r2, [pc, #512]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ca0:	e01a      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca6:	3308      	adds	r3, #8
 8008ca8:	2100      	movs	r1, #0
 8008caa:	4618      	mov	r0, r3
 8008cac:	f002 f9f6 	bl	800b09c <RCCEx_PLL2_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cb6:	e00f      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cbc:	3328      	adds	r3, #40	@ 0x28
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f002 fa9d 	bl	800b200 <RCCEx_PLL3_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ccc:	e004      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cd4:	e000      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ce0:	4b6e      	ldr	r3, [pc, #440]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce4:	f023 0107 	bic.w	r1, r3, #7
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cee:	4a6b      	ldr	r2, [pc, #428]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cf0:	430b      	orrs	r3, r1
 8008cf2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cf4:	e003      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008d0a:	f04f 0b00 	mov.w	fp, #0
 8008d0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d12:	d05b      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d1c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008d20:	d03b      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008d22:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008d26:	d834      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d2c:	d037      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008d2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d32:	d82e      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d38:	d033      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008d3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d3e:	d828      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d44:	d01a      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d4a:	d822      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008d50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d54:	d007      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008d56:	e01c      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d58:	4b50      	ldr	r3, [pc, #320]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	4a4f      	ldr	r2, [pc, #316]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d64:	e01e      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f002 f994 	bl	800b09c <RCCEx_PLL2_Config>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d7a:	e013      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	3328      	adds	r3, #40	@ 0x28
 8008d82:	2100      	movs	r1, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f002 fa3b 	bl	800b200 <RCCEx_PLL3_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d90:	e008      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d98:	e004      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008d9a:	bf00      	nop
 8008d9c:	e002      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008d9e:	bf00      	nop
 8008da0:	e000      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dac:	4b3b      	ldr	r3, [pc, #236]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008dbc:	4a37      	ldr	r2, [pc, #220]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dc2:	e003      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008de2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008de6:	460b      	mov	r3, r1
 8008de8:	4313      	orrs	r3, r2
 8008dea:	d05d      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008df4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008df8:	d03b      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008dfa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008dfe:	d834      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e04:	d037      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008e06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e0a:	d82e      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e10:	d033      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008e12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e16:	d828      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e1c:	d01a      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008e1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e22:	d822      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e2c:	d007      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008e2e:	e01c      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e30:	4b1a      	ldr	r3, [pc, #104]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	4a19      	ldr	r2, [pc, #100]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e3c:	e01e      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e42:	3308      	adds	r3, #8
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 f928 	bl	800b09c <RCCEx_PLL2_Config>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e52:	e013      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e58:	3328      	adds	r3, #40	@ 0x28
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 f9cf 	bl	800b200 <RCCEx_PLL3_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e68:	e008      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e70:	e004      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008e72:	bf00      	nop
 8008e74:	e002      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008e76:	bf00      	nop
 8008e78:	e000      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10d      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e84:	4b05      	ldr	r3, [pc, #20]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e94:	4a01      	ldr	r2, [pc, #4]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e96:	430b      	orrs	r3, r1
 8008e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e9a:	e005      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008eb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008ebe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	d03a      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ece:	2b30      	cmp	r3, #48	@ 0x30
 8008ed0:	d01f      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008ed2:	2b30      	cmp	r3, #48	@ 0x30
 8008ed4:	d819      	bhi.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d00c      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008eda:	2b20      	cmp	r3, #32
 8008edc:	d815      	bhi.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d019      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ee2:	2b10      	cmp	r3, #16
 8008ee4:	d111      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee6:	4baa      	ldr	r3, [pc, #680]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eea:	4aa9      	ldr	r2, [pc, #676]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ef2:	e011      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef8:	3308      	adds	r3, #8
 8008efa:	2102      	movs	r1, #2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f002 f8cd 	bl	800b09c <RCCEx_PLL2_Config>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008f08:	e006      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f10:	e002      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008f20:	4b9b      	ldr	r3, [pc, #620]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f2e:	4a98      	ldr	r2, [pc, #608]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f30:	430b      	orrs	r3, r1
 8008f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f34:	e003      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	d051      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f68:	d035      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008f6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f6e:	d82e      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008f70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f74:	d031      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008f76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f7a:	d828      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f80:	d01a      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f86:	d822      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f90:	d007      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008f92:	e01c      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f94:	4b7e      	ldr	r3, [pc, #504]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f98:	4a7d      	ldr	r2, [pc, #500]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fa0:	e01c      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f002 f876 	bl	800b09c <RCCEx_PLL2_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fb6:	e011      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fbc:	3328      	adds	r3, #40	@ 0x28
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f002 f91d 	bl	800b200 <RCCEx_PLL3_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fcc:	e006      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fd4:	e002      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008fd6:	bf00      	nop
 8008fd8:	e000      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fe8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ff2:	4a67      	ldr	r2, [pc, #412]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ffe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800900e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009012:	2300      	movs	r3, #0
 8009014:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009018:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800901c:	460b      	mov	r3, r1
 800901e:	4313      	orrs	r3, r2
 8009020:	d053      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800902c:	d033      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800902e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009032:	d82c      	bhi.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009034:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009038:	d02f      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800903a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800903e:	d826      	bhi.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009040:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009044:	d02b      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009046:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800904a:	d820      	bhi.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800904c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009050:	d012      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009056:	d81a      	bhi.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d022      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800905c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009060:	d115      	bne.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009066:	3308      	adds	r3, #8
 8009068:	2101      	movs	r1, #1
 800906a:	4618      	mov	r0, r3
 800906c:	f002 f816 	bl	800b09c <RCCEx_PLL2_Config>
 8009070:	4603      	mov	r3, r0
 8009072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009076:	e015      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800907c:	3328      	adds	r3, #40	@ 0x28
 800907e:	2101      	movs	r1, #1
 8009080:	4618      	mov	r0, r3
 8009082:	f002 f8bd 	bl	800b200 <RCCEx_PLL3_Config>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800908c:	e00a      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009094:	e006      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009096:	bf00      	nop
 8009098:	e004      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800909a:	bf00      	nop
 800909c:	e002      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800909e:	bf00      	nop
 80090a0:	e000      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80090a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090ac:	4b38      	ldr	r3, [pc, #224]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80090b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090ba:	4a35      	ldr	r2, [pc, #212]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090bc:	430b      	orrs	r3, r1
 80090be:	6513      	str	r3, [r2, #80]	@ 0x50
 80090c0:	e003      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80090d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090da:	2300      	movs	r3, #0
 80090dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090e0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090e4:	460b      	mov	r3, r1
 80090e6:	4313      	orrs	r3, r2
 80090e8:	d058      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80090ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090f6:	d033      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80090f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090fc:	d82c      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009102:	d02f      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009108:	d826      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800910a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800910e:	d02b      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009110:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009114:	d820      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800911a:	d012      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800911c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009120:	d81a      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d022      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800912a:	d115      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800912c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009130:	3308      	adds	r3, #8
 8009132:	2101      	movs	r1, #1
 8009134:	4618      	mov	r0, r3
 8009136:	f001 ffb1 	bl	800b09c <RCCEx_PLL2_Config>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009140:	e015      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009146:	3328      	adds	r3, #40	@ 0x28
 8009148:	2101      	movs	r1, #1
 800914a:	4618      	mov	r0, r3
 800914c:	f002 f858 	bl	800b200 <RCCEx_PLL3_Config>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009156:	e00a      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800915e:	e006      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009160:	bf00      	nop
 8009162:	e004      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009164:	bf00      	nop
 8009166:	e002      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009168:	bf00      	nop
 800916a:	e000      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800916c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800916e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10e      	bne.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009176:	4b06      	ldr	r3, [pc, #24]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800917a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800917e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009186:	4a02      	ldr	r2, [pc, #8]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009188:	430b      	orrs	r3, r1
 800918a:	6593      	str	r3, [r2, #88]	@ 0x58
 800918c:	e006      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800918e:	bf00      	nop
 8009190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80091a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091ac:	2300      	movs	r3, #0
 80091ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80091b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4313      	orrs	r3, r2
 80091ba:	d037      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80091bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c6:	d00e      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80091c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091cc:	d816      	bhi.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d018      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80091d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091d6:	d111      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d8:	4bc4      	ldr	r3, [pc, #784]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091dc:	4ac3      	ldr	r2, [pc, #780]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091e4:	e00f      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ea:	3308      	adds	r3, #8
 80091ec:	2101      	movs	r1, #1
 80091ee:	4618      	mov	r0, r3
 80091f0:	f001 ff54 	bl	800b09c <RCCEx_PLL2_Config>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091fa:	e004      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009202:	e000      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009206:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800920e:	4bb7      	ldr	r3, [pc, #732]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009212:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800921a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800921c:	4ab3      	ldr	r2, [pc, #716]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800921e:	430b      	orrs	r3, r1
 8009220:	6513      	str	r3, [r2, #80]	@ 0x50
 8009222:	e003      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009228:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009238:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800923c:	2300      	movs	r3, #0
 800923e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009242:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009246:	460b      	mov	r3, r1
 8009248:	4313      	orrs	r3, r2
 800924a:	d039      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800924c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009252:	2b03      	cmp	r3, #3
 8009254:	d81c      	bhi.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009256:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009299 	.word	0x08009299
 8009260:	0800926d 	.word	0x0800926d
 8009264:	0800927b 	.word	0x0800927b
 8009268:	08009299 	.word	0x08009299
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800926c:	4b9f      	ldr	r3, [pc, #636]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	4a9e      	ldr	r2, [pc, #632]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009278:	e00f      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800927a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800927e:	3308      	adds	r3, #8
 8009280:	2102      	movs	r1, #2
 8009282:	4618      	mov	r0, r3
 8009284:	f001 ff0a 	bl	800b09c <RCCEx_PLL2_Config>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800928e:	e004      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009296:	e000      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800929a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10a      	bne.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80092a2:	4b92      	ldr	r3, [pc, #584]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092a6:	f023 0103 	bic.w	r1, r3, #3
 80092aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092b0:	4a8e      	ldr	r2, [pc, #568]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092b2:	430b      	orrs	r3, r1
 80092b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092b6:	e003      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80092cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092d0:	2300      	movs	r3, #0
 80092d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80092da:	460b      	mov	r3, r1
 80092dc:	4313      	orrs	r3, r2
 80092de:	f000 8099 	beq.w	8009414 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092e2:	4b83      	ldr	r3, [pc, #524]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a82      	ldr	r2, [pc, #520]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092ee:	f7f9 fa87 	bl	8002800 <HAL_GetTick>
 80092f2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f6:	e00b      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f8:	f7f9 fa82 	bl	8002800 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b64      	cmp	r3, #100	@ 0x64
 8009306:	d903      	bls.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800930e:	e005      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009310:	4b77      	ldr	r3, [pc, #476]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0ed      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800931c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009320:	2b00      	cmp	r3, #0
 8009322:	d173      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009324:	4b71      	ldr	r3, [pc, #452]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009326:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800932c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009330:	4053      	eors	r3, r2
 8009332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009336:	2b00      	cmp	r3, #0
 8009338:	d015      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800933a:	4b6c      	ldr	r3, [pc, #432]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009342:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009346:	4b69      	ldr	r3, [pc, #420]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934a:	4a68      	ldr	r2, [pc, #416]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800934c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009350:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009352:	4b66      	ldr	r3, [pc, #408]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009356:	4a65      	ldr	r2, [pc, #404]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800935c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800935e:	4a63      	ldr	r2, [pc, #396]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009364:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800936a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800936e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009372:	d118      	bne.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7f9 fa44 	bl	8002800 <HAL_GetTick>
 8009378:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800937c:	e00d      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800937e:	f7f9 fa3f 	bl	8002800 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009388:	1ad2      	subs	r2, r2, r3
 800938a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800938e:	429a      	cmp	r2, r3
 8009390:	d903      	bls.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009398:	e005      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800939a:	4b54      	ldr	r3, [pc, #336]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800939c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0eb      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80093a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d129      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093be:	d10e      	bne.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x846>
 80093c0:	4b4a      	ldr	r3, [pc, #296]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80093c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093d0:	091a      	lsrs	r2, r3, #4
 80093d2:	4b48      	ldr	r3, [pc, #288]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	4a45      	ldr	r2, [pc, #276]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093d8:	430b      	orrs	r3, r1
 80093da:	6113      	str	r3, [r2, #16]
 80093dc:	e005      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x852>
 80093de:	4b43      	ldr	r3, [pc, #268]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	4a42      	ldr	r2, [pc, #264]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80093e8:	6113      	str	r3, [r2, #16]
 80093ea:	4b40      	ldr	r3, [pc, #256]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093fa:	4a3c      	ldr	r2, [pc, #240]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093fc:	430b      	orrs	r3, r1
 80093fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009400:	e008      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009406:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800940a:	e003      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800940c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f002 0301 	and.w	r3, r2, #1
 8009420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009424:	2300      	movs	r3, #0
 8009426:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800942a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800942e:	460b      	mov	r3, r1
 8009430:	4313      	orrs	r3, r2
 8009432:	f000 808f 	beq.w	8009554 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800943c:	2b28      	cmp	r3, #40	@ 0x28
 800943e:	d871      	bhi.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009440:	a201      	add	r2, pc, #4	@ (adr r2, 8009448 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009446:	bf00      	nop
 8009448:	0800952d 	.word	0x0800952d
 800944c:	08009525 	.word	0x08009525
 8009450:	08009525 	.word	0x08009525
 8009454:	08009525 	.word	0x08009525
 8009458:	08009525 	.word	0x08009525
 800945c:	08009525 	.word	0x08009525
 8009460:	08009525 	.word	0x08009525
 8009464:	08009525 	.word	0x08009525
 8009468:	080094f9 	.word	0x080094f9
 800946c:	08009525 	.word	0x08009525
 8009470:	08009525 	.word	0x08009525
 8009474:	08009525 	.word	0x08009525
 8009478:	08009525 	.word	0x08009525
 800947c:	08009525 	.word	0x08009525
 8009480:	08009525 	.word	0x08009525
 8009484:	08009525 	.word	0x08009525
 8009488:	0800950f 	.word	0x0800950f
 800948c:	08009525 	.word	0x08009525
 8009490:	08009525 	.word	0x08009525
 8009494:	08009525 	.word	0x08009525
 8009498:	08009525 	.word	0x08009525
 800949c:	08009525 	.word	0x08009525
 80094a0:	08009525 	.word	0x08009525
 80094a4:	08009525 	.word	0x08009525
 80094a8:	0800952d 	.word	0x0800952d
 80094ac:	08009525 	.word	0x08009525
 80094b0:	08009525 	.word	0x08009525
 80094b4:	08009525 	.word	0x08009525
 80094b8:	08009525 	.word	0x08009525
 80094bc:	08009525 	.word	0x08009525
 80094c0:	08009525 	.word	0x08009525
 80094c4:	08009525 	.word	0x08009525
 80094c8:	0800952d 	.word	0x0800952d
 80094cc:	08009525 	.word	0x08009525
 80094d0:	08009525 	.word	0x08009525
 80094d4:	08009525 	.word	0x08009525
 80094d8:	08009525 	.word	0x08009525
 80094dc:	08009525 	.word	0x08009525
 80094e0:	08009525 	.word	0x08009525
 80094e4:	08009525 	.word	0x08009525
 80094e8:	0800952d 	.word	0x0800952d
 80094ec:	58024400 	.word	0x58024400
 80094f0:	58024800 	.word	0x58024800
 80094f4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fc:	3308      	adds	r3, #8
 80094fe:	2101      	movs	r1, #1
 8009500:	4618      	mov	r0, r3
 8009502:	f001 fdcb 	bl	800b09c <RCCEx_PLL2_Config>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800950c:	e00f      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800950e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009512:	3328      	adds	r3, #40	@ 0x28
 8009514:	2101      	movs	r1, #1
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fe72 	bl	800b200 <RCCEx_PLL3_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009522:	e004      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800952a:	e000      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800952c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009536:	4bbf      	ldr	r3, [pc, #764]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800953a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009544:	4abb      	ldr	r2, [pc, #748]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009546:	430b      	orrs	r3, r1
 8009548:	6553      	str	r3, [r2, #84]	@ 0x54
 800954a:	e003      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009550:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f002 0302 	and.w	r3, r2, #2
 8009560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009564:	2300      	movs	r3, #0
 8009566:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800956a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800956e:	460b      	mov	r3, r1
 8009570:	4313      	orrs	r3, r2
 8009572:	d041      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800957a:	2b05      	cmp	r3, #5
 800957c:	d824      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800957e:	a201      	add	r2, pc, #4	@ (adr r2, 8009584 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	080095d1 	.word	0x080095d1
 8009588:	0800959d 	.word	0x0800959d
 800958c:	080095b3 	.word	0x080095b3
 8009590:	080095d1 	.word	0x080095d1
 8009594:	080095d1 	.word	0x080095d1
 8009598:	080095d1 	.word	0x080095d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800959c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a0:	3308      	adds	r3, #8
 80095a2:	2101      	movs	r1, #1
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 fd79 	bl	800b09c <RCCEx_PLL2_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095b0:	e00f      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b6:	3328      	adds	r3, #40	@ 0x28
 80095b8:	2101      	movs	r1, #1
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 fe20 	bl	800b200 <RCCEx_PLL3_Config>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095c6:	e004      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095ce:	e000      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80095d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10a      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095da:	4b96      	ldr	r3, [pc, #600]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095de:	f023 0107 	bic.w	r1, r3, #7
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095e8:	4a92      	ldr	r2, [pc, #584]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095ea:	430b      	orrs	r3, r1
 80095ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80095ee:	e003      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f002 0304 	and.w	r3, r2, #4
 8009604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009608:	2300      	movs	r3, #0
 800960a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800960e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009612:	460b      	mov	r3, r1
 8009614:	4313      	orrs	r3, r2
 8009616:	d044      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800961c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009620:	2b05      	cmp	r3, #5
 8009622:	d825      	bhi.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009624:	a201      	add	r2, pc, #4	@ (adr r2, 800962c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962a:	bf00      	nop
 800962c:	08009679 	.word	0x08009679
 8009630:	08009645 	.word	0x08009645
 8009634:	0800965b 	.word	0x0800965b
 8009638:	08009679 	.word	0x08009679
 800963c:	08009679 	.word	0x08009679
 8009640:	08009679 	.word	0x08009679
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009648:	3308      	adds	r3, #8
 800964a:	2101      	movs	r1, #1
 800964c:	4618      	mov	r0, r3
 800964e:	f001 fd25 	bl	800b09c <RCCEx_PLL2_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009658:	e00f      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800965a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965e:	3328      	adds	r3, #40	@ 0x28
 8009660:	2101      	movs	r1, #1
 8009662:	4618      	mov	r0, r3
 8009664:	f001 fdcc 	bl	800b200 <RCCEx_PLL3_Config>
 8009668:	4603      	mov	r3, r0
 800966a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800966e:	e004      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009676:	e000      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009682:	4b6c      	ldr	r3, [pc, #432]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009686:	f023 0107 	bic.w	r1, r3, #7
 800968a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009692:	4a68      	ldr	r2, [pc, #416]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009694:	430b      	orrs	r3, r1
 8009696:	6593      	str	r3, [r2, #88]	@ 0x58
 8009698:	e003      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800969e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	f002 0320 	and.w	r3, r2, #32
 80096ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096b2:	2300      	movs	r3, #0
 80096b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096bc:	460b      	mov	r3, r1
 80096be:	4313      	orrs	r3, r2
 80096c0:	d055      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80096c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096ce:	d033      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80096d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096d4:	d82c      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096da:	d02f      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80096dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e0:	d826      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096e6:	d02b      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80096e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096ec:	d820      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f2:	d012      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80096f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f8:	d81a      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d022      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80096fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009702:	d115      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009708:	3308      	adds	r3, #8
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fcc5 	bl	800b09c <RCCEx_PLL2_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009718:	e015      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800971a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971e:	3328      	adds	r3, #40	@ 0x28
 8009720:	2102      	movs	r1, #2
 8009722:	4618      	mov	r0, r3
 8009724:	f001 fd6c 	bl	800b200 <RCCEx_PLL3_Config>
 8009728:	4603      	mov	r3, r0
 800972a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800972e:	e00a      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009736:	e006      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009738:	bf00      	nop
 800973a:	e004      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800973c:	bf00      	nop
 800973e:	e002      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10b      	bne.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800974e:	4b39      	ldr	r3, [pc, #228]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009752:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800975e:	4a35      	ldr	r2, [pc, #212]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009760:	430b      	orrs	r3, r1
 8009762:	6553      	str	r3, [r2, #84]	@ 0x54
 8009764:	e003      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800976a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800977a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800977e:	2300      	movs	r3, #0
 8009780:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009784:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009788:	460b      	mov	r3, r1
 800978a:	4313      	orrs	r3, r2
 800978c:	d058      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800978e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009792:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009796:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800979a:	d033      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800979c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80097a0:	d82c      	bhi.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097a6:	d02f      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80097a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ac:	d826      	bhi.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097b2:	d02b      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80097b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097b8:	d820      	bhi.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097be:	d012      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80097c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097c4:	d81a      	bhi.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d022      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80097ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ce:	d115      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d4:	3308      	adds	r3, #8
 80097d6:	2100      	movs	r1, #0
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fc5f 	bl	800b09c <RCCEx_PLL2_Config>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097e4:	e015      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ea:	3328      	adds	r3, #40	@ 0x28
 80097ec:	2102      	movs	r1, #2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 fd06 	bl	800b200 <RCCEx_PLL3_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097fa:	e00a      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009802:	e006      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009804:	bf00      	nop
 8009806:	e004      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009808:	bf00      	nop
 800980a:	e002      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800980c:	bf00      	nop
 800980e:	e000      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10e      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800981a:	4b06      	ldr	r3, [pc, #24]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800981c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800982a:	4a02      	ldr	r2, [pc, #8]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800982c:	430b      	orrs	r3, r1
 800982e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009830:	e006      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800983c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800984c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009850:	2300      	movs	r3, #0
 8009852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009856:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800985a:	460b      	mov	r3, r1
 800985c:	4313      	orrs	r3, r2
 800985e:	d055      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009864:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009868:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800986c:	d033      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800986e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009872:	d82c      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009878:	d02f      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800987e:	d826      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009880:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009884:	d02b      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009886:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800988a:	d820      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800988c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009890:	d012      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009896:	d81a      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d022      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800989c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098a0:	d115      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a6:	3308      	adds	r3, #8
 80098a8:	2100      	movs	r1, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f001 fbf6 	bl	800b09c <RCCEx_PLL2_Config>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098b6:	e015      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098bc:	3328      	adds	r3, #40	@ 0x28
 80098be:	2102      	movs	r1, #2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 fc9d 	bl	800b200 <RCCEx_PLL3_Config>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098cc:	e00a      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098d4:	e006      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098d6:	bf00      	nop
 80098d8:	e004      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098da:	bf00      	nop
 80098dc:	e002      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098de:	bf00      	nop
 80098e0:	e000      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80098e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10b      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098ec:	4ba0      	ldr	r3, [pc, #640]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80098f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098fc:	4a9c      	ldr	r2, [pc, #624]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098fe:	430b      	orrs	r3, r1
 8009900:	6593      	str	r3, [r2, #88]	@ 0x58
 8009902:	e003      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800990c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f002 0308 	and.w	r3, r2, #8
 8009918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800991c:	2300      	movs	r3, #0
 800991e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009922:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009926:	460b      	mov	r3, r1
 8009928:	4313      	orrs	r3, r2
 800992a:	d01e      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009938:	d10c      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993e:	3328      	adds	r3, #40	@ 0x28
 8009940:	2102      	movs	r1, #2
 8009942:	4618      	mov	r0, r3
 8009944:	f001 fc5c 	bl	800b200 <RCCEx_PLL3_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009954:	4b86      	ldr	r3, [pc, #536]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009958:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800995c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009964:	4a82      	ldr	r2, [pc, #520]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009966:	430b      	orrs	r3, r1
 8009968:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f002 0310 	and.w	r3, r2, #16
 8009976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800997a:	2300      	movs	r3, #0
 800997c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009980:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009984:	460b      	mov	r3, r1
 8009986:	4313      	orrs	r3, r2
 8009988:	d01e      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800998a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009996:	d10c      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999c:	3328      	adds	r3, #40	@ 0x28
 800999e:	2102      	movs	r1, #2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f001 fc2d 	bl	800b200 <RCCEx_PLL3_Config>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099b2:	4b6f      	ldr	r3, [pc, #444]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099c2:	4a6b      	ldr	r2, [pc, #428]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80099d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099d6:	2300      	movs	r3, #0
 80099d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80099de:	460b      	mov	r3, r1
 80099e0:	4313      	orrs	r3, r2
 80099e2:	d03e      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80099e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80099ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099f0:	d022      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80099f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099f6:	d81b      	bhi.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80099fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a00:	d00b      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009a02:	e015      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a08:	3308      	adds	r3, #8
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 fb45 	bl	800b09c <RCCEx_PLL2_Config>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a18:	e00f      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1e:	3328      	adds	r3, #40	@ 0x28
 8009a20:	2102      	movs	r1, #2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 fbec 	bl	800b200 <RCCEx_PLL3_Config>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a2e:	e004      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a36:	e000      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a42:	4b4b      	ldr	r3, [pc, #300]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a52:	4a47      	ldr	r2, [pc, #284]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a54:	430b      	orrs	r3, r1
 8009a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a58:	e003      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009a6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a70:	2300      	movs	r3, #0
 8009a72:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	d03b      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a8a:	d01f      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009a8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a90:	d818      	bhi.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a96:	d003      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a9c:	d007      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009a9e:	e011      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa0:	4b33      	ldr	r3, [pc, #204]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa4:	4a32      	ldr	r2, [pc, #200]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009aac:	e00f      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab2:	3328      	adds	r3, #40	@ 0x28
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 fba2 	bl	800b200 <RCCEx_PLL3_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ac2:	e004      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009aca:	e000      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10b      	bne.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ad6:	4b26      	ldr	r3, [pc, #152]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ada:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ae6:	4a22      	ldr	r2, [pc, #136]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ae8:	430b      	orrs	r3, r1
 8009aea:	6553      	str	r3, [r2, #84]	@ 0x54
 8009aec:	e003      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009af2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009b02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b04:	2300      	movs	r3, #0
 8009b06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	d034      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b20:	d007      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009b22:	e011      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b24:	4b12      	ldr	r3, [pc, #72]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b28:	4a11      	ldr	r2, [pc, #68]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b30:	e00e      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b36:	3308      	adds	r3, #8
 8009b38:	2102      	movs	r1, #2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 faae 	bl	800b09c <RCCEx_PLL2_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b46:	e003      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10d      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b58:	4b05      	ldr	r3, [pc, #20]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b66:	4a02      	ldr	r2, [pc, #8]	@ (8009b70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b6c:	e006      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009b6e:	bf00      	nop
 8009b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b8e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009b92:	460b      	mov	r3, r1
 8009b94:	4313      	orrs	r3, r2
 8009b96:	d00c      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9c:	3328      	adds	r3, #40	@ 0x28
 8009b9e:	2102      	movs	r1, #2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f001 fb2d 	bl	800b200 <RCCEx_PLL3_Config>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bc4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	d036      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bd8:	d018      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bde:	d811      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009be4:	d014      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bea:	d80b      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d011      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bf4:	d106      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf6:	4bb7      	ldr	r3, [pc, #732]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfa:	4ab6      	ldr	r2, [pc, #728]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009c02:	e008      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c0a:	e004      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c0c:	bf00      	nop
 8009c0e:	e002      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c10:	bf00      	nop
 8009c12:	e000      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c1e:	4bad      	ldr	r3, [pc, #692]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c2c:	4aa9      	ldr	r2, [pc, #676]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c32:	e003      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009c48:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009c52:	460b      	mov	r3, r1
 8009c54:	4313      	orrs	r3, r2
 8009c56:	d009      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c58:	4b9e      	ldr	r3, [pc, #632]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c66:	4a9b      	ldr	r2, [pc, #620]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c68:	430b      	orrs	r3, r1
 8009c6a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009c82:	460b      	mov	r3, r1
 8009c84:	4313      	orrs	r3, r2
 8009c86:	d009      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c88:	4b92      	ldr	r3, [pc, #584]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c8c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c96:	4a8f      	ldr	r2, [pc, #572]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c98:	430b      	orrs	r3, r1
 8009c9a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009caa:	2300      	movs	r3, #0
 8009cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	d00e      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cb8:	4b86      	ldr	r3, [pc, #536]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	4a85      	ldr	r2, [pc, #532]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009cc2:	6113      	str	r3, [r2, #16]
 8009cc4:	4b83      	ldr	r3, [pc, #524]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cc6:	6919      	ldr	r1, [r3, #16]
 8009cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cd0:	4a80      	ldr	r2, [pc, #512]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cd2:	430b      	orrs	r3, r1
 8009cd4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ce8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009cec:	460b      	mov	r3, r1
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	d009      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cf2:	4b78      	ldr	r3, [pc, #480]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d00:	4a74      	ldr	r2, [pc, #464]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d02:	430b      	orrs	r3, r1
 8009d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d14:	2300      	movs	r3, #0
 8009d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	d00a      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d22:	4b6c      	ldr	r3, [pc, #432]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d26:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d32:	4a68      	ldr	r2, [pc, #416]	@ (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d34:	430b      	orrs	r3, r1
 8009d36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	2100      	movs	r1, #0
 8009d42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4313      	orrs	r3, r2
 8009d52:	d011      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d58:	3308      	adds	r3, #8
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f001 f99d 	bl	800b09c <RCCEx_PLL2_Config>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	2100      	movs	r1, #0
 8009d82:	6239      	str	r1, [r7, #32]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4313      	orrs	r3, r2
 8009d92:	d011      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d98:	3308      	adds	r3, #8
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 f97d 	bl	800b09c <RCCEx_PLL2_Config>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009db4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	61b9      	str	r1, [r7, #24]
 8009dc4:	f003 0304 	and.w	r3, r3, #4
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	d011      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd8:	3308      	adds	r3, #8
 8009dda:	2102      	movs	r1, #2
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 f95d 	bl	800b09c <RCCEx_PLL2_Config>
 8009de2:	4603      	mov	r3, r0
 8009de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009df4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	2100      	movs	r1, #0
 8009e02:	6139      	str	r1, [r7, #16]
 8009e04:	f003 0308 	and.w	r3, r3, #8
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	d011      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e18:	3328      	adds	r3, #40	@ 0x28
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f001 f9ef 	bl	800b200 <RCCEx_PLL3_Config>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	2100      	movs	r1, #0
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4313      	orrs	r3, r2
 8009e52:	d011      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e58:	3328      	adds	r3, #40	@ 0x28
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 f9cf 	bl	800b200 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	2100      	movs	r1, #0
 8009e82:	6039      	str	r1, [r7, #0]
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	607b      	str	r3, [r7, #4]
 8009e8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4313      	orrs	r3, r2
 8009e92:	d011      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	3328      	adds	r3, #40	@ 0x28
 8009e9a:	2102      	movs	r1, #2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f9af 	bl	800b200 <RCCEx_PLL3_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009eb8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ed2:	bf00      	nop
 8009ed4:	58024400 	.word	0x58024400

08009ed8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b090      	sub	sp, #64	@ 0x40
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009eea:	430b      	orrs	r3, r1
 8009eec:	f040 8094 	bne.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ef0:	4b9b      	ldr	r3, [pc, #620]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef4:	f003 0307 	and.w	r3, r3, #7
 8009ef8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	f200 8087 	bhi.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f02:	a201      	add	r2, pc, #4	@ (adr r2, 8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f1d 	.word	0x08009f1d
 8009f0c:	08009f45 	.word	0x08009f45
 8009f10:	08009f6d 	.word	0x08009f6d
 8009f14:	0800a009 	.word	0x0800a009
 8009f18:	08009f95 	.word	0x08009f95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f1c:	4b90      	ldr	r3, [pc, #576]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f28:	d108      	bne.n	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 ff62 	bl	800adf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f38:	f000 bc93 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f40:	f000 bc8f 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f44:	4b86      	ldr	r3, [pc, #536]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f50:	d108      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f52:	f107 0318 	add.w	r3, r7, #24
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fca6 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f60:	f000 bc7f 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f68:	f000 bc7b 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f6c:	4b7c      	ldr	r3, [pc, #496]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f78:	d108      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7a:	f107 030c 	add.w	r3, r7, #12
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 fde6 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f88:	f000 bc6b 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f90:	f000 bc67 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f94:	4b72      	ldr	r3, [pc, #456]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f9e:	4b70      	ldr	r3, [pc, #448]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0304 	and.w	r3, r3, #4
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	d10c      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d109      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fb0:	4b6b      	ldr	r3, [pc, #428]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	08db      	lsrs	r3, r3, #3
 8009fb6:	f003 0303 	and.w	r3, r3, #3
 8009fba:	4a6a      	ldr	r2, [pc, #424]	@ (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc2:	e01f      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fc4:	4b66      	ldr	r3, [pc, #408]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fd0:	d106      	bne.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fd8:	d102      	bne.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fda:	4b63      	ldr	r3, [pc, #396]	@ (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fde:	e011      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fe0:	4b5f      	ldr	r3, [pc, #380]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fec:	d106      	bne.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ff4:	d102      	bne.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ffa:	e003      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a000:	f000 bc2f 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a004:	f000 bc2d 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a008:	4b59      	ldr	r3, [pc, #356]	@ (800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a00c:	f000 bc29 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a014:	f000 bc25 	b.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a01c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a020:	430b      	orrs	r3, r1
 800a022:	f040 80a7 	bne.w	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a026:	4b4e      	ldr	r3, [pc, #312]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a02a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a02e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a036:	d054      	beq.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a03e:	f200 808b 	bhi.w	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a048:	f000 8083 	beq.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a052:	f200 8081 	bhi.w	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a05c:	d02f      	beq.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a064:	d878      	bhi.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d004      	beq.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a072:	d012      	beq.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a074:	e070      	b.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a076:	4b3a      	ldr	r3, [pc, #232]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a07e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a082:	d107      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 feb5 	bl	800adf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a092:	e3e6      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a098:	e3e3      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a09a:	4b31      	ldr	r3, [pc, #196]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0a6:	d107      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a8:	f107 0318 	add.w	r3, r7, #24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fbfb 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b6:	e3d4      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0bc:	e3d1      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0be:	4b28      	ldr	r3, [pc, #160]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0ca:	d107      	bne.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0cc:	f107 030c 	add.w	r3, r7, #12
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fd3d 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0da:	e3c2      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e0:	e3bf      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0ec:	4b1c      	ldr	r3, [pc, #112]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0304 	and.w	r3, r3, #4
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d10c      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d109      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0fe:	4b18      	ldr	r3, [pc, #96]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	08db      	lsrs	r3, r3, #3
 800a104:	f003 0303 	and.w	r3, r3, #3
 800a108:	4a16      	ldr	r2, [pc, #88]	@ (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a10a:	fa22 f303 	lsr.w	r3, r2, r3
 800a10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a110:	e01e      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a112:	4b13      	ldr	r3, [pc, #76]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a11a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a11e:	d106      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a126:	d102      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a128:	4b0f      	ldr	r3, [pc, #60]	@ (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a12c:	e010      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a12e:	4b0c      	ldr	r3, [pc, #48]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a13a:	d106      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a13e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a142:	d102      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a144:	4b09      	ldr	r3, [pc, #36]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a148:	e002      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a14e:	e388      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a150:	e387      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a152:	4b07      	ldr	r3, [pc, #28]	@ (800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a156:	e384      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a15c:	e381      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400
 800a164:	03d09000 	.word	0x03d09000
 800a168:	003d0900 	.word	0x003d0900
 800a16c:	017d7840 	.word	0x017d7840
 800a170:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a174:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a178:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a17c:	430b      	orrs	r3, r1
 800a17e:	f040 809c 	bne.w	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a182:	4b9e      	ldr	r3, [pc, #632]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a186:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a18a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a192:	d054      	beq.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a19a:	f200 808b 	bhi.w	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1a4:	f000 8083 	beq.w	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1ae:	f200 8081 	bhi.w	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1b8:	d02f      	beq.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1c0:	d878      	bhi.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d004      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1ce:	d012      	beq.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a1d0:	e070      	b.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1d2:	4b8a      	ldr	r3, [pc, #552]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1de:	d107      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 fe07 	bl	800adf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ee:	e338      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f4:	e335      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1f6:	4b81      	ldr	r3, [pc, #516]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a202:	d107      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a204:	f107 0318 	add.w	r3, r7, #24
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 fb4d 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a212:	e326      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a218:	e323      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a21a:	4b78      	ldr	r3, [pc, #480]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a226:	d107      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a228:	f107 030c 	add.w	r3, r7, #12
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 fc8f 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a236:	e314      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a23c:	e311      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a23e:	4b6f      	ldr	r3, [pc, #444]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a242:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a246:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a248:	4b6c      	ldr	r3, [pc, #432]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b04      	cmp	r3, #4
 800a252:	d10c      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	2b00      	cmp	r3, #0
 800a258:	d109      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a25a:	4b68      	ldr	r3, [pc, #416]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	08db      	lsrs	r3, r3, #3
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	4a66      	ldr	r2, [pc, #408]	@ (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a266:	fa22 f303 	lsr.w	r3, r2, r3
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a26c:	e01e      	b.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a26e:	4b63      	ldr	r3, [pc, #396]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a27a:	d106      	bne.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a27e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a282:	d102      	bne.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a284:	4b5f      	ldr	r3, [pc, #380]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a288:	e010      	b.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a28a:	4b5c      	ldr	r3, [pc, #368]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a296:	d106      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a29a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a29e:	d102      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2a0:	4b59      	ldr	r3, [pc, #356]	@ (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2a4:	e002      	b.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2aa:	e2da      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2ac:	e2d9      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2ae:	4b57      	ldr	r3, [pc, #348]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b2:	e2d6      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b8:	e2d3      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a2ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	f040 80a7 	bne.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a2c8:	4b4c      	ldr	r3, [pc, #304]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a2d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2d8:	d055      	beq.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2e0:	f200 8096 	bhi.w	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2ea:	f000 8084 	beq.w	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2f4:	f200 808c 	bhi.w	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2fe:	d030      	beq.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a306:	f200 8083 	bhi.w	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d004      	beq.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a316:	d012      	beq.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a318:	e07a      	b.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a31a:	4b38      	ldr	r3, [pc, #224]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a322:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a326:	d107      	bne.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 fd63 	bl	800adf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a336:	e294      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33c:	e291      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a33e:	4b2f      	ldr	r3, [pc, #188]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a34a:	d107      	bne.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a34c:	f107 0318 	add.w	r3, r7, #24
 800a350:	4618      	mov	r0, r3
 800a352:	f000 faa9 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35a:	e282      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a360:	e27f      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a362:	4b26      	ldr	r3, [pc, #152]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a36a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a36e:	d107      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a370:	f107 030c 	add.w	r3, r7, #12
 800a374:	4618      	mov	r0, r3
 800a376:	f000 fbeb 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a37e:	e270      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a384:	e26d      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a386:	4b1d      	ldr	r3, [pc, #116]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a38a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a38e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a390:	4b1a      	ldr	r3, [pc, #104]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d10c      	bne.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3a2:	4b16      	ldr	r3, [pc, #88]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	08db      	lsrs	r3, r3, #3
 800a3a8:	f003 0303 	and.w	r3, r3, #3
 800a3ac:	4a14      	ldr	r2, [pc, #80]	@ (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a3ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3b4:	e01e      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3b6:	4b11      	ldr	r3, [pc, #68]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c2:	d106      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ca:	d102      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3d0:	e010      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3de:	d106      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3e6:	d102      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3e8:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ec:	e002      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3f2:	e236      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3f4:	e235      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3f6:	4b05      	ldr	r3, [pc, #20]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fa:	e232      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3fc:	58024400 	.word	0x58024400
 800a400:	03d09000 	.word	0x03d09000
 800a404:	003d0900 	.word	0x003d0900
 800a408:	017d7840 	.word	0x017d7840
 800a40c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a414:	e225      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a41a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a41e:	430b      	orrs	r3, r1
 800a420:	f040 8085 	bne.w	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a424:	4b9c      	ldr	r3, [pc, #624]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a428:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a42c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a434:	d06b      	beq.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a43c:	d874      	bhi.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a444:	d056      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a44c:	d86c      	bhi.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a454:	d03b      	beq.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a45c:	d864      	bhi.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a464:	d021      	beq.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a46c:	d85c      	bhi.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a470:	2b00      	cmp	r3, #0
 800a472:	d004      	beq.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a47a:	d004      	beq.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a47c:	e054      	b.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a47e:	f7fe fb5f 	bl	8008b40 <HAL_RCC_GetPCLK1Freq>
 800a482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a484:	e1ed      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a486:	4b84      	ldr	r3, [pc, #528]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a48e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a492:	d107      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a494:	f107 0318 	add.w	r3, r7, #24
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fa05 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a2:	e1de      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a8:	e1db      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4aa:	4b7b      	ldr	r3, [pc, #492]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4b6:	d107      	bne.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b8:	f107 030c 	add.w	r3, r7, #12
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 fb47 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c6:	e1cc      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4cc:	e1c9      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4ce:	4b72      	ldr	r3, [pc, #456]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 0304 	and.w	r3, r3, #4
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d109      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4da:	4b6f      	ldr	r3, [pc, #444]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	08db      	lsrs	r3, r3, #3
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	4a6d      	ldr	r2, [pc, #436]	@ (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a4e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ec:	e1b9      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f2:	e1b6      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4f4:	4b68      	ldr	r3, [pc, #416]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a500:	d102      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a502:	4b67      	ldr	r3, [pc, #412]	@ (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a506:	e1ac      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50c:	e1a9      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a50e:	4b62      	ldr	r3, [pc, #392]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a51a:	d102      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a51c:	4b61      	ldr	r3, [pc, #388]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a520:	e19f      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a526:	e19c      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a52c:	e199      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a52e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a532:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a536:	430b      	orrs	r3, r1
 800a538:	d173      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a53a:	4b57      	ldr	r3, [pc, #348]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a53c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a53e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a542:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a54a:	d02f      	beq.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a552:	d863      	bhi.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a556:	2b00      	cmp	r3, #0
 800a558:	d004      	beq.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a560:	d012      	beq.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a562:	e05b      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a564:	4b4c      	ldr	r3, [pc, #304]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a56c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a570:	d107      	bne.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a572:	f107 0318 	add.w	r3, r7, #24
 800a576:	4618      	mov	r0, r3
 800a578:	f000 f996 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a580:	e16f      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a586:	e16c      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a588:	4b43      	ldr	r3, [pc, #268]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a594:	d107      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a596:	f107 030c 	add.w	r3, r7, #12
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fad8 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a4:	e15d      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5aa:	e15a      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5ac:	4b3a      	ldr	r3, [pc, #232]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5b6:	4b38      	ldr	r3, [pc, #224]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0304 	and.w	r3, r3, #4
 800a5be:	2b04      	cmp	r3, #4
 800a5c0:	d10c      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d109      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5c8:	4b33      	ldr	r3, [pc, #204]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	08db      	lsrs	r3, r3, #3
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	4a32      	ldr	r2, [pc, #200]	@ (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5da:	e01e      	b.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5dc:	4b2e      	ldr	r3, [pc, #184]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e8:	d106      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5f0:	d102      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5f2:	4b2b      	ldr	r3, [pc, #172]	@ (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f6:	e010      	b.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5f8:	4b27      	ldr	r3, [pc, #156]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a604:	d106      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a60c:	d102      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a60e:	4b25      	ldr	r3, [pc, #148]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a612:	e002      	b.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a614:	2300      	movs	r3, #0
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a618:	e123      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a61a:	e122      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a620:	e11f      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a626:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a62a:	430b      	orrs	r3, r1
 800a62c:	d13c      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a62e:	4b1a      	ldr	r3, [pc, #104]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a636:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a644:	d012      	beq.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a646:	e023      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a648:	4b13      	ldr	r3, [pc, #76]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a654:	d107      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fbcc 	bl	800adf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a664:	e0fd      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66a:	e0fa      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a66c:	4b0a      	ldr	r3, [pc, #40]	@ (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a678:	d107      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a67a:	f107 0318 	add.w	r3, r7, #24
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 f912 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a688:	e0eb      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a68e:	e0e8      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a694:	e0e5      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a696:	bf00      	nop
 800a698:	58024400 	.word	0x58024400
 800a69c:	03d09000 	.word	0x03d09000
 800a6a0:	003d0900 	.word	0x003d0900
 800a6a4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	f040 8085 	bne.w	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a6b6:	4b6d      	ldr	r3, [pc, #436]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a6be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6c6:	d06b      	beq.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6ce:	d874      	bhi.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d6:	d056      	beq.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6de:	d86c      	bhi.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6e6:	d03b      	beq.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6ee:	d864      	bhi.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f6:	d021      	beq.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6fe:	d85c      	bhi.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a70c:	d004      	beq.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a70e:	e054      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a710:	f000 f8b4 	bl	800a87c <HAL_RCCEx_GetD3PCLK1Freq>
 800a714:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a716:	e0a4      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a718:	4b54      	ldr	r3, [pc, #336]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a724:	d107      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a726:	f107 0318 	add.w	r3, r7, #24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f8bc 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a734:	e095      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73a:	e092      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a73c:	4b4b      	ldr	r3, [pc, #300]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a748:	d107      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a74a:	f107 030c 	add.w	r3, r7, #12
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 f9fe 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a758:	e083      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75e:	e080      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a760:	4b42      	ldr	r3, [pc, #264]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0304 	and.w	r3, r3, #4
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d109      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a76c:	4b3f      	ldr	r3, [pc, #252]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	08db      	lsrs	r3, r3, #3
 800a772:	f003 0303 	and.w	r3, r3, #3
 800a776:	4a3e      	ldr	r2, [pc, #248]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77e:	e070      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a784:	e06d      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a786:	4b39      	ldr	r3, [pc, #228]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a78e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a792:	d102      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a794:	4b37      	ldr	r3, [pc, #220]	@ (800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a798:	e063      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79e:	e060      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7a0:	4b32      	ldr	r3, [pc, #200]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ac:	d102      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a7ae:	4b32      	ldr	r3, [pc, #200]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b2:	e056      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b8:	e053      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7be:	e050      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a7c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	d148      	bne.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a7cc:	4b27      	ldr	r3, [pc, #156]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7dc:	d02a      	beq.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7e4:	d838      	bhi.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d004      	beq.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7f2:	d00d      	beq.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a7f4:	e030      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7f6:	4b1d      	ldr	r3, [pc, #116]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a802:	d102      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a804:	4b1c      	ldr	r3, [pc, #112]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a808:	e02b      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80e:	e028      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a810:	4b16      	ldr	r3, [pc, #88]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a818:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a81c:	d107      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a81e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fae8 	bl	800adf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82c:	e019      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a832:	e016      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a834:	4b0d      	ldr	r3, [pc, #52]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a83c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a840:	d107      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a842:	f107 0318 	add.w	r3, r7, #24
 800a846:	4618      	mov	r0, r3
 800a848:	f000 f82e 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a850:	e007      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a856:	e004      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85c:	e001      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a864:	4618      	mov	r0, r3
 800a866:	3740      	adds	r7, #64	@ 0x40
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	58024400 	.word	0x58024400
 800a870:	03d09000 	.word	0x03d09000
 800a874:	003d0900 	.word	0x003d0900
 800a878:	017d7840 	.word	0x017d7840

0800a87c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a880:	f7fe f92e 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 800a884:	4602      	mov	r2, r0
 800a886:	4b06      	ldr	r3, [pc, #24]	@ (800a8a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	091b      	lsrs	r3, r3, #4
 800a88c:	f003 0307 	and.w	r3, r3, #7
 800a890:	4904      	ldr	r1, [pc, #16]	@ (800a8a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a892:	5ccb      	ldrb	r3, [r1, r3]
 800a894:	f003 031f 	and.w	r3, r3, #31
 800a898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	58024400 	.word	0x58024400
 800a8a4:	0800fb48 	.word	0x0800fb48

0800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b089      	sub	sp, #36	@ 0x24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8b0:	4ba1      	ldr	r3, [pc, #644]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b4:	f003 0303 	and.w	r3, r3, #3
 800a8b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8ba:	4b9f      	ldr	r3, [pc, #636]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8be:	0b1b      	lsrs	r3, r3, #12
 800a8c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8c6:	4b9c      	ldr	r3, [pc, #624]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ca:	091b      	lsrs	r3, r3, #4
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8d2:	4b99      	ldr	r3, [pc, #612]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d6:	08db      	lsrs	r3, r3, #3
 800a8d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	fb02 f303 	mul.w	r3, r2, r3
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8111 	beq.w	800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	f000 8083 	beq.w	800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b02      	cmp	r3, #2
 800a902:	f200 80a1 	bhi.w	800aa48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d056      	beq.n	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a912:	e099      	b.n	800aa48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a914:	4b88      	ldr	r3, [pc, #544]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d02d      	beq.n	800a97c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a920:	4b85      	ldr	r3, [pc, #532]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	08db      	lsrs	r3, r3, #3
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	4a84      	ldr	r2, [pc, #528]	@ (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a92c:	fa22 f303 	lsr.w	r3, r2, r3
 800a930:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	ee07 3a90 	vmov	s15, r3
 800a942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a94a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a94c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a95a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a95e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a96a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a972:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a976:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a97a:	e087      	b.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a986:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a98e:	4b6a      	ldr	r3, [pc, #424]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9be:	e065      	b.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d2:	4b59      	ldr	r3, [pc, #356]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa02:	e043      	b.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa16:	4b48      	ldr	r3, [pc, #288]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa26:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa46:	e021      	b.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5a:	4b37      	ldr	r3, [pc, #220]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa8c:	4b2a      	ldr	r3, [pc, #168]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa90:	0a5b      	lsrs	r3, r3, #9
 800aa92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aab2:	ee17 2a90 	vmov	r2, s15
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aaba:	4b1f      	ldr	r3, [pc, #124]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aabe:	0c1b      	lsrs	r3, r3, #16
 800aac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aac4:	ee07 3a90 	vmov	s15, r3
 800aac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aacc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aad0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aad4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aadc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae0:	ee17 2a90 	vmov	r2, s15
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aae8:	4b13      	ldr	r3, [pc, #76]	@ (800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaec:	0e1b      	lsrs	r3, r3, #24
 800aaee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aafe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab0e:	ee17 2a90 	vmov	r2, s15
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab16:	e008      	b.n	800ab2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	609a      	str	r2, [r3, #8]
}
 800ab2a:	bf00      	nop
 800ab2c:	3724      	adds	r7, #36	@ 0x24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	58024400 	.word	0x58024400
 800ab3c:	03d09000 	.word	0x03d09000
 800ab40:	46000000 	.word	0x46000000
 800ab44:	4c742400 	.word	0x4c742400
 800ab48:	4a742400 	.word	0x4a742400
 800ab4c:	4bbebc20 	.word	0x4bbebc20

0800ab50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b089      	sub	sp, #36	@ 0x24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab58:	4ba1      	ldr	r3, [pc, #644]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5c:	f003 0303 	and.w	r3, r3, #3
 800ab60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab62:	4b9f      	ldr	r3, [pc, #636]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab66:	0d1b      	lsrs	r3, r3, #20
 800ab68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab6e:	4b9c      	ldr	r3, [pc, #624]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab72:	0a1b      	lsrs	r3, r3, #8
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab7a:	4b99      	ldr	r3, [pc, #612]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7e:	08db      	lsrs	r3, r3, #3
 800ab80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	fb02 f303 	mul.w	r3, r2, r3
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 8111 	beq.w	800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	f000 8083 	beq.w	800acac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	f200 80a1 	bhi.w	800acf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d003      	beq.n	800abbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d056      	beq.n	800ac68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800abba:	e099      	b.n	800acf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abbc:	4b88      	ldr	r3, [pc, #544]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0320 	and.w	r3, r3, #32
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d02d      	beq.n	800ac24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc8:	4b85      	ldr	r3, [pc, #532]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	08db      	lsrs	r3, r3, #3
 800abce:	f003 0303 	and.w	r3, r3, #3
 800abd2:	4a84      	ldr	r2, [pc, #528]	@ (800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
 800abd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	ee07 3a90 	vmov	s15, r3
 800abe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf2:	4b7b      	ldr	r3, [pc, #492]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac22:	e087      	b.n	800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800adec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac36:	4b6a      	ldr	r3, [pc, #424]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac66:	e065      	b.n	800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac7a:	4b59      	ldr	r3, [pc, #356]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acaa:	e043      	b.n	800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	ee07 3a90 	vmov	s15, r3
 800acb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800adf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800acba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acbe:	4b48      	ldr	r3, [pc, #288]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acce:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ace2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acee:	e021      	b.n	800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad02:	4b37      	ldr	r3, [pc, #220]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad34:	4b2a      	ldr	r3, [pc, #168]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad38:	0a5b      	lsrs	r3, r3, #9
 800ad3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad5a:	ee17 2a90 	vmov	r2, s15
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad62:	4b1f      	ldr	r3, [pc, #124]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad66:	0c1b      	lsrs	r3, r3, #16
 800ad68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad88:	ee17 2a90 	vmov	r2, s15
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad90:	4b13      	ldr	r3, [pc, #76]	@ (800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad94:	0e1b      	lsrs	r3, r3, #24
 800ad96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ada6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800adae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb6:	ee17 2a90 	vmov	r2, s15
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800adbe:	e008      	b.n	800add2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	609a      	str	r2, [r3, #8]
}
 800add2:	bf00      	nop
 800add4:	3724      	adds	r7, #36	@ 0x24
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	58024400 	.word	0x58024400
 800ade4:	03d09000 	.word	0x03d09000
 800ade8:	46000000 	.word	0x46000000
 800adec:	4c742400 	.word	0x4c742400
 800adf0:	4a742400 	.word	0x4a742400
 800adf4:	4bbebc20 	.word	0x4bbebc20

0800adf8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b089      	sub	sp, #36	@ 0x24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae00:	4ba0      	ldr	r3, [pc, #640]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae04:	f003 0303 	and.w	r3, r3, #3
 800ae08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ae0a:	4b9e      	ldr	r3, [pc, #632]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0e:	091b      	lsrs	r3, r3, #4
 800ae10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ae16:	4b9b      	ldr	r3, [pc, #620]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae20:	4b98      	ldr	r3, [pc, #608]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae24:	08db      	lsrs	r3, r3, #3
 800ae26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	fb02 f303 	mul.w	r3, r2, r3
 800ae30:	ee07 3a90 	vmov	s15, r3
 800ae34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 8111 	beq.w	800b066 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	f000 8083 	beq.w	800af52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	f200 80a1 	bhi.w	800af96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d056      	beq.n	800af0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae60:	e099      	b.n	800af96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae62:	4b88      	ldr	r3, [pc, #544]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d02d      	beq.n	800aeca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae6e:	4b85      	ldr	r3, [pc, #532]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	4a83      	ldr	r2, [pc, #524]	@ (800b088 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	ee07 3a90 	vmov	s15, r3
 800ae90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae98:	4b7a      	ldr	r3, [pc, #488]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea0:	ee07 3a90 	vmov	s15, r3
 800aea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aeb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aec8:	e087      	b.n	800afda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	ee07 3a90 	vmov	s15, r3
 800aed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b090 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aedc:	4b69      	ldr	r3, [pc, #420]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeec:	ed97 6a03 	vldr	s12, [r7, #12]
 800aef0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af0c:	e065      	b.n	800afda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af18:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b094 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800af1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af20:	4b58      	ldr	r3, [pc, #352]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af28:	ee07 3a90 	vmov	s15, r3
 800af2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af30:	ed97 6a03 	vldr	s12, [r7, #12]
 800af34:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af50:	e043      	b.n	800afda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	ee07 3a90 	vmov	s15, r3
 800af58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b098 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af64:	4b47      	ldr	r3, [pc, #284]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af74:	ed97 6a03 	vldr	s12, [r7, #12]
 800af78:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af94:	e021      	b.n	800afda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	ee07 3a90 	vmov	s15, r3
 800af9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b090 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa8:	4b36      	ldr	r3, [pc, #216]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb0:	ee07 3a90 	vmov	s15, r3
 800afb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800afbc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afd8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800afda:	4b2a      	ldr	r3, [pc, #168]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afde:	0a5b      	lsrs	r3, r3, #9
 800afe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aff4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800affc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b000:	ee17 2a90 	vmov	r2, s15
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b008:	4b1e      	ldr	r3, [pc, #120]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00c:	0c1b      	lsrs	r3, r3, #16
 800b00e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b01e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b022:	edd7 6a07 	vldr	s13, [r7, #28]
 800b026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b02a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b02e:	ee17 2a90 	vmov	r2, s15
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b036:	4b13      	ldr	r3, [pc, #76]	@ (800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b03a:	0e1b      	lsrs	r3, r3, #24
 800b03c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b048:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b04c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b050:	edd7 6a07 	vldr	s13, [r7, #28]
 800b054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b05c:	ee17 2a90 	vmov	r2, s15
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b064:	e008      	b.n	800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	609a      	str	r2, [r3, #8]
}
 800b078:	bf00      	nop
 800b07a:	3724      	adds	r7, #36	@ 0x24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	58024400 	.word	0x58024400
 800b088:	03d09000 	.word	0x03d09000
 800b08c:	46000000 	.word	0x46000000
 800b090:	4c742400 	.word	0x4c742400
 800b094:	4a742400 	.word	0x4a742400
 800b098:	4bbebc20 	.word	0x4bbebc20

0800b09c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0aa:	4b53      	ldr	r3, [pc, #332]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d101      	bne.n	800b0ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e099      	b.n	800b1ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0ba:	4b4f      	ldr	r3, [pc, #316]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a4e      	ldr	r2, [pc, #312]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0c6:	f7f7 fb9b 	bl	8002800 <HAL_GetTick>
 800b0ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0cc:	e008      	b.n	800b0e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0ce:	f7f7 fb97 	bl	8002800 <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d901      	bls.n	800b0e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e086      	b.n	800b1ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0e0:	4b45      	ldr	r3, [pc, #276]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1f0      	bne.n	800b0ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0ec:	4b42      	ldr	r3, [pc, #264]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	031b      	lsls	r3, r3, #12
 800b0fa:	493f      	ldr	r1, [pc, #252]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	628b      	str	r3, [r1, #40]	@ 0x28
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	3b01      	subs	r3, #1
 800b106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	3b01      	subs	r3, #1
 800b110:	025b      	lsls	r3, r3, #9
 800b112:	b29b      	uxth	r3, r3
 800b114:	431a      	orrs	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	041b      	lsls	r3, r3, #16
 800b11e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b122:	431a      	orrs	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	3b01      	subs	r3, #1
 800b12a:	061b      	lsls	r3, r3, #24
 800b12c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b130:	4931      	ldr	r1, [pc, #196]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b132:	4313      	orrs	r3, r2
 800b134:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b136:	4b30      	ldr	r3, [pc, #192]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	492d      	ldr	r1, [pc, #180]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b144:	4313      	orrs	r3, r2
 800b146:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b148:	4b2b      	ldr	r3, [pc, #172]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14c:	f023 0220 	bic.w	r2, r3, #32
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	4928      	ldr	r1, [pc, #160]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b156:	4313      	orrs	r3, r2
 800b158:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b15a:	4b27      	ldr	r3, [pc, #156]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15e:	4a26      	ldr	r2, [pc, #152]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b160:	f023 0310 	bic.w	r3, r3, #16
 800b164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b166:	4b24      	ldr	r3, [pc, #144]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b16a:	4b24      	ldr	r3, [pc, #144]	@ (800b1fc <RCCEx_PLL2_Config+0x160>)
 800b16c:	4013      	ands	r3, r2
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	69d2      	ldr	r2, [r2, #28]
 800b172:	00d2      	lsls	r2, r2, #3
 800b174:	4920      	ldr	r1, [pc, #128]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b176:	4313      	orrs	r3, r2
 800b178:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b17a:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17e:	4a1e      	ldr	r2, [pc, #120]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b180:	f043 0310 	orr.w	r3, r3, #16
 800b184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d106      	bne.n	800b19a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b18c:	4b1a      	ldr	r3, [pc, #104]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b190:	4a19      	ldr	r2, [pc, #100]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b192:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b198:	e00f      	b.n	800b1ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d106      	bne.n	800b1ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b1a0:	4b15      	ldr	r3, [pc, #84]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a4:	4a14      	ldr	r2, [pc, #80]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b1ac:	e005      	b.n	800b1ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b1ae:	4b12      	ldr	r3, [pc, #72]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b2:	4a11      	ldr	r2, [pc, #68]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b1b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b1ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a0e      	ldr	r2, [pc, #56]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b1c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1c6:	f7f7 fb1b 	bl	8002800 <HAL_GetTick>
 800b1ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1cc:	e008      	b.n	800b1e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1ce:	f7f7 fb17 	bl	8002800 <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d901      	bls.n	800b1e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e006      	b.n	800b1ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1e0:	4b05      	ldr	r3, [pc, #20]	@ (800b1f8 <RCCEx_PLL2_Config+0x15c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0f0      	beq.n	800b1ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	58024400 	.word	0x58024400
 800b1fc:	ffff0007 	.word	0xffff0007

0800b200 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b20e:	4b53      	ldr	r3, [pc, #332]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	2b03      	cmp	r3, #3
 800b218:	d101      	bne.n	800b21e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e099      	b.n	800b352 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b21e:	4b4f      	ldr	r3, [pc, #316]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a4e      	ldr	r2, [pc, #312]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b22a:	f7f7 fae9 	bl	8002800 <HAL_GetTick>
 800b22e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b230:	e008      	b.n	800b244 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b232:	f7f7 fae5 	bl	8002800 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d901      	bls.n	800b244 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e086      	b.n	800b352 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b244:	4b45      	ldr	r3, [pc, #276]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1f0      	bne.n	800b232 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b250:	4b42      	ldr	r3, [pc, #264]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b254:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	051b      	lsls	r3, r3, #20
 800b25e:	493f      	ldr	r1, [pc, #252]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b260:	4313      	orrs	r3, r2
 800b262:	628b      	str	r3, [r1, #40]	@ 0x28
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	3b01      	subs	r3, #1
 800b26a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	3b01      	subs	r3, #1
 800b274:	025b      	lsls	r3, r3, #9
 800b276:	b29b      	uxth	r3, r3
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	3b01      	subs	r3, #1
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b286:	431a      	orrs	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	061b      	lsls	r3, r3, #24
 800b290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b294:	4931      	ldr	r1, [pc, #196]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b296:	4313      	orrs	r3, r2
 800b298:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b29a:	4b30      	ldr	r3, [pc, #192]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	492d      	ldr	r1, [pc, #180]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	4928      	ldr	r1, [pc, #160]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b2be:	4b27      	ldr	r3, [pc, #156]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c2:	4a26      	ldr	r2, [pc, #152]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2ca:	4b24      	ldr	r3, [pc, #144]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ce:	4b24      	ldr	r3, [pc, #144]	@ (800b360 <RCCEx_PLL3_Config+0x160>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	69d2      	ldr	r2, [r2, #28]
 800b2d6:	00d2      	lsls	r2, r2, #3
 800b2d8:	4920      	ldr	r1, [pc, #128]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2de:	4b1f      	ldr	r3, [pc, #124]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d106      	bne.n	800b2fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2f0:	4b1a      	ldr	r3, [pc, #104]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f4:	4a19      	ldr	r2, [pc, #100]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b2f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b2fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2fc:	e00f      	b.n	800b31e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d106      	bne.n	800b312 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b304:	4b15      	ldr	r3, [pc, #84]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b308:	4a14      	ldr	r2, [pc, #80]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b30a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b30e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b310:	e005      	b.n	800b31e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b312:	4b12      	ldr	r3, [pc, #72]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b316:	4a11      	ldr	r2, [pc, #68]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b31c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b31e:	4b0f      	ldr	r3, [pc, #60]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a0e      	ldr	r2, [pc, #56]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32a:	f7f7 fa69 	bl	8002800 <HAL_GetTick>
 800b32e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b330:	e008      	b.n	800b344 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b332:	f7f7 fa65 	bl	8002800 <HAL_GetTick>
 800b336:	4602      	mov	r2, r0
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d901      	bls.n	800b344 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e006      	b.n	800b352 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b344:	4b05      	ldr	r3, [pc, #20]	@ (800b35c <RCCEx_PLL3_Config+0x15c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0f0      	beq.n	800b332 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	58024400 	.word	0x58024400
 800b360:	ffff0007 	.word	0xffff0007

0800b364 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e10f      	b.n	800b596 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a87      	ldr	r2, [pc, #540]	@ (800b5a0 <HAL_SPI_Init+0x23c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d00f      	beq.n	800b3a6 <HAL_SPI_Init+0x42>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a86      	ldr	r2, [pc, #536]	@ (800b5a4 <HAL_SPI_Init+0x240>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d00a      	beq.n	800b3a6 <HAL_SPI_Init+0x42>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a84      	ldr	r2, [pc, #528]	@ (800b5a8 <HAL_SPI_Init+0x244>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d005      	beq.n	800b3a6 <HAL_SPI_Init+0x42>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	2b0f      	cmp	r3, #15
 800b3a0:	d901      	bls.n	800b3a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e0f7      	b.n	800b596 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fe3c 	bl	800c024 <SPI_GetPacketSize>
 800b3ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a7b      	ldr	r2, [pc, #492]	@ (800b5a0 <HAL_SPI_Init+0x23c>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d00c      	beq.n	800b3d2 <HAL_SPI_Init+0x6e>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a79      	ldr	r2, [pc, #484]	@ (800b5a4 <HAL_SPI_Init+0x240>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d007      	beq.n	800b3d2 <HAL_SPI_Init+0x6e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a78      	ldr	r2, [pc, #480]	@ (800b5a8 <HAL_SPI_Init+0x244>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d002      	beq.n	800b3d2 <HAL_SPI_Init+0x6e>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b08      	cmp	r3, #8
 800b3d0:	d811      	bhi.n	800b3f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b3d6:	4a72      	ldr	r2, [pc, #456]	@ (800b5a0 <HAL_SPI_Init+0x23c>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d009      	beq.n	800b3f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a70      	ldr	r2, [pc, #448]	@ (800b5a4 <HAL_SPI_Init+0x240>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d004      	beq.n	800b3f0 <HAL_SPI_Init+0x8c>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a6f      	ldr	r2, [pc, #444]	@ (800b5a8 <HAL_SPI_Init+0x244>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d104      	bne.n	800b3fa <HAL_SPI_Init+0x96>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b10      	cmp	r3, #16
 800b3f4:	d901      	bls.n	800b3fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e0cd      	b.n	800b596 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7f6 feee 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2202      	movs	r2, #2
 800b418:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f022 0201 	bic.w	r2, r2, #1
 800b42a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b436:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b440:	d119      	bne.n	800b476 <HAL_SPI_Init+0x112>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b44a:	d103      	bne.n	800b454 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b450:	2b00      	cmp	r3, #0
 800b452:	d008      	beq.n	800b466 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10c      	bne.n	800b476 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b464:	d107      	bne.n	800b476 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b474:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00f      	beq.n	800b4a2 <HAL_SPI_Init+0x13e>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	2b06      	cmp	r3, #6
 800b488:	d90b      	bls.n	800b4a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	430a      	orrs	r2, r1
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	e007      	b.n	800b4b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b4b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69da      	ldr	r2, [r3, #28]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	431a      	orrs	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c4:	ea42 0103 	orr.w	r1, r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	431a      	orrs	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b506:	431a      	orrs	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b512:	ea42 0103 	orr.w	r1, r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d113      	bne.n	800b552 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b53c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b550:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f022 0201 	bic.w	r2, r2, #1
 800b560:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	430a      	orrs	r2, r1
 800b582:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	40013000 	.word	0x40013000
 800b5a4:	40003800 	.word	0x40003800
 800b5a8:	40003c00 	.word	0x40003c00

0800b5ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	603b      	str	r3, [r7, #0]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3320      	adds	r3, #32
 800b5c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5c4:	f7f7 f91c 	bl	8002800 <HAL_GetTick>
 800b5c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d001      	beq.n	800b5da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	e1d1      	b.n	800b97e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <HAL_SPI_Transmit+0x3a>
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e1c9      	b.n	800b97e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d101      	bne.n	800b5f8 <HAL_SPI_Transmit+0x4c>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	e1c2      	b.n	800b97e <HAL_SPI_Transmit+0x3d2>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2203      	movs	r2, #3
 800b604:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	88fa      	ldrh	r2, [r7, #6]
 800b61a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	88fa      	ldrh	r2, [r7, #6]
 800b622:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2200      	movs	r2, #0
 800b640:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b650:	d108      	bne.n	800b664 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	e009      	b.n	800b678 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b676:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	4b96      	ldr	r3, [pc, #600]	@ (800b8d8 <HAL_SPI_Transmit+0x32c>)
 800b680:	4013      	ands	r3, r2
 800b682:	88f9      	ldrh	r1, [r7, #6]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	6812      	ldr	r2, [r2, #0]
 800b688:	430b      	orrs	r3, r1
 800b68a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0201 	orr.w	r2, r2, #1
 800b69a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6a4:	d107      	bne.n	800b6b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	2b0f      	cmp	r3, #15
 800b6bc:	d947      	bls.n	800b74e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b6be:	e03f      	b.n	800b740 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d114      	bne.n	800b6f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6812      	ldr	r2, [r2, #0]
 800b6d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6de:	1d1a      	adds	r2, r3, #4
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b6f6:	e023      	b.n	800b740 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6f8:	f7f7 f882 	bl	8002800 <HAL_GetTick>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d803      	bhi.n	800b710 <HAL_SPI_Transmit+0x164>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70e:	d102      	bne.n	800b716 <HAL_SPI_Transmit+0x16a>
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d114      	bne.n	800b740 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 fbb6 	bl	800be88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b722:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e11e      	b.n	800b97e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b746:	b29b      	uxth	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1b9      	bne.n	800b6c0 <HAL_SPI_Transmit+0x114>
 800b74c:	e0f1      	b.n	800b932 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	2b07      	cmp	r3, #7
 800b754:	f240 80e6 	bls.w	800b924 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b758:	e05d      	b.n	800b816 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	f003 0302 	and.w	r3, r3, #2
 800b764:	2b02      	cmp	r3, #2
 800b766:	d132      	bne.n	800b7ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b76e:	b29b      	uxth	r3, r3
 800b770:	2b01      	cmp	r3, #1
 800b772:	d918      	bls.n	800b7a6 <HAL_SPI_Transmit+0x1fa>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d014      	beq.n	800b7a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6812      	ldr	r2, [r2, #0]
 800b786:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b78c:	1d1a      	adds	r2, r3, #4
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b798:	b29b      	uxth	r3, r3
 800b79a:	3b02      	subs	r3, #2
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7a4:	e037      	b.n	800b816 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7aa:	881a      	ldrh	r2, [r3, #0]
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7b4:	1c9a      	adds	r2, r3, #2
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7cc:	e023      	b.n	800b816 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7ce:	f7f7 f817 	bl	8002800 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d803      	bhi.n	800b7e6 <HAL_SPI_Transmit+0x23a>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e4:	d102      	bne.n	800b7ec <HAL_SPI_Transmit+0x240>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d114      	bne.n	800b816 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 fb4b 	bl	800be88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e0b3      	b.n	800b97e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d19b      	bne.n	800b75a <HAL_SPI_Transmit+0x1ae>
 800b822:	e086      	b.n	800b932 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	f003 0302 	and.w	r3, r3, #2
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d154      	bne.n	800b8dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b838:	b29b      	uxth	r3, r3
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d918      	bls.n	800b870 <HAL_SPI_Transmit+0x2c4>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b842:	2b40      	cmp	r3, #64	@ 0x40
 800b844:	d914      	bls.n	800b870 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6812      	ldr	r2, [r2, #0]
 800b850:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b856:	1d1a      	adds	r2, r3, #4
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b862:	b29b      	uxth	r3, r3
 800b864:	3b04      	subs	r3, #4
 800b866:	b29a      	uxth	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b86e:	e059      	b.n	800b924 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b876:	b29b      	uxth	r3, r3
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d917      	bls.n	800b8ac <HAL_SPI_Transmit+0x300>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d013      	beq.n	800b8ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b888:	881a      	ldrh	r2, [r3, #0]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b892:	1c9a      	adds	r2, r3, #2
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	3b02      	subs	r3, #2
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8aa:	e03b      	b.n	800b924 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3320      	adds	r3, #32
 800b8b6:	7812      	ldrb	r2, [r2, #0]
 800b8b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8d6:	e025      	b.n	800b924 <HAL_SPI_Transmit+0x378>
 800b8d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8dc:	f7f6 ff90 	bl	8002800 <HAL_GetTick>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d803      	bhi.n	800b8f4 <HAL_SPI_Transmit+0x348>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f2:	d102      	bne.n	800b8fa <HAL_SPI_Transmit+0x34e>
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d114      	bne.n	800b924 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 fac4 	bl	800be88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b906:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e02c      	b.n	800b97e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f47f af79 	bne.w	800b824 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2200      	movs	r2, #0
 800b93a:	2108      	movs	r1, #8
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 fb43 	bl	800bfc8 <SPI_WaitOnFlagUntilTimeout>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d007      	beq.n	800b958 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b94e:	f043 0220 	orr.w	r2, r3, #32
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f000 fa95 	bl	800be88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b97c:	2300      	movs	r3, #0
  }
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop

0800b988 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	603b      	str	r3, [r7, #0]
 800b994:	4613      	mov	r3, r2
 800b996:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b99c:	095b      	lsrs	r3, r3, #5
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3330      	adds	r3, #48	@ 0x30
 800b9aa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9ac:	f7f6 ff28 	bl	8002800 <HAL_GetTick>
 800b9b0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d001      	beq.n	800b9c2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e250      	b.n	800be64 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <HAL_SPI_Receive+0x46>
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e248      	b.n	800be64 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d101      	bne.n	800b9e0 <HAL_SPI_Receive+0x58>
 800b9dc:	2302      	movs	r3, #2
 800b9de:	e241      	b.n	800be64 <HAL_SPI_Receive+0x4dc>
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2204      	movs	r2, #4
 800b9ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	88fa      	ldrh	r2, [r7, #6]
 800ba02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	88fa      	ldrh	r2, [r7, #6]
 800ba0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ba38:	d108      	bne.n	800ba4c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	e009      	b.n	800ba60 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ba5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	4b95      	ldr	r3, [pc, #596]	@ (800bcbc <HAL_SPI_Receive+0x334>)
 800ba68:	4013      	ands	r3, r2
 800ba6a:	88f9      	ldrh	r1, [r7, #6]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	6812      	ldr	r2, [r2, #0]
 800ba70:	430b      	orrs	r3, r1
 800ba72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0201 	orr.w	r2, r2, #1
 800ba82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba8c:	d107      	bne.n	800ba9e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	2b0f      	cmp	r3, #15
 800baa4:	d96c      	bls.n	800bb80 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800baa6:	e064      	b.n	800bb72 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b01      	cmp	r3, #1
 800babc:	d114      	bne.n	800bae8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bac6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bac8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bace:	1d1a      	adds	r2, r3, #4
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bada:	b29b      	uxth	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	b29a      	uxth	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bae6:	e044      	b.n	800bb72 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800baee:	b29b      	uxth	r3, r3
 800baf0:	8bfa      	ldrh	r2, [r7, #30]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d919      	bls.n	800bb2a <HAL_SPI_Receive+0x1a2>
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d014      	beq.n	800bb2a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb0a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb10:	1d1a      	adds	r2, r3, #4
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb28:	e023      	b.n	800bb72 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb2a:	f7f6 fe69 	bl	8002800 <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	683a      	ldr	r2, [r7, #0]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d803      	bhi.n	800bb42 <HAL_SPI_Receive+0x1ba>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb40:	d102      	bne.n	800bb48 <HAL_SPI_Receive+0x1c0>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d114      	bne.n	800bb72 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f000 f99d 	bl	800be88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e178      	b.n	800be64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d194      	bne.n	800baa8 <HAL_SPI_Receive+0x120>
 800bb7e:	e15e      	b.n	800be3e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	2b07      	cmp	r3, #7
 800bb86:	f240 8153 	bls.w	800be30 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bb8a:	e08f      	b.n	800bcac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d114      	bne.n	800bbcc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	8812      	ldrh	r2, [r2, #0]
 800bbaa:	b292      	uxth	r2, r2
 800bbac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbb2:	1c9a      	adds	r2, r3, #2
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bbca:	e06f      	b.n	800bcac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	8bfa      	ldrh	r2, [r7, #30]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d924      	bls.n	800bc24 <HAL_SPI_Receive+0x29c>
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d01f      	beq.n	800bc24 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	8812      	ldrh	r2, [r2, #0]
 800bbec:	b292      	uxth	r2, r2
 800bbee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf4:	1c9a      	adds	r2, r3, #2
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	8812      	ldrh	r2, [r2, #0]
 800bc02:	b292      	uxth	r2, r2
 800bc04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc0a:	1c9a      	adds	r2, r3, #2
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	3b02      	subs	r3, #2
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc22:	e043      	b.n	800bcac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d119      	bne.n	800bc64 <HAL_SPI_Receive+0x2dc>
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d014      	beq.n	800bc64 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	8812      	ldrh	r2, [r2, #0]
 800bc42:	b292      	uxth	r2, r2
 800bc44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc4a:	1c9a      	adds	r2, r3, #2
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc62:	e023      	b.n	800bcac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc64:	f7f6 fdcc 	bl	8002800 <HAL_GetTick>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d803      	bhi.n	800bc7c <HAL_SPI_Receive+0x2f4>
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7a:	d102      	bne.n	800bc82 <HAL_SPI_Receive+0x2fa>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d114      	bne.n	800bcac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 f900 	bl	800be88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e0db      	b.n	800be64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f47f af69 	bne.w	800bb8c <HAL_SPI_Receive+0x204>
 800bcba:	e0c0      	b.n	800be3e <HAL_SPI_Receive+0x4b6>
 800bcbc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d117      	bne.n	800bd06 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bce2:	7812      	ldrb	r2, [r2, #0]
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd04:	e094      	b.n	800be30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	8bfa      	ldrh	r2, [r7, #30]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d946      	bls.n	800bda2 <HAL_SPI_Receive+0x41a>
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d041      	beq.n	800bda2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd2a:	7812      	ldrb	r2, [r2, #0]
 800bd2c:	b2d2      	uxtb	r2, r2
 800bd2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd46:	7812      	ldrb	r2, [r2, #0]
 800bd48:	b2d2      	uxtb	r2, r2
 800bd4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd62:	7812      	ldrb	r2, [r2, #0]
 800bd64:	b2d2      	uxtb	r2, r2
 800bd66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd7e:	7812      	ldrb	r2, [r2, #0]
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	3b04      	subs	r3, #4
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bda0:	e046      	b.n	800be30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d81c      	bhi.n	800bde8 <HAL_SPI_Receive+0x460>
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d017      	beq.n	800bde8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdc4:	7812      	ldrb	r2, [r2, #0]
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bde6:	e023      	b.n	800be30 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bde8:	f7f6 fd0a 	bl	8002800 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d803      	bhi.n	800be00 <HAL_SPI_Receive+0x478>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d102      	bne.n	800be06 <HAL_SPI_Receive+0x47e>
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d114      	bne.n	800be30 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f83e 	bl	800be88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be2c:	2303      	movs	r3, #3
 800be2e:	e019      	b.n	800be64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be36:	b29b      	uxth	r3, r3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f47f af41 	bne.w	800bcc0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 f822 	bl	800be88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e000      	b.n	800be64 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800be62:	2300      	movs	r3, #0
  }
}
 800be64:	4618      	mov	r0, r3
 800be66:	3720      	adds	r7, #32
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800be7a:	b2db      	uxtb	r3, r3
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	699a      	ldr	r2, [r3, #24]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f042 0208 	orr.w	r2, r2, #8
 800bea6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	699a      	ldr	r2, [r3, #24]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f042 0210 	orr.w	r2, r2, #16
 800beb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f022 0201 	bic.w	r2, r2, #1
 800bec6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6919      	ldr	r1, [r3, #16]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	4b3c      	ldr	r3, [pc, #240]	@ (800bfc4 <SPI_CloseTransfer+0x13c>)
 800bed4:	400b      	ands	r3, r1
 800bed6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689a      	ldr	r2, [r3, #8]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bee6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	d014      	beq.n	800bf1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f003 0320 	and.w	r3, r3, #32
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00f      	beq.n	800bf1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	699a      	ldr	r2, [r3, #24]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f042 0220 	orr.w	r2, r2, #32
 800bf1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d014      	beq.n	800bf54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00f      	beq.n	800bf54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf3a:	f043 0204 	orr.w	r2, r3, #4
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	699a      	ldr	r2, [r3, #24]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00f      	beq.n	800bf7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf64:	f043 0201 	orr.w	r2, r3, #1
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	699a      	ldr	r2, [r3, #24]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00f      	beq.n	800bfa8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf8e:	f043 0208 	orr.w	r2, r3, #8
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	699a      	ldr	r2, [r3, #24]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfa6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bfb8:	bf00      	nop
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	fffffc90 	.word	0xfffffc90

0800bfc8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	603b      	str	r3, [r7, #0]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bfd8:	e010      	b.n	800bffc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfda:	f7f6 fc11 	bl	8002800 <HAL_GetTick>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d803      	bhi.n	800bff2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff0:	d102      	bne.n	800bff8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bff8:	2303      	movs	r3, #3
 800bffa:	e00f      	b.n	800c01c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	695a      	ldr	r2, [r3, #20]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	4013      	ands	r3, r2
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	429a      	cmp	r2, r3
 800c00a:	bf0c      	ite	eq
 800c00c:	2301      	moveq	r3, #1
 800c00e:	2300      	movne	r3, #0
 800c010:	b2db      	uxtb	r3, r3
 800c012:	461a      	mov	r2, r3
 800c014:	79fb      	ldrb	r3, [r7, #7]
 800c016:	429a      	cmp	r2, r3
 800c018:	d0df      	beq.n	800bfda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c030:	095b      	lsrs	r3, r3, #5
 800c032:	3301      	adds	r3, #1
 800c034:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	3301      	adds	r3, #1
 800c03c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	3307      	adds	r3, #7
 800c042:	08db      	lsrs	r3, r3, #3
 800c044:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	e049      	b.n	800c100 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7f6 f945 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2202      	movs	r2, #2
 800c08a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3304      	adds	r3, #4
 800c096:	4619      	mov	r1, r3
 800c098:	4610      	mov	r0, r2
 800c09a:	f000 fa65 	bl	800c568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d109      	bne.n	800c12c <HAL_TIM_PWM_Start+0x24>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b01      	cmp	r3, #1
 800c122:	bf14      	ite	ne
 800c124:	2301      	movne	r3, #1
 800c126:	2300      	moveq	r3, #0
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	e03c      	b.n	800c1a6 <HAL_TIM_PWM_Start+0x9e>
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2b04      	cmp	r3, #4
 800c130:	d109      	bne.n	800c146 <HAL_TIM_PWM_Start+0x3e>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	bf14      	ite	ne
 800c13e:	2301      	movne	r3, #1
 800c140:	2300      	moveq	r3, #0
 800c142:	b2db      	uxtb	r3, r3
 800c144:	e02f      	b.n	800c1a6 <HAL_TIM_PWM_Start+0x9e>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b08      	cmp	r3, #8
 800c14a:	d109      	bne.n	800c160 <HAL_TIM_PWM_Start+0x58>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b01      	cmp	r3, #1
 800c156:	bf14      	ite	ne
 800c158:	2301      	movne	r3, #1
 800c15a:	2300      	moveq	r3, #0
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	e022      	b.n	800c1a6 <HAL_TIM_PWM_Start+0x9e>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b0c      	cmp	r3, #12
 800c164:	d109      	bne.n	800c17a <HAL_TIM_PWM_Start+0x72>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b01      	cmp	r3, #1
 800c170:	bf14      	ite	ne
 800c172:	2301      	movne	r3, #1
 800c174:	2300      	moveq	r3, #0
 800c176:	b2db      	uxtb	r3, r3
 800c178:	e015      	b.n	800c1a6 <HAL_TIM_PWM_Start+0x9e>
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b10      	cmp	r3, #16
 800c17e:	d109      	bne.n	800c194 <HAL_TIM_PWM_Start+0x8c>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	bf14      	ite	ne
 800c18c:	2301      	movne	r3, #1
 800c18e:	2300      	moveq	r3, #0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	e008      	b.n	800c1a6 <HAL_TIM_PWM_Start+0x9e>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	bf14      	ite	ne
 800c1a0:	2301      	movne	r3, #1
 800c1a2:	2300      	moveq	r3, #0
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e0ab      	b.n	800c306 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d104      	bne.n	800c1be <HAL_TIM_PWM_Start+0xb6>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1bc:	e023      	b.n	800c206 <HAL_TIM_PWM_Start+0xfe>
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b04      	cmp	r3, #4
 800c1c2:	d104      	bne.n	800c1ce <HAL_TIM_PWM_Start+0xc6>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1cc:	e01b      	b.n	800c206 <HAL_TIM_PWM_Start+0xfe>
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b08      	cmp	r3, #8
 800c1d2:	d104      	bne.n	800c1de <HAL_TIM_PWM_Start+0xd6>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1dc:	e013      	b.n	800c206 <HAL_TIM_PWM_Start+0xfe>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b0c      	cmp	r3, #12
 800c1e2:	d104      	bne.n	800c1ee <HAL_TIM_PWM_Start+0xe6>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c1ec:	e00b      	b.n	800c206 <HAL_TIM_PWM_Start+0xfe>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b10      	cmp	r3, #16
 800c1f2:	d104      	bne.n	800c1fe <HAL_TIM_PWM_Start+0xf6>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1fc:	e003      	b.n	800c206 <HAL_TIM_PWM_Start+0xfe>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2202      	movs	r2, #2
 800c202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2201      	movs	r2, #1
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 fd32 	bl	800cc78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a3d      	ldr	r2, [pc, #244]	@ (800c310 <HAL_TIM_PWM_Start+0x208>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d013      	beq.n	800c246 <HAL_TIM_PWM_Start+0x13e>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a3c      	ldr	r2, [pc, #240]	@ (800c314 <HAL_TIM_PWM_Start+0x20c>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d00e      	beq.n	800c246 <HAL_TIM_PWM_Start+0x13e>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a3a      	ldr	r2, [pc, #232]	@ (800c318 <HAL_TIM_PWM_Start+0x210>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d009      	beq.n	800c246 <HAL_TIM_PWM_Start+0x13e>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a39      	ldr	r2, [pc, #228]	@ (800c31c <HAL_TIM_PWM_Start+0x214>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d004      	beq.n	800c246 <HAL_TIM_PWM_Start+0x13e>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a37      	ldr	r2, [pc, #220]	@ (800c320 <HAL_TIM_PWM_Start+0x218>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d101      	bne.n	800c24a <HAL_TIM_PWM_Start+0x142>
 800c246:	2301      	movs	r3, #1
 800c248:	e000      	b.n	800c24c <HAL_TIM_PWM_Start+0x144>
 800c24a:	2300      	movs	r3, #0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d007      	beq.n	800c260 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c25e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a2a      	ldr	r2, [pc, #168]	@ (800c310 <HAL_TIM_PWM_Start+0x208>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d02c      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c272:	d027      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a2a      	ldr	r2, [pc, #168]	@ (800c324 <HAL_TIM_PWM_Start+0x21c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d022      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a29      	ldr	r2, [pc, #164]	@ (800c328 <HAL_TIM_PWM_Start+0x220>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d01d      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a27      	ldr	r2, [pc, #156]	@ (800c32c <HAL_TIM_PWM_Start+0x224>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d018      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a1f      	ldr	r2, [pc, #124]	@ (800c314 <HAL_TIM_PWM_Start+0x20c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d013      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a23      	ldr	r2, [pc, #140]	@ (800c330 <HAL_TIM_PWM_Start+0x228>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d00e      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c318 <HAL_TIM_PWM_Start+0x210>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d009      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a1f      	ldr	r2, [pc, #124]	@ (800c334 <HAL_TIM_PWM_Start+0x22c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d004      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x1bc>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a1e      	ldr	r2, [pc, #120]	@ (800c338 <HAL_TIM_PWM_Start+0x230>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d115      	bne.n	800c2f0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	4b1c      	ldr	r3, [pc, #112]	@ (800c33c <HAL_TIM_PWM_Start+0x234>)
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b06      	cmp	r3, #6
 800c2d4:	d015      	beq.n	800c302 <HAL_TIM_PWM_Start+0x1fa>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2dc:	d011      	beq.n	800c302 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f042 0201 	orr.w	r2, r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ee:	e008      	b.n	800c302 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f042 0201 	orr.w	r2, r2, #1
 800c2fe:	601a      	str	r2, [r3, #0]
 800c300:	e000      	b.n	800c304 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	40010000 	.word	0x40010000
 800c314:	40010400 	.word	0x40010400
 800c318:	40014000 	.word	0x40014000
 800c31c:	40014400 	.word	0x40014400
 800c320:	40014800 	.word	0x40014800
 800c324:	40000400 	.word	0x40000400
 800c328:	40000800 	.word	0x40000800
 800c32c:	40000c00 	.word	0x40000c00
 800c330:	40001800 	.word	0x40001800
 800c334:	4000e000 	.word	0x4000e000
 800c338:	4000e400 	.word	0x4000e400
 800c33c:	00010007 	.word	0x00010007

0800c340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c356:	2b01      	cmp	r3, #1
 800c358:	d101      	bne.n	800c35e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c35a:	2302      	movs	r3, #2
 800c35c:	e0ff      	b.n	800c55e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2201      	movs	r2, #1
 800c362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2b14      	cmp	r3, #20
 800c36a:	f200 80f0 	bhi.w	800c54e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c36e:	a201      	add	r2, pc, #4	@ (adr r2, 800c374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c3c9 	.word	0x0800c3c9
 800c378:	0800c54f 	.word	0x0800c54f
 800c37c:	0800c54f 	.word	0x0800c54f
 800c380:	0800c54f 	.word	0x0800c54f
 800c384:	0800c409 	.word	0x0800c409
 800c388:	0800c54f 	.word	0x0800c54f
 800c38c:	0800c54f 	.word	0x0800c54f
 800c390:	0800c54f 	.word	0x0800c54f
 800c394:	0800c44b 	.word	0x0800c44b
 800c398:	0800c54f 	.word	0x0800c54f
 800c39c:	0800c54f 	.word	0x0800c54f
 800c3a0:	0800c54f 	.word	0x0800c54f
 800c3a4:	0800c48b 	.word	0x0800c48b
 800c3a8:	0800c54f 	.word	0x0800c54f
 800c3ac:	0800c54f 	.word	0x0800c54f
 800c3b0:	0800c54f 	.word	0x0800c54f
 800c3b4:	0800c4cd 	.word	0x0800c4cd
 800c3b8:	0800c54f 	.word	0x0800c54f
 800c3bc:	0800c54f 	.word	0x0800c54f
 800c3c0:	0800c54f 	.word	0x0800c54f
 800c3c4:	0800c50d 	.word	0x0800c50d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68b9      	ldr	r1, [r7, #8]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f97c 	bl	800c6cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	699a      	ldr	r2, [r3, #24]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0208 	orr.w	r2, r2, #8
 800c3e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	699a      	ldr	r2, [r3, #24]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f022 0204 	bic.w	r2, r2, #4
 800c3f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6999      	ldr	r1, [r3, #24]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	691a      	ldr	r2, [r3, #16]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	430a      	orrs	r2, r1
 800c404:	619a      	str	r2, [r3, #24]
      break;
 800c406:	e0a5      	b.n	800c554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 f9ec 	bl	800c7ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	699a      	ldr	r2, [r3, #24]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	699a      	ldr	r2, [r3, #24]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6999      	ldr	r1, [r3, #24]
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	021a      	lsls	r2, r3, #8
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	430a      	orrs	r2, r1
 800c446:	619a      	str	r2, [r3, #24]
      break;
 800c448:	e084      	b.n	800c554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68b9      	ldr	r1, [r7, #8]
 800c450:	4618      	mov	r0, r3
 800c452:	f000 fa55 	bl	800c900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	69da      	ldr	r2, [r3, #28]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f042 0208 	orr.w	r2, r2, #8
 800c464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	69da      	ldr	r2, [r3, #28]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f022 0204 	bic.w	r2, r2, #4
 800c474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	69d9      	ldr	r1, [r3, #28]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	691a      	ldr	r2, [r3, #16]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	61da      	str	r2, [r3, #28]
      break;
 800c488:	e064      	b.n	800c554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	4618      	mov	r0, r3
 800c492:	f000 fabd 	bl	800ca10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	69da      	ldr	r2, [r3, #28]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	69da      	ldr	r2, [r3, #28]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	69d9      	ldr	r1, [r3, #28]
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	021a      	lsls	r2, r3, #8
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	61da      	str	r2, [r3, #28]
      break;
 800c4ca:	e043      	b.n	800c554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68b9      	ldr	r1, [r7, #8]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 fb06 	bl	800cae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f042 0208 	orr.w	r2, r2, #8
 800c4e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f022 0204 	bic.w	r2, r2, #4
 800c4f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	691a      	ldr	r2, [r3, #16]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c50a:	e023      	b.n	800c554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68b9      	ldr	r1, [r7, #8]
 800c512:	4618      	mov	r0, r3
 800c514:	f000 fb4a 	bl	800cbac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c526:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c536:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	021a      	lsls	r2, r3, #8
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	430a      	orrs	r2, r1
 800c54a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c54c:	e002      	b.n	800c554 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	75fb      	strb	r3, [r7, #23]
      break;
 800c552:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop

0800c568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a4a      	ldr	r2, [pc, #296]	@ (800c6a4 <TIM_Base_SetConfig+0x13c>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d013      	beq.n	800c5a8 <TIM_Base_SetConfig+0x40>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c586:	d00f      	beq.n	800c5a8 <TIM_Base_SetConfig+0x40>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a47      	ldr	r2, [pc, #284]	@ (800c6a8 <TIM_Base_SetConfig+0x140>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d00b      	beq.n	800c5a8 <TIM_Base_SetConfig+0x40>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a46      	ldr	r2, [pc, #280]	@ (800c6ac <TIM_Base_SetConfig+0x144>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d007      	beq.n	800c5a8 <TIM_Base_SetConfig+0x40>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a45      	ldr	r2, [pc, #276]	@ (800c6b0 <TIM_Base_SetConfig+0x148>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d003      	beq.n	800c5a8 <TIM_Base_SetConfig+0x40>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a44      	ldr	r2, [pc, #272]	@ (800c6b4 <TIM_Base_SetConfig+0x14c>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d108      	bne.n	800c5ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a39      	ldr	r2, [pc, #228]	@ (800c6a4 <TIM_Base_SetConfig+0x13c>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d027      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5c8:	d023      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a36      	ldr	r2, [pc, #216]	@ (800c6a8 <TIM_Base_SetConfig+0x140>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d01f      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a35      	ldr	r2, [pc, #212]	@ (800c6ac <TIM_Base_SetConfig+0x144>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d01b      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a34      	ldr	r2, [pc, #208]	@ (800c6b0 <TIM_Base_SetConfig+0x148>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d017      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a33      	ldr	r2, [pc, #204]	@ (800c6b4 <TIM_Base_SetConfig+0x14c>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d013      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a32      	ldr	r2, [pc, #200]	@ (800c6b8 <TIM_Base_SetConfig+0x150>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d00f      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a31      	ldr	r2, [pc, #196]	@ (800c6bc <TIM_Base_SetConfig+0x154>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d00b      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a30      	ldr	r2, [pc, #192]	@ (800c6c0 <TIM_Base_SetConfig+0x158>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d007      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a2f      	ldr	r2, [pc, #188]	@ (800c6c4 <TIM_Base_SetConfig+0x15c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d003      	beq.n	800c612 <TIM_Base_SetConfig+0xaa>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a2e      	ldr	r2, [pc, #184]	@ (800c6c8 <TIM_Base_SetConfig+0x160>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d108      	bne.n	800c624 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	4313      	orrs	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	4313      	orrs	r3, r2
 800c630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	689a      	ldr	r2, [r3, #8]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a16      	ldr	r2, [pc, #88]	@ (800c6a4 <TIM_Base_SetConfig+0x13c>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d00f      	beq.n	800c670 <TIM_Base_SetConfig+0x108>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a18      	ldr	r2, [pc, #96]	@ (800c6b4 <TIM_Base_SetConfig+0x14c>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d00b      	beq.n	800c670 <TIM_Base_SetConfig+0x108>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a17      	ldr	r2, [pc, #92]	@ (800c6b8 <TIM_Base_SetConfig+0x150>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d007      	beq.n	800c670 <TIM_Base_SetConfig+0x108>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a16      	ldr	r2, [pc, #88]	@ (800c6bc <TIM_Base_SetConfig+0x154>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d003      	beq.n	800c670 <TIM_Base_SetConfig+0x108>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a15      	ldr	r2, [pc, #84]	@ (800c6c0 <TIM_Base_SetConfig+0x158>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d103      	bne.n	800c678 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	691a      	ldr	r2, [r3, #16]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	f003 0301 	and.w	r3, r3, #1
 800c686:	2b01      	cmp	r3, #1
 800c688:	d105      	bne.n	800c696 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	f023 0201 	bic.w	r2, r3, #1
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	611a      	str	r2, [r3, #16]
  }
}
 800c696:	bf00      	nop
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	40010000 	.word	0x40010000
 800c6a8:	40000400 	.word	0x40000400
 800c6ac:	40000800 	.word	0x40000800
 800c6b0:	40000c00 	.word	0x40000c00
 800c6b4:	40010400 	.word	0x40010400
 800c6b8:	40014000 	.word	0x40014000
 800c6bc:	40014400 	.word	0x40014400
 800c6c0:	40014800 	.word	0x40014800
 800c6c4:	4000e000 	.word	0x4000e000
 800c6c8:	4000e400 	.word	0x4000e400

0800c6cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	f023 0201 	bic.w	r2, r3, #1
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4b37      	ldr	r3, [pc, #220]	@ (800c7d4 <TIM_OC1_SetConfig+0x108>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f023 0303 	bic.w	r3, r3, #3
 800c702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f023 0302 	bic.w	r3, r3, #2
 800c714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a2d      	ldr	r2, [pc, #180]	@ (800c7d8 <TIM_OC1_SetConfig+0x10c>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d00f      	beq.n	800c748 <TIM_OC1_SetConfig+0x7c>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a2c      	ldr	r2, [pc, #176]	@ (800c7dc <TIM_OC1_SetConfig+0x110>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d00b      	beq.n	800c748 <TIM_OC1_SetConfig+0x7c>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a2b      	ldr	r2, [pc, #172]	@ (800c7e0 <TIM_OC1_SetConfig+0x114>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d007      	beq.n	800c748 <TIM_OC1_SetConfig+0x7c>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a2a      	ldr	r2, [pc, #168]	@ (800c7e4 <TIM_OC1_SetConfig+0x118>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d003      	beq.n	800c748 <TIM_OC1_SetConfig+0x7c>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a29      	ldr	r2, [pc, #164]	@ (800c7e8 <TIM_OC1_SetConfig+0x11c>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d10c      	bne.n	800c762 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f023 0308 	bic.w	r3, r3, #8
 800c74e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	4313      	orrs	r3, r2
 800c758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f023 0304 	bic.w	r3, r3, #4
 800c760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a1c      	ldr	r2, [pc, #112]	@ (800c7d8 <TIM_OC1_SetConfig+0x10c>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d00f      	beq.n	800c78a <TIM_OC1_SetConfig+0xbe>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a1b      	ldr	r2, [pc, #108]	@ (800c7dc <TIM_OC1_SetConfig+0x110>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d00b      	beq.n	800c78a <TIM_OC1_SetConfig+0xbe>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a1a      	ldr	r2, [pc, #104]	@ (800c7e0 <TIM_OC1_SetConfig+0x114>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d007      	beq.n	800c78a <TIM_OC1_SetConfig+0xbe>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a19      	ldr	r2, [pc, #100]	@ (800c7e4 <TIM_OC1_SetConfig+0x118>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d003      	beq.n	800c78a <TIM_OC1_SetConfig+0xbe>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a18      	ldr	r2, [pc, #96]	@ (800c7e8 <TIM_OC1_SetConfig+0x11c>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d111      	bne.n	800c7ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	695b      	ldr	r3, [r3, #20]
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	693a      	ldr	r2, [r7, #16]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	697a      	ldr	r2, [r7, #20]
 800c7c6:	621a      	str	r2, [r3, #32]
}
 800c7c8:	bf00      	nop
 800c7ca:	371c      	adds	r7, #28
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	fffeff8f 	.word	0xfffeff8f
 800c7d8:	40010000 	.word	0x40010000
 800c7dc:	40010400 	.word	0x40010400
 800c7e0:	40014000 	.word	0x40014000
 800c7e4:	40014400 	.word	0x40014400
 800c7e8:	40014800 	.word	0x40014800

0800c7ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a1b      	ldr	r3, [r3, #32]
 800c800:	f023 0210 	bic.w	r2, r3, #16
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	4b34      	ldr	r3, [pc, #208]	@ (800c8e8 <TIM_OC2_SetConfig+0xfc>)
 800c818:	4013      	ands	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	f023 0320 	bic.w	r3, r3, #32
 800c836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	011b      	lsls	r3, r3, #4
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4313      	orrs	r3, r2
 800c842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a29      	ldr	r2, [pc, #164]	@ (800c8ec <TIM_OC2_SetConfig+0x100>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d003      	beq.n	800c854 <TIM_OC2_SetConfig+0x68>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a28      	ldr	r2, [pc, #160]	@ (800c8f0 <TIM_OC2_SetConfig+0x104>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d10d      	bne.n	800c870 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	4313      	orrs	r3, r2
 800c866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c86e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a1e      	ldr	r2, [pc, #120]	@ (800c8ec <TIM_OC2_SetConfig+0x100>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d00f      	beq.n	800c898 <TIM_OC2_SetConfig+0xac>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a1d      	ldr	r2, [pc, #116]	@ (800c8f0 <TIM_OC2_SetConfig+0x104>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d00b      	beq.n	800c898 <TIM_OC2_SetConfig+0xac>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a1c      	ldr	r2, [pc, #112]	@ (800c8f4 <TIM_OC2_SetConfig+0x108>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d007      	beq.n	800c898 <TIM_OC2_SetConfig+0xac>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a1b      	ldr	r2, [pc, #108]	@ (800c8f8 <TIM_OC2_SetConfig+0x10c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d003      	beq.n	800c898 <TIM_OC2_SetConfig+0xac>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a1a      	ldr	r2, [pc, #104]	@ (800c8fc <TIM_OC2_SetConfig+0x110>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d113      	bne.n	800c8c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c89e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c8a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	621a      	str	r2, [r3, #32]
}
 800c8da:	bf00      	nop
 800c8dc:	371c      	adds	r7, #28
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	feff8fff 	.word	0xfeff8fff
 800c8ec:	40010000 	.word	0x40010000
 800c8f0:	40010400 	.word	0x40010400
 800c8f4:	40014000 	.word	0x40014000
 800c8f8:	40014400 	.word	0x40014400
 800c8fc:	40014800 	.word	0x40014800

0800c900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c900:	b480      	push	{r7}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a1b      	ldr	r3, [r3, #32]
 800c914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	4b33      	ldr	r3, [pc, #204]	@ (800c9f8 <TIM_OC3_SetConfig+0xf8>)
 800c92c:	4013      	ands	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f023 0303 	bic.w	r3, r3, #3
 800c936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	4313      	orrs	r3, r2
 800c940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	021b      	lsls	r3, r3, #8
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	4313      	orrs	r3, r2
 800c954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a28      	ldr	r2, [pc, #160]	@ (800c9fc <TIM_OC3_SetConfig+0xfc>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d003      	beq.n	800c966 <TIM_OC3_SetConfig+0x66>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a27      	ldr	r2, [pc, #156]	@ (800ca00 <TIM_OC3_SetConfig+0x100>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d10d      	bne.n	800c982 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c96c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	021b      	lsls	r3, r3, #8
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	4313      	orrs	r3, r2
 800c978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a1d      	ldr	r2, [pc, #116]	@ (800c9fc <TIM_OC3_SetConfig+0xfc>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d00f      	beq.n	800c9aa <TIM_OC3_SetConfig+0xaa>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a1c      	ldr	r2, [pc, #112]	@ (800ca00 <TIM_OC3_SetConfig+0x100>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d00b      	beq.n	800c9aa <TIM_OC3_SetConfig+0xaa>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a1b      	ldr	r2, [pc, #108]	@ (800ca04 <TIM_OC3_SetConfig+0x104>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d007      	beq.n	800c9aa <TIM_OC3_SetConfig+0xaa>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a1a      	ldr	r2, [pc, #104]	@ (800ca08 <TIM_OC3_SetConfig+0x108>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d003      	beq.n	800c9aa <TIM_OC3_SetConfig+0xaa>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a19      	ldr	r2, [pc, #100]	@ (800ca0c <TIM_OC3_SetConfig+0x10c>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d113      	bne.n	800c9d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	011b      	lsls	r3, r3, #4
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	621a      	str	r2, [r3, #32]
}
 800c9ec:	bf00      	nop
 800c9ee:	371c      	adds	r7, #28
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	fffeff8f 	.word	0xfffeff8f
 800c9fc:	40010000 	.word	0x40010000
 800ca00:	40010400 	.word	0x40010400
 800ca04:	40014000 	.word	0x40014000
 800ca08:	40014400 	.word	0x40014400
 800ca0c:	40014800 	.word	0x40014800

0800ca10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a1b      	ldr	r3, [r3, #32]
 800ca24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	69db      	ldr	r3, [r3, #28]
 800ca36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	4b24      	ldr	r3, [pc, #144]	@ (800cacc <TIM_OC4_SetConfig+0xbc>)
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	021b      	lsls	r3, r3, #8
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	031b      	lsls	r3, r3, #12
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a19      	ldr	r2, [pc, #100]	@ (800cad0 <TIM_OC4_SetConfig+0xc0>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00f      	beq.n	800ca90 <TIM_OC4_SetConfig+0x80>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a18      	ldr	r2, [pc, #96]	@ (800cad4 <TIM_OC4_SetConfig+0xc4>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d00b      	beq.n	800ca90 <TIM_OC4_SetConfig+0x80>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a17      	ldr	r2, [pc, #92]	@ (800cad8 <TIM_OC4_SetConfig+0xc8>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d007      	beq.n	800ca90 <TIM_OC4_SetConfig+0x80>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a16      	ldr	r2, [pc, #88]	@ (800cadc <TIM_OC4_SetConfig+0xcc>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d003      	beq.n	800ca90 <TIM_OC4_SetConfig+0x80>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a15      	ldr	r2, [pc, #84]	@ (800cae0 <TIM_OC4_SetConfig+0xd0>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d109      	bne.n	800caa4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	019b      	lsls	r3, r3, #6
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	621a      	str	r2, [r3, #32]
}
 800cabe:	bf00      	nop
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	feff8fff 	.word	0xfeff8fff
 800cad0:	40010000 	.word	0x40010000
 800cad4:	40010400 	.word	0x40010400
 800cad8:	40014000 	.word	0x40014000
 800cadc:	40014400 	.word	0x40014400
 800cae0:	40014800 	.word	0x40014800

0800cae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a1b      	ldr	r3, [r3, #32]
 800caf8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	4b21      	ldr	r3, [pc, #132]	@ (800cb94 <TIM_OC5_SetConfig+0xb0>)
 800cb10:	4013      	ands	r3, r2
 800cb12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cb24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	041b      	lsls	r3, r3, #16
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a18      	ldr	r2, [pc, #96]	@ (800cb98 <TIM_OC5_SetConfig+0xb4>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d00f      	beq.n	800cb5a <TIM_OC5_SetConfig+0x76>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a17      	ldr	r2, [pc, #92]	@ (800cb9c <TIM_OC5_SetConfig+0xb8>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d00b      	beq.n	800cb5a <TIM_OC5_SetConfig+0x76>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a16      	ldr	r2, [pc, #88]	@ (800cba0 <TIM_OC5_SetConfig+0xbc>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d007      	beq.n	800cb5a <TIM_OC5_SetConfig+0x76>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a15      	ldr	r2, [pc, #84]	@ (800cba4 <TIM_OC5_SetConfig+0xc0>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d003      	beq.n	800cb5a <TIM_OC5_SetConfig+0x76>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a14      	ldr	r2, [pc, #80]	@ (800cba8 <TIM_OC5_SetConfig+0xc4>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d109      	bne.n	800cb6e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	695b      	ldr	r3, [r3, #20]
 800cb66:	021b      	lsls	r3, r3, #8
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	621a      	str	r2, [r3, #32]
}
 800cb88:	bf00      	nop
 800cb8a:	371c      	adds	r7, #28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	fffeff8f 	.word	0xfffeff8f
 800cb98:	40010000 	.word	0x40010000
 800cb9c:	40010400 	.word	0x40010400
 800cba0:	40014000 	.word	0x40014000
 800cba4:	40014400 	.word	0x40014400
 800cba8:	40014800 	.word	0x40014800

0800cbac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	4b22      	ldr	r3, [pc, #136]	@ (800cc60 <TIM_OC6_SetConfig+0xb4>)
 800cbd8:	4013      	ands	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	021b      	lsls	r3, r3, #8
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cbee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	051b      	lsls	r3, r3, #20
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a19      	ldr	r2, [pc, #100]	@ (800cc64 <TIM_OC6_SetConfig+0xb8>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d00f      	beq.n	800cc24 <TIM_OC6_SetConfig+0x78>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a18      	ldr	r2, [pc, #96]	@ (800cc68 <TIM_OC6_SetConfig+0xbc>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d00b      	beq.n	800cc24 <TIM_OC6_SetConfig+0x78>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a17      	ldr	r2, [pc, #92]	@ (800cc6c <TIM_OC6_SetConfig+0xc0>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d007      	beq.n	800cc24 <TIM_OC6_SetConfig+0x78>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a16      	ldr	r2, [pc, #88]	@ (800cc70 <TIM_OC6_SetConfig+0xc4>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d003      	beq.n	800cc24 <TIM_OC6_SetConfig+0x78>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a15      	ldr	r2, [pc, #84]	@ (800cc74 <TIM_OC6_SetConfig+0xc8>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d109      	bne.n	800cc38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cc2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	029b      	lsls	r3, r3, #10
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	621a      	str	r2, [r3, #32]
}
 800cc52:	bf00      	nop
 800cc54:	371c      	adds	r7, #28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	feff8fff 	.word	0xfeff8fff
 800cc64:	40010000 	.word	0x40010000
 800cc68:	40010400 	.word	0x40010400
 800cc6c:	40014000 	.word	0x40014000
 800cc70:	40014400 	.word	0x40014400
 800cc74:	40014800 	.word	0x40014800

0800cc78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	f003 031f 	and.w	r3, r3, #31
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6a1a      	ldr	r2, [r3, #32]
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	43db      	mvns	r3, r3
 800cc9a:	401a      	ands	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6a1a      	ldr	r2, [r3, #32]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f003 031f 	and.w	r3, r3, #31
 800ccaa:	6879      	ldr	r1, [r7, #4]
 800ccac:	fa01 f303 	lsl.w	r3, r1, r3
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	621a      	str	r2, [r3, #32]
}
 800ccb6:	bf00      	nop
 800ccb8:	371c      	adds	r7, #28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
	...

0800ccc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d101      	bne.n	800ccdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccd8:	2302      	movs	r3, #2
 800ccda:	e077      	b.n	800cdcc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2202      	movs	r2, #2
 800cce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a35      	ldr	r2, [pc, #212]	@ (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d004      	beq.n	800cd10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a34      	ldr	r2, [pc, #208]	@ (800cddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d108      	bne.n	800cd22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a25      	ldr	r2, [pc, #148]	@ (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d02c      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd4e:	d027      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a22      	ldr	r2, [pc, #136]	@ (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d022      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a21      	ldr	r2, [pc, #132]	@ (800cde4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d01d      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a1f      	ldr	r2, [pc, #124]	@ (800cde8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d018      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a1a      	ldr	r2, [pc, #104]	@ (800cddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d013      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a1b      	ldr	r2, [pc, #108]	@ (800cdec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d00e      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a1a      	ldr	r2, [pc, #104]	@ (800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d009      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a18      	ldr	r2, [pc, #96]	@ (800cdf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d004      	beq.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a17      	ldr	r2, [pc, #92]	@ (800cdf8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d10c      	bne.n	800cdba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cda6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68ba      	ldr	r2, [r7, #8]
 800cdb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr
 800cdd8:	40010000 	.word	0x40010000
 800cddc:	40010400 	.word	0x40010400
 800cde0:	40000400 	.word	0x40000400
 800cde4:	40000800 	.word	0x40000800
 800cde8:	40000c00 	.word	0x40000c00
 800cdec:	40001800 	.word	0x40001800
 800cdf0:	40014000 	.word	0x40014000
 800cdf4:	4000e000 	.word	0x4000e000
 800cdf8:	4000e400 	.word	0x4000e400

0800cdfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d101      	bne.n	800ce0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e042      	b.n	800ce94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7f5 facd 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2224      	movs	r2, #36	@ 0x24
 800ce2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 0201 	bic.w	r2, r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d002      	beq.n	800ce4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f001 fafa 	bl	800e440 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 fc8b 	bl	800d768 <UART_SetConfig>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d101      	bne.n	800ce5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e01b      	b.n	800ce94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	689a      	ldr	r2, [r3, #8]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f042 0201 	orr.w	r2, r2, #1
 800ce8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fb79 	bl	800e584 <UART_CheckIdleState>
 800ce92:	4603      	mov	r3, r0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	@ 0x28
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	603b      	str	r3, [r7, #0]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ceb2:	2b20      	cmp	r3, #32
 800ceb4:	d17b      	bne.n	800cfae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d002      	beq.n	800cec2 <HAL_UART_Transmit+0x26>
 800cebc:	88fb      	ldrh	r3, [r7, #6]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e074      	b.n	800cfb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2221      	movs	r2, #33	@ 0x21
 800ced2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ced6:	f7f5 fc93 	bl	8002800 <HAL_GetTick>
 800ceda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	88fa      	ldrh	r2, [r7, #6]
 800cee0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	88fa      	ldrh	r2, [r7, #6]
 800cee8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cef4:	d108      	bne.n	800cf08 <HAL_UART_Transmit+0x6c>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d104      	bne.n	800cf08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	61bb      	str	r3, [r7, #24]
 800cf06:	e003      	b.n	800cf10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf10:	e030      	b.n	800cf74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	2180      	movs	r1, #128	@ 0x80
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f001 fbdb 	bl	800e6d8 <UART_WaitOnFlagUntilTimeout>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d005      	beq.n	800cf34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2220      	movs	r2, #32
 800cf2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cf30:	2303      	movs	r3, #3
 800cf32:	e03d      	b.n	800cfb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d10b      	bne.n	800cf52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	3302      	adds	r3, #2
 800cf4e:	61bb      	str	r3, [r7, #24]
 800cf50:	e007      	b.n	800cf62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	781a      	ldrb	r2, [r3, #0]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1c8      	bne.n	800cf12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	2200      	movs	r2, #0
 800cf88:	2140      	movs	r1, #64	@ 0x40
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f001 fba4 	bl	800e6d8 <UART_WaitOnFlagUntilTimeout>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d005      	beq.n	800cfa2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2220      	movs	r2, #32
 800cf9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e006      	b.n	800cfb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e000      	b.n	800cfb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cfae:	2302      	movs	r3, #2
  }
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3720      	adds	r7, #32
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b0ba      	sub	sp, #232	@ 0xe8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	69db      	ldr	r3, [r3, #28]
 800cfc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cfde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cfe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cfec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d11b      	bne.n	800d02c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cff8:	f003 0320 	and.w	r3, r3, #32
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d015      	beq.n	800d02c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d004:	f003 0320 	and.w	r3, r3, #32
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d105      	bne.n	800d018 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d009      	beq.n	800d02c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 8377 	beq.w	800d710 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	4798      	blx	r3
      }
      return;
 800d02a:	e371      	b.n	800d710 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d02c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 8123 	beq.w	800d27c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d036:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d03a:	4b8d      	ldr	r3, [pc, #564]	@ (800d270 <HAL_UART_IRQHandler+0x2b8>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d042:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d046:	4b8b      	ldr	r3, [pc, #556]	@ (800d274 <HAL_UART_IRQHandler+0x2bc>)
 800d048:	4013      	ands	r3, r2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 8116 	beq.w	800d27c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d011      	beq.n	800d080 <HAL_UART_IRQHandler+0xc8>
 800d05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00b      	beq.n	800d080 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2201      	movs	r2, #1
 800d06e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d076:	f043 0201 	orr.w	r2, r3, #1
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d011      	beq.n	800d0b0 <HAL_UART_IRQHandler+0xf8>
 800d08c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00b      	beq.n	800d0b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2202      	movs	r2, #2
 800d09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0a6:	f043 0204 	orr.w	r2, r3, #4
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0b4:	f003 0304 	and.w	r3, r3, #4
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d011      	beq.n	800d0e0 <HAL_UART_IRQHandler+0x128>
 800d0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00b      	beq.n	800d0e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2204      	movs	r2, #4
 800d0ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0d6:	f043 0202 	orr.w	r2, r3, #2
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0e4:	f003 0308 	and.w	r3, r3, #8
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d017      	beq.n	800d11c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0f0:	f003 0320 	and.w	r3, r3, #32
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d105      	bne.n	800d104 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d0f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d0fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d270 <HAL_UART_IRQHandler+0x2b8>)
 800d0fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2208      	movs	r2, #8
 800d10a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d112:	f043 0208 	orr.w	r2, r3, #8
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d124:	2b00      	cmp	r3, #0
 800d126:	d012      	beq.n	800d14e <HAL_UART_IRQHandler+0x196>
 800d128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d12c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00c      	beq.n	800d14e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d13c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d144:	f043 0220 	orr.w	r2, r3, #32
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 82dd 	beq.w	800d714 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d15e:	f003 0320 	and.w	r3, r3, #32
 800d162:	2b00      	cmp	r3, #0
 800d164:	d013      	beq.n	800d18e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d16a:	f003 0320 	and.w	r3, r3, #32
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d105      	bne.n	800d17e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d007      	beq.n	800d18e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d194:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1a2:	2b40      	cmp	r3, #64	@ 0x40
 800d1a4:	d005      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d054      	beq.n	800d25c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fc20 	bl	800e9f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1c2:	2b40      	cmp	r3, #64	@ 0x40
 800d1c4:	d146      	bne.n	800d254 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	3308      	adds	r3, #8
 800d1cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d1d4:	e853 3f00 	ldrex	r3, [r3]
 800d1d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d1dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3308      	adds	r3, #8
 800d1ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d1f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d1f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d1fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d202:	e841 2300 	strex	r3, r2, [r1]
 800d206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d20a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1d9      	bne.n	800d1c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d017      	beq.n	800d24c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d222:	4a15      	ldr	r2, [pc, #84]	@ (800d278 <HAL_UART_IRQHandler+0x2c0>)
 800d224:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7f8 fdc5 	bl	8005dbc <HAL_DMA_Abort_IT>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d019      	beq.n	800d26c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d23e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d246:	4610      	mov	r0, r2
 800d248:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d24a:	e00f      	b.n	800d26c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fa81 	bl	800d754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d252:	e00b      	b.n	800d26c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fa7d 	bl	800d754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d25a:	e007      	b.n	800d26c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 fa79 	bl	800d754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d26a:	e253      	b.n	800d714 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d26c:	bf00      	nop
    return;
 800d26e:	e251      	b.n	800d714 <HAL_UART_IRQHandler+0x75c>
 800d270:	10000001 	.word	0x10000001
 800d274:	04000120 	.word	0x04000120
 800d278:	0800eac5 	.word	0x0800eac5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d280:	2b01      	cmp	r3, #1
 800d282:	f040 81e7 	bne.w	800d654 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d28a:	f003 0310 	and.w	r3, r3, #16
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 81e0 	beq.w	800d654 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d298:	f003 0310 	and.w	r3, r3, #16
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f000 81d9 	beq.w	800d654 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2210      	movs	r2, #16
 800d2a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2b4:	2b40      	cmp	r3, #64	@ 0x40
 800d2b6:	f040 8151 	bne.w	800d55c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a96      	ldr	r2, [pc, #600]	@ (800d51c <HAL_UART_IRQHandler+0x564>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d068      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a93      	ldr	r2, [pc, #588]	@ (800d520 <HAL_UART_IRQHandler+0x568>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d061      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a91      	ldr	r2, [pc, #580]	@ (800d524 <HAL_UART_IRQHandler+0x56c>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d05a      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a8e      	ldr	r2, [pc, #568]	@ (800d528 <HAL_UART_IRQHandler+0x570>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d053      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a8c      	ldr	r2, [pc, #560]	@ (800d52c <HAL_UART_IRQHandler+0x574>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d04c      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a89      	ldr	r2, [pc, #548]	@ (800d530 <HAL_UART_IRQHandler+0x578>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d045      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a87      	ldr	r2, [pc, #540]	@ (800d534 <HAL_UART_IRQHandler+0x57c>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d03e      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a84      	ldr	r2, [pc, #528]	@ (800d538 <HAL_UART_IRQHandler+0x580>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d037      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a82      	ldr	r2, [pc, #520]	@ (800d53c <HAL_UART_IRQHandler+0x584>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d030      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a7f      	ldr	r2, [pc, #508]	@ (800d540 <HAL_UART_IRQHandler+0x588>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d029      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a7d      	ldr	r2, [pc, #500]	@ (800d544 <HAL_UART_IRQHandler+0x58c>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d022      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a7a      	ldr	r2, [pc, #488]	@ (800d548 <HAL_UART_IRQHandler+0x590>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d01b      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a78      	ldr	r2, [pc, #480]	@ (800d54c <HAL_UART_IRQHandler+0x594>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d014      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a75      	ldr	r2, [pc, #468]	@ (800d550 <HAL_UART_IRQHandler+0x598>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d00d      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a73      	ldr	r2, [pc, #460]	@ (800d554 <HAL_UART_IRQHandler+0x59c>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d006      	beq.n	800d39a <HAL_UART_IRQHandler+0x3e2>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a70      	ldr	r2, [pc, #448]	@ (800d558 <HAL_UART_IRQHandler+0x5a0>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d106      	bne.n	800d3a8 <HAL_UART_IRQHandler+0x3f0>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	e005      	b.n	800d3b4 <HAL_UART_IRQHandler+0x3fc>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d3b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 81ab 	beq.w	800d718 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	f080 81a3 	bcs.w	800d718 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3e2:	69db      	ldr	r3, [r3, #28]
 800d3e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3e8:	f000 8087 	beq.w	800d4fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d3f8:	e853 3f00 	ldrex	r3, [r3]
 800d3fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d400:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d416:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d41a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d422:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d426:	e841 2300 	strex	r3, r2, [r1]
 800d42a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d42e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1da      	bne.n	800d3ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3308      	adds	r3, #8
 800d43c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d440:	e853 3f00 	ldrex	r3, [r3]
 800d444:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d446:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d448:	f023 0301 	bic.w	r3, r3, #1
 800d44c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3308      	adds	r3, #8
 800d456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d45a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d45e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d460:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d462:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d466:	e841 2300 	strex	r3, r2, [r1]
 800d46a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d46c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e1      	bne.n	800d436 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3308      	adds	r3, #8
 800d492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d496:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d498:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d49c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d49e:	e841 2300 	strex	r3, r2, [r1]
 800d4a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d4a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1e3      	bne.n	800d472 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2220      	movs	r2, #32
 800d4ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4c0:	e853 3f00 	ldrex	r3, [r3]
 800d4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4c8:	f023 0310 	bic.w	r3, r3, #16
 800d4cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4e2:	e841 2300 	strex	r3, r2, [r1]
 800d4e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1e4      	bne.n	800d4b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7f8 f943 	bl	8005780 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2202      	movs	r2, #2
 800d4fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	b29b      	uxth	r3, r3
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7f3 fd73 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d51a:	e0fd      	b.n	800d718 <HAL_UART_IRQHandler+0x760>
 800d51c:	40020010 	.word	0x40020010
 800d520:	40020028 	.word	0x40020028
 800d524:	40020040 	.word	0x40020040
 800d528:	40020058 	.word	0x40020058
 800d52c:	40020070 	.word	0x40020070
 800d530:	40020088 	.word	0x40020088
 800d534:	400200a0 	.word	0x400200a0
 800d538:	400200b8 	.word	0x400200b8
 800d53c:	40020410 	.word	0x40020410
 800d540:	40020428 	.word	0x40020428
 800d544:	40020440 	.word	0x40020440
 800d548:	40020458 	.word	0x40020458
 800d54c:	40020470 	.word	0x40020470
 800d550:	40020488 	.word	0x40020488
 800d554:	400204a0 	.word	0x400204a0
 800d558:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d568:	b29b      	uxth	r3, r3
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d576:	b29b      	uxth	r3, r3
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 80cf 	beq.w	800d71c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d57e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d582:	2b00      	cmp	r3, #0
 800d584:	f000 80ca 	beq.w	800d71c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d59c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d5aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5b2:	e841 2300 	strex	r3, r2, [r1]
 800d5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1e4      	bne.n	800d588 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3308      	adds	r3, #8
 800d5c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	e853 3f00 	ldrex	r3, [r3]
 800d5cc:	623b      	str	r3, [r7, #32]
   return(result);
 800d5ce:	6a3a      	ldr	r2, [r7, #32]
 800d5d0:	4b55      	ldr	r3, [pc, #340]	@ (800d728 <HAL_UART_IRQHandler+0x770>)
 800d5d2:	4013      	ands	r3, r2
 800d5d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3308      	adds	r3, #8
 800d5de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d5e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ea:	e841 2300 	strex	r3, r2, [r1]
 800d5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1e3      	bne.n	800d5be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2220      	movs	r2, #32
 800d5fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	e853 3f00 	ldrex	r3, [r3]
 800d616:	60fb      	str	r3, [r7, #12]
   return(result);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f023 0310 	bic.w	r3, r3, #16
 800d61e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d62c:	61fb      	str	r3, [r7, #28]
 800d62e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d630:	69b9      	ldr	r1, [r7, #24]
 800d632:	69fa      	ldr	r2, [r7, #28]
 800d634:	e841 2300 	strex	r3, r2, [r1]
 800d638:	617b      	str	r3, [r7, #20]
   return(result);
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e4      	bne.n	800d60a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2202      	movs	r2, #2
 800d644:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7f3 fcd7 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d652:	e063      	b.n	800d71c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00e      	beq.n	800d67e <HAL_UART_IRQHandler+0x6c6>
 800d660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d008      	beq.n	800d67e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d674:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f001 ff82 	bl	800f580 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d67c:	e051      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d686:	2b00      	cmp	r3, #0
 800d688:	d014      	beq.n	800d6b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d68e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d692:	2b00      	cmp	r3, #0
 800d694:	d105      	bne.n	800d6a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d69a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d008      	beq.n	800d6b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d03a      	beq.n	800d720 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	4798      	blx	r3
    }
    return;
 800d6b2:	e035      	b.n	800d720 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d009      	beq.n	800d6d4 <HAL_UART_IRQHandler+0x71c>
 800d6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d003      	beq.n	800d6d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f001 fa0f 	bl	800eaf0 <UART_EndTransmit_IT>
    return;
 800d6d2:	e026      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d009      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x73c>
 800d6e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d003      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f001 ff5b 	bl	800f5a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6f2:	e016      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d010      	beq.n	800d722 <HAL_UART_IRQHandler+0x76a>
 800d700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d704:	2b00      	cmp	r3, #0
 800d706:	da0c      	bge.n	800d722 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 ff43 	bl	800f594 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d70e:	e008      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
      return;
 800d710:	bf00      	nop
 800d712:	e006      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
    return;
 800d714:	bf00      	nop
 800d716:	e004      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
      return;
 800d718:	bf00      	nop
 800d71a:	e002      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
      return;
 800d71c:	bf00      	nop
 800d71e:	e000      	b.n	800d722 <HAL_UART_IRQHandler+0x76a>
    return;
 800d720:	bf00      	nop
  }
}
 800d722:	37e8      	adds	r7, #232	@ 0xe8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	effffffe 	.word	0xeffffffe

0800d72c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d76c:	b092      	sub	sp, #72	@ 0x48
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	431a      	orrs	r2, r3
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	695b      	ldr	r3, [r3, #20]
 800d786:	431a      	orrs	r2, r3
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	69db      	ldr	r3, [r3, #28]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	4bbe      	ldr	r3, [pc, #760]	@ (800da90 <UART_SetConfig+0x328>)
 800d798:	4013      	ands	r3, r2
 800d79a:	697a      	ldr	r2, [r7, #20]
 800d79c:	6812      	ldr	r2, [r2, #0]
 800d79e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7a0:	430b      	orrs	r3, r1
 800d7a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	430a      	orrs	r2, r1
 800d7b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4ab3      	ldr	r2, [pc, #716]	@ (800da94 <UART_SetConfig+0x32c>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d004      	beq.n	800d7d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	6a1b      	ldr	r3, [r3, #32]
 800d7ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	689a      	ldr	r2, [r3, #8]
 800d7da:	4baf      	ldr	r3, [pc, #700]	@ (800da98 <UART_SetConfig+0x330>)
 800d7dc:	4013      	ands	r3, r2
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	6812      	ldr	r2, [r2, #0]
 800d7e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7e4:	430b      	orrs	r3, r1
 800d7e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ee:	f023 010f 	bic.w	r1, r3, #15
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4aa6      	ldr	r2, [pc, #664]	@ (800da9c <UART_SetConfig+0x334>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d177      	bne.n	800d8f8 <UART_SetConfig+0x190>
 800d808:	4ba5      	ldr	r3, [pc, #660]	@ (800daa0 <UART_SetConfig+0x338>)
 800d80a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d80c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d810:	2b28      	cmp	r3, #40	@ 0x28
 800d812:	d86d      	bhi.n	800d8f0 <UART_SetConfig+0x188>
 800d814:	a201      	add	r2, pc, #4	@ (adr r2, 800d81c <UART_SetConfig+0xb4>)
 800d816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81a:	bf00      	nop
 800d81c:	0800d8c1 	.word	0x0800d8c1
 800d820:	0800d8f1 	.word	0x0800d8f1
 800d824:	0800d8f1 	.word	0x0800d8f1
 800d828:	0800d8f1 	.word	0x0800d8f1
 800d82c:	0800d8f1 	.word	0x0800d8f1
 800d830:	0800d8f1 	.word	0x0800d8f1
 800d834:	0800d8f1 	.word	0x0800d8f1
 800d838:	0800d8f1 	.word	0x0800d8f1
 800d83c:	0800d8c9 	.word	0x0800d8c9
 800d840:	0800d8f1 	.word	0x0800d8f1
 800d844:	0800d8f1 	.word	0x0800d8f1
 800d848:	0800d8f1 	.word	0x0800d8f1
 800d84c:	0800d8f1 	.word	0x0800d8f1
 800d850:	0800d8f1 	.word	0x0800d8f1
 800d854:	0800d8f1 	.word	0x0800d8f1
 800d858:	0800d8f1 	.word	0x0800d8f1
 800d85c:	0800d8d1 	.word	0x0800d8d1
 800d860:	0800d8f1 	.word	0x0800d8f1
 800d864:	0800d8f1 	.word	0x0800d8f1
 800d868:	0800d8f1 	.word	0x0800d8f1
 800d86c:	0800d8f1 	.word	0x0800d8f1
 800d870:	0800d8f1 	.word	0x0800d8f1
 800d874:	0800d8f1 	.word	0x0800d8f1
 800d878:	0800d8f1 	.word	0x0800d8f1
 800d87c:	0800d8d9 	.word	0x0800d8d9
 800d880:	0800d8f1 	.word	0x0800d8f1
 800d884:	0800d8f1 	.word	0x0800d8f1
 800d888:	0800d8f1 	.word	0x0800d8f1
 800d88c:	0800d8f1 	.word	0x0800d8f1
 800d890:	0800d8f1 	.word	0x0800d8f1
 800d894:	0800d8f1 	.word	0x0800d8f1
 800d898:	0800d8f1 	.word	0x0800d8f1
 800d89c:	0800d8e1 	.word	0x0800d8e1
 800d8a0:	0800d8f1 	.word	0x0800d8f1
 800d8a4:	0800d8f1 	.word	0x0800d8f1
 800d8a8:	0800d8f1 	.word	0x0800d8f1
 800d8ac:	0800d8f1 	.word	0x0800d8f1
 800d8b0:	0800d8f1 	.word	0x0800d8f1
 800d8b4:	0800d8f1 	.word	0x0800d8f1
 800d8b8:	0800d8f1 	.word	0x0800d8f1
 800d8bc:	0800d8e9 	.word	0x0800d8e9
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c6:	e326      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d8c8:	2304      	movs	r3, #4
 800d8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ce:	e322      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d8d0:	2308      	movs	r3, #8
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d6:	e31e      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d8d8:	2310      	movs	r3, #16
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8de:	e31a      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d8e0:	2320      	movs	r3, #32
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e6:	e316      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d8e8:	2340      	movs	r3, #64	@ 0x40
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ee:	e312      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d8f0:	2380      	movs	r3, #128	@ 0x80
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f6:	e30e      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a69      	ldr	r2, [pc, #420]	@ (800daa4 <UART_SetConfig+0x33c>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d130      	bne.n	800d964 <UART_SetConfig+0x1fc>
 800d902:	4b67      	ldr	r3, [pc, #412]	@ (800daa0 <UART_SetConfig+0x338>)
 800d904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d906:	f003 0307 	and.w	r3, r3, #7
 800d90a:	2b05      	cmp	r3, #5
 800d90c:	d826      	bhi.n	800d95c <UART_SetConfig+0x1f4>
 800d90e:	a201      	add	r2, pc, #4	@ (adr r2, 800d914 <UART_SetConfig+0x1ac>)
 800d910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d914:	0800d92d 	.word	0x0800d92d
 800d918:	0800d935 	.word	0x0800d935
 800d91c:	0800d93d 	.word	0x0800d93d
 800d920:	0800d945 	.word	0x0800d945
 800d924:	0800d94d 	.word	0x0800d94d
 800d928:	0800d955 	.word	0x0800d955
 800d92c:	2300      	movs	r3, #0
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d932:	e2f0      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d934:	2304      	movs	r3, #4
 800d936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93a:	e2ec      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d93c:	2308      	movs	r3, #8
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d942:	e2e8      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d944:	2310      	movs	r3, #16
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94a:	e2e4      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d94c:	2320      	movs	r3, #32
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d952:	e2e0      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d954:	2340      	movs	r3, #64	@ 0x40
 800d956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d95a:	e2dc      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d95c:	2380      	movs	r3, #128	@ 0x80
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d962:	e2d8      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a4f      	ldr	r2, [pc, #316]	@ (800daa8 <UART_SetConfig+0x340>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d130      	bne.n	800d9d0 <UART_SetConfig+0x268>
 800d96e:	4b4c      	ldr	r3, [pc, #304]	@ (800daa0 <UART_SetConfig+0x338>)
 800d970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d972:	f003 0307 	and.w	r3, r3, #7
 800d976:	2b05      	cmp	r3, #5
 800d978:	d826      	bhi.n	800d9c8 <UART_SetConfig+0x260>
 800d97a:	a201      	add	r2, pc, #4	@ (adr r2, 800d980 <UART_SetConfig+0x218>)
 800d97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d980:	0800d999 	.word	0x0800d999
 800d984:	0800d9a1 	.word	0x0800d9a1
 800d988:	0800d9a9 	.word	0x0800d9a9
 800d98c:	0800d9b1 	.word	0x0800d9b1
 800d990:	0800d9b9 	.word	0x0800d9b9
 800d994:	0800d9c1 	.word	0x0800d9c1
 800d998:	2300      	movs	r3, #0
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99e:	e2ba      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d9a0:	2304      	movs	r3, #4
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a6:	e2b6      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d9a8:	2308      	movs	r3, #8
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ae:	e2b2      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d9b0:	2310      	movs	r3, #16
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b6:	e2ae      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d9b8:	2320      	movs	r3, #32
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9be:	e2aa      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d9c0:	2340      	movs	r3, #64	@ 0x40
 800d9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c6:	e2a6      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d9c8:	2380      	movs	r3, #128	@ 0x80
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ce:	e2a2      	b.n	800df16 <UART_SetConfig+0x7ae>
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a35      	ldr	r2, [pc, #212]	@ (800daac <UART_SetConfig+0x344>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d130      	bne.n	800da3c <UART_SetConfig+0x2d4>
 800d9da:	4b31      	ldr	r3, [pc, #196]	@ (800daa0 <UART_SetConfig+0x338>)
 800d9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	2b05      	cmp	r3, #5
 800d9e4:	d826      	bhi.n	800da34 <UART_SetConfig+0x2cc>
 800d9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9ec <UART_SetConfig+0x284>)
 800d9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ec:	0800da05 	.word	0x0800da05
 800d9f0:	0800da0d 	.word	0x0800da0d
 800d9f4:	0800da15 	.word	0x0800da15
 800d9f8:	0800da1d 	.word	0x0800da1d
 800d9fc:	0800da25 	.word	0x0800da25
 800da00:	0800da2d 	.word	0x0800da2d
 800da04:	2300      	movs	r3, #0
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0a:	e284      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da0c:	2304      	movs	r3, #4
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da12:	e280      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da14:	2308      	movs	r3, #8
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1a:	e27c      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da1c:	2310      	movs	r3, #16
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e278      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da24:	2320      	movs	r3, #32
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e274      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da2c:	2340      	movs	r3, #64	@ 0x40
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da32:	e270      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da34:	2380      	movs	r3, #128	@ 0x80
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3a:	e26c      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a1b      	ldr	r2, [pc, #108]	@ (800dab0 <UART_SetConfig+0x348>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d142      	bne.n	800dacc <UART_SetConfig+0x364>
 800da46:	4b16      	ldr	r3, [pc, #88]	@ (800daa0 <UART_SetConfig+0x338>)
 800da48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	2b05      	cmp	r3, #5
 800da50:	d838      	bhi.n	800dac4 <UART_SetConfig+0x35c>
 800da52:	a201      	add	r2, pc, #4	@ (adr r2, 800da58 <UART_SetConfig+0x2f0>)
 800da54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da58:	0800da71 	.word	0x0800da71
 800da5c:	0800da79 	.word	0x0800da79
 800da60:	0800da81 	.word	0x0800da81
 800da64:	0800da89 	.word	0x0800da89
 800da68:	0800dab5 	.word	0x0800dab5
 800da6c:	0800dabd 	.word	0x0800dabd
 800da70:	2300      	movs	r3, #0
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e24e      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da78:	2304      	movs	r3, #4
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7e:	e24a      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da80:	2308      	movs	r3, #8
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e246      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da88:	2310      	movs	r3, #16
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e242      	b.n	800df16 <UART_SetConfig+0x7ae>
 800da90:	cfff69f3 	.word	0xcfff69f3
 800da94:	58000c00 	.word	0x58000c00
 800da98:	11fff4ff 	.word	0x11fff4ff
 800da9c:	40011000 	.word	0x40011000
 800daa0:	58024400 	.word	0x58024400
 800daa4:	40004400 	.word	0x40004400
 800daa8:	40004800 	.word	0x40004800
 800daac:	40004c00 	.word	0x40004c00
 800dab0:	40005000 	.word	0x40005000
 800dab4:	2320      	movs	r3, #32
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daba:	e22c      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dabc:	2340      	movs	r3, #64	@ 0x40
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac2:	e228      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dac4:	2380      	movs	r3, #128	@ 0x80
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daca:	e224      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4ab1      	ldr	r2, [pc, #708]	@ (800dd98 <UART_SetConfig+0x630>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d176      	bne.n	800dbc4 <UART_SetConfig+0x45c>
 800dad6:	4bb1      	ldr	r3, [pc, #708]	@ (800dd9c <UART_SetConfig+0x634>)
 800dad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dade:	2b28      	cmp	r3, #40	@ 0x28
 800dae0:	d86c      	bhi.n	800dbbc <UART_SetConfig+0x454>
 800dae2:	a201      	add	r2, pc, #4	@ (adr r2, 800dae8 <UART_SetConfig+0x380>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db8d 	.word	0x0800db8d
 800daec:	0800dbbd 	.word	0x0800dbbd
 800daf0:	0800dbbd 	.word	0x0800dbbd
 800daf4:	0800dbbd 	.word	0x0800dbbd
 800daf8:	0800dbbd 	.word	0x0800dbbd
 800dafc:	0800dbbd 	.word	0x0800dbbd
 800db00:	0800dbbd 	.word	0x0800dbbd
 800db04:	0800dbbd 	.word	0x0800dbbd
 800db08:	0800db95 	.word	0x0800db95
 800db0c:	0800dbbd 	.word	0x0800dbbd
 800db10:	0800dbbd 	.word	0x0800dbbd
 800db14:	0800dbbd 	.word	0x0800dbbd
 800db18:	0800dbbd 	.word	0x0800dbbd
 800db1c:	0800dbbd 	.word	0x0800dbbd
 800db20:	0800dbbd 	.word	0x0800dbbd
 800db24:	0800dbbd 	.word	0x0800dbbd
 800db28:	0800db9d 	.word	0x0800db9d
 800db2c:	0800dbbd 	.word	0x0800dbbd
 800db30:	0800dbbd 	.word	0x0800dbbd
 800db34:	0800dbbd 	.word	0x0800dbbd
 800db38:	0800dbbd 	.word	0x0800dbbd
 800db3c:	0800dbbd 	.word	0x0800dbbd
 800db40:	0800dbbd 	.word	0x0800dbbd
 800db44:	0800dbbd 	.word	0x0800dbbd
 800db48:	0800dba5 	.word	0x0800dba5
 800db4c:	0800dbbd 	.word	0x0800dbbd
 800db50:	0800dbbd 	.word	0x0800dbbd
 800db54:	0800dbbd 	.word	0x0800dbbd
 800db58:	0800dbbd 	.word	0x0800dbbd
 800db5c:	0800dbbd 	.word	0x0800dbbd
 800db60:	0800dbbd 	.word	0x0800dbbd
 800db64:	0800dbbd 	.word	0x0800dbbd
 800db68:	0800dbad 	.word	0x0800dbad
 800db6c:	0800dbbd 	.word	0x0800dbbd
 800db70:	0800dbbd 	.word	0x0800dbbd
 800db74:	0800dbbd 	.word	0x0800dbbd
 800db78:	0800dbbd 	.word	0x0800dbbd
 800db7c:	0800dbbd 	.word	0x0800dbbd
 800db80:	0800dbbd 	.word	0x0800dbbd
 800db84:	0800dbbd 	.word	0x0800dbbd
 800db88:	0800dbb5 	.word	0x0800dbb5
 800db8c:	2301      	movs	r3, #1
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db92:	e1c0      	b.n	800df16 <UART_SetConfig+0x7ae>
 800db94:	2304      	movs	r3, #4
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db9a:	e1bc      	b.n	800df16 <UART_SetConfig+0x7ae>
 800db9c:	2308      	movs	r3, #8
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dba2:	e1b8      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dba4:	2310      	movs	r3, #16
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbaa:	e1b4      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dbac:	2320      	movs	r3, #32
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb2:	e1b0      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dbb4:	2340      	movs	r3, #64	@ 0x40
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbba:	e1ac      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dbbc:	2380      	movs	r3, #128	@ 0x80
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbc2:	e1a8      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a75      	ldr	r2, [pc, #468]	@ (800dda0 <UART_SetConfig+0x638>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d130      	bne.n	800dc30 <UART_SetConfig+0x4c8>
 800dbce:	4b73      	ldr	r3, [pc, #460]	@ (800dd9c <UART_SetConfig+0x634>)
 800dbd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbd2:	f003 0307 	and.w	r3, r3, #7
 800dbd6:	2b05      	cmp	r3, #5
 800dbd8:	d826      	bhi.n	800dc28 <UART_SetConfig+0x4c0>
 800dbda:	a201      	add	r2, pc, #4	@ (adr r2, 800dbe0 <UART_SetConfig+0x478>)
 800dbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe0:	0800dbf9 	.word	0x0800dbf9
 800dbe4:	0800dc01 	.word	0x0800dc01
 800dbe8:	0800dc09 	.word	0x0800dc09
 800dbec:	0800dc11 	.word	0x0800dc11
 800dbf0:	0800dc19 	.word	0x0800dc19
 800dbf4:	0800dc21 	.word	0x0800dc21
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfe:	e18a      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc00:	2304      	movs	r3, #4
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc06:	e186      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc08:	2308      	movs	r3, #8
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc0e:	e182      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc10:	2310      	movs	r3, #16
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc16:	e17e      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc18:	2320      	movs	r3, #32
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc1e:	e17a      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc20:	2340      	movs	r3, #64	@ 0x40
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc26:	e176      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc28:	2380      	movs	r3, #128	@ 0x80
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc2e:	e172      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a5b      	ldr	r2, [pc, #364]	@ (800dda4 <UART_SetConfig+0x63c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d130      	bne.n	800dc9c <UART_SetConfig+0x534>
 800dc3a:	4b58      	ldr	r3, [pc, #352]	@ (800dd9c <UART_SetConfig+0x634>)
 800dc3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc3e:	f003 0307 	and.w	r3, r3, #7
 800dc42:	2b05      	cmp	r3, #5
 800dc44:	d826      	bhi.n	800dc94 <UART_SetConfig+0x52c>
 800dc46:	a201      	add	r2, pc, #4	@ (adr r2, 800dc4c <UART_SetConfig+0x4e4>)
 800dc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4c:	0800dc65 	.word	0x0800dc65
 800dc50:	0800dc6d 	.word	0x0800dc6d
 800dc54:	0800dc75 	.word	0x0800dc75
 800dc58:	0800dc7d 	.word	0x0800dc7d
 800dc5c:	0800dc85 	.word	0x0800dc85
 800dc60:	0800dc8d 	.word	0x0800dc8d
 800dc64:	2300      	movs	r3, #0
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6a:	e154      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc6c:	2304      	movs	r3, #4
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc72:	e150      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc74:	2308      	movs	r3, #8
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc7a:	e14c      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc7c:	2310      	movs	r3, #16
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc82:	e148      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc84:	2320      	movs	r3, #32
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8a:	e144      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc8c:	2340      	movs	r3, #64	@ 0x40
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc92:	e140      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc94:	2380      	movs	r3, #128	@ 0x80
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9a:	e13c      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a41      	ldr	r2, [pc, #260]	@ (800dda8 <UART_SetConfig+0x640>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	f040 8082 	bne.w	800ddac <UART_SetConfig+0x644>
 800dca8:	4b3c      	ldr	r3, [pc, #240]	@ (800dd9c <UART_SetConfig+0x634>)
 800dcaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dcb0:	2b28      	cmp	r3, #40	@ 0x28
 800dcb2:	d86d      	bhi.n	800dd90 <UART_SetConfig+0x628>
 800dcb4:	a201      	add	r2, pc, #4	@ (adr r2, 800dcbc <UART_SetConfig+0x554>)
 800dcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcba:	bf00      	nop
 800dcbc:	0800dd61 	.word	0x0800dd61
 800dcc0:	0800dd91 	.word	0x0800dd91
 800dcc4:	0800dd91 	.word	0x0800dd91
 800dcc8:	0800dd91 	.word	0x0800dd91
 800dccc:	0800dd91 	.word	0x0800dd91
 800dcd0:	0800dd91 	.word	0x0800dd91
 800dcd4:	0800dd91 	.word	0x0800dd91
 800dcd8:	0800dd91 	.word	0x0800dd91
 800dcdc:	0800dd69 	.word	0x0800dd69
 800dce0:	0800dd91 	.word	0x0800dd91
 800dce4:	0800dd91 	.word	0x0800dd91
 800dce8:	0800dd91 	.word	0x0800dd91
 800dcec:	0800dd91 	.word	0x0800dd91
 800dcf0:	0800dd91 	.word	0x0800dd91
 800dcf4:	0800dd91 	.word	0x0800dd91
 800dcf8:	0800dd91 	.word	0x0800dd91
 800dcfc:	0800dd71 	.word	0x0800dd71
 800dd00:	0800dd91 	.word	0x0800dd91
 800dd04:	0800dd91 	.word	0x0800dd91
 800dd08:	0800dd91 	.word	0x0800dd91
 800dd0c:	0800dd91 	.word	0x0800dd91
 800dd10:	0800dd91 	.word	0x0800dd91
 800dd14:	0800dd91 	.word	0x0800dd91
 800dd18:	0800dd91 	.word	0x0800dd91
 800dd1c:	0800dd79 	.word	0x0800dd79
 800dd20:	0800dd91 	.word	0x0800dd91
 800dd24:	0800dd91 	.word	0x0800dd91
 800dd28:	0800dd91 	.word	0x0800dd91
 800dd2c:	0800dd91 	.word	0x0800dd91
 800dd30:	0800dd91 	.word	0x0800dd91
 800dd34:	0800dd91 	.word	0x0800dd91
 800dd38:	0800dd91 	.word	0x0800dd91
 800dd3c:	0800dd81 	.word	0x0800dd81
 800dd40:	0800dd91 	.word	0x0800dd91
 800dd44:	0800dd91 	.word	0x0800dd91
 800dd48:	0800dd91 	.word	0x0800dd91
 800dd4c:	0800dd91 	.word	0x0800dd91
 800dd50:	0800dd91 	.word	0x0800dd91
 800dd54:	0800dd91 	.word	0x0800dd91
 800dd58:	0800dd91 	.word	0x0800dd91
 800dd5c:	0800dd89 	.word	0x0800dd89
 800dd60:	2301      	movs	r3, #1
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd66:	e0d6      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dd68:	2304      	movs	r3, #4
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd6e:	e0d2      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dd70:	2308      	movs	r3, #8
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd76:	e0ce      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dd78:	2310      	movs	r3, #16
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd7e:	e0ca      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dd80:	2320      	movs	r3, #32
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd86:	e0c6      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dd88:	2340      	movs	r3, #64	@ 0x40
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd8e:	e0c2      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dd90:	2380      	movs	r3, #128	@ 0x80
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd96:	e0be      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dd98:	40011400 	.word	0x40011400
 800dd9c:	58024400 	.word	0x58024400
 800dda0:	40007800 	.word	0x40007800
 800dda4:	40007c00 	.word	0x40007c00
 800dda8:	40011800 	.word	0x40011800
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4aad      	ldr	r2, [pc, #692]	@ (800e068 <UART_SetConfig+0x900>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d176      	bne.n	800dea4 <UART_SetConfig+0x73c>
 800ddb6:	4bad      	ldr	r3, [pc, #692]	@ (800e06c <UART_SetConfig+0x904>)
 800ddb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddbe:	2b28      	cmp	r3, #40	@ 0x28
 800ddc0:	d86c      	bhi.n	800de9c <UART_SetConfig+0x734>
 800ddc2:	a201      	add	r2, pc, #4	@ (adr r2, 800ddc8 <UART_SetConfig+0x660>)
 800ddc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc8:	0800de6d 	.word	0x0800de6d
 800ddcc:	0800de9d 	.word	0x0800de9d
 800ddd0:	0800de9d 	.word	0x0800de9d
 800ddd4:	0800de9d 	.word	0x0800de9d
 800ddd8:	0800de9d 	.word	0x0800de9d
 800dddc:	0800de9d 	.word	0x0800de9d
 800dde0:	0800de9d 	.word	0x0800de9d
 800dde4:	0800de9d 	.word	0x0800de9d
 800dde8:	0800de75 	.word	0x0800de75
 800ddec:	0800de9d 	.word	0x0800de9d
 800ddf0:	0800de9d 	.word	0x0800de9d
 800ddf4:	0800de9d 	.word	0x0800de9d
 800ddf8:	0800de9d 	.word	0x0800de9d
 800ddfc:	0800de9d 	.word	0x0800de9d
 800de00:	0800de9d 	.word	0x0800de9d
 800de04:	0800de9d 	.word	0x0800de9d
 800de08:	0800de7d 	.word	0x0800de7d
 800de0c:	0800de9d 	.word	0x0800de9d
 800de10:	0800de9d 	.word	0x0800de9d
 800de14:	0800de9d 	.word	0x0800de9d
 800de18:	0800de9d 	.word	0x0800de9d
 800de1c:	0800de9d 	.word	0x0800de9d
 800de20:	0800de9d 	.word	0x0800de9d
 800de24:	0800de9d 	.word	0x0800de9d
 800de28:	0800de85 	.word	0x0800de85
 800de2c:	0800de9d 	.word	0x0800de9d
 800de30:	0800de9d 	.word	0x0800de9d
 800de34:	0800de9d 	.word	0x0800de9d
 800de38:	0800de9d 	.word	0x0800de9d
 800de3c:	0800de9d 	.word	0x0800de9d
 800de40:	0800de9d 	.word	0x0800de9d
 800de44:	0800de9d 	.word	0x0800de9d
 800de48:	0800de8d 	.word	0x0800de8d
 800de4c:	0800de9d 	.word	0x0800de9d
 800de50:	0800de9d 	.word	0x0800de9d
 800de54:	0800de9d 	.word	0x0800de9d
 800de58:	0800de9d 	.word	0x0800de9d
 800de5c:	0800de9d 	.word	0x0800de9d
 800de60:	0800de9d 	.word	0x0800de9d
 800de64:	0800de9d 	.word	0x0800de9d
 800de68:	0800de95 	.word	0x0800de95
 800de6c:	2301      	movs	r3, #1
 800de6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de72:	e050      	b.n	800df16 <UART_SetConfig+0x7ae>
 800de74:	2304      	movs	r3, #4
 800de76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de7a:	e04c      	b.n	800df16 <UART_SetConfig+0x7ae>
 800de7c:	2308      	movs	r3, #8
 800de7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de82:	e048      	b.n	800df16 <UART_SetConfig+0x7ae>
 800de84:	2310      	movs	r3, #16
 800de86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de8a:	e044      	b.n	800df16 <UART_SetConfig+0x7ae>
 800de8c:	2320      	movs	r3, #32
 800de8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de92:	e040      	b.n	800df16 <UART_SetConfig+0x7ae>
 800de94:	2340      	movs	r3, #64	@ 0x40
 800de96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de9a:	e03c      	b.n	800df16 <UART_SetConfig+0x7ae>
 800de9c:	2380      	movs	r3, #128	@ 0x80
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea2:	e038      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a71      	ldr	r2, [pc, #452]	@ (800e070 <UART_SetConfig+0x908>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d130      	bne.n	800df10 <UART_SetConfig+0x7a8>
 800deae:	4b6f      	ldr	r3, [pc, #444]	@ (800e06c <UART_SetConfig+0x904>)
 800deb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800deb2:	f003 0307 	and.w	r3, r3, #7
 800deb6:	2b05      	cmp	r3, #5
 800deb8:	d826      	bhi.n	800df08 <UART_SetConfig+0x7a0>
 800deba:	a201      	add	r2, pc, #4	@ (adr r2, 800dec0 <UART_SetConfig+0x758>)
 800debc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec0:	0800ded9 	.word	0x0800ded9
 800dec4:	0800dee1 	.word	0x0800dee1
 800dec8:	0800dee9 	.word	0x0800dee9
 800decc:	0800def1 	.word	0x0800def1
 800ded0:	0800def9 	.word	0x0800def9
 800ded4:	0800df01 	.word	0x0800df01
 800ded8:	2302      	movs	r3, #2
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dede:	e01a      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dee0:	2304      	movs	r3, #4
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dee6:	e016      	b.n	800df16 <UART_SetConfig+0x7ae>
 800dee8:	2308      	movs	r3, #8
 800deea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deee:	e012      	b.n	800df16 <UART_SetConfig+0x7ae>
 800def0:	2310      	movs	r3, #16
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def6:	e00e      	b.n	800df16 <UART_SetConfig+0x7ae>
 800def8:	2320      	movs	r3, #32
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defe:	e00a      	b.n	800df16 <UART_SetConfig+0x7ae>
 800df00:	2340      	movs	r3, #64	@ 0x40
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df06:	e006      	b.n	800df16 <UART_SetConfig+0x7ae>
 800df08:	2380      	movs	r3, #128	@ 0x80
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0e:	e002      	b.n	800df16 <UART_SetConfig+0x7ae>
 800df10:	2380      	movs	r3, #128	@ 0x80
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a55      	ldr	r2, [pc, #340]	@ (800e070 <UART_SetConfig+0x908>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	f040 80f8 	bne.w	800e112 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df26:	2b20      	cmp	r3, #32
 800df28:	dc46      	bgt.n	800dfb8 <UART_SetConfig+0x850>
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	db75      	blt.n	800e01a <UART_SetConfig+0x8b2>
 800df2e:	3b02      	subs	r3, #2
 800df30:	2b1e      	cmp	r3, #30
 800df32:	d872      	bhi.n	800e01a <UART_SetConfig+0x8b2>
 800df34:	a201      	add	r2, pc, #4	@ (adr r2, 800df3c <UART_SetConfig+0x7d4>)
 800df36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3a:	bf00      	nop
 800df3c:	0800dfbf 	.word	0x0800dfbf
 800df40:	0800e01b 	.word	0x0800e01b
 800df44:	0800dfc7 	.word	0x0800dfc7
 800df48:	0800e01b 	.word	0x0800e01b
 800df4c:	0800e01b 	.word	0x0800e01b
 800df50:	0800e01b 	.word	0x0800e01b
 800df54:	0800dfd7 	.word	0x0800dfd7
 800df58:	0800e01b 	.word	0x0800e01b
 800df5c:	0800e01b 	.word	0x0800e01b
 800df60:	0800e01b 	.word	0x0800e01b
 800df64:	0800e01b 	.word	0x0800e01b
 800df68:	0800e01b 	.word	0x0800e01b
 800df6c:	0800e01b 	.word	0x0800e01b
 800df70:	0800e01b 	.word	0x0800e01b
 800df74:	0800dfe7 	.word	0x0800dfe7
 800df78:	0800e01b 	.word	0x0800e01b
 800df7c:	0800e01b 	.word	0x0800e01b
 800df80:	0800e01b 	.word	0x0800e01b
 800df84:	0800e01b 	.word	0x0800e01b
 800df88:	0800e01b 	.word	0x0800e01b
 800df8c:	0800e01b 	.word	0x0800e01b
 800df90:	0800e01b 	.word	0x0800e01b
 800df94:	0800e01b 	.word	0x0800e01b
 800df98:	0800e01b 	.word	0x0800e01b
 800df9c:	0800e01b 	.word	0x0800e01b
 800dfa0:	0800e01b 	.word	0x0800e01b
 800dfa4:	0800e01b 	.word	0x0800e01b
 800dfa8:	0800e01b 	.word	0x0800e01b
 800dfac:	0800e01b 	.word	0x0800e01b
 800dfb0:	0800e01b 	.word	0x0800e01b
 800dfb4:	0800e00d 	.word	0x0800e00d
 800dfb8:	2b40      	cmp	r3, #64	@ 0x40
 800dfba:	d02a      	beq.n	800e012 <UART_SetConfig+0x8aa>
 800dfbc:	e02d      	b.n	800e01a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dfbe:	f7fc fc5d 	bl	800a87c <HAL_RCCEx_GetD3PCLK1Freq>
 800dfc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dfc4:	e02f      	b.n	800e026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fc fc6c 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfd4:	e027      	b.n	800e026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfd6:	f107 0318 	add.w	r3, r7, #24
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fc fdb8 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfe4:	e01f      	b.n	800e026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfe6:	4b21      	ldr	r3, [pc, #132]	@ (800e06c <UART_SetConfig+0x904>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f003 0320 	and.w	r3, r3, #32
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d009      	beq.n	800e006 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dff2:	4b1e      	ldr	r3, [pc, #120]	@ (800e06c <UART_SetConfig+0x904>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	08db      	lsrs	r3, r3, #3
 800dff8:	f003 0303 	and.w	r3, r3, #3
 800dffc:	4a1d      	ldr	r2, [pc, #116]	@ (800e074 <UART_SetConfig+0x90c>)
 800dffe:	fa22 f303 	lsr.w	r3, r2, r3
 800e002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e004:	e00f      	b.n	800e026 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e006:	4b1b      	ldr	r3, [pc, #108]	@ (800e074 <UART_SetConfig+0x90c>)
 800e008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e00a:	e00c      	b.n	800e026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e00c:	4b1a      	ldr	r3, [pc, #104]	@ (800e078 <UART_SetConfig+0x910>)
 800e00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e010:	e009      	b.n	800e026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e018:	e005      	b.n	800e026 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e01a:	2300      	movs	r3, #0
 800e01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
 800e020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f000 81ee 	beq.w	800e40a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e032:	4a12      	ldr	r2, [pc, #72]	@ (800e07c <UART_SetConfig+0x914>)
 800e034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e038:	461a      	mov	r2, r3
 800e03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e03c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e040:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	4613      	mov	r3, r2
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	4413      	add	r3, r2
 800e04c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e04e:	429a      	cmp	r2, r3
 800e050:	d305      	bcc.n	800e05e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d910      	bls.n	800e080 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e064:	e1d1      	b.n	800e40a <UART_SetConfig+0xca2>
 800e066:	bf00      	nop
 800e068:	40011c00 	.word	0x40011c00
 800e06c:	58024400 	.word	0x58024400
 800e070:	58000c00 	.word	0x58000c00
 800e074:	03d09000 	.word	0x03d09000
 800e078:	003d0900 	.word	0x003d0900
 800e07c:	0800fb60 	.word	0x0800fb60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e082:	2200      	movs	r2, #0
 800e084:	60bb      	str	r3, [r7, #8]
 800e086:	60fa      	str	r2, [r7, #12]
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e08c:	4ac0      	ldr	r2, [pc, #768]	@ (800e390 <UART_SetConfig+0xc28>)
 800e08e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e092:	b29b      	uxth	r3, r3
 800e094:	2200      	movs	r2, #0
 800e096:	603b      	str	r3, [r7, #0]
 800e098:	607a      	str	r2, [r7, #4]
 800e09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e09e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0a2:	f7f2 f933 	bl	800030c <__aeabi_uldivmod>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	f04f 0200 	mov.w	r2, #0
 800e0b2:	f04f 0300 	mov.w	r3, #0
 800e0b6:	020b      	lsls	r3, r1, #8
 800e0b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e0bc:	0202      	lsls	r2, r0, #8
 800e0be:	6979      	ldr	r1, [r7, #20]
 800e0c0:	6849      	ldr	r1, [r1, #4]
 800e0c2:	0849      	lsrs	r1, r1, #1
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	eb12 0804 	adds.w	r8, r2, r4
 800e0ce:	eb43 0905 	adc.w	r9, r3, r5
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	469a      	mov	sl, r3
 800e0da:	4693      	mov	fp, r2
 800e0dc:	4652      	mov	r2, sl
 800e0de:	465b      	mov	r3, fp
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	4649      	mov	r1, r9
 800e0e4:	f7f2 f912 	bl	800030c <__aeabi_uldivmod>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e0f6:	d308      	bcc.n	800e10a <UART_SetConfig+0x9a2>
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0fe:	d204      	bcs.n	800e10a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e106:	60da      	str	r2, [r3, #12]
 800e108:	e17f      	b.n	800e40a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e110:	e17b      	b.n	800e40a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	69db      	ldr	r3, [r3, #28]
 800e116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e11a:	f040 80bd 	bne.w	800e298 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e11e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e122:	2b20      	cmp	r3, #32
 800e124:	dc48      	bgt.n	800e1b8 <UART_SetConfig+0xa50>
 800e126:	2b00      	cmp	r3, #0
 800e128:	db7b      	blt.n	800e222 <UART_SetConfig+0xaba>
 800e12a:	2b20      	cmp	r3, #32
 800e12c:	d879      	bhi.n	800e222 <UART_SetConfig+0xaba>
 800e12e:	a201      	add	r2, pc, #4	@ (adr r2, 800e134 <UART_SetConfig+0x9cc>)
 800e130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e134:	0800e1bf 	.word	0x0800e1bf
 800e138:	0800e1c7 	.word	0x0800e1c7
 800e13c:	0800e223 	.word	0x0800e223
 800e140:	0800e223 	.word	0x0800e223
 800e144:	0800e1cf 	.word	0x0800e1cf
 800e148:	0800e223 	.word	0x0800e223
 800e14c:	0800e223 	.word	0x0800e223
 800e150:	0800e223 	.word	0x0800e223
 800e154:	0800e1df 	.word	0x0800e1df
 800e158:	0800e223 	.word	0x0800e223
 800e15c:	0800e223 	.word	0x0800e223
 800e160:	0800e223 	.word	0x0800e223
 800e164:	0800e223 	.word	0x0800e223
 800e168:	0800e223 	.word	0x0800e223
 800e16c:	0800e223 	.word	0x0800e223
 800e170:	0800e223 	.word	0x0800e223
 800e174:	0800e1ef 	.word	0x0800e1ef
 800e178:	0800e223 	.word	0x0800e223
 800e17c:	0800e223 	.word	0x0800e223
 800e180:	0800e223 	.word	0x0800e223
 800e184:	0800e223 	.word	0x0800e223
 800e188:	0800e223 	.word	0x0800e223
 800e18c:	0800e223 	.word	0x0800e223
 800e190:	0800e223 	.word	0x0800e223
 800e194:	0800e223 	.word	0x0800e223
 800e198:	0800e223 	.word	0x0800e223
 800e19c:	0800e223 	.word	0x0800e223
 800e1a0:	0800e223 	.word	0x0800e223
 800e1a4:	0800e223 	.word	0x0800e223
 800e1a8:	0800e223 	.word	0x0800e223
 800e1ac:	0800e223 	.word	0x0800e223
 800e1b0:	0800e223 	.word	0x0800e223
 800e1b4:	0800e215 	.word	0x0800e215
 800e1b8:	2b40      	cmp	r3, #64	@ 0x40
 800e1ba:	d02e      	beq.n	800e21a <UART_SetConfig+0xab2>
 800e1bc:	e031      	b.n	800e222 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1be:	f7fa fcbf 	bl	8008b40 <HAL_RCC_GetPCLK1Freq>
 800e1c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e1c4:	e033      	b.n	800e22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1c6:	f7fa fcd1 	bl	8008b6c <HAL_RCC_GetPCLK2Freq>
 800e1ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e1cc:	e02f      	b.n	800e22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fc fb68 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1dc:	e027      	b.n	800e22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1de:	f107 0318 	add.w	r3, r7, #24
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fc fcb4 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1ec:	e01f      	b.n	800e22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ee:	4b69      	ldr	r3, [pc, #420]	@ (800e394 <UART_SetConfig+0xc2c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f003 0320 	and.w	r3, r3, #32
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d009      	beq.n	800e20e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1fa:	4b66      	ldr	r3, [pc, #408]	@ (800e394 <UART_SetConfig+0xc2c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	08db      	lsrs	r3, r3, #3
 800e200:	f003 0303 	and.w	r3, r3, #3
 800e204:	4a64      	ldr	r2, [pc, #400]	@ (800e398 <UART_SetConfig+0xc30>)
 800e206:	fa22 f303 	lsr.w	r3, r2, r3
 800e20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e20c:	e00f      	b.n	800e22e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e20e:	4b62      	ldr	r3, [pc, #392]	@ (800e398 <UART_SetConfig+0xc30>)
 800e210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e212:	e00c      	b.n	800e22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e214:	4b61      	ldr	r3, [pc, #388]	@ (800e39c <UART_SetConfig+0xc34>)
 800e216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e218:	e009      	b.n	800e22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e21a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e220:	e005      	b.n	800e22e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e222:	2300      	movs	r3, #0
 800e224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e22c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e230:	2b00      	cmp	r3, #0
 800e232:	f000 80ea 	beq.w	800e40a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e23a:	4a55      	ldr	r2, [pc, #340]	@ (800e390 <UART_SetConfig+0xc28>)
 800e23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e240:	461a      	mov	r2, r3
 800e242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e244:	fbb3 f3f2 	udiv	r3, r3, r2
 800e248:	005a      	lsls	r2, r3, #1
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	085b      	lsrs	r3, r3, #1
 800e250:	441a      	add	r2, r3
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	fbb2 f3f3 	udiv	r3, r2, r3
 800e25a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25e:	2b0f      	cmp	r3, #15
 800e260:	d916      	bls.n	800e290 <UART_SetConfig+0xb28>
 800e262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e268:	d212      	bcs.n	800e290 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	f023 030f 	bic.w	r3, r3, #15
 800e272:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e276:	085b      	lsrs	r3, r3, #1
 800e278:	b29b      	uxth	r3, r3
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	b29a      	uxth	r2, r3
 800e280:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e282:	4313      	orrs	r3, r2
 800e284:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e28c:	60da      	str	r2, [r3, #12]
 800e28e:	e0bc      	b.n	800e40a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e290:	2301      	movs	r3, #1
 800e292:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e296:	e0b8      	b.n	800e40a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e298:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e29c:	2b20      	cmp	r3, #32
 800e29e:	dc4b      	bgt.n	800e338 <UART_SetConfig+0xbd0>
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f2c0 8087 	blt.w	800e3b4 <UART_SetConfig+0xc4c>
 800e2a6:	2b20      	cmp	r3, #32
 800e2a8:	f200 8084 	bhi.w	800e3b4 <UART_SetConfig+0xc4c>
 800e2ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e2b4 <UART_SetConfig+0xb4c>)
 800e2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b2:	bf00      	nop
 800e2b4:	0800e33f 	.word	0x0800e33f
 800e2b8:	0800e347 	.word	0x0800e347
 800e2bc:	0800e3b5 	.word	0x0800e3b5
 800e2c0:	0800e3b5 	.word	0x0800e3b5
 800e2c4:	0800e34f 	.word	0x0800e34f
 800e2c8:	0800e3b5 	.word	0x0800e3b5
 800e2cc:	0800e3b5 	.word	0x0800e3b5
 800e2d0:	0800e3b5 	.word	0x0800e3b5
 800e2d4:	0800e35f 	.word	0x0800e35f
 800e2d8:	0800e3b5 	.word	0x0800e3b5
 800e2dc:	0800e3b5 	.word	0x0800e3b5
 800e2e0:	0800e3b5 	.word	0x0800e3b5
 800e2e4:	0800e3b5 	.word	0x0800e3b5
 800e2e8:	0800e3b5 	.word	0x0800e3b5
 800e2ec:	0800e3b5 	.word	0x0800e3b5
 800e2f0:	0800e3b5 	.word	0x0800e3b5
 800e2f4:	0800e36f 	.word	0x0800e36f
 800e2f8:	0800e3b5 	.word	0x0800e3b5
 800e2fc:	0800e3b5 	.word	0x0800e3b5
 800e300:	0800e3b5 	.word	0x0800e3b5
 800e304:	0800e3b5 	.word	0x0800e3b5
 800e308:	0800e3b5 	.word	0x0800e3b5
 800e30c:	0800e3b5 	.word	0x0800e3b5
 800e310:	0800e3b5 	.word	0x0800e3b5
 800e314:	0800e3b5 	.word	0x0800e3b5
 800e318:	0800e3b5 	.word	0x0800e3b5
 800e31c:	0800e3b5 	.word	0x0800e3b5
 800e320:	0800e3b5 	.word	0x0800e3b5
 800e324:	0800e3b5 	.word	0x0800e3b5
 800e328:	0800e3b5 	.word	0x0800e3b5
 800e32c:	0800e3b5 	.word	0x0800e3b5
 800e330:	0800e3b5 	.word	0x0800e3b5
 800e334:	0800e3a7 	.word	0x0800e3a7
 800e338:	2b40      	cmp	r3, #64	@ 0x40
 800e33a:	d037      	beq.n	800e3ac <UART_SetConfig+0xc44>
 800e33c:	e03a      	b.n	800e3b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e33e:	f7fa fbff 	bl	8008b40 <HAL_RCC_GetPCLK1Freq>
 800e342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e344:	e03c      	b.n	800e3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e346:	f7fa fc11 	bl	8008b6c <HAL_RCC_GetPCLK2Freq>
 800e34a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e34c:	e038      	b.n	800e3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e34e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e352:	4618      	mov	r0, r3
 800e354:	f7fc faa8 	bl	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e35c:	e030      	b.n	800e3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e35e:	f107 0318 	add.w	r3, r7, #24
 800e362:	4618      	mov	r0, r3
 800e364:	f7fc fbf4 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e36c:	e028      	b.n	800e3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e36e:	4b09      	ldr	r3, [pc, #36]	@ (800e394 <UART_SetConfig+0xc2c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 0320 	and.w	r3, r3, #32
 800e376:	2b00      	cmp	r3, #0
 800e378:	d012      	beq.n	800e3a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e37a:	4b06      	ldr	r3, [pc, #24]	@ (800e394 <UART_SetConfig+0xc2c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	08db      	lsrs	r3, r3, #3
 800e380:	f003 0303 	and.w	r3, r3, #3
 800e384:	4a04      	ldr	r2, [pc, #16]	@ (800e398 <UART_SetConfig+0xc30>)
 800e386:	fa22 f303 	lsr.w	r3, r2, r3
 800e38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e38c:	e018      	b.n	800e3c0 <UART_SetConfig+0xc58>
 800e38e:	bf00      	nop
 800e390:	0800fb60 	.word	0x0800fb60
 800e394:	58024400 	.word	0x58024400
 800e398:	03d09000 	.word	0x03d09000
 800e39c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e3a0:	4b24      	ldr	r3, [pc, #144]	@ (800e434 <UART_SetConfig+0xccc>)
 800e3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3a4:	e00c      	b.n	800e3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3a6:	4b24      	ldr	r3, [pc, #144]	@ (800e438 <UART_SetConfig+0xcd0>)
 800e3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3aa:	e009      	b.n	800e3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3b2:	e005      	b.n	800e3c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e3be:	bf00      	nop
    }

    if (pclk != 0U)
 800e3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d021      	beq.n	800e40a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ca:	4a1c      	ldr	r2, [pc, #112]	@ (800e43c <UART_SetConfig+0xcd4>)
 800e3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	085b      	lsrs	r3, r3, #1
 800e3de:	441a      	add	r2, r3
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ec:	2b0f      	cmp	r3, #15
 800e3ee:	d909      	bls.n	800e404 <UART_SetConfig+0xc9c>
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3f6:	d205      	bcs.n	800e404 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	60da      	str	r2, [r3, #12]
 800e402:	e002      	b.n	800e40a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	2201      	movs	r2, #1
 800e416:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	2200      	movs	r2, #0
 800e41e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	2200      	movs	r2, #0
 800e424:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e426:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3748      	adds	r7, #72	@ 0x48
 800e42e:	46bd      	mov	sp, r7
 800e430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e434:	03d09000 	.word	0x03d09000
 800e438:	003d0900 	.word	0x003d0900
 800e43c:	0800fb60 	.word	0x0800fb60

0800e440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e44c:	f003 0308 	and.w	r3, r3, #8
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	430a      	orrs	r2, r1
 800e468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00a      	beq.n	800e48c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e490:	f003 0302 	and.w	r3, r3, #2
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00a      	beq.n	800e4ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4b2:	f003 0304 	and.w	r3, r3, #4
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00a      	beq.n	800e4d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	430a      	orrs	r2, r1
 800e4ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4d4:	f003 0310 	and.w	r3, r3, #16
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00a      	beq.n	800e4f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	430a      	orrs	r2, r1
 800e4f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f6:	f003 0320 	and.w	r3, r3, #32
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00a      	beq.n	800e514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d01a      	beq.n	800e556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	430a      	orrs	r2, r1
 800e534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e53a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e53e:	d10a      	bne.n	800e556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	430a      	orrs	r2, r1
 800e554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00a      	beq.n	800e578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	430a      	orrs	r2, r1
 800e576:	605a      	str	r2, [r3, #4]
  }
}
 800e578:	bf00      	nop
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b098      	sub	sp, #96	@ 0x60
 800e588:	af02      	add	r7, sp, #8
 800e58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e594:	f7f4 f934 	bl	8002800 <HAL_GetTick>
 800e598:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f003 0308 	and.w	r3, r3, #8
 800e5a4:	2b08      	cmp	r3, #8
 800e5a6:	d12f      	bne.n	800e608 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f88e 	bl	800e6d8 <UART_WaitOnFlagUntilTimeout>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d022      	beq.n	800e608 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ca:	e853 3f00 	ldrex	r3, [r3]
 800e5ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e5d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e5e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5e8:	e841 2300 	strex	r3, r2, [r1]
 800e5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e5ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1e6      	bne.n	800e5c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2220      	movs	r2, #32
 800e5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e604:	2303      	movs	r3, #3
 800e606:	e063      	b.n	800e6d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f003 0304 	and.w	r3, r3, #4
 800e612:	2b04      	cmp	r3, #4
 800e614:	d149      	bne.n	800e6aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e616:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e61e:	2200      	movs	r2, #0
 800e620:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f857 	bl	800e6d8 <UART_WaitOnFlagUntilTimeout>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d03c      	beq.n	800e6aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e638:	e853 3f00 	ldrex	r3, [r3]
 800e63c:	623b      	str	r3, [r7, #32]
   return(result);
 800e63e:	6a3b      	ldr	r3, [r7, #32]
 800e640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e64e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e650:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e656:	e841 2300 	strex	r3, r2, [r1]
 800e65a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1e6      	bne.n	800e630 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3308      	adds	r3, #8
 800e668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	e853 3f00 	ldrex	r3, [r3]
 800e670:	60fb      	str	r3, [r7, #12]
   return(result);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f023 0301 	bic.w	r3, r3, #1
 800e678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	3308      	adds	r3, #8
 800e680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e682:	61fa      	str	r2, [r7, #28]
 800e684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e686:	69b9      	ldr	r1, [r7, #24]
 800e688:	69fa      	ldr	r2, [r7, #28]
 800e68a:	e841 2300 	strex	r3, r2, [r1]
 800e68e:	617b      	str	r3, [r7, #20]
   return(result);
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d1e5      	bne.n	800e662 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2220      	movs	r2, #32
 800e69a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e012      	b.n	800e6d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2220      	movs	r2, #32
 800e6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2220      	movs	r2, #32
 800e6b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3758      	adds	r7, #88	@ 0x58
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	603b      	str	r3, [r7, #0]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6e8:	e04f      	b.n	800e78a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f0:	d04b      	beq.n	800e78a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6f2:	f7f4 f885 	bl	8002800 <HAL_GetTick>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	69ba      	ldr	r2, [r7, #24]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d302      	bcc.n	800e708 <UART_WaitOnFlagUntilTimeout+0x30>
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d101      	bne.n	800e70c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e708:	2303      	movs	r3, #3
 800e70a:	e04e      	b.n	800e7aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f003 0304 	and.w	r3, r3, #4
 800e716:	2b00      	cmp	r3, #0
 800e718:	d037      	beq.n	800e78a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2b80      	cmp	r3, #128	@ 0x80
 800e71e:	d034      	beq.n	800e78a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2b40      	cmp	r3, #64	@ 0x40
 800e724:	d031      	beq.n	800e78a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	69db      	ldr	r3, [r3, #28]
 800e72c:	f003 0308 	and.w	r3, r3, #8
 800e730:	2b08      	cmp	r3, #8
 800e732:	d110      	bne.n	800e756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2208      	movs	r2, #8
 800e73a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 f95b 	bl	800e9f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2208      	movs	r2, #8
 800e746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	e029      	b.n	800e7aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	69db      	ldr	r3, [r3, #28]
 800e75c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e764:	d111      	bne.n	800e78a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e76e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f000 f941 	bl	800e9f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2220      	movs	r2, #32
 800e77a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e786:	2303      	movs	r3, #3
 800e788:	e00f      	b.n	800e7aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	69da      	ldr	r2, [r3, #28]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	4013      	ands	r3, r2
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	429a      	cmp	r2, r3
 800e798:	bf0c      	ite	eq
 800e79a:	2301      	moveq	r3, #1
 800e79c:	2300      	movne	r3, #0
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d0a0      	beq.n	800e6ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
	...

0800e7b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b0a3      	sub	sp, #140	@ 0x8c
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	4613      	mov	r3, r2
 800e7c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	88fa      	ldrh	r2, [r7, #6]
 800e7cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	88fa      	ldrh	r2, [r7, #6]
 800e7d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7e6:	d10e      	bne.n	800e806 <UART_Start_Receive_IT+0x52>
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d105      	bne.n	800e7fc <UART_Start_Receive_IT+0x48>
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e7f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e7fa:	e02d      	b.n	800e858 <UART_Start_Receive_IT+0xa4>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	22ff      	movs	r2, #255	@ 0xff
 800e800:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e804:	e028      	b.n	800e858 <UART_Start_Receive_IT+0xa4>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10d      	bne.n	800e82a <UART_Start_Receive_IT+0x76>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d104      	bne.n	800e820 <UART_Start_Receive_IT+0x6c>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	22ff      	movs	r2, #255	@ 0xff
 800e81a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e81e:	e01b      	b.n	800e858 <UART_Start_Receive_IT+0xa4>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	227f      	movs	r2, #127	@ 0x7f
 800e824:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e828:	e016      	b.n	800e858 <UART_Start_Receive_IT+0xa4>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e832:	d10d      	bne.n	800e850 <UART_Start_Receive_IT+0x9c>
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d104      	bne.n	800e846 <UART_Start_Receive_IT+0x92>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	227f      	movs	r2, #127	@ 0x7f
 800e840:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e844:	e008      	b.n	800e858 <UART_Start_Receive_IT+0xa4>
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	223f      	movs	r2, #63	@ 0x3f
 800e84a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e84e:	e003      	b.n	800e858 <UART_Start_Receive_IT+0xa4>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2222      	movs	r2, #34	@ 0x22
 800e864:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3308      	adds	r3, #8
 800e86e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e872:	e853 3f00 	ldrex	r3, [r3]
 800e876:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e87a:	f043 0301 	orr.w	r3, r3, #1
 800e87e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	3308      	adds	r3, #8
 800e888:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e88c:	673a      	str	r2, [r7, #112]	@ 0x70
 800e88e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e890:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e892:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e894:	e841 2300 	strex	r3, r2, [r1]
 800e898:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e89a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1e3      	bne.n	800e868 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8a8:	d14f      	bne.n	800e94a <UART_Start_Receive_IT+0x196>
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e8b0:	88fa      	ldrh	r2, [r7, #6]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d349      	bcc.n	800e94a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8be:	d107      	bne.n	800e8d0 <UART_Start_Receive_IT+0x11c>
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	691b      	ldr	r3, [r3, #16]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d103      	bne.n	800e8d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4a47      	ldr	r2, [pc, #284]	@ (800e9e8 <UART_Start_Receive_IT+0x234>)
 800e8cc:	675a      	str	r2, [r3, #116]	@ 0x74
 800e8ce:	e002      	b.n	800e8d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4a46      	ldr	r2, [pc, #280]	@ (800e9ec <UART_Start_Receive_IT+0x238>)
 800e8d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	691b      	ldr	r3, [r3, #16]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d01a      	beq.n	800e914 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8e6:	e853 3f00 	ldrex	r3, [r3]
 800e8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e8ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e900:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e902:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e904:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e906:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e908:	e841 2300 	strex	r3, r2, [r1]
 800e90c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e90e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1e4      	bne.n	800e8de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3308      	adds	r3, #8
 800e91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e91e:	e853 3f00 	ldrex	r3, [r3]
 800e922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e92a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3308      	adds	r3, #8
 800e932:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e934:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e936:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e938:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e93a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e93c:	e841 2300 	strex	r3, r2, [r1]
 800e940:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1e5      	bne.n	800e914 <UART_Start_Receive_IT+0x160>
 800e948:	e046      	b.n	800e9d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e952:	d107      	bne.n	800e964 <UART_Start_Receive_IT+0x1b0>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	691b      	ldr	r3, [r3, #16]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d103      	bne.n	800e964 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4a24      	ldr	r2, [pc, #144]	@ (800e9f0 <UART_Start_Receive_IT+0x23c>)
 800e960:	675a      	str	r2, [r3, #116]	@ 0x74
 800e962:	e002      	b.n	800e96a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	4a23      	ldr	r2, [pc, #140]	@ (800e9f4 <UART_Start_Receive_IT+0x240>)
 800e968:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d019      	beq.n	800e9a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e97a:	e853 3f00 	ldrex	r3, [r3]
 800e97e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e982:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e986:	677b      	str	r3, [r7, #116]	@ 0x74
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	461a      	mov	r2, r3
 800e98e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e990:	637b      	str	r3, [r7, #52]	@ 0x34
 800e992:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e994:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e998:	e841 2300 	strex	r3, r2, [r1]
 800e99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1e6      	bne.n	800e972 <UART_Start_Receive_IT+0x1be>
 800e9a4:	e018      	b.n	800e9d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	e853 3f00 	ldrex	r3, [r3]
 800e9b2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	f043 0320 	orr.w	r3, r3, #32
 800e9ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9c4:	623b      	str	r3, [r7, #32]
 800e9c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c8:	69f9      	ldr	r1, [r7, #28]
 800e9ca:	6a3a      	ldr	r2, [r7, #32]
 800e9cc:	e841 2300 	strex	r3, r2, [r1]
 800e9d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1e6      	bne.n	800e9a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	378c      	adds	r7, #140	@ 0x8c
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	0800f219 	.word	0x0800f219
 800e9ec:	0800eeb9 	.word	0x0800eeb9
 800e9f0:	0800ed01 	.word	0x0800ed01
 800e9f4:	0800eb49 	.word	0x0800eb49

0800e9f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b095      	sub	sp, #84	@ 0x54
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea08:	e853 3f00 	ldrex	r3, [r3]
 800ea0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea1e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea26:	e841 2300 	strex	r3, r2, [r1]
 800ea2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1e6      	bne.n	800ea00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	3308      	adds	r3, #8
 800ea38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	e853 3f00 	ldrex	r3, [r3]
 800ea40:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea42:	69fa      	ldr	r2, [r7, #28]
 800ea44:	4b1e      	ldr	r3, [pc, #120]	@ (800eac0 <UART_EndRxTransfer+0xc8>)
 800ea46:	4013      	ands	r3, r2
 800ea48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	3308      	adds	r3, #8
 800ea50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ea54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea5a:	e841 2300 	strex	r3, r2, [r1]
 800ea5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1e5      	bne.n	800ea32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d118      	bne.n	800eaa0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	e853 3f00 	ldrex	r3, [r3]
 800ea7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f023 0310 	bic.w	r3, r3, #16
 800ea82:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea8c:	61bb      	str	r3, [r7, #24]
 800ea8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea90:	6979      	ldr	r1, [r7, #20]
 800ea92:	69ba      	ldr	r2, [r7, #24]
 800ea94:	e841 2300 	strex	r3, r2, [r1]
 800ea98:	613b      	str	r3, [r7, #16]
   return(result);
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1e6      	bne.n	800ea6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2220      	movs	r2, #32
 800eaa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eab4:	bf00      	nop
 800eab6:	3754      	adds	r7, #84	@ 0x54
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	effffffe 	.word	0xeffffffe

0800eac4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ead0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2200      	movs	r2, #0
 800eade:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f7fe fe36 	bl	800d754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eae8:	bf00      	nop
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb0c:	61fb      	str	r3, [r7, #28]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	461a      	mov	r2, r3
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	61bb      	str	r3, [r7, #24]
 800eb18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1a:	6979      	ldr	r1, [r7, #20]
 800eb1c:	69ba      	ldr	r2, [r7, #24]
 800eb1e:	e841 2300 	strex	r3, r2, [r1]
 800eb22:	613b      	str	r3, [r7, #16]
   return(result);
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1e6      	bne.n	800eaf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2220      	movs	r2, #32
 800eb2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7fe fdf7 	bl	800d72c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb3e:	bf00      	nop
 800eb40:	3720      	adds	r7, #32
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
	...

0800eb48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b09c      	sub	sp, #112	@ 0x70
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb60:	2b22      	cmp	r3, #34	@ 0x22
 800eb62:	f040 80be 	bne.w	800ece2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eb70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800eb74:	b2d9      	uxtb	r1, r3
 800eb76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb80:	400a      	ands	r2, r1
 800eb82:	b2d2      	uxtb	r2, r2
 800eb84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb8a:	1c5a      	adds	r2, r3, #1
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	b29a      	uxth	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f040 80a1 	bne.w	800ecf2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebb8:	e853 3f00 	ldrex	r3, [r3]
 800ebbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ebbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ebc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ebce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ebd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ebd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ebd6:	e841 2300 	strex	r3, r2, [r1]
 800ebda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ebdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1e6      	bne.n	800ebb0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebec:	e853 3f00 	ldrex	r3, [r3]
 800ebf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ebf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebf4:	f023 0301 	bic.w	r3, r3, #1
 800ebf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	3308      	adds	r3, #8
 800ec00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ec02:	647a      	str	r2, [r7, #68]	@ 0x44
 800ec04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec0a:	e841 2300 	strex	r3, r2, [r1]
 800ec0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d1e5      	bne.n	800ebe2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2220      	movs	r2, #32
 800ec1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2200      	movs	r2, #0
 800ec22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a33      	ldr	r2, [pc, #204]	@ (800ecfc <UART_RxISR_8BIT+0x1b4>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d01f      	beq.n	800ec74 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d018      	beq.n	800ec74 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4a:	e853 3f00 	ldrex	r3, [r3]
 800ec4e:	623b      	str	r3, [r7, #32]
   return(result);
 800ec50:	6a3b      	ldr	r3, [r7, #32]
 800ec52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec56:	663b      	str	r3, [r7, #96]	@ 0x60
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec60:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec68:	e841 2300 	strex	r3, r2, [r1]
 800ec6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ec6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1e6      	bne.n	800ec42 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d12e      	bne.n	800ecda <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	e853 3f00 	ldrex	r3, [r3]
 800ec8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f023 0310 	bic.w	r3, r3, #16
 800ec96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eca0:	61fb      	str	r3, [r7, #28]
 800eca2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca4:	69b9      	ldr	r1, [r7, #24]
 800eca6:	69fa      	ldr	r2, [r7, #28]
 800eca8:	e841 2300 	strex	r3, r2, [r1]
 800ecac:	617b      	str	r3, [r7, #20]
   return(result);
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1e6      	bne.n	800ec82 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	69db      	ldr	r3, [r3, #28]
 800ecba:	f003 0310 	and.w	r3, r3, #16
 800ecbe:	2b10      	cmp	r3, #16
 800ecc0:	d103      	bne.n	800ecca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2210      	movs	r2, #16
 800ecc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f7f2 f994 	bl	8001000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecd8:	e00b      	b.n	800ecf2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7fe fd30 	bl	800d740 <HAL_UART_RxCpltCallback>
}
 800ece0:	e007      	b.n	800ecf2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	699a      	ldr	r2, [r3, #24]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f042 0208 	orr.w	r2, r2, #8
 800ecf0:	619a      	str	r2, [r3, #24]
}
 800ecf2:	bf00      	nop
 800ecf4:	3770      	adds	r7, #112	@ 0x70
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	58000c00 	.word	0x58000c00

0800ed00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b09c      	sub	sp, #112	@ 0x70
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed18:	2b22      	cmp	r3, #34	@ 0x22
 800ed1a:	f040 80be 	bne.w	800ee9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ed32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ed36:	4013      	ands	r3, r2
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ed3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed42:	1c9a      	adds	r2, r3, #2
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	3b01      	subs	r3, #1
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f040 80a1 	bne.w	800eeaa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed70:	e853 3f00 	ldrex	r3, [r3]
 800ed74:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ed76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed7c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	461a      	mov	r2, r3
 800ed84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ed86:	657b      	str	r3, [r7, #84]	@ 0x54
 800ed88:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ed8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ed8e:	e841 2300 	strex	r3, r2, [r1]
 800ed92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ed94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d1e6      	bne.n	800ed68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	3308      	adds	r3, #8
 800eda0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eda4:	e853 3f00 	ldrex	r3, [r3]
 800eda8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800edaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edac:	f023 0301 	bic.w	r3, r3, #1
 800edb0:	663b      	str	r3, [r7, #96]	@ 0x60
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	3308      	adds	r3, #8
 800edb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800edba:	643a      	str	r2, [r7, #64]	@ 0x40
 800edbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800edc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edc2:	e841 2300 	strex	r3, r2, [r1]
 800edc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800edc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1e5      	bne.n	800ed9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2220      	movs	r2, #32
 800edd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a33      	ldr	r2, [pc, #204]	@ (800eeb4 <UART_RxISR_16BIT+0x1b4>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d01f      	beq.n	800ee2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d018      	beq.n	800ee2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee00:	6a3b      	ldr	r3, [r7, #32]
 800ee02:	e853 3f00 	ldrex	r3, [r3]
 800ee06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	461a      	mov	r2, r3
 800ee16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee20:	e841 2300 	strex	r3, r2, [r1]
 800ee24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1e6      	bne.n	800edfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d12e      	bne.n	800ee92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	f023 0310 	bic.w	r3, r3, #16
 800ee4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	461a      	mov	r2, r3
 800ee56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee58:	61bb      	str	r3, [r7, #24]
 800ee5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	6979      	ldr	r1, [r7, #20]
 800ee5e:	69ba      	ldr	r2, [r7, #24]
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	613b      	str	r3, [r7, #16]
   return(result);
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e6      	bne.n	800ee3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	69db      	ldr	r3, [r3, #28]
 800ee72:	f003 0310 	and.w	r3, r3, #16
 800ee76:	2b10      	cmp	r3, #16
 800ee78:	d103      	bne.n	800ee82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2210      	movs	r2, #16
 800ee80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7f2 f8b8 	bl	8001000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee90:	e00b      	b.n	800eeaa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7fe fc54 	bl	800d740 <HAL_UART_RxCpltCallback>
}
 800ee98:	e007      	b.n	800eeaa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	699a      	ldr	r2, [r3, #24]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f042 0208 	orr.w	r2, r2, #8
 800eea8:	619a      	str	r2, [r3, #24]
}
 800eeaa:	bf00      	nop
 800eeac:	3770      	adds	r7, #112	@ 0x70
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	58000c00 	.word	0x58000c00

0800eeb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b0ac      	sub	sp, #176	@ 0xb0
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eec6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eeee:	2b22      	cmp	r3, #34	@ 0x22
 800eef0:	f040 8180 	bne.w	800f1f4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eefa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eefe:	e123      	b.n	800f148 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef06:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef0a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ef0e:	b2d9      	uxtb	r1, r3
 800ef10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ef14:	b2da      	uxtb	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef1a:	400a      	ands	r2, r1
 800ef1c:	b2d2      	uxtb	r2, r2
 800ef1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef24:	1c5a      	adds	r2, r3, #1
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	3b01      	subs	r3, #1
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	69db      	ldr	r3, [r3, #28]
 800ef42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef4a:	f003 0307 	and.w	r3, r3, #7
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d053      	beq.n	800effa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef56:	f003 0301 	and.w	r3, r3, #1
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d011      	beq.n	800ef82 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ef5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00b      	beq.n	800ef82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef78:	f043 0201 	orr.w	r2, r3, #1
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef86:	f003 0302 	and.w	r3, r3, #2
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d011      	beq.n	800efb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ef8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ef92:	f003 0301 	and.w	r3, r3, #1
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00b      	beq.n	800efb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2202      	movs	r2, #2
 800efa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efa8:	f043 0204 	orr.w	r2, r3, #4
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efb6:	f003 0304 	and.w	r3, r3, #4
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d011      	beq.n	800efe2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800efbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800efc2:	f003 0301 	and.w	r3, r3, #1
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00b      	beq.n	800efe2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2204      	movs	r2, #4
 800efd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efd8:	f043 0202 	orr.w	r2, r3, #2
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d006      	beq.n	800effa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7fe fbb1 	bl	800d754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f000:	b29b      	uxth	r3, r3
 800f002:	2b00      	cmp	r3, #0
 800f004:	f040 80a0 	bne.w	800f148 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f00e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f010:	e853 3f00 	ldrex	r3, [r3]
 800f014:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f01c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	461a      	mov	r2, r3
 800f026:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f02a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f02c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f02e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f030:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f032:	e841 2300 	strex	r3, r2, [r1]
 800f036:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1e4      	bne.n	800f008 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3308      	adds	r3, #8
 800f044:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f048:	e853 3f00 	ldrex	r3, [r3]
 800f04c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f04e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f050:	4b6e      	ldr	r3, [pc, #440]	@ (800f20c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f052:	4013      	ands	r3, r2
 800f054:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	3308      	adds	r3, #8
 800f05e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f062:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f064:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f066:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f068:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f06a:	e841 2300 	strex	r3, r2, [r1]
 800f06e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1e3      	bne.n	800f03e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2220      	movs	r2, #32
 800f07a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4a60      	ldr	r2, [pc, #384]	@ (800f210 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d021      	beq.n	800f0d8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d01a      	beq.n	800f0d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0aa:	e853 3f00 	ldrex	r3, [r3]
 800f0ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f0b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f0b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f0c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f0c6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f0ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f0cc:	e841 2300 	strex	r3, r2, [r1]
 800f0d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f0d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1e4      	bne.n	800f0a2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d130      	bne.n	800f142 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ee:	e853 3f00 	ldrex	r3, [r3]
 800f0f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f6:	f023 0310 	bic.w	r3, r3, #16
 800f0fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	461a      	mov	r2, r3
 800f104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f108:	643b      	str	r3, [r7, #64]	@ 0x40
 800f10a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f10e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f110:	e841 2300 	strex	r3, r2, [r1]
 800f114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1e4      	bne.n	800f0e6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	69db      	ldr	r3, [r3, #28]
 800f122:	f003 0310 	and.w	r3, r3, #16
 800f126:	2b10      	cmp	r3, #16
 800f128:	d103      	bne.n	800f132 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2210      	movs	r2, #16
 800f130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f138:	4619      	mov	r1, r3
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7f1 ff60 	bl	8001000 <HAL_UARTEx_RxEventCallback>
 800f140:	e002      	b.n	800f148 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7fe fafc 	bl	800d740 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f148:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d006      	beq.n	800f15e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f154:	f003 0320 	and.w	r3, r3, #32
 800f158:	2b00      	cmp	r3, #0
 800f15a:	f47f aed1 	bne.w	800ef00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f164:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f168:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d049      	beq.n	800f204 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f176:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d242      	bcs.n	800f204 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	3308      	adds	r3, #8
 800f184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f186:	6a3b      	ldr	r3, [r7, #32]
 800f188:	e853 3f00 	ldrex	r3, [r3]
 800f18c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3308      	adds	r3, #8
 800f19e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f1a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1aa:	e841 2300 	strex	r3, r2, [r1]
 800f1ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e3      	bne.n	800f17e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a16      	ldr	r2, [pc, #88]	@ (800f214 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f1ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	e853 3f00 	ldrex	r3, [r3]
 800f1c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	f043 0320 	orr.w	r3, r3, #32
 800f1d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	461a      	mov	r2, r3
 800f1da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f1de:	61bb      	str	r3, [r7, #24]
 800f1e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e2:	6979      	ldr	r1, [r7, #20]
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	e841 2300 	strex	r3, r2, [r1]
 800f1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1e4      	bne.n	800f1bc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1f2:	e007      	b.n	800f204 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	699a      	ldr	r2, [r3, #24]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f042 0208 	orr.w	r2, r2, #8
 800f202:	619a      	str	r2, [r3, #24]
}
 800f204:	bf00      	nop
 800f206:	37b0      	adds	r7, #176	@ 0xb0
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	effffffe 	.word	0xeffffffe
 800f210:	58000c00 	.word	0x58000c00
 800f214:	0800eb49 	.word	0x0800eb49

0800f218 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b0ae      	sub	sp, #184	@ 0xb8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f226:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	69db      	ldr	r3, [r3, #28]
 800f230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f24e:	2b22      	cmp	r3, #34	@ 0x22
 800f250:	f040 8184 	bne.w	800f55c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f25a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f25e:	e127      	b.n	800f4b0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f266:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f26e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f272:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f276:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f27a:	4013      	ands	r3, r2
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f282:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f288:	1c9a      	adds	r2, r3, #2
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f294:	b29b      	uxth	r3, r3
 800f296:	3b01      	subs	r3, #1
 800f298:	b29a      	uxth	r2, r3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	69db      	ldr	r3, [r3, #28]
 800f2a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f2aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f2ae:	f003 0307 	and.w	r3, r3, #7
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d053      	beq.n	800f35e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f2ba:	f003 0301 	and.w	r3, r3, #1
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d011      	beq.n	800f2e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00b      	beq.n	800f2e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2dc:	f043 0201 	orr.w	r2, r3, #1
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f2ea:	f003 0302 	and.w	r3, r3, #2
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d011      	beq.n	800f316 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f2f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f2f6:	f003 0301 	and.w	r3, r3, #1
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00b      	beq.n	800f316 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2202      	movs	r2, #2
 800f304:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f30c:	f043 0204 	orr.w	r2, r3, #4
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f31a:	f003 0304 	and.w	r3, r3, #4
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d011      	beq.n	800f346 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f326:	f003 0301 	and.w	r3, r3, #1
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00b      	beq.n	800f346 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2204      	movs	r2, #4
 800f334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f33c:	f043 0202 	orr.w	r2, r3, #2
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d006      	beq.n	800f35e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7fe f9ff 	bl	800d754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f364:	b29b      	uxth	r3, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	f040 80a2 	bne.w	800f4b0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f374:	e853 3f00 	ldrex	r3, [r3]
 800f378:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f37a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f37c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	461a      	mov	r2, r3
 800f38a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f38e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f392:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f394:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f396:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f39a:	e841 2300 	strex	r3, r2, [r1]
 800f39e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f3a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1e2      	bne.n	800f36c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3b0:	e853 3f00 	ldrex	r3, [r3]
 800f3b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f3b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f3b8:	4b6e      	ldr	r3, [pc, #440]	@ (800f574 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	3308      	adds	r3, #8
 800f3c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f3ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f3cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f3d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f3d2:	e841 2300 	strex	r3, r2, [r1]
 800f3d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f3d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1e3      	bne.n	800f3a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2220      	movs	r2, #32
 800f3e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4a60      	ldr	r2, [pc, #384]	@ (800f578 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d021      	beq.n	800f440 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f406:	2b00      	cmp	r3, #0
 800f408:	d01a      	beq.n	800f440 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f412:	e853 3f00 	ldrex	r3, [r3]
 800f416:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f41a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f41e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	461a      	mov	r2, r3
 800f428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f42c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f42e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f430:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f432:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f434:	e841 2300 	strex	r3, r2, [r1]
 800f438:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f43a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1e4      	bne.n	800f40a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f444:	2b01      	cmp	r3, #1
 800f446:	d130      	bne.n	800f4aa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f456:	e853 3f00 	ldrex	r3, [r3]
 800f45a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f45e:	f023 0310 	bic.w	r3, r3, #16
 800f462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f470:	647b      	str	r3, [r7, #68]	@ 0x44
 800f472:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f478:	e841 2300 	strex	r3, r2, [r1]
 800f47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f480:	2b00      	cmp	r3, #0
 800f482:	d1e4      	bne.n	800f44e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	69db      	ldr	r3, [r3, #28]
 800f48a:	f003 0310 	and.w	r3, r3, #16
 800f48e:	2b10      	cmp	r3, #16
 800f490:	d103      	bne.n	800f49a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2210      	movs	r2, #16
 800f498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7f1 fdac 	bl	8001000 <HAL_UARTEx_RxEventCallback>
 800f4a8:	e002      	b.n	800f4b0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7fe f948 	bl	800d740 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4b0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d006      	beq.n	800f4c6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f4b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f4bc:	f003 0320 	and.w	r3, r3, #32
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f47f aecd 	bne.w	800f260 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f4cc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f4d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d049      	beq.n	800f56c <UART_RxISR_16BIT_FIFOEN+0x354>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f4de:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d242      	bcs.n	800f56c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	3308      	adds	r3, #8
 800f4ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f0:	e853 3f00 	ldrex	r3, [r3]
 800f4f4:	623b      	str	r3, [r7, #32]
   return(result);
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f4fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	3308      	adds	r3, #8
 800f506:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f50a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f512:	e841 2300 	strex	r3, r2, [r1]
 800f516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1e3      	bne.n	800f4e6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a16      	ldr	r2, [pc, #88]	@ (800f57c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f522:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	e853 3f00 	ldrex	r3, [r3]
 800f530:	60fb      	str	r3, [r7, #12]
   return(result);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f043 0320 	orr.w	r3, r3, #32
 800f538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	461a      	mov	r2, r3
 800f542:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f546:	61fb      	str	r3, [r7, #28]
 800f548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54a:	69b9      	ldr	r1, [r7, #24]
 800f54c:	69fa      	ldr	r2, [r7, #28]
 800f54e:	e841 2300 	strex	r3, r2, [r1]
 800f552:	617b      	str	r3, [r7, #20]
   return(result);
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e4      	bne.n	800f524 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f55a:	e007      	b.n	800f56c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	699a      	ldr	r2, [r3, #24]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f042 0208 	orr.w	r2, r2, #8
 800f56a:	619a      	str	r2, [r3, #24]
}
 800f56c:	bf00      	nop
 800f56e:	37b8      	adds	r7, #184	@ 0xb8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	effffffe 	.word	0xeffffffe
 800f578:	58000c00 	.word	0x58000c00
 800f57c:	0800ed01 	.word	0x0800ed01

0800f580 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d101      	bne.n	800f5d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	e027      	b.n	800f622 <HAL_UARTEx_DisableFifoMode+0x66>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2224      	movs	r2, #36	@ 0x24
 800f5de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f022 0201 	bic.w	r2, r2, #1
 800f5f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f600:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2220      	movs	r2, #32
 800f614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3714      	adds	r7, #20
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f62e:	b580      	push	{r7, lr}
 800f630:	b084      	sub	sp, #16
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
 800f636:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d101      	bne.n	800f646 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f642:	2302      	movs	r3, #2
 800f644:	e02d      	b.n	800f6a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2201      	movs	r2, #1
 800f64a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2224      	movs	r2, #36	@ 0x24
 800f652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f022 0201 	bic.w	r2, r2, #1
 800f66c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	683a      	ldr	r2, [r7, #0]
 800f67e:	430a      	orrs	r2, r1
 800f680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 f8a0 	bl	800f7c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68fa      	ldr	r2, [r7, #12]
 800f68e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2220      	movs	r2, #32
 800f694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b084      	sub	sp, #16
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d101      	bne.n	800f6c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6be:	2302      	movs	r3, #2
 800f6c0:	e02d      	b.n	800f71e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2224      	movs	r2, #36	@ 0x24
 800f6ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f022 0201 	bic.w	r2, r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f862 	bl	800f7c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2220      	movs	r2, #32
 800f710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b08c      	sub	sp, #48	@ 0x30
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	60f8      	str	r0, [r7, #12]
 800f72e:	60b9      	str	r1, [r7, #8]
 800f730:	4613      	mov	r3, r2
 800f732:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f734:	2300      	movs	r3, #0
 800f736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f740:	2b20      	cmp	r3, #32
 800f742:	d13b      	bne.n	800f7bc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d002      	beq.n	800f750 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800f74a:	88fb      	ldrh	r3, [r7, #6]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800f750:	2301      	movs	r3, #1
 800f752:	e034      	b.n	800f7be <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2201      	movs	r2, #1
 800f758:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2200      	movs	r2, #0
 800f75e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800f760:	88fb      	ldrh	r3, [r7, #6]
 800f762:	461a      	mov	r2, r3
 800f764:	68b9      	ldr	r1, [r7, #8]
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f7ff f824 	bl	800e7b4 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f770:	2b01      	cmp	r3, #1
 800f772:	d11d      	bne.n	800f7b0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2210      	movs	r2, #16
 800f77a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	e853 3f00 	ldrex	r3, [r3]
 800f788:	617b      	str	r3, [r7, #20]
   return(result);
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	f043 0310 	orr.w	r3, r3, #16
 800f790:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	461a      	mov	r2, r3
 800f798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f79c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f79e:	6a39      	ldr	r1, [r7, #32]
 800f7a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7a2:	e841 2300 	strex	r3, r2, [r1]
 800f7a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d1e6      	bne.n	800f77c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800f7ae:	e002      	b.n	800f7b6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800f7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f7ba:	e000      	b.n	800f7be <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800f7bc:	2302      	movs	r3, #2
  }
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3730      	adds	r7, #48	@ 0x30
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
	...

0800f7c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d108      	bne.n	800f7ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f7e8:	e031      	b.n	800f84e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f7ea:	2310      	movs	r3, #16
 800f7ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f7ee:	2310      	movs	r3, #16
 800f7f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	689b      	ldr	r3, [r3, #8]
 800f7f8:	0e5b      	lsrs	r3, r3, #25
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	f003 0307 	and.w	r3, r3, #7
 800f800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	0f5b      	lsrs	r3, r3, #29
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	f003 0307 	and.w	r3, r3, #7
 800f810:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f812:	7bbb      	ldrb	r3, [r7, #14]
 800f814:	7b3a      	ldrb	r2, [r7, #12]
 800f816:	4911      	ldr	r1, [pc, #68]	@ (800f85c <UARTEx_SetNbDataToProcess+0x94>)
 800f818:	5c8a      	ldrb	r2, [r1, r2]
 800f81a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f81e:	7b3a      	ldrb	r2, [r7, #12]
 800f820:	490f      	ldr	r1, [pc, #60]	@ (800f860 <UARTEx_SetNbDataToProcess+0x98>)
 800f822:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f824:	fb93 f3f2 	sdiv	r3, r3, r2
 800f828:	b29a      	uxth	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	7b7a      	ldrb	r2, [r7, #13]
 800f834:	4909      	ldr	r1, [pc, #36]	@ (800f85c <UARTEx_SetNbDataToProcess+0x94>)
 800f836:	5c8a      	ldrb	r2, [r1, r2]
 800f838:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f83c:	7b7a      	ldrb	r2, [r7, #13]
 800f83e:	4908      	ldr	r1, [pc, #32]	@ (800f860 <UARTEx_SetNbDataToProcess+0x98>)
 800f840:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f842:	fb93 f3f2 	sdiv	r3, r3, r2
 800f846:	b29a      	uxth	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f84e:	bf00      	nop
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	0800fb78 	.word	0x0800fb78
 800f860:	0800fb80 	.word	0x0800fb80

0800f864 <memset>:
 800f864:	4402      	add	r2, r0
 800f866:	4603      	mov	r3, r0
 800f868:	4293      	cmp	r3, r2
 800f86a:	d100      	bne.n	800f86e <memset+0xa>
 800f86c:	4770      	bx	lr
 800f86e:	f803 1b01 	strb.w	r1, [r3], #1
 800f872:	e7f9      	b.n	800f868 <memset+0x4>

0800f874 <__libc_init_array>:
 800f874:	b570      	push	{r4, r5, r6, lr}
 800f876:	4d0d      	ldr	r5, [pc, #52]	@ (800f8ac <__libc_init_array+0x38>)
 800f878:	4c0d      	ldr	r4, [pc, #52]	@ (800f8b0 <__libc_init_array+0x3c>)
 800f87a:	1b64      	subs	r4, r4, r5
 800f87c:	10a4      	asrs	r4, r4, #2
 800f87e:	2600      	movs	r6, #0
 800f880:	42a6      	cmp	r6, r4
 800f882:	d109      	bne.n	800f898 <__libc_init_array+0x24>
 800f884:	4d0b      	ldr	r5, [pc, #44]	@ (800f8b4 <__libc_init_array+0x40>)
 800f886:	4c0c      	ldr	r4, [pc, #48]	@ (800f8b8 <__libc_init_array+0x44>)
 800f888:	f000 f826 	bl	800f8d8 <_init>
 800f88c:	1b64      	subs	r4, r4, r5
 800f88e:	10a4      	asrs	r4, r4, #2
 800f890:	2600      	movs	r6, #0
 800f892:	42a6      	cmp	r6, r4
 800f894:	d105      	bne.n	800f8a2 <__libc_init_array+0x2e>
 800f896:	bd70      	pop	{r4, r5, r6, pc}
 800f898:	f855 3b04 	ldr.w	r3, [r5], #4
 800f89c:	4798      	blx	r3
 800f89e:	3601      	adds	r6, #1
 800f8a0:	e7ee      	b.n	800f880 <__libc_init_array+0xc>
 800f8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8a6:	4798      	blx	r3
 800f8a8:	3601      	adds	r6, #1
 800f8aa:	e7f2      	b.n	800f892 <__libc_init_array+0x1e>
 800f8ac:	0800fb90 	.word	0x0800fb90
 800f8b0:	0800fb90 	.word	0x0800fb90
 800f8b4:	0800fb90 	.word	0x0800fb90
 800f8b8:	0800fb94 	.word	0x0800fb94

0800f8bc <memcpy>:
 800f8bc:	440a      	add	r2, r1
 800f8be:	4291      	cmp	r1, r2
 800f8c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8c4:	d100      	bne.n	800f8c8 <memcpy+0xc>
 800f8c6:	4770      	bx	lr
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8d2:	4291      	cmp	r1, r2
 800f8d4:	d1f9      	bne.n	800f8ca <memcpy+0xe>
 800f8d6:	bd10      	pop	{r4, pc}

0800f8d8 <_init>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	bf00      	nop
 800f8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8de:	bc08      	pop	{r3}
 800f8e0:	469e      	mov	lr, r3
 800f8e2:	4770      	bx	lr

0800f8e4 <_fini>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	bf00      	nop
 800f8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ea:	bc08      	pop	{r3}
 800f8ec:	469e      	mov	lr, r3
 800f8ee:	4770      	bx	lr
