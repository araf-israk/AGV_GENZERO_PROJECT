
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100dc  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080103a8  080103a8  000113a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010640  08010640  00011640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010648  08010648  00011648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801064c  0801064c  0001164c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08010650  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000738  24000060  080106b0  00012060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000798  080106b0  00012798  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020066  00000000  00000000  0001208e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003486  00000000  00000000  000320f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018b8  00000000  00000000  00035580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000134a  00000000  00000000  00036e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000362b6  00000000  00000000  00038182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022684  00000000  00000000  0006e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001671d2  00000000  00000000  00090abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f7c8e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b28  00000000  00000000  001f7cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001fe7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000060 	.word	0x24000060
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08010390 	.word	0x08010390

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000064 	.word	0x24000064
 8000308:	08010390 	.word	0x08010390

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 fbe0 	bl	8007ef0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00b f8d0 	bl	800b8e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fd2a 	bl	800c1a0 <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b faad 	bl	800bcbc <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fd19 	bl	800c1a0 <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fbb6 	bl	8007ef0 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fba2 	bl	8007ef0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00b f892 	bl	800b8e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fcec 	bl	800c1a0 <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00b f881 	bl	800b8e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fcdb 	bl	800c1a0 <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 fb78 	bl	8007ef0 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f981 	bl	8002b4c <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f fd84 	bl	8010374 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	080103a8 	.word	0x080103a8

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f002 f933 	bl	8002b4c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f002 f927 	bl	8002b4c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f002 f91c 	bl	8002b4c <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 f900 	bl	8002b4c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f002 f8ed 	bl	8002b4c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f002 f8d7 	bl	8002b4c <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f002 f89b 	bl	8002b4c <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 f87d 	bl	8002b4c <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fdb0 	bl	800064e <LoRa_gotoMode>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b089      	sub	sp, #36	@ 0x24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e007      	b.n	8000b1e <LoRa_receive+0x28>
		data[i]=0;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf3      	blt.n	8000b0e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd90 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	2112      	movs	r1, #18
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff92 	bl	8000a5a <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02f      	beq.n	8000ba4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	2112      	movs	r1, #18
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffa0 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b4e:	2113      	movs	r1, #19
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff82 	bl	8000a5a <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7c 	bl	8000a5a <LoRa_read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff8e 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b72:	7cba      	ldrb	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00b      	b.n	8000b9c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff ff64 	bl	8000a5a <LoRa_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbef      	blt.n	8000b84 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fd51 	bl	800064e <LoRa_gotoMode>
    return min;
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <LoRa_isvalid>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8096 	beq.w	8000cf8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd3d 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f001 ffb9 	bl	8002b4c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff3c 	bl	8000a5a <LoRa_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f001 ffb0 	bl	8002b4c <HAL_Delay>
			data = read | 0x80;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff47 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f001 ffa3 	bl	8002b4c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe55 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feb0 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febd 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	210c      	movs	r1, #12
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff2b 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fef3 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe68 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c4c:	22ff      	movs	r2, #255	@ 0xff
 8000c4e:	211f      	movs	r1, #31
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1c 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	461a      	mov	r2, r3
 8000c76:	211d      	movs	r1, #29
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff08 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fde8 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2120      	movs	r1, #32
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fefb 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2121      	movs	r1, #33	@ 0x21
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef3 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fed5 	bl	8000a5a <LoRa_read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fee3 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fcbf 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f001 ff38 	bl	8002b4c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cdc:	2142      	movs	r1, #66	@ 0x42
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff febb 	bl	8000a5a <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d101      	bne.n	8000cf2 <LoRa_init+0x13c>
				return LORA_OK;
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	e004      	b.n	8000cfc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000cf2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000cf6:	e001      	b.n	8000cfc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000cf8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e025      	b.n	8000d64 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	441a      	add	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	b291      	uxth	r1, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3214      	adds	r2, #20
 8000d42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	8811      	ldrh	r1, [r2, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	331c      	adds	r3, #28
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d6      	bls.n	8000d18 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d102      	bne.n	8000de6 <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d102      	bne.n	8000df2 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d102      	bne.n	8000dfe <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d102      	bne.n	8000e0a <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e06:	2203      	movs	r2, #3
 8000e08:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	d103      	bne.n	8000e18 <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <HAL_GPIO_EXTI_Callback+0x78>)
 8000e14:	f007 f885 	bl	8007f22 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e1a:	8a9b      	ldrh	r3, [r3, #20]
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d10b      	bne.n	8000e3a <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	490a      	ldr	r1, [pc, #40]	@ (8000e50 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e26:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e28:	f7ff fe65 	bl	8000af6 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8000e2c:	2140      	movs	r1, #64	@ 0x40
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e30:	f007 f877 	bl	8007f22 <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e36:	22ff      	movs	r2, #255	@ 0xff
 8000e38:	701a      	strb	r2, [r3, #0]

	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2400065c 	.word	0x2400065c
 8000e48:	58021800 	.word	0x58021800
 8000e4c:	24000660 	.word	0x24000660
 8000e50:	24000710 	.word	0x24000710
 8000e54:	58020c00 	.word	0x58020c00
 8000e58:	24000790 	.word	0x24000790

08000e5c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;

//	rs485_fail_check = 0;
	if(huart->Instance == USART1){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <HAL_UARTEx_RxEventCallback+0x34>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d102      	bne.n	8000e78 <HAL_UARTEx_RxEventCallback+0x1c>
		rs485_UART_receive_handler(&m1_driver);
 8000e72:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0x38>)
 8000e74:	f001 f8c7 	bl	8002006 <rs485_UART_receive_handler>
	}
	if(huart->Instance == USART3){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d102      	bne.n	8000e88 <HAL_UARTEx_RxEventCallback+0x2c>
		rs485_UART_receive_handler(&m2_driver);
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <HAL_UARTEx_RxEventCallback+0x40>)
 8000e84:	f001 f8bf 	bl	8002006 <rs485_UART_receive_handler>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40011000 	.word	0x40011000
 8000e94:	240004e0 	.word	0x240004e0
 8000e98:	40004800 	.word	0x40004800
 8000e9c:	24000518 	.word	0x24000518

08000ea0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d102      	bne.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x18>
    	rs485_connection_lost_handler(&m1_driver);
 8000eb2:	4808      	ldr	r0, [pc, #32]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000eb4:	f001 f8cc 	bl	8002050 <rs485_connection_lost_handler>

    }
    if(htim->Instance == TIM4){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d102      	bne.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x28>
    	rs485_connection_lost_handler(&m2_driver);
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ec4:	f001 f8c4 	bl	8002050 <rs485_connection_lost_handler>

    }
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	240004e0 	.word	0x240004e0
 8000ed8:	40000800 	.word	0x40000800
 8000edc:	24000518 	.word	0x24000518

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b094      	sub	sp, #80	@ 0x50
 8000ee4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f001 fd9f 	bl	8002a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f953 	bl	8001194 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eee:	f000 f9c3 	bl	8001278 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fe27 	bl	8001b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fdfd 	bl	8001af4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000efa:	f000 f9f1 	bl	80012e0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000efe:	f000 fb01 	bl	8001504 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000f02:	f000 fd5f 	bl	80019c4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f06:	f000 fc59 	bl	80017bc <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f0a:	f000 fc01 	bl	8001710 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000f0e:	f000 fda5 	bl	8001a5c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f12:	f000 fcb7 	bl	8001884 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f16:	f000 fd05 	bl	8001924 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  m1_driver.rs485_id = 0x01;
 8000f1a:	4b75      	ldr	r3, [pc, #468]	@ (80010f0 <main+0x210>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
  m1_driver.rs485_huart = &huart1;
 8000f20:	4b73      	ldr	r3, [pc, #460]	@ (80010f0 <main+0x210>)
 8000f22:	4a74      	ldr	r2, [pc, #464]	@ (80010f4 <main+0x214>)
 8000f24:	615a      	str	r2, [r3, #20]
  m1_driver.rs485_timer = &htim3;
 8000f26:	4b72      	ldr	r3, [pc, #456]	@ (80010f0 <main+0x210>)
 8000f28:	4a73      	ldr	r2, [pc, #460]	@ (80010f8 <main+0x218>)
 8000f2a:	619a      	str	r2, [r3, #24]
  m1_driver.rs485_enable_port = RS485_M1_TX_EN_GPIO_Port;
 8000f2c:	4b70      	ldr	r3, [pc, #448]	@ (80010f0 <main+0x210>)
 8000f2e:	4a73      	ldr	r2, [pc, #460]	@ (80010fc <main+0x21c>)
 8000f30:	605a      	str	r2, [r3, #4]
  m1_driver.rs485_enable_pin = RS485_M1_TX_EN_Pin;
 8000f32:	4b6f      	ldr	r3, [pc, #444]	@ (80010f0 <main+0x210>)
 8000f34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f38:	811a      	strh	r2, [r3, #8]
  m1_driver.rs485_rx_led_port = RS485_M1_RX_LED_GPIO_Port;
 8000f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80010f0 <main+0x210>)
 8000f3c:	4a70      	ldr	r2, [pc, #448]	@ (8001100 <main+0x220>)
 8000f3e:	60da      	str	r2, [r3, #12]
  m1_driver.rs485_rx_led_pin = RS485_M1_RX_LED_Pin;
 8000f40:	4b6b      	ldr	r3, [pc, #428]	@ (80010f0 <main+0x210>)
 8000f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f46:	821a      	strh	r2, [r3, #16]

  m2_driver.rs485_id = 0x02;
 8000f48:	4b6e      	ldr	r3, [pc, #440]	@ (8001104 <main+0x224>)
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	701a      	strb	r2, [r3, #0]
  m2_driver.rs485_huart = &huart3;
 8000f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001104 <main+0x224>)
 8000f50:	4a6d      	ldr	r2, [pc, #436]	@ (8001108 <main+0x228>)
 8000f52:	615a      	str	r2, [r3, #20]
  m2_driver.rs485_timer = &htim4;
 8000f54:	4b6b      	ldr	r3, [pc, #428]	@ (8001104 <main+0x224>)
 8000f56:	4a6d      	ldr	r2, [pc, #436]	@ (800110c <main+0x22c>)
 8000f58:	619a      	str	r2, [r3, #24]
  m2_driver.rs485_enable_port = RS485_M2_TX_EN_GPIO_Port;
 8000f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001104 <main+0x224>)
 8000f5c:	4a6c      	ldr	r2, [pc, #432]	@ (8001110 <main+0x230>)
 8000f5e:	605a      	str	r2, [r3, #4]
  m2_driver.rs485_enable_pin = RS485_M2_TX_EN_Pin;
 8000f60:	4b68      	ldr	r3, [pc, #416]	@ (8001104 <main+0x224>)
 8000f62:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f66:	811a      	strh	r2, [r3, #8]
  m2_driver.rs485_rx_led_port = RS485_M2_RX_LED_GPIO_Port;
 8000f68:	4b66      	ldr	r3, [pc, #408]	@ (8001104 <main+0x224>)
 8000f6a:	4a64      	ldr	r2, [pc, #400]	@ (80010fc <main+0x21c>)
 8000f6c:	60da      	str	r2, [r3, #12]
  m2_driver.rs485_rx_led_pin = RS485_M2_RX_LED_Pin;
 8000f6e:	4b65      	ldr	r3, [pc, #404]	@ (8001104 <main+0x224>)
 8000f70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f74:	821a      	strh	r2, [r3, #16]

  rs485_init(&m1_driver);
 8000f76:	485e      	ldr	r0, [pc, #376]	@ (80010f0 <main+0x210>)
 8000f78:	f000 ff9e 	bl	8001eb8 <rs485_init>
  rs485_init(&m2_driver);
 8000f7c:	4861      	ldr	r0, [pc, #388]	@ (8001104 <main+0x224>)
 8000f7e:	f000 ff9b 	bl	8001eb8 <rs485_init>



  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4863      	ldr	r0, [pc, #396]	@ (8001114 <main+0x234>)
 8000f86:	f00b fb37 	bl	800c5f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4861      	ldr	r0, [pc, #388]	@ (8001114 <main+0x234>)
 8000f8e:	f00b fb33 	bl	800c5f8 <HAL_TIM_PWM_Start>
  //motor_enable_velocity_mode(0x01);
  //motor_enable_velocity_mode(0x02);



  myLoRa = newLoRa();
 8000f92:	4c61      	ldr	r4, [pc, #388]	@ (8001118 <main+0x238>)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fb30 	bl	80005fc <newLoRa>
 8000f9c:	4625      	mov	r5, r4
 8000f9e:	463c      	mov	r4, r7
 8000fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000fac:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8000fb0:	4b59      	ldr	r3, [pc, #356]	@ (8001118 <main+0x238>)
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <main+0x23c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8000fb6:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <main+0x238>)
 8000fb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fbc:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8000fbe:	4b56      	ldr	r3, [pc, #344]	@ (8001118 <main+0x238>)
 8000fc0:	4a56      	ldr	r2, [pc, #344]	@ (800111c <main+0x23c>)
 8000fc2:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8000fc4:	4b54      	ldr	r3, [pc, #336]	@ (8001118 <main+0x238>)
 8000fc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fca:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 8000fcc:	4b52      	ldr	r3, [pc, #328]	@ (8001118 <main+0x238>)
 8000fce:	4a53      	ldr	r2, [pc, #332]	@ (800111c <main+0x23c>)
 8000fd0:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8000fd2:	4b51      	ldr	r3, [pc, #324]	@ (8001118 <main+0x238>)
 8000fd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fd8:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000fda:	4b4f      	ldr	r3, [pc, #316]	@ (8001118 <main+0x238>)
 8000fdc:	4a50      	ldr	r2, [pc, #320]	@ (8001120 <main+0x240>)
 8000fde:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8000fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8001118 <main+0x238>)
 8000fe2:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8000fe6:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8001118 <main+0x238>)
 8000fea:	2207      	movs	r2, #7
 8000fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8000ff0:	4b49      	ldr	r3, [pc, #292]	@ (8001118 <main+0x238>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8000ff8:	4b47      	ldr	r3, [pc, #284]	@ (8001118 <main+0x238>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001000:	4b45      	ldr	r3, [pc, #276]	@ (8001118 <main+0x238>)
 8001002:	22ff      	movs	r2, #255	@ 0xff
 8001004:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8001008:	4b43      	ldr	r3, [pc, #268]	@ (8001118 <main+0x238>)
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001010:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <main+0x238>)
 8001012:	2208      	movs	r2, #8
 8001014:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001016:	4840      	ldr	r0, [pc, #256]	@ (8001118 <main+0x238>)
 8001018:	f7ff fdcd 	bl	8000bb6 <LoRa_init>
 800101c:	4603      	mov	r3, r0
 800101e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001020:	d102      	bne.n	8001028 <main+0x148>
	  LoRa_stat = 1;
 8001022:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <main+0x244>)
 8001024:	2201      	movs	r2, #1
 8001026:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8001028:	483b      	ldr	r0, [pc, #236]	@ (8001118 <main+0x238>)
 800102a:	f7ff fd58 	bl	8000ade <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 800102e:	4b3e      	ldr	r3, [pc, #248]	@ (8001128 <main+0x248>)
 8001030:	22aa      	movs	r2, #170	@ 0xaa
 8001032:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8001034:	4b3c      	ldr	r3, [pc, #240]	@ (8001128 <main+0x248>)
 8001036:	22bb      	movs	r2, #187	@ 0xbb
 8001038:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 800103a:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <main+0x248>)
 800103c:	22cc      	movs	r2, #204	@ 0xcc
 800103e:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 8001040:	230a      	movs	r3, #10
 8001042:	461a      	mov	r2, r3
 8001044:	4939      	ldr	r1, [pc, #228]	@ (800112c <main+0x24c>)
 8001046:	483a      	ldr	r0, [pc, #232]	@ (8001130 <main+0x250>)
 8001048:	f002 faae 	bl	80035a8 <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 800104c:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <main+0x254>)
 800104e:	9307      	str	r3, [sp, #28]
 8001050:	4b39      	ldr	r3, [pc, #228]	@ (8001138 <main+0x258>)
 8001052:	9306      	str	r3, [sp, #24]
 8001054:	4b39      	ldr	r3, [pc, #228]	@ (800113c <main+0x25c>)
 8001056:	9305      	str	r3, [sp, #20]
 8001058:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <main+0x260>)
 800105a:	9304      	str	r3, [sp, #16]
 800105c:	4b39      	ldr	r3, [pc, #228]	@ (8001144 <main+0x264>)
 800105e:	9303      	str	r3, [sp, #12]
 8001060:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <main+0x268>)
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	4b39      	ldr	r3, [pc, #228]	@ (800114c <main+0x26c>)
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <main+0x270>)
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <main+0x274>)
 800106e:	4a3a      	ldr	r2, [pc, #232]	@ (8001158 <main+0x278>)
 8001070:	493a      	ldr	r1, [pc, #232]	@ (800115c <main+0x27c>)
 8001072:	482e      	ldr	r0, [pc, #184]	@ (800112c <main+0x24c>)
 8001074:	f7ff fe46 	bl	8000d04 <ir_array_init>
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 8001078:	230a      	movs	r3, #10
 800107a:	461a      	mov	r2, r3
 800107c:	4938      	ldr	r1, [pc, #224]	@ (8001160 <main+0x280>)
 800107e:	4839      	ldr	r0, [pc, #228]	@ (8001164 <main+0x284>)
 8001080:	f002 fa92 	bl	80035a8 <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 8001084:	4b38      	ldr	r3, [pc, #224]	@ (8001168 <main+0x288>)
 8001086:	9307      	str	r3, [sp, #28]
 8001088:	4b38      	ldr	r3, [pc, #224]	@ (800116c <main+0x28c>)
 800108a:	9306      	str	r3, [sp, #24]
 800108c:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <main+0x290>)
 800108e:	9305      	str	r3, [sp, #20]
 8001090:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <main+0x294>)
 8001092:	9304      	str	r3, [sp, #16]
 8001094:	4b38      	ldr	r3, [pc, #224]	@ (8001178 <main+0x298>)
 8001096:	9303      	str	r3, [sp, #12]
 8001098:	4b38      	ldr	r3, [pc, #224]	@ (800117c <main+0x29c>)
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <main+0x2a0>)
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4b38      	ldr	r3, [pc, #224]	@ (8001184 <main+0x2a4>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <main+0x2a8>)
 80010a6:	4a39      	ldr	r2, [pc, #228]	@ (800118c <main+0x2ac>)
 80010a8:	4939      	ldr	r1, [pc, #228]	@ (8001190 <main+0x2b0>)
 80010aa:	482d      	ldr	r0, [pc, #180]	@ (8001160 <main+0x280>)
 80010ac:	f7ff fe2a 	bl	8000d04 <ir_array_init>
//	  motor_enable_velocity_mode(0x01);
//	  motor_enable_velocity_mode(0x02);
//	  HAL_Delay(10);
//
	  //rs485_enable_velocity_mode(&m1_driver);
	  rs485_set_speed(&m1_driver, 100, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2164      	movs	r1, #100	@ 0x64
 80010b4:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <main+0x210>)
 80010b6:	f000 ff4e 	bl	8001f56 <rs485_set_speed>
	  //rs485_enable_velocity_mode(&m2_driver);
	  rs485_set_speed(&m2_driver, 100, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2164      	movs	r1, #100	@ 0x64
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <main+0x224>)
 80010c0:	f000 ff49 	bl	8001f56 <rs485_set_speed>

	  rs485_set_speed(&m1_driver, 50, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2132      	movs	r1, #50	@ 0x32
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <main+0x210>)
 80010ca:	f000 ff44 	bl	8001f56 <rs485_set_speed>
	  //rs485_enable_velocity_mode(&m2_driver);
	  rs485_set_speed(&m2_driver, 50, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2132      	movs	r1, #50	@ 0x32
 80010d2:	480c      	ldr	r0, [pc, #48]	@ (8001104 <main+0x224>)
 80010d4:	f000 ff3f 	bl	8001f56 <rs485_set_speed>

	  rs485_set_speed(&m1_driver, 10, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	210a      	movs	r1, #10
 80010dc:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <main+0x210>)
 80010de:	f000 ff3a 	bl	8001f56 <rs485_set_speed>
	  //rs485_enable_velocity_mode(&m2_driver);
	  rs485_set_speed(&m2_driver, 10, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	210a      	movs	r1, #10
 80010e6:	4807      	ldr	r0, [pc, #28]	@ (8001104 <main+0x224>)
 80010e8:	f000 ff35 	bl	8001f56 <rs485_set_speed>
	  rs485_set_speed(&m1_driver, 100, 0);
 80010ec:	bf00      	nop
 80010ee:	e7df      	b.n	80010b0 <main+0x1d0>
 80010f0:	240004e0 	.word	0x240004e0
 80010f4:	240003b8 	.word	0x240003b8
 80010f8:	24000320 	.word	0x24000320
 80010fc:	58020400 	.word	0x58020400
 8001100:	58020c00 	.word	0x58020c00
 8001104:	24000518 	.word	0x24000518
 8001108:	2400044c 	.word	0x2400044c
 800110c:	2400036c 	.word	0x2400036c
 8001110:	58021000 	.word	0x58021000
 8001114:	240002d4 	.word	0x240002d4
 8001118:	24000660 	.word	0x24000660
 800111c:	58021800 	.word	0x58021800
 8001120:	2400024c 	.word	0x2400024c
 8001124:	2400068c 	.word	0x2400068c
 8001128:	24000690 	.word	0x24000690
 800112c:	2400058c 	.word	0x2400058c
 8001130:	2400007c 	.word	0x2400007c
 8001134:	080103fa 	.word	0x080103fa
 8001138:	24000582 	.word	0x24000582
 800113c:	24000580 	.word	0x24000580
 8001140:	24000581 	.word	0x24000581
 8001144:	24000583 	.word	0x24000583
 8001148:	24000550 	.word	0x24000550
 800114c:	24000588 	.word	0x24000588
 8001150:	080103f8 	.word	0x080103f8
 8001154:	24000014 	.word	0x24000014
 8001158:	24000000 	.word	0x24000000
 800115c:	24000558 	.word	0x24000558
 8001160:	240005f4 	.word	0x240005f4
 8001164:	240000ec 	.word	0x240000ec
 8001168:	080103fc 	.word	0x080103fc
 800116c:	24000586 	.word	0x24000586
 8001170:	24000584 	.word	0x24000584
 8001174:	24000585 	.word	0x24000585
 8001178:	24000587 	.word	0x24000587
 800117c:	24000554 	.word	0x24000554
 8001180:	2400058a 	.word	0x2400058a
 8001184:	080103f9 	.word	0x080103f9
 8001188:	2400003c 	.word	0x2400003c
 800118c:	24000028 	.word	0x24000028
 8001190:	2400056c 	.word	0x2400056c

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b09c      	sub	sp, #112	@ 0x70
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	224c      	movs	r2, #76	@ 0x4c
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00f f8ba 	bl	801031c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2220      	movs	r2, #32
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00f f8b4 	bl	801031c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f006 fee9 	bl	8007f8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <SystemClock_Config+0xe0>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001274 <SystemClock_Config+0xe0>)
 80011c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <SystemClock_Config+0xe0>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011d6:	bf00      	nop
 80011d8:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <SystemClock_Config+0xe0>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e4:	d1f8      	bne.n	80011d8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011e6:	2303      	movs	r3, #3
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001204:	232c      	movs	r3, #44	@ 0x2c
 8001206:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800120c:	2303      	movs	r3, #3
 800120e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001214:	230c      	movs	r3, #12
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001218:	2300      	movs	r3, #0
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001224:	4618      	mov	r0, r3
 8001226:	f006 feeb 	bl	8008000 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001230:	f000 fe06 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	233f      	movs	r3, #63	@ 0x3f
 8001236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2303      	movs	r3, #3
 800123a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001240:	2308      	movs	r3, #8
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001244:	2340      	movs	r3, #64	@ 0x40
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001248:	2340      	movs	r3, #64	@ 0x40
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800124c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001252:	2340      	movs	r3, #64	@ 0x40
 8001254:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2103      	movs	r1, #3
 800125a:	4618      	mov	r0, r3
 800125c:	f007 faaa 	bl	80087b4 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001266:	f000 fdeb 	bl	8001e40 <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3770      	adds	r7, #112	@ 0x70
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	58024800 	.word	0x58024800

08001278 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ae      	sub	sp, #184	@ 0xb8
 800127c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	22b8      	movs	r2, #184	@ 0xb8
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f00f f849 	bl	801031c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 800128a:	4a14      	ldr	r2, [pc, #80]	@ (80012dc <PeriphCommonClock_Config+0x64>)
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001298:	230f      	movs	r3, #15
 800129a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012a8:	23c0      	movs	r3, #192	@ 0xc0
 80012aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80012b0:	f640 3386 	movw	r3, #2950	@ 0xb86
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80012b6:	2300      	movs	r3, #0
 80012b8:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 fe02 	bl	8008ecc <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80012ce:	f000 fdb7 	bl	8001e40 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	37b8      	adds	r7, #184	@ 0xb8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	80080000 	.word	0x80080000

080012e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2224      	movs	r2, #36	@ 0x24
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00f f80f 	bl	801031c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012fe:	4b75      	ldr	r3, [pc, #468]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001300:	4a75      	ldr	r2, [pc, #468]	@ (80014d8 <MX_ADC1_Init+0x1f8>)
 8001302:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001304:	4b73      	ldr	r3, [pc, #460]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130a:	4b72      	ldr	r3, [pc, #456]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 800130c:	2208      	movs	r2, #8
 800130e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001310:	4b70      	ldr	r3, [pc, #448]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001312:	2201      	movs	r2, #1
 8001314:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001316:	4b6f      	ldr	r3, [pc, #444]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001318:	2204      	movs	r2, #4
 800131a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800131c:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 800131e:	2200      	movs	r2, #0
 8001320:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001322:	4b6c      	ldr	r3, [pc, #432]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001324:	2201      	movs	r2, #1
 8001326:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001328:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 800132a:	220a      	movs	r2, #10
 800132c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001336:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133c:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001342:	4b64      	ldr	r3, [pc, #400]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001344:	2203      	movs	r2, #3
 8001346:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001348:	4b62      	ldr	r3, [pc, #392]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 800134a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800134e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001350:	4b60      	ldr	r3, [pc, #384]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001352:	2200      	movs	r2, #0
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001356:	4b5f      	ldr	r3, [pc, #380]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800135e:	4b5d      	ldr	r3, [pc, #372]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001360:	2201      	movs	r2, #1
 8001362:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001364:	485b      	ldr	r0, [pc, #364]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001366:	f001 ff17 	bl	8003198 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001370:	f000 fd66 	bl	8001e40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4855      	ldr	r0, [pc, #340]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001380:	f003 fbe4 	bl	8004b4c <HAL_ADCEx_MultiModeConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800138a:	f000 fd59 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800138e:	4b53      	ldr	r3, [pc, #332]	@ (80014dc <MX_ADC1_Init+0x1fc>)
 8001390:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001392:	2306      	movs	r3, #6
 8001394:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001396:	2305      	movs	r3, #5
 8001398:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a0:	2304      	movs	r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4848      	ldr	r0, [pc, #288]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 80013b4:	f002 fc36 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80013be:	f000 fd3f 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013c2:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <MX_ADC1_Init+0x200>)
 80013c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013c6:	230c      	movs	r3, #12
 80013c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4841      	ldr	r0, [pc, #260]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 80013d0:	f002 fc28 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80013da:	f000 fd31 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013de:	4b41      	ldr	r3, [pc, #260]	@ (80014e4 <MX_ADC1_Init+0x204>)
 80013e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013e2:	2312      	movs	r3, #18
 80013e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	483a      	ldr	r0, [pc, #232]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 80013ec:	f002 fc1a 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80013f6:	f000 fd23 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <MX_ADC1_Init+0x208>)
 80013fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013fe:	2318      	movs	r3, #24
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4833      	ldr	r0, [pc, #204]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001408:	f002 fc0c 	bl	8003c24 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001412:	f000 fd15 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001416:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <MX_ADC1_Init+0x20c>)
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800141a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	482b      	ldr	r0, [pc, #172]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001426:	f002 fbfd 	bl	8003c24 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001430:	f000 fd06 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001434:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <MX_ADC1_Init+0x210>)
 8001436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001438:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4824      	ldr	r0, [pc, #144]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001444:	f002 fbee 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 800144e:	f000 fcf7 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001452:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <MX_ADC1_Init+0x214>)
 8001454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001456:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001462:	f002 fbdf 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 800146c:	f000 fce8 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <MX_ADC1_Init+0x218>)
 8001472:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001474:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001478:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4815      	ldr	r0, [pc, #84]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 8001480:	f002 fbd0 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800148a:	f000 fcd9 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_ADC1_Init+0x21c>)
 8001490:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001492:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 800149e:	f002 fbc1 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 80014a8:	f000 fcca 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_ADC1_Init+0x220>)
 80014ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80014b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <MX_ADC1_Init+0x1f4>)
 80014bc:	f002 fbb2 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 80014c6:	f000 fcbb 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	@ 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2400007c 	.word	0x2400007c
 80014d8:	40022000 	.word	0x40022000
 80014dc:	08600004 	.word	0x08600004
 80014e0:	0c900008 	.word	0x0c900008
 80014e4:	10c00010 	.word	0x10c00010
 80014e8:	14f00020 	.word	0x14f00020
 80014ec:	19200040 	.word	0x19200040
 80014f0:	1d500080 	.word	0x1d500080
 80014f4:	21800100 	.word	0x21800100
 80014f8:	25b00200 	.word	0x25b00200
 80014fc:	2a000400 	.word	0x2a000400
 8001500:	2e300800 	.word	0x2e300800

08001504 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f00e ff03 	bl	801031c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001516:	4b73      	ldr	r3, [pc, #460]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001518:	4a73      	ldr	r2, [pc, #460]	@ (80016e8 <MX_ADC3_Init+0x1e4>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800151c:	4b71      	ldr	r3, [pc, #452]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001522:	4b70      	ldr	r3, [pc, #448]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001524:	2208      	movs	r2, #8
 8001526:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001528:	4b6e      	ldr	r3, [pc, #440]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800152e:	4b6d      	ldr	r3, [pc, #436]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001530:	2201      	movs	r2, #1
 8001532:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001534:	4b6b      	ldr	r3, [pc, #428]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001536:	2204      	movs	r2, #4
 8001538:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800153a:	4b6a      	ldr	r3, [pc, #424]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800153c:	2200      	movs	r2, #0
 800153e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001540:	4b68      	ldr	r3, [pc, #416]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001542:	2201      	movs	r2, #1
 8001544:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 8001546:	4b67      	ldr	r3, [pc, #412]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001548:	220a      	movs	r2, #10
 800154a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800154c:	4b65      	ldr	r3, [pc, #404]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001554:	4b63      	ldr	r3, [pc, #396]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001556:	2200      	movs	r2, #0
 8001558:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800155a:	4b62      	ldr	r3, [pc, #392]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800155c:	2200      	movs	r2, #0
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001560:	4b60      	ldr	r3, [pc, #384]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001568:	4b5e      	ldr	r3, [pc, #376]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800156a:	2200      	movs	r2, #0
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800156e:	4b5d      	ldr	r3, [pc, #372]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001570:	2203      	movs	r2, #3
 8001572:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001574:	4b5b      	ldr	r3, [pc, #364]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001576:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800157a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800157c:	4b59      	ldr	r3, [pc, #356]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800157e:	2200      	movs	r2, #0
 8001580:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001582:	4b58      	ldr	r3, [pc, #352]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800158a:	4b56      	ldr	r3, [pc, #344]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 800158c:	2200      	movs	r2, #0
 800158e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001590:	4854      	ldr	r0, [pc, #336]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001592:	f001 fe01 	bl	8003198 <HAL_ADC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 800159c:	f000 fc50 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a0:	2301      	movs	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a4:	2306      	movs	r3, #6
 80015a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 80015a8:	2305      	movs	r3, #5
 80015aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b2:	2304      	movs	r3, #4
 80015b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4848      	ldr	r0, [pc, #288]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 80015c4:	f002 fb2e 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015ce:	f000 fc37 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015d2:	4b46      	ldr	r3, [pc, #280]	@ (80016ec <MX_ADC3_Init+0x1e8>)
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d6:	230c      	movs	r3, #12
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4841      	ldr	r0, [pc, #260]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 80015e0:	f002 fb20 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015ea:	f000 fc29 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ee:	4b40      	ldr	r3, [pc, #256]	@ (80016f0 <MX_ADC3_Init+0x1ec>)
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015f2:	2312      	movs	r3, #18
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	483a      	ldr	r0, [pc, #232]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 80015fc:	f002 fb12 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001606:	f000 fc1b 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800160a:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <MX_ADC3_Init+0x1f0>)
 800160c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800160e:	2318      	movs	r3, #24
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4833      	ldr	r0, [pc, #204]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001618:	f002 fb04 	bl	8003c24 <HAL_ADC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8001622:	f000 fc0d 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <MX_ADC3_Init+0x1f4>)
 8001628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800162a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	482b      	ldr	r0, [pc, #172]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001636:	f002 faf5 	bl	8003c24 <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 8001640:	f000 fbfe 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001644:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <MX_ADC3_Init+0x1f8>)
 8001646:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001648:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800164c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4824      	ldr	r0, [pc, #144]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001654:	f002 fae6 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 800165e:	f000 fbef 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <MX_ADC3_Init+0x1fc>)
 8001664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001666:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800166a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	481c      	ldr	r0, [pc, #112]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001672:	f002 fad7 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 800167c:	f000 fbe0 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <MX_ADC3_Init+0x200>)
 8001682:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001684:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001688:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4815      	ldr	r0, [pc, #84]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 8001690:	f002 fac8 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 800169a:	f000 fbd1 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_ADC3_Init+0x204>)
 80016a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80016a2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80016a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 80016ae:	f002 fab9 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 80016b8:	f000 fbc2 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_ADC3_Init+0x208>)
 80016be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80016c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <MX_ADC3_Init+0x1e0>)
 80016cc:	f002 faaa 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 80016d6:	f000 fbb3 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	240000ec 	.word	0x240000ec
 80016e8:	58026000 	.word	0x58026000
 80016ec:	04300002 	.word	0x04300002
 80016f0:	08600004 	.word	0x08600004
 80016f4:	0c900008 	.word	0x0c900008
 80016f8:	10c00010 	.word	0x10c00010
 80016fc:	14f00020 	.word	0x14f00020
 8001700:	19200040 	.word	0x19200040
 8001704:	1d500080 	.word	0x1d500080
 8001708:	21800100 	.word	0x21800100
 800170c:	25b00200 	.word	0x25b00200

08001710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001716:	4a28      	ldr	r2, [pc, #160]	@ (80017b8 <MX_SPI1_Init+0xa8>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800171c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800172a:	2207      	movs	r2, #7
 800172c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800173c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001742:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001744:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001748:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001764:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001768:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001770:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001776:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800178a:	2200      	movs	r2, #0
 800178c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001790:	2200      	movs	r2, #0
 8001792:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001796:	2200      	movs	r2, #0
 8001798:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 80017a2:	f009 ff79 	bl	800b698 <HAL_SPI_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80017ac:	f000 fb48 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2400024c 	.word	0x2400024c
 80017b8:	40013000 	.word	0x40013000

080017bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ce:	463b      	mov	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e0:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <MX_TIM2_Init+0xc4>)
 80017e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80017e8:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <MX_TIM2_Init+0xc4>)
 80017ea:	2240      	movs	r2, #64	@ 0x40
 80017ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <MX_TIM2_Init+0xc4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <MX_TIM2_Init+0xc4>)
 80017f6:	22ff      	movs	r2, #255	@ 0xff
 80017f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <MX_TIM2_Init+0xc4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <MX_TIM2_Init+0xc4>)
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001806:	481e      	ldr	r0, [pc, #120]	@ (8001880 <MX_TIM2_Init+0xc4>)
 8001808:	f00a fe9e 	bl	800c548 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001812:	f000 fb15 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4816      	ldr	r0, [pc, #88]	@ (8001880 <MX_TIM2_Init+0xc4>)
 8001826:	f00b ff8b 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001830:	f000 fb06 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	@ 0x60
 8001836:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001840:	2304      	movs	r3, #4
 8001842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	480d      	ldr	r0, [pc, #52]	@ (8001880 <MX_TIM2_Init+0xc4>)
 800184c:	f00b f8f8 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001856:	f000 faf3 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800185a:	463b      	mov	r3, r7
 800185c:	2204      	movs	r2, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4807      	ldr	r0, [pc, #28]	@ (8001880 <MX_TIM2_Init+0xc4>)
 8001862:	f00b f8ed 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800186c:	f000 fae8 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001870:	4803      	ldr	r0, [pc, #12]	@ (8001880 <MX_TIM2_Init+0xc4>)
 8001872:	f000 fe93 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	@ 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	240002d4 	.word	0x240002d4

08001884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MX_TIM3_Init+0x98>)
 80018a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001920 <MX_TIM3_Init+0x9c>)
 80018a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_TIM3_Init+0x98>)
 80018aa:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80018ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_TIM3_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 55000-1;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_TIM3_Init+0x98>)
 80018b8:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 80018bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_TIM3_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_TIM3_Init+0x98>)
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ca:	4814      	ldr	r0, [pc, #80]	@ (800191c <MX_TIM3_Init+0x98>)
 80018cc:	f00a fd5f 	bl	800c38e <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80018d6:	f000 fab3 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_TIM3_Init+0x98>)
 80018e8:	f00b f9be 	bl	800cc68 <HAL_TIM_ConfigClockSource>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80018f2:	f000 faa5 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	@ (800191c <MX_TIM3_Init+0x98>)
 8001904:	f00b ff1c 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800190e:	f000 fa97 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24000320 	.word	0x24000320
 8001920:	40000400 	.word	0x40000400

08001924 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001944:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <MX_TIM4_Init+0x9c>)
 8001946:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_TIM4_Init+0x98>)
 800194a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800194e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55000-1;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001958:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 800195c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001966:	2280      	movs	r2, #128	@ 0x80
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196a:	4814      	ldr	r0, [pc, #80]	@ (80019bc <MX_TIM4_Init+0x98>)
 800196c:	f00a fd0f 	bl	800c38e <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001976:	f000 fa63 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001988:	f00b f96e 	bl	800cc68 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001992:	f000 fa55 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <MX_TIM4_Init+0x98>)
 80019a4:	f00b fecc 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80019ae:	f000 fa47 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2400036c 	.word	0x2400036c
 80019c0:	40000800 	.word	0x40000800

080019c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019ca:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <MX_USART1_UART_Init+0x94>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0c:	4811      	ldr	r0, [pc, #68]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 8001a0e:	f00b ff51 	bl	800d8b4 <HAL_UART_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a18:	f000 fa12 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 8001a20:	f00e fb61 	bl	80100e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a2a:	f000 fa09 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4808      	ldr	r0, [pc, #32]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 8001a32:	f00e fb96 	bl	8010162 <HAL_UARTEx_SetRxFifoThreshold>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a3c:	f000 fa00 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <MX_USART1_UART_Init+0x90>)
 8001a42:	f00e fb17 	bl	8010074 <HAL_UARTEx_DisableFifoMode>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a4c:	f000 f9f8 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	240003b8 	.word	0x240003b8
 8001a58:	40011000 	.word	0x40011000

08001a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <MX_USART3_UART_Init+0x94>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001aa6:	f00b ff05 	bl	800d8b4 <HAL_UART_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ab0:	f000 f9c6 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	480d      	ldr	r0, [pc, #52]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001ab8:	f00e fb15 	bl	80100e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ac2:	f000 f9bd 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4808      	ldr	r0, [pc, #32]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001aca:	f00e fb4a 	bl	8010162 <HAL_UARTEx_SetRxFifoThreshold>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad4:	f000 f9b4 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001ada:	f00e facb 	bl	8010074 <HAL_UARTEx_DisableFifoMode>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae4:	f000 f9ac 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2400044c 	.word	0x2400044c
 8001af0:	40004800 	.word	0x40004800

08001af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <MX_DMA_Init+0x4c>)
 8001afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <MX_DMA_Init+0x4c>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <MX_DMA_Init+0x4c>)
 8001b0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	200b      	movs	r0, #11
 8001b1e:	f003 f9d2 	bl	8004ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b22:	200b      	movs	r0, #11
 8001b24:	f003 f9e9 	bl	8004efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	200c      	movs	r0, #12
 8001b2e:	f003 f9ca 	bl	8004ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b32:	200c      	movs	r0, #12
 8001b34:	f003 f9e1 	bl	8004efa <HAL_NVIC_EnableIRQ>

}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	58024400 	.word	0x58024400

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	@ 0x38
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5a:	4bb2      	ldr	r3, [pc, #712]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b60:	4ab0      	ldr	r2, [pc, #704]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b6a:	4bae      	ldr	r3, [pc, #696]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	623b      	str	r3, [r7, #32]
 8001b76:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b78:	4baa      	ldr	r3, [pc, #680]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7e:	4aa9      	ldr	r2, [pc, #676]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b88:	4ba6      	ldr	r3, [pc, #664]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b96:	4ba3      	ldr	r3, [pc, #652]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9c:	4aa1      	ldr	r2, [pc, #644]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba6:	4b9f      	ldr	r3, [pc, #636]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bba:	4a9a      	ldr	r2, [pc, #616]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc4:	4b97      	ldr	r3, [pc, #604]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b94      	ldr	r3, [pc, #592]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd8:	4a92      	ldr	r2, [pc, #584]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be2:	4b90      	ldr	r3, [pc, #576]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf6:	4a8b      	ldr	r2, [pc, #556]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c00:	4b88      	ldr	r3, [pc, #544]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0e:	4b85      	ldr	r3, [pc, #532]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c14:	4a83      	ldr	r2, [pc, #524]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c1e:	4b81      	ldr	r3, [pc, #516]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2c:	4b7d      	ldr	r3, [pc, #500]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c32:	4a7c      	ldr	r2, [pc, #496]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c3c:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <MX_GPIO_Init+0x2e0>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c50:	4875      	ldr	r0, [pc, #468]	@ (8001e28 <MX_GPIO_Init+0x2e4>)
 8001c52:	f006 f94d 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	213c      	movs	r1, #60	@ 0x3c
 8001c5a:	4874      	ldr	r0, [pc, #464]	@ (8001e2c <MX_GPIO_Init+0x2e8>)
 8001c5c:	f006 f948 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|RS485_M2_TX_EN_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001c66:	4872      	ldr	r0, [pc, #456]	@ (8001e30 <MX_GPIO_Init+0x2ec>)
 8001c68:	f006 f942 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_M2_RX_LED_Pin|RS485_M1_TX_EN_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001c72:	4870      	ldr	r0, [pc, #448]	@ (8001e34 <MX_GPIO_Init+0x2f0>)
 8001c74:	f006 f93c 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_M1_RX_LED_GPIO_Port, RS485_M1_RX_LED_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c7e:	486e      	ldr	r0, [pc, #440]	@ (8001e38 <MX_GPIO_Init+0x2f4>)
 8001c80:	f006 f936 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001c8a:	486c      	ldr	r0, [pc, #432]	@ (8001e3c <MX_GPIO_Init+0x2f8>)
 8001c8c:	f006 f930 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	2140      	movs	r1, #64	@ 0x40
 8001c94:	4868      	ldr	r0, [pc, #416]	@ (8001e38 <MX_GPIO_Init+0x2f4>)
 8001c96:	f006 f92b 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001ca0:	4866      	ldr	r0, [pc, #408]	@ (8001e3c <MX_GPIO_Init+0x2f8>)
 8001ca2:	f006 f925 	bl	8007ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001ca6:	231f      	movs	r3, #31
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001caa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	485d      	ldr	r0, [pc, #372]	@ (8001e30 <MX_GPIO_Init+0x2ec>)
 8001cbc:	f005 ff70 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4853      	ldr	r0, [pc, #332]	@ (8001e28 <MX_GPIO_Init+0x2e4>)
 8001cda:	f005 ff61 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8001cde:	233c      	movs	r3, #60	@ 0x3c
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	484d      	ldr	r0, [pc, #308]	@ (8001e2c <MX_GPIO_Init+0x2e8>)
 8001cf6:	f005 ff53 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d10:	4619      	mov	r1, r3
 8001d12:	4847      	ldr	r0, [pc, #284]	@ (8001e30 <MX_GPIO_Init+0x2ec>)
 8001d14:	f005 ff44 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M2_TX_EN_Pin;
 8001d18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2302      	movs	r3, #2
 8001d28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	483f      	ldr	r0, [pc, #252]	@ (8001e30 <MX_GPIO_Init+0x2ec>)
 8001d32:	f005 ff35 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M2_RX_LED_Pin;
 8001d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4839      	ldr	r0, [pc, #228]	@ (8001e34 <MX_GPIO_Init+0x2f0>)
 8001d50:	f005 ff26 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M1_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M1_TX_EN_Pin;
 8001d54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d62:	2302      	movs	r3, #2
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M1_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4831      	ldr	r0, [pc, #196]	@ (8001e34 <MX_GPIO_Init+0x2f0>)
 8001d6e:	f005 ff17 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_M1_RX_LED_Pin LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M1_RX_LED_Pin|LORA_RX_LED_Pin;
 8001d72:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	482b      	ldr	r0, [pc, #172]	@ (8001e38 <MX_GPIO_Init+0x2f4>)
 8001d8c:	f005 ff08 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8001d90:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4824      	ldr	r0, [pc, #144]	@ (8001e3c <MX_GPIO_Init+0x2f8>)
 8001daa:	f005 fef9 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001dae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001db4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481d      	ldr	r0, [pc, #116]	@ (8001e3c <MX_GPIO_Init+0x2f8>)
 8001dc6:	f005 feeb 	bl	8007ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2006      	movs	r0, #6
 8001dd0:	f003 f879 	bl	8004ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dd4:	2006      	movs	r0, #6
 8001dd6:	f003 f890 	bl	8004efa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2007      	movs	r0, #7
 8001de0:	f003 f871 	bl	8004ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001de4:	2007      	movs	r0, #7
 8001de6:	f003 f888 	bl	8004efa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2008      	movs	r0, #8
 8001df0:	f003 f869 	bl	8004ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001df4:	2008      	movs	r0, #8
 8001df6:	f003 f880 	bl	8004efa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2009      	movs	r0, #9
 8001e00:	f003 f861 	bl	8004ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e04:	2009      	movs	r0, #9
 8001e06:	f003 f878 	bl	8004efa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2028      	movs	r0, #40	@ 0x28
 8001e10:	f003 f859 	bl	8004ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e14:	2028      	movs	r0, #40	@ 0x28
 8001e16:	f003 f870 	bl	8004efa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3738      	adds	r7, #56	@ 0x38
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	58024400 	.word	0x58024400
 8001e28:	58020800 	.word	0x58020800
 8001e2c:	58020000 	.word	0x58020000
 8001e30:	58021000 	.word	0x58021000
 8001e34:	58020400 	.word	0x58020400
 8001e38:	58020c00 	.word	0x58020c00
 8001e3c:	58021800 	.word	0x58021800

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <Error_Handler+0x8>

08001e4c <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001e58:	23ff      	movs	r3, #255	@ 0xff
 8001e5a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001e5c:	23ff      	movs	r3, #255	@ 0xff
 8001e5e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001e60:	e013      	b.n	8001e8a <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	4053      	eors	r3, r2
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001e72:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb0 <crc16+0x64>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	4053      	eors	r3, r2
 8001e7e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001e80:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <crc16+0x68>)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	807a      	strh	r2, [r7, #2]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e6      	bne.n	8001e62 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	b29b      	uxth	r3, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	08010400 	.word	0x08010400
 8001eb4:	08010500 	.word	0x08010500

08001eb8 <rs485_init>:
 */


#include "rs485_driver.h"

void rs485_init(rs485_driver *driver){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(driver->rs485_timer);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00a fab9 	bl	800c43c <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6958      	ldr	r0, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	331c      	adds	r3, #28
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f00e f982 	bl	80101de <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <rs485_send_data>:

void rs485_send_data(rs485_driver *driver, uint8_t *data){
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
	if(driver->rs485_isbusy == 0){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d11b      	bne.n	8001f30 <rs485_send_data+0x4e>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6858      	ldr	r0, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	891b      	ldrh	r3, [r3, #8]
 8001f00:	2201      	movs	r2, #1
 8001f02:	4619      	mov	r1, r3
 8001f04:	f005 fff4 	bl	8007ef0 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(driver->rs485_huart, data, 8, 500);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6958      	ldr	r0, [r3, #20]
 8001f0c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f10:	2208      	movs	r2, #8
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	f00b fd1e 	bl	800d954 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6858      	ldr	r0, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	891b      	ldrh	r3, [r3, #8]
 8001f20:	2200      	movs	r2, #0
 8001f22:	4619      	mov	r1, r3
 8001f24:	f005 ffe4 	bl	8007ef0 <HAL_GPIO_WritePin>
		driver->rs485_isbusy = 255;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	22ff      	movs	r2, #255	@ 0xff
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	driver->rs485_last_connectivity = driver->rs485_connectivity;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	HAL_GPIO_WritePin(driver->rs485_rx_led_port, driver->rs485_rx_led_pin, GPIO_PIN_RESET);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68d8      	ldr	r0, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8a1b      	ldrh	r3, [r3, #16]
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f005 ffd1 	bl	8007ef0 <HAL_GPIO_WritePin>
	//HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <rs485_set_speed>:

void rs485_set_speed(rs485_driver *driver, uint16_t speed, uint8_t dir){
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]
 8001f62:	4613      	mov	r3, r2
 8001f64:	707b      	strb	r3, [r7, #1]
	driver->rs485_TxData[0] = driver->rs485_id;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	driver->rs485_TxData[1] = 0x06;  // Function code
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2206      	movs	r2, #6
 8001f74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//address 203A -> Target Speed
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	driver->rs485_TxData[3] = 0x3A;  // Low  8 bit register address
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	223a      	movs	r2, #58	@ 0x3a
 8001f84:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	// Set Speed and Direction
	if(dir == 0){
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <rs485_set_speed+0x50>
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8001f9c:	887b      	ldrh	r3, [r7, #2]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
	if(dir == 1){
 8001fa6:	787b      	ldrb	r3, [r7, #1]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d10e      	bne.n	8001fca <rs485_set_speed+0x74>
		speed = (~speed) + 1;
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	425b      	negs	r3, r3
 8001fb0:	807b      	strh	r3, [r7, #2]
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
	uint16_t crc = crc16(driver->rs485_TxData, 6);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	332c      	adds	r3, #44	@ 0x2c
 8001fce:	2106      	movs	r1, #6
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff3b 	bl	8001e4c <crc16>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8001fda:	89fb      	ldrh	r3, [r7, #14]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	rs485_send_data(driver, driver->rs485_TxData);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	332c      	adds	r3, #44	@ 0x2c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff72 	bl	8001ee2 <rs485_send_data>

}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <rs485_UART_receive_handler>:
	driver->rs485_TxData[6] = crc&0xFF;
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
	rs485_send_data(driver, driver->rs485_TxData);
}

void rs485_UART_receive_handler(rs485_driver *driver){
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	driver->rs485_isbusy = 0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	driver->rs485_timer->Instance->CNT = 0;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->rs485_connectivity = 255;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	22ff      	movs	r2, #255	@ 0xff
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_rx_led_port, driver->rs485_rx_led_pin, GPIO_PIN_SET);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68d8      	ldr	r0, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8a1b      	ldrh	r3, [r3, #16]
 8002030:	2201      	movs	r2, #1
 8002032:	4619      	mov	r1, r3
 8002034:	f005 ff5c 	bl	8007ef0 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6958      	ldr	r0, [r3, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	331c      	adds	r3, #28
 8002040:	2210      	movs	r2, #16
 8002042:	4619      	mov	r1, r3
 8002044:	f00e f8cb 	bl	80101de <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <rs485_connection_lost_handler>:

void rs485_connection_lost_handler(rs485_driver *driver){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	driver->rs485_connectivity= 0;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6858      	ldr	r0, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	891b      	ldrh	r3, [r3, #8]
 8002068:	2201      	movs	r2, #1
 800206a:	4619      	mov	r1, r3
 800206c:	f005 ff40 	bl	8007ef0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(driver->rs485_huart, driver->rs485_TxData, 8, 500);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6958      	ldr	r0, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800207a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800207e:	2208      	movs	r2, #8
 8002080:	f00b fc68 	bl	800d954 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6858      	ldr	r0, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	891b      	ldrh	r3, [r3, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	4619      	mov	r1, r3
 8002090:	f005 ff2e 	bl	8007ef0 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6958      	ldr	r0, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	331c      	adds	r3, #28
 800209c:	2210      	movs	r2, #16
 800209e:	4619      	mov	r1, r3
 80020a0:	f00e f89d 	bl	80101de <HAL_UARTEx_ReceiveToIdle_IT>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_MspInit+0x30>)
 80020b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020b8:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_MspInit+0x30>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_MspInit+0x30>)
 80020c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	58024400 	.word	0x58024400

080020e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b090      	sub	sp, #64	@ 0x40
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4aa0      	ldr	r2, [pc, #640]	@ (8002380 <HAL_ADC_MspInit+0x2a0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	f040 80b6 	bne.w	8002270 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002104:	4b9f      	ldr	r3, [pc, #636]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800210a:	4a9e      	ldr	r2, [pc, #632]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002114:	4b9b      	ldr	r3, [pc, #620]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	4b98      	ldr	r3, [pc, #608]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002128:	4a96      	ldr	r2, [pc, #600]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002132:	4b94      	ldr	r3, [pc, #592]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b90      	ldr	r3, [pc, #576]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002146:	4a8f      	ldr	r2, [pc, #572]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002150:	4b8c      	ldr	r3, [pc, #560]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b89      	ldr	r3, [pc, #548]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002164:	4a87      	ldr	r2, [pc, #540]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800216e:	4b85      	ldr	r3, [pc, #532]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800217c:	4b81      	ldr	r3, [pc, #516]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002182:	4a80      	ldr	r2, [pc, #512]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002184:	f043 0320 	orr.w	r3, r3, #32
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218c:	4b7d      	ldr	r3, [pc, #500]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800219a:	2333      	movs	r3, #51	@ 0x33
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219e:	2303      	movs	r3, #3
 80021a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021aa:	4619      	mov	r1, r3
 80021ac:	4876      	ldr	r0, [pc, #472]	@ (8002388 <HAL_ADC_MspInit+0x2a8>)
 80021ae:	f005 fcf7 	bl	8007ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b2:	23c0      	movs	r3, #192	@ 0xc0
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b6:	2303      	movs	r3, #3
 80021b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c2:	4619      	mov	r1, r3
 80021c4:	4871      	ldr	r0, [pc, #452]	@ (800238c <HAL_ADC_MspInit+0x2ac>)
 80021c6:	f005 fceb 	bl	8007ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ca:	2303      	movs	r3, #3
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ce:	2303      	movs	r3, #3
 80021d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021da:	4619      	mov	r1, r3
 80021dc:	486c      	ldr	r0, [pc, #432]	@ (8002390 <HAL_ADC_MspInit+0x2b0>)
 80021de:	f005 fcdf 	bl	8007ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e8:	2303      	movs	r3, #3
 80021ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	4867      	ldr	r0, [pc, #412]	@ (8002394 <HAL_ADC_MspInit+0x2b4>)
 80021f8:	f005 fcd2 	bl	8007ba0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80021fc:	4b66      	ldr	r3, [pc, #408]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 80021fe:	4a67      	ldr	r2, [pc, #412]	@ (800239c <HAL_ADC_MspInit+0x2bc>)
 8002200:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002202:	4b65      	ldr	r3, [pc, #404]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 8002204:	2209      	movs	r2, #9
 8002206:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002208:	4b63      	ldr	r3, [pc, #396]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800220e:	4b62      	ldr	r3, [pc, #392]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002214:	4b60      	ldr	r3, [pc, #384]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 8002216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800221c:	4b5e      	ldr	r3, [pc, #376]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 800221e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002222:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002224:	4b5c      	ldr	r3, [pc, #368]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 8002226:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800222c:	4b5a      	ldr	r3, [pc, #360]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 800222e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002232:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002234:	4b58      	ldr	r3, [pc, #352]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 8002236:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800223a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223c:	4b56      	ldr	r3, [pc, #344]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002242:	4855      	ldr	r0, [pc, #340]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 8002244:	f002 fe74 	bl	8004f30 <HAL_DMA_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 800224e:	f7ff fdf7 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a50      	ldr	r2, [pc, #320]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 8002256:	659a      	str	r2, [r3, #88]	@ 0x58
 8002258:	4a4f      	ldr	r2, [pc, #316]	@ (8002398 <HAL_ADC_MspInit+0x2b8>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2012      	movs	r0, #18
 8002264:	f002 fe2f 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002268:	2012      	movs	r0, #18
 800226a:	f002 fe46 	bl	8004efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800226e:	e083      	b.n	8002378 <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a4a      	ldr	r2, [pc, #296]	@ (80023a0 <HAL_ADC_MspInit+0x2c0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d17e      	bne.n	8002378 <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800227a:	4b42      	ldr	r3, [pc, #264]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 800227c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002280:	4a40      	ldr	r2, [pc, #256]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800228a:	4b3e      	ldr	r3, [pc, #248]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002298:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229e:	4a39      	ldr	r2, [pc, #228]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a8:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b6:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022bc:	4a31      	ldr	r2, [pc, #196]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <HAL_ADC_MspInit+0x2a4>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80022d4:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022da:	2303      	movs	r3, #3
 80022dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e6:	4619      	mov	r1, r3
 80022e8:	482a      	ldr	r0, [pc, #168]	@ (8002394 <HAL_ADC_MspInit+0x2b4>)
 80022ea:	f005 fc59 	bl	8007ba0 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80022ee:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80022f2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80022f6:	f000 fc4d 	bl	8002b94 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80022fa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80022fe:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002302:	f000 fc47 	bl	8002b94 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002306:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002308:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <HAL_ADC_MspInit+0x2c8>)
 800230a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 800230e:	2273      	movs	r2, #115	@ 0x73
 8002310:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002318:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002324:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002326:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800232c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800232e:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002330:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002334:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002336:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002338:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800233c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002340:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002344:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002346:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800234c:	4815      	ldr	r0, [pc, #84]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 800234e:	f002 fdef 	bl	8004f30 <HAL_DMA_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8002358:	f7ff fd72 	bl	8001e40 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002360:	659a      	str	r2, [r3, #88]	@ 0x58
 8002362:	4a10      	ldr	r2, [pc, #64]	@ (80023a4 <HAL_ADC_MspInit+0x2c4>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	207f      	movs	r0, #127	@ 0x7f
 800236e:	f002 fdaa 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002372:	207f      	movs	r0, #127	@ 0x7f
 8002374:	f002 fdc1 	bl	8004efa <HAL_NVIC_EnableIRQ>
}
 8002378:	bf00      	nop
 800237a:	3740      	adds	r7, #64	@ 0x40
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40022000 	.word	0x40022000
 8002384:	58024400 	.word	0x58024400
 8002388:	58020800 	.word	0x58020800
 800238c:	58020000 	.word	0x58020000
 8002390:	58020400 	.word	0x58020400
 8002394:	58021400 	.word	0x58021400
 8002398:	2400015c 	.word	0x2400015c
 800239c:	40020010 	.word	0x40020010
 80023a0:	58026000 	.word	0x58026000
 80023a4:	240001d4 	.word	0x240001d4
 80023a8:	40020028 	.word	0x40020028

080023ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0ba      	sub	sp, #232	@ 0xe8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	22b8      	movs	r2, #184	@ 0xb8
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f00d ffa5 	bl	801031c <memset>
  if(hspi->Instance==SPI1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a39      	ldr	r2, [pc, #228]	@ (80024bc <HAL_SPI_MspInit+0x110>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d16a      	bne.n	80024b2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80023dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80023e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023ec:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ee:	f107 0318 	add.w	r3, r7, #24
 80023f2:	4618      	mov	r0, r3
 80023f4:	f006 fd6a 	bl	8008ecc <HAL_RCCEx_PeriphCLKConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80023fe:	f7ff fd1f 	bl	8001e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002402:	4b2f      	ldr	r3, [pc, #188]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002408:	4a2d      	ldr	r2, [pc, #180]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 800240a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800240e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002412:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002420:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	4a26      	ldr	r2, [pc, #152]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002430:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002444:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800244a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <HAL_SPI_MspInit+0x114>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002474:	2305      	movs	r3, #5
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800247e:	4619      	mov	r1, r3
 8002480:	4810      	ldr	r0, [pc, #64]	@ (80024c4 <HAL_SPI_MspInit+0x118>)
 8002482:	f005 fb8d 	bl	8007ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002486:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800248a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a0:	2305      	movs	r3, #5
 80024a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4806      	ldr	r0, [pc, #24]	@ (80024c8 <HAL_SPI_MspInit+0x11c>)
 80024ae:	f005 fb77 	bl	8007ba0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80024b2:	bf00      	nop
 80024b4:	37e8      	adds	r7, #232	@ 0xe8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40013000 	.word	0x40013000
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58020c00 	.word	0x58020c00
 80024c8:	58021800 	.word	0x58021800

080024cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_TIM_PWM_MspInit+0x3c>)
 80024e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024e4:	4a08      	ldr	r2, [pc, #32]	@ (8002508 <HAL_TIM_PWM_MspInit+0x3c>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_TIM_PWM_MspInit+0x3c>)
 80024f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	58024400 	.word	0x58024400

0800250c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_TIM_Base_MspInit+0x84>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d117      	bne.n	800254e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800251e:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <HAL_TIM_Base_MspInit+0x88>)
 8002520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002524:	4a1b      	ldr	r2, [pc, #108]	@ (8002594 <HAL_TIM_Base_MspInit+0x88>)
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_TIM_Base_MspInit+0x88>)
 8002530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	201d      	movs	r0, #29
 8002542:	f002 fcc0 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002546:	201d      	movs	r0, #29
 8002548:	f002 fcd7 	bl	8004efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800254c:	e01b      	b.n	8002586 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_TIM_Base_MspInit+0x8c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d116      	bne.n	8002586 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_TIM_Base_MspInit+0x88>)
 800255a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800255e:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <HAL_TIM_Base_MspInit+0x88>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_TIM_Base_MspInit+0x88>)
 800256a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	201e      	movs	r0, #30
 800257c:	f002 fca3 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002580:	201e      	movs	r0, #30
 8002582:	f002 fcba 	bl	8004efa <HAL_NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40000400 	.word	0x40000400
 8002594:	58024400 	.word	0x58024400
 8002598:	40000800 	.word	0x40000800

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025bc:	d11e      	bne.n	80025fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025dc:	2303      	movs	r3, #3
 80025de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4619      	mov	r1, r3
 80025f6:	4804      	ldr	r0, [pc, #16]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025f8:	f005 fad2 	bl	8007ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58024400 	.word	0x58024400
 8002608:	58020000 	.word	0x58020000

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0ba      	sub	sp, #232	@ 0xe8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002624:	f107 0318 	add.w	r3, r7, #24
 8002628:	22b8      	movs	r2, #184	@ 0xb8
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f00d fe75 	bl	801031c <memset>
  if(huart->Instance==USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a55      	ldr	r2, [pc, #340]	@ (800278c <HAL_UART_MspInit+0x180>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d14f      	bne.n	80026dc <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800263c:	f04f 0201 	mov.w	r2, #1
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	4618      	mov	r0, r3
 8002654:	f006 fc3a 	bl	8008ecc <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800265e:	f7ff fbef 	bl	8001e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002662:	4b4b      	ldr	r3, [pc, #300]	@ (8002790 <HAL_UART_MspInit+0x184>)
 8002664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002668:	4a49      	ldr	r2, [pc, #292]	@ (8002790 <HAL_UART_MspInit+0x184>)
 800266a:	f043 0310 	orr.w	r3, r3, #16
 800266e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002672:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <HAL_UART_MspInit+0x184>)
 8002674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	4b43      	ldr	r3, [pc, #268]	@ (8002790 <HAL_UART_MspInit+0x184>)
 8002682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002686:	4a42      	ldr	r2, [pc, #264]	@ (8002790 <HAL_UART_MspInit+0x184>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002690:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <HAL_UART_MspInit+0x184>)
 8002692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800269e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026b8:	2304      	movs	r3, #4
 80026ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4833      	ldr	r0, [pc, #204]	@ (8002794 <HAL_UART_MspInit+0x188>)
 80026c6:	f005 fa6b 	bl	8007ba0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2025      	movs	r0, #37	@ 0x25
 80026d0:	f002 fbf9 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026d4:	2025      	movs	r0, #37	@ 0x25
 80026d6:	f002 fc10 	bl	8004efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026da:	e053      	b.n	8002784 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002798 <HAL_UART_MspInit+0x18c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d14e      	bne.n	8002784 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026e6:	f04f 0202 	mov.w	r2, #2
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f8:	f107 0318 	add.w	r3, r7, #24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f006 fbe5 	bl	8008ecc <HAL_RCCEx_PeriphCLKConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_UART_MspInit+0x100>
      Error_Handler();
 8002708:	f7ff fb9a 	bl	8001e40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800270c:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <HAL_UART_MspInit+0x184>)
 800270e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002712:	4a1f      	ldr	r2, [pc, #124]	@ (8002790 <HAL_UART_MspInit+0x184>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002718:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800271c:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <HAL_UART_MspInit+0x184>)
 800271e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_UART_MspInit+0x184>)
 800272c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002730:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <HAL_UART_MspInit+0x184>)
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_UART_MspInit+0x184>)
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002748:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800274c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002762:	2307      	movs	r3, #7
 8002764:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800276c:	4619      	mov	r1, r3
 800276e:	4809      	ldr	r0, [pc, #36]	@ (8002794 <HAL_UART_MspInit+0x188>)
 8002770:	f005 fa16 	bl	8007ba0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2027      	movs	r0, #39	@ 0x27
 800277a:	f002 fba4 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800277e:	2027      	movs	r0, #39	@ 0x27
 8002780:	f002 fbbb 	bl	8004efa <HAL_NVIC_EnableIRQ>
}
 8002784:	bf00      	nop
 8002786:	37e8      	adds	r7, #232	@ 0xe8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40011000 	.word	0x40011000
 8002790:	58024400 	.word	0x58024400
 8002794:	58020400 	.word	0x58020400
 8002798:	40004800 	.word	0x40004800

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <NMI_Handler+0x4>

080027a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <HardFault_Handler+0x4>

080027ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <MemManage_Handler+0x4>

080027b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <BusFault_Handler+0x4>

080027bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <UsageFault_Handler+0x4>

080027c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f2:	f000 f98b 	bl	8002b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}

080027fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027fe:	2001      	movs	r0, #1
 8002800:	f005 fba9 	bl	8007f56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800280c:	2002      	movs	r0, #2
 800280e:	f005 fba2 	bl	8007f56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}

08002816 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800281a:	2004      	movs	r0, #4
 800281c:	f005 fb9b 	bl	8007f56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002828:	2008      	movs	r0, #8
 800282a:	f005 fb94 	bl	8007f56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002838:	4802      	ldr	r0, [pc, #8]	@ (8002844 <DMA1_Stream0_IRQHandler+0x10>)
 800283a:	f003 fe9f 	bl	800657c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2400015c 	.word	0x2400015c

08002848 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800284c:	4802      	ldr	r0, [pc, #8]	@ (8002858 <DMA1_Stream1_IRQHandler+0x10>)
 800284e:	f003 fe95 	bl	800657c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	240001d4 	.word	0x240001d4

0800285c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002860:	4802      	ldr	r0, [pc, #8]	@ (800286c <ADC_IRQHandler+0x10>)
 8002862:	f000 ff7d 	bl	8003760 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2400007c 	.word	0x2400007c

08002870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002874:	4802      	ldr	r0, [pc, #8]	@ (8002880 <TIM3_IRQHandler+0x10>)
 8002876:	f009 ffdb 	bl	800c830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	24000320 	.word	0x24000320

08002884 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002888:	4802      	ldr	r0, [pc, #8]	@ (8002894 <TIM4_IRQHandler+0x10>)
 800288a:	f009 ffd1 	bl	800c830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	2400036c 	.word	0x2400036c

08002898 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <USART1_IRQHandler+0x10>)
 800289e:	f00b f8e7 	bl	800da70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	240003b8 	.word	0x240003b8

080028ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028b0:	4802      	ldr	r0, [pc, #8]	@ (80028bc <USART3_IRQHandler+0x10>)
 80028b2:	f00b f8dd 	bl	800da70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2400044c 	.word	0x2400044c

080028c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 80028c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028c8:	f005 fb45 	bl	8007f56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <ADC3_IRQHandler+0x10>)
 80028d6:	f000 ff43 	bl	8003760 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	240000ec 	.word	0x240000ec

080028e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028e8:	4b32      	ldr	r3, [pc, #200]	@ (80029b4 <SystemInit+0xd0>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ee:	4a31      	ldr	r2, [pc, #196]	@ (80029b4 <SystemInit+0xd0>)
 80028f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028f8:	4b2f      	ldr	r3, [pc, #188]	@ (80029b8 <SystemInit+0xd4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	2b06      	cmp	r3, #6
 8002902:	d807      	bhi.n	8002914 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002904:	4b2c      	ldr	r3, [pc, #176]	@ (80029b8 <SystemInit+0xd4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 030f 	bic.w	r3, r3, #15
 800290c:	4a2a      	ldr	r2, [pc, #168]	@ (80029b8 <SystemInit+0xd4>)
 800290e:	f043 0307 	orr.w	r3, r3, #7
 8002912:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002914:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <SystemInit+0xd8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a28      	ldr	r2, [pc, #160]	@ (80029bc <SystemInit+0xd8>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002920:	4b26      	ldr	r3, [pc, #152]	@ (80029bc <SystemInit+0xd8>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002926:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <SystemInit+0xd8>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4924      	ldr	r1, [pc, #144]	@ (80029bc <SystemInit+0xd8>)
 800292c:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <SystemInit+0xdc>)
 800292e:	4013      	ands	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002932:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <SystemInit+0xd4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800293e:	4b1e      	ldr	r3, [pc, #120]	@ (80029b8 <SystemInit+0xd4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 030f 	bic.w	r3, r3, #15
 8002946:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <SystemInit+0xd4>)
 8002948:	f043 0307 	orr.w	r3, r3, #7
 800294c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <SystemInit+0xd8>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <SystemInit+0xd8>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800295a:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <SystemInit+0xd8>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002960:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <SystemInit+0xd8>)
 8002962:	4a18      	ldr	r2, [pc, #96]	@ (80029c4 <SystemInit+0xe0>)
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002966:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <SystemInit+0xd8>)
 8002968:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <SystemInit+0xe4>)
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <SystemInit+0xd8>)
 800296e:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <SystemInit+0xe8>)
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002972:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <SystemInit+0xd8>)
 8002974:	2200      	movs	r2, #0
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002978:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <SystemInit+0xd8>)
 800297a:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <SystemInit+0xe8>)
 800297c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800297e:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <SystemInit+0xd8>)
 8002980:	2200      	movs	r2, #0
 8002982:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002984:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <SystemInit+0xd8>)
 8002986:	4a11      	ldr	r2, [pc, #68]	@ (80029cc <SystemInit+0xe8>)
 8002988:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <SystemInit+0xd8>)
 800298c:	2200      	movs	r2, #0
 800298e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002990:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <SystemInit+0xd8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a09      	ldr	r2, [pc, #36]	@ (80029bc <SystemInit+0xd8>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800299a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <SystemInit+0xd8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029a2:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <SystemInit+0xec>)
 80029a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80029a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00
 80029b8:	52002000 	.word	0x52002000
 80029bc:	58024400 	.word	0x58024400
 80029c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80029c4:	02020200 	.word	0x02020200
 80029c8:	01ff0000 	.word	0x01ff0000
 80029cc:	01010280 	.word	0x01010280
 80029d0:	52004000 	.word	0x52004000

080029d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029d8:	f7ff ff84 	bl	80028e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029dc:	480c      	ldr	r0, [pc, #48]	@ (8002a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029de:	490d      	ldr	r1, [pc, #52]	@ (8002a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a02:	f00d fc93 	bl	801032c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a06:	f7fe fa6b 	bl	8000ee0 <main>
  bx  lr
 8002a0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a0c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a14:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002a18:	08010650 	.word	0x08010650
  ldr r2, =_sbss
 8002a1c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8002a20:	24000798 	.word	0x24000798

08002a24 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a24:	e7fe      	b.n	8002a24 <BDMA_Channel0_IRQHandler>
	...

08002a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a2e:	2003      	movs	r0, #3
 8002a30:	f002 fa3e 	bl	8004eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a34:	f006 f874 	bl	8008b20 <HAL_RCC_GetSysClockFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_Init+0x68>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	4913      	ldr	r1, [pc, #76]	@ (8002a94 <HAL_Init+0x6c>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_Init+0x68>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a94 <HAL_Init+0x6c>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
 8002a68:	4a0b      	ldr	r2, [pc, #44]	@ (8002a98 <HAL_Init+0x70>)
 8002a6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a9c <HAL_Init+0x74>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a72:	200f      	movs	r0, #15
 8002a74:	f000 f814 	bl	8002aa0 <HAL_InitTick>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e002      	b.n	8002a88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a82:	f7ff fb13 	bl	80020ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	58024400 	.word	0x58024400
 8002a94:	08010600 	.word	0x08010600
 8002a98:	24000054 	.word	0x24000054
 8002a9c:	24000050 	.word	0x24000050

08002aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002aa8:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <HAL_InitTick+0x60>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e021      	b.n	8002af8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_InitTick+0x64>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_InitTick+0x60>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 fa23 	bl	8004f16 <HAL_SYSTICK_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00e      	b.n	8002af8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d80a      	bhi.n	8002af6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f002 f9ed 	bl	8004ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aec:	4a06      	ldr	r2, [pc, #24]	@ (8002b08 <HAL_InitTick+0x68>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2400005c 	.word	0x2400005c
 8002b04:	24000050 	.word	0x24000050
 8002b08:	24000058 	.word	0x24000058

08002b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_IncTick+0x20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_IncTick+0x24>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <HAL_IncTick+0x24>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	2400005c 	.word	0x2400005c
 8002b30:	24000794 	.word	0x24000794

08002b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return uwTick;
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <HAL_GetTick+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	24000794 	.word	0x24000794

08002b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff ffee 	bl	8002b34 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d005      	beq.n	8002b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <HAL_Delay+0x44>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b72:	bf00      	nop
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d8f7      	bhi.n	8002b74 <HAL_Delay+0x28>
  {
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2400005c 	.word	0x2400005c

08002b94 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	4904      	ldr	r1, [pc, #16]	@ (8002bbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	58000400 	.word	0x58000400

08002bc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3360      	adds	r3, #96	@ 0x60
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a10      	ldr	r2, [pc, #64]	@ (8002c88 <LL_ADC_SetOffset+0x60>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10b      	bne.n	8002c64 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c62:	e00b      	b.n	8002c7c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	58026000 	.word	0x58026000

08002c8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3360      	adds	r3, #96	@ 0x60
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8002d2c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3360      	adds	r3, #96	@ 0x60
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	601a      	str	r2, [r3, #0]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	58026000 	.word	0x58026000

08002d30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <LL_ADC_SetOffsetSaturation+0x40>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10e      	bne.n	8002d62 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3360      	adds	r3, #96	@ 0x60
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	58026000 	.word	0x58026000

08002d74 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	@ (8002db4 <LL_ADC_SetOffsetSign+0x40>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10e      	bne.n	8002da6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3360      	adds	r3, #96	@ 0x60
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	58026000 	.word	0x58026000

08002db8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3360      	adds	r3, #96	@ 0x60
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <LL_ADC_SetOffsetState+0x50>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002dea:	e007      	b.n	8002dfc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	601a      	str	r2, [r3, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	58026000 	.word	0x58026000

08002e0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3330      	adds	r3, #48	@ 0x30
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	4413      	add	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	211f      	movs	r1, #31
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 011f 	and.w	r1, r3, #31
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f023 0203 	bic.w	r2, r3, #3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	60da      	str	r2, [r3, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a08      	ldr	r2, [pc, #32]	@ (8002f00 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d107      	bne.n	8002ef2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60da      	str	r2, [r3, #12]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	58026000 	.word	0x58026000

08002f04 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f10:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0e5b      	lsrs	r3, r3, #25
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0d1b      	lsrs	r3, r3, #20
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2107      	movs	r1, #7
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0d1b      	lsrs	r3, r3, #20
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f74:	bf00      	nop
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d115      	bne.n	8002fc0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0318 	and.w	r3, r3, #24
 8002faa:	4914      	ldr	r1, [pc, #80]	@ (8002ffc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002fac:	40d9      	lsrs	r1, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002fbe:	e014      	b.n	8002fea <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0318 	and.w	r3, r3, #24
 8002fd6:	4909      	ldr	r1, [pc, #36]	@ (8002ffc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002fd8:	40d9      	lsrs	r1, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	400b      	ands	r3, r1
 8002fde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	58026000 	.word	0x58026000
 8002ffc:	000fffff 	.word	0x000fffff

08003000 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 031f 	and.w	r3, r3, #31
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6093      	str	r3, [r2, #8]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	5fffffc0 	.word	0x5fffffc0

0800305c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800306c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003070:	d101      	bne.n	8003076 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003092:	4013      	ands	r3, r2
 8003094:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	6fffffc0 	.word	0x6fffffc0

080030ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <LL_ADC_Enable+0x24>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	7fffffc0 	.word	0x7fffffc0

080030fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <LL_ADC_IsEnabled+0x18>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <LL_ADC_IsEnabled+0x1a>
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <LL_ADC_REG_StartConversion+0x24>)
 8003132:	4013      	ands	r3, r2
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	7fffffc0 	.word	0x7fffffc0

0800314c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d101      	bne.n	8003164 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d101      	bne.n	800318a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1ee      	b.n	8003590 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fe ff8d 	bl	80020e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff3f 	bl	800305c <LL_ADC_IsDeepPowerDownEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff25 	bl	8003038 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff5a 	bl	80030ac <LL_ADC_IsInternalRegulatorEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff3e 	bl	8003084 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003208:	4b8e      	ldr	r3, [pc, #568]	@ (8003444 <HAL_ADC_Init+0x2ac>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	4a8e      	ldr	r2, [pc, #568]	@ (8003448 <HAL_ADC_Init+0x2b0>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	3301      	adds	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800321a:	e002      	b.n	8003222 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	3b01      	subs	r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f9      	bne.n	800321c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff3d 	bl	80030ac <LL_ADC_IsInternalRegulatorEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	f043 0210 	orr.w	r2, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff77 	bl	800314c <LL_ADC_REG_IsConversionOngoing>
 800325e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 8188 	bne.w	800357e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 8184 	bne.w	800357e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff36 	bl	80030fc <LL_ADC_IsEnabled>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d136      	bne.n	8003304 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6c      	ldr	r2, [pc, #432]	@ (800344c <HAL_ADC_Init+0x2b4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_ADC_Init+0x112>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003450 <HAL_ADC_Init+0x2b8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10e      	bne.n	80032c8 <HAL_ADC_Init+0x130>
 80032aa:	4868      	ldr	r0, [pc, #416]	@ (800344c <HAL_ADC_Init+0x2b4>)
 80032ac:	f7ff ff26 	bl	80030fc <LL_ADC_IsEnabled>
 80032b0:	4604      	mov	r4, r0
 80032b2:	4867      	ldr	r0, [pc, #412]	@ (8003450 <HAL_ADC_Init+0x2b8>)
 80032b4:	f7ff ff22 	bl	80030fc <LL_ADC_IsEnabled>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4323      	orrs	r3, r4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e008      	b.n	80032da <HAL_ADC_Init+0x142>
 80032c8:	4862      	ldr	r0, [pc, #392]	@ (8003454 <HAL_ADC_Init+0x2bc>)
 80032ca:	f7ff ff17 	bl	80030fc <LL_ADC_IsEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5a      	ldr	r2, [pc, #360]	@ (800344c <HAL_ADC_Init+0x2b4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_ADC_Init+0x15a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_ADC_Init+0x2b8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_Init+0x15e>
 80032f2:	4a59      	ldr	r2, [pc, #356]	@ (8003458 <HAL_ADC_Init+0x2c0>)
 80032f4:	e000      	b.n	80032f8 <HAL_ADC_Init+0x160>
 80032f6:	4a59      	ldr	r2, [pc, #356]	@ (800345c <HAL_ADC_Init+0x2c4>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f7ff fc5e 	bl	8002bc0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_ADC_Init+0x2bc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d129      	bne.n	8003362 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7e5b      	ldrb	r3, [r3, #25]
 8003312:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003318:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800331e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d013      	beq.n	8003350 <HAL_ADC_Init+0x1b8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d00d      	beq.n	800334c <HAL_ADC_Init+0x1b4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b1c      	cmp	r3, #28
 8003336:	d007      	beq.n	8003348 <HAL_ADC_Init+0x1b0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b18      	cmp	r3, #24
 800333e:	d101      	bne.n	8003344 <HAL_ADC_Init+0x1ac>
 8003340:	2318      	movs	r3, #24
 8003342:	e006      	b.n	8003352 <HAL_ADC_Init+0x1ba>
 8003344:	2300      	movs	r3, #0
 8003346:	e004      	b.n	8003352 <HAL_ADC_Init+0x1ba>
 8003348:	2310      	movs	r3, #16
 800334a:	e002      	b.n	8003352 <HAL_ADC_Init+0x1ba>
 800334c:	2308      	movs	r3, #8
 800334e:	e000      	b.n	8003352 <HAL_ADC_Init+0x1ba>
 8003350:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003352:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	e00e      	b.n	8003380 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7e5b      	ldrb	r3, [r3, #25]
 8003366:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800336c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003372:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800337a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d106      	bne.n	8003398 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	3b01      	subs	r3, #1
 8003390:	045b      	lsls	r3, r3, #17
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_ADC_Init+0x2bc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d115      	bne.n	80033ea <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <HAL_ADC_Init+0x2c8>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	69b9      	ldr	r1, [r7, #24]
 80033ce:	430b      	orrs	r3, r1
 80033d0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	611a      	str	r2, [r3, #16]
 80033e8:	e009      	b.n	80033fe <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <HAL_ADC_Init+0x2cc>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	69b9      	ldr	r1, [r7, #24]
 80033fa:	430b      	orrs	r3, r1
 80033fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fea2 	bl	800314c <LL_ADC_REG_IsConversionOngoing>
 8003408:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff feaf 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 8003414:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 808e 	bne.w	800353a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f040 808a 	bne.w	800353a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <HAL_ADC_Init+0x2bc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d11b      	bne.n	8003468 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7e1b      	ldrb	r3, [r3, #24]
 8003434:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800343c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	e018      	b.n	8003476 <HAL_ADC_Init+0x2de>
 8003444:	24000050 	.word	0x24000050
 8003448:	053e2d63 	.word	0x053e2d63
 800344c:	40022000 	.word	0x40022000
 8003450:	40022100 	.word	0x40022100
 8003454:	58026000 	.word	0x58026000
 8003458:	40022300 	.word	0x40022300
 800345c:	58026300 	.word	0x58026300
 8003460:	fff04007 	.word	0xfff04007
 8003464:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7e1b      	ldrb	r3, [r3, #24]
 800346c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4b46      	ldr	r3, [pc, #280]	@ (8003598 <HAL_ADC_Init+0x400>)
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	69b9      	ldr	r1, [r7, #24]
 8003486:	430b      	orrs	r3, r1
 8003488:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003490:	2b01      	cmp	r3, #1
 8003492:	d137      	bne.n	8003504 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3f      	ldr	r2, [pc, #252]	@ (800359c <HAL_ADC_Init+0x404>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d116      	bne.n	80034d2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <HAL_ADC_Init+0x408>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034c2:	430a      	orrs	r2, r1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	611a      	str	r2, [r3, #16]
 80034d0:	e020      	b.n	8003514 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	4b32      	ldr	r3, [pc, #200]	@ (80035a4 <HAL_ADC_Init+0x40c>)
 80034da:	4013      	ands	r3, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034e0:	3a01      	subs	r2, #1
 80034e2:	0411      	lsls	r1, r2, #16
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034f4:	430a      	orrs	r2, r1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	e007      	b.n	8003514 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1b      	ldr	r2, [pc, #108]	@ (800359c <HAL_ADC_Init+0x404>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d002      	beq.n	800353a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f001 f9c3 	bl	80048c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10c      	bne.n	800355c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	f023 010f 	bic.w	r1, r3, #15
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
 800355a:	e007      	b.n	800356c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 020f 	bic.w	r2, r2, #15
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003570:	f023 0303 	bic.w	r3, r3, #3
 8003574:	f043 0201 	orr.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	661a      	str	r2, [r3, #96]	@ 0x60
 800357c:	e007      	b.n	800358e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	f043 0210 	orr.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800358e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3724      	adds	r7, #36	@ 0x24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	ffffbffc 	.word	0xffffbffc
 800359c:	58026000 	.word	0x58026000
 80035a0:	fc00f81f 	.word	0xfc00f81f
 80035a4:	fc00f81e 	.word	0xfc00f81e

080035a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a60      	ldr	r2, [pc, #384]	@ (800373c <HAL_ADC_Start_DMA+0x194>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_ADC_Start_DMA+0x20>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003740 <HAL_ADC_Start_DMA+0x198>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_Start_DMA+0x24>
 80035c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003744 <HAL_ADC_Start_DMA+0x19c>)
 80035ca:	e000      	b.n	80035ce <HAL_ADC_Start_DMA+0x26>
 80035cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003748 <HAL_ADC_Start_DMA+0x1a0>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fd16 	bl	8003000 <LL_ADC_GetMultimode>
 80035d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fdb6 	bl	800314c <LL_ADC_REG_IsConversionOngoing>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80a2 	bne.w	800372c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_Start_DMA+0x4e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e09d      	b.n	8003732 <HAL_ADC_Start_DMA+0x18a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b05      	cmp	r3, #5
 8003608:	d003      	beq.n	8003612 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b09      	cmp	r3, #9
 800360e:	f040 8086 	bne.w	800371e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f001 f836 	bl	8004684 <ADC_Enable>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d178      	bne.n	8003714 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003626:	4b49      	ldr	r3, [pc, #292]	@ (800374c <HAL_ADC_Start_DMA+0x1a4>)
 8003628:	4013      	ands	r3, r2
 800362a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a42      	ldr	r2, [pc, #264]	@ (8003740 <HAL_ADC_Start_DMA+0x198>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d002      	beq.n	8003642 <HAL_ADC_Start_DMA+0x9a>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e000      	b.n	8003644 <HAL_ADC_Start_DMA+0x9c>
 8003642:	4b3e      	ldr	r3, [pc, #248]	@ (800373c <HAL_ADC_Start_DMA+0x194>)
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4293      	cmp	r3, r2
 800364a:	d002      	beq.n	8003652 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003656:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800366e:	f023 0206 	bic.w	r2, r3, #6
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	665a      	str	r2, [r3, #100]	@ 0x64
 8003676:	e002      	b.n	800367e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	4a33      	ldr	r2, [pc, #204]	@ (8003750 <HAL_ADC_Start_DMA+0x1a8>)
 8003684:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <HAL_ADC_Start_DMA+0x1ac>)
 800368c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	4a31      	ldr	r2, [pc, #196]	@ (8003758 <HAL_ADC_Start_DMA+0x1b0>)
 8003694:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	221c      	movs	r2, #28
 800369c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0210 	orr.w	r2, r2, #16
 80036b4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a28      	ldr	r2, [pc, #160]	@ (800375c <HAL_ADC_Start_DMA+0x1b4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10f      	bne.n	80036e0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f7ff fbfe 	bl	8002ed0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fbe9 	bl	8002eb0 <LL_ADC_EnableDMAReq>
 80036de:	e007      	b.n	80036f0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7ff fbcd 	bl	8002e8a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3340      	adds	r3, #64	@ 0x40
 80036fa:	4619      	mov	r1, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f001 ff6e 	bl	80055e0 <HAL_DMA_Start_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fd09 	bl	8003124 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003712:	e00d      	b.n	8003730 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800371c:	e008      	b.n	8003730 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800372a:	e001      	b.n	8003730 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800372c:	2302      	movs	r3, #2
 800372e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40022000 	.word	0x40022000
 8003740:	40022100 	.word	0x40022100
 8003744:	40022300 	.word	0x40022300
 8003748:	58026300 	.word	0x58026300
 800374c:	fffff0fe 	.word	0xfffff0fe
 8003750:	08004799 	.word	0x08004799
 8003754:	08004871 	.word	0x08004871
 8003758:	0800488d 	.word	0x0800488d
 800375c:	58026000 	.word	0x58026000

08003760 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	@ 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a87      	ldr	r2, [pc, #540]	@ (80039a0 <HAL_ADC_IRQHandler+0x240>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_ADC_IRQHandler+0x30>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a86      	ldr	r2, [pc, #536]	@ (80039a4 <HAL_ADC_IRQHandler+0x244>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_ADC_IRQHandler+0x34>
 8003790:	4b85      	ldr	r3, [pc, #532]	@ (80039a8 <HAL_ADC_IRQHandler+0x248>)
 8003792:	e000      	b.n	8003796 <HAL_ADC_IRQHandler+0x36>
 8003794:	4b85      	ldr	r3, [pc, #532]	@ (80039ac <HAL_ADC_IRQHandler+0x24c>)
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fc32 	bl	8003000 <LL_ADC_GetMultimode>
 800379c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d017      	beq.n	80037d8 <HAL_ADC_IRQHandler+0x78>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 f9b4 	bl	8004b38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2202      	movs	r2, #2
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_ADC_IRQHandler+0x8c>
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8083 	beq.w	80038fe <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d07d      	beq.n	80038fe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff faf4 	bl	8002e0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d062      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a5d      	ldr	r2, [pc, #372]	@ (80039a4 <HAL_ADC_IRQHandler+0x244>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d002      	beq.n	800383a <HAL_ADC_IRQHandler+0xda>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	e000      	b.n	800383c <HAL_ADC_IRQHandler+0xdc>
 800383a:	4b59      	ldr	r3, [pc, #356]	@ (80039a0 <HAL_ADC_IRQHandler+0x240>)
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	4293      	cmp	r3, r2
 8003842:	d008      	beq.n	8003856 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d002      	beq.n	8003856 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b09      	cmp	r3, #9
 8003854:	d104      	bne.n	8003860 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	e00c      	b.n	800387a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a4f      	ldr	r2, [pc, #316]	@ (80039a4 <HAL_ADC_IRQHandler+0x244>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d002      	beq.n	8003870 <HAL_ADC_IRQHandler+0x110>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	e000      	b.n	8003872 <HAL_ADC_IRQHandler+0x112>
 8003870:	4b4b      	ldr	r3, [pc, #300]	@ (80039a0 <HAL_ADC_IRQHandler+0x240>)
 8003872:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d135      	bne.n	80038f0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d12e      	bne.n	80038f0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fc58 	bl	800314c <LL_ADC_REG_IsConversionOngoing>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11a      	bne.n	80038d8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020c 	bic.w	r2, r2, #12
 80038b0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d112      	bne.n	80038f0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80038d6:	e00b      	b.n	80038f0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038dc:	f043 0210 	orr.w	r2, r3, #16
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038e8:	f043 0201 	orr.w	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f96f 	bl	8003bd4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	220c      	movs	r2, #12
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <HAL_ADC_IRQHandler+0x1b2>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a0 	beq.w	8003a5e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 809a 	beq.w	8003a5e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fadc 	bl	8002f04 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800394c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fa5a 	bl	8002e0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003958:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a11      	ldr	r2, [pc, #68]	@ (80039a4 <HAL_ADC_IRQHandler+0x244>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d002      	beq.n	800396a <HAL_ADC_IRQHandler+0x20a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	e000      	b.n	800396c <HAL_ADC_IRQHandler+0x20c>
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <HAL_ADC_IRQHandler+0x240>)
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	4293      	cmp	r3, r2
 8003972:	d008      	beq.n	8003986 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d002      	beq.n	8003986 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b07      	cmp	r3, #7
 8003984:	d104      	bne.n	8003990 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	e014      	b.n	80039ba <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a03      	ldr	r2, [pc, #12]	@ (80039a4 <HAL_ADC_IRQHandler+0x244>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00a      	beq.n	80039b0 <HAL_ADC_IRQHandler+0x250>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	e008      	b.n	80039b2 <HAL_ADC_IRQHandler+0x252>
 80039a0:	40022000 	.word	0x40022000
 80039a4:	40022100 	.word	0x40022100
 80039a8:	40022300 	.word	0x40022300
 80039ac:	58026300 	.word	0x58026300
 80039b0:	4b84      	ldr	r3, [pc, #528]	@ (8003bc4 <HAL_ADC_IRQHandler+0x464>)
 80039b2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d047      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_ADC_IRQHandler+0x27a>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d03f      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d13a      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d133      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d12e      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fbbb 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11a      	bne.n	8003a38 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a10:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d112      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a36:	e00b      	b.n	8003a50 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f001 f849 	bl	8004ae8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2260      	movs	r2, #96	@ 0x60
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d011      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x32c>
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8bc 	bl	8003bfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2280      	movs	r2, #128	@ 0x80
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <HAL_ADC_IRQHandler+0x35c>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f001 f82f 	bl	8004b10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d012      	beq.n	8003aec <HAL_ADC_IRQHandler+0x38c>
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f001 f821 	bl	8004b24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d043      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x41e>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d03e      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0c:	e021      	b.n	8003b52 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc4 <HAL_ADC_IRQHandler+0x464>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADC_IRQHandler+0x3c8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a29      	ldr	r2, [pc, #164]	@ (8003bc8 <HAL_ADC_IRQHandler+0x468>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x3cc>
 8003b28:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <HAL_ADC_IRQHandler+0x46c>)
 8003b2a:	e000      	b.n	8003b2e <HAL_ADC_IRQHandler+0x3ce>
 8003b2c:	4b28      	ldr	r3, [pc, #160]	@ (8003bd0 <HAL_ADC_IRQHandler+0x470>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fa74 	bl	800301c <LL_ADC_GetMultiDMATransfer>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3e:	e008      	b.n	8003b52 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10e      	bne.n	8003b76 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b68:	f043 0202 	orr.w	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f84d 	bl	8003c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d018      	beq.n	8003bba <HAL_ADC_IRQHandler+0x45a>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba2:	f043 0208 	orr.w	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 ffa1 	bl	8004afc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003bba:	bf00      	nop
 8003bbc:	3728      	adds	r7, #40	@ 0x28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40022000 	.word	0x40022000
 8003bc8:	40022100 	.word	0x40022100
 8003bcc:	40022300 	.word	0x40022300
 8003bd0:	58026300 	.word	0x58026300

08003bd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b0b9      	sub	sp, #228	@ 0xe4
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c3e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4aab      	ldr	r2, [pc, #684]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x2d0>)
 8003c46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x34>
 8003c52:	2302      	movs	r3, #2
 8003c54:	f000 bcfe 	b.w	8004654 <HAL_ADC_ConfigChannel+0xa30>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fa71 	bl	800314c <LL_ADC_REG_IsConversionOngoing>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 84e2 	bne.w	8004636 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db38      	blt.n	8003cec <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a9e      	ldr	r2, [pc, #632]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d033      	beq.n	8003cec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x7e>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e9b      	lsrs	r3, r3, #26
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	e01d      	b.n	8003cde <HAL_ADC_ConfigChannel+0xba>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	e004      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2201      	movs	r2, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	69d1      	ldr	r1, [r2, #28]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f7ff f89a 	bl	8002e32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fa22 	bl	800314c <LL_ADC_REG_IsConversionOngoing>
 8003d08:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fa2e 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 8003d16:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 8270 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 826b 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f7ff f8f5 	bl	8002f2a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10d      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	08db      	lsrs	r3, r3, #3
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d64:	e032      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d66:	4b65      	ldr	r3, [pc, #404]	@ (8003efc <HAL_ADC_ConfigChannel+0x2d8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d72:	d10b      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x168>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	e01d      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x1a4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x18e>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	e00a      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x1a4>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d048      	beq.n	8003e66 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6919      	ldr	r1, [r3, #16]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003de4:	f7fe ff20 	bl	8002c28 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a42      	ldr	r2, [pc, #264]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d119      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6919      	ldr	r1, [r3, #16]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f7fe ffb8 	bl	8002d74 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6919      	ldr	r1, [r3, #16]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d102      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x1f8>
 8003e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e1a:	e000      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x1fa>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7fe ff86 	bl	8002d30 <LL_ADC_SetOffsetSaturation>
 8003e24:	e1ee      	b.n	8004204 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6919      	ldr	r1, [r3, #16]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d102      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x21a>
 8003e38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e3c:	e000      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x21c>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	461a      	mov	r2, r3
 8003e42:	f7fe ff53 	bl	8002cec <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6919      	ldr	r1, [r3, #16]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	7e1b      	ldrb	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x238>
 8003e56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e5a:	e000      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x23a>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7fe ff2a 	bl	8002cb8 <LL_ADC_SetDataRightShift>
 8003e64:	e1ce      	b.n	8004204 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	f040 8181 	bne.w	8004174 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe ff07 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x27a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fefc 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	0e9b      	lsrs	r3, r3, #26
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	e01e      	b.n	8003edc <HAL_ADC_ConfigChannel+0x2b8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe fef1 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003ec4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e004      	b.n	8003eda <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x2dc>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	e01e      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x30e>
 8003ef4:	47ff0000 	.word	0x47ff0000
 8003ef8:	58026000 	.word	0x58026000
 8003efc:	5c001000 	.word	0x5c001000
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003f24:	2320      	movs	r3, #32
 8003f26:	e004      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d106      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe ff3a 	bl	8002db8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fe9e 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x34c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fe93 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	f003 021f 	and.w	r2, r3, #31
 8003f6e:	e01e      	b.n	8003fae <HAL_ADC_ConfigChannel+0x38a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fe88 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e004      	b.n	8003fac <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x3a2>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0e9b      	lsrs	r3, r3, #26
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	e018      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x3d4>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003fea:	2320      	movs	r3, #32
 8003fec:	e004      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d106      	bne.n	800400a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fed7 	bl	8002db8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fe3b 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8004016:	4603      	mov	r3, r0
 8004018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x412>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2102      	movs	r1, #2
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fe30 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 800402c:	4603      	mov	r3, r0
 800402e:	0e9b      	lsrs	r3, r3, #26
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	e01e      	b.n	8004074 <HAL_ADC_ConfigChannel+0x450>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fe25 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8004042:	4603      	mov	r3, r0
 8004044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004058:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800405c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e004      	b.n	8004072 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_ADC_ConfigChannel+0x468>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	e014      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x492>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800409a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800409c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80040a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e004      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80040ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d106      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fe78 	bl	8002db8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2103      	movs	r1, #3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fddc 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x4d0>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2103      	movs	r1, #3
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fdd1 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	f003 021f 	and.w	r2, r3, #31
 80040f2:	e017      	b.n	8004124 <HAL_ADC_ConfigChannel+0x500>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2103      	movs	r1, #3
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fdc6 	bl	8002c8c <LL_ADC_GetOffsetChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800410c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800410e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004116:	2320      	movs	r3, #32
 8004118:	e003      	b.n	8004122 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800411a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <HAL_ADC_ConfigChannel+0x518>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	e011      	b.n	8004160 <HAL_ADC_ConfigChannel+0x53c>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800414a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800414c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800414e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004154:	2320      	movs	r3, #32
 8004156:	e003      	b.n	8004160 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004158:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	429a      	cmp	r2, r3
 8004162:	d14f      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2200      	movs	r2, #0
 800416a:	2103      	movs	r1, #3
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fe23 	bl	8002db8 <LL_ADC_SetOffsetState>
 8004172:	e047      	b.n	8004204 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004196:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	069b      	lsls	r3, r3, #26
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041ba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	069b      	lsls	r3, r3, #26
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d107      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041de:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004202:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe ff77 	bl	80030fc <LL_ADC_IsEnabled>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 8219 	bne.w	8004648 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fe feac 	bl	8002f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4aa1      	ldr	r2, [pc, #644]	@ (80044b4 <HAL_ADC_ConfigChannel+0x890>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f040 812e 	bne.w	8004490 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_ADC_ConfigChannel+0x638>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	3301      	adds	r3, #1
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2b09      	cmp	r3, #9
 8004252:	bf94      	ite	ls
 8004254:	2301      	movls	r3, #1
 8004256:	2300      	movhi	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e019      	b.n	8004290 <HAL_ADC_ConfigChannel+0x66c>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800426e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004274:	2320      	movs	r3, #32
 8004276:	e003      	b.n	8004280 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3301      	adds	r3, #1
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2b09      	cmp	r3, #9
 8004288:	bf94      	ite	ls
 800428a:	2301      	movls	r3, #1
 800428c:	2300      	movhi	r3, #0
 800428e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004290:	2b00      	cmp	r3, #0
 8004292:	d079      	beq.n	8004388 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x68c>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	3301      	adds	r3, #1
 80042a8:	069b      	lsls	r3, r3, #26
 80042aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ae:	e015      	b.n	80042dc <HAL_ADC_ConfigChannel+0x6b8>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80042c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80042c8:	2320      	movs	r3, #32
 80042ca:	e003      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80042cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	069b      	lsls	r3, r3, #26
 80042d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x6d8>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	3301      	adds	r3, #1
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	e017      	b.n	800432c <HAL_ADC_ConfigChannel+0x708>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800430a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800430e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004314:	2320      	movs	r3, #32
 8004316:	e003      	b.n	8004320 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3301      	adds	r3, #1
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	ea42 0103 	orr.w	r1, r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x72e>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0e9b      	lsrs	r3, r3, #26
 8004342:	3301      	adds	r3, #1
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	051b      	lsls	r3, r3, #20
 8004350:	e018      	b.n	8004384 <HAL_ADC_ConfigChannel+0x760>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800436a:	2320      	movs	r3, #32
 800436c:	e003      	b.n	8004376 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004370:	fab3 f383 	clz	r3, r3
 8004374:	b2db      	uxtb	r3, r3
 8004376:	3301      	adds	r3, #1
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4613      	mov	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	4413      	add	r3, r2
 8004382:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004384:	430b      	orrs	r3, r1
 8004386:	e07e      	b.n	8004486 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x780>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0e9b      	lsrs	r3, r3, #26
 800439a:	3301      	adds	r3, #1
 800439c:	069b      	lsls	r3, r3, #26
 800439e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043a2:	e015      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x7ac>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e003      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80043c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	069b      	lsls	r3, r3, #26
 80043cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x7cc>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	e017      	b.n	8004420 <HAL_ADC_ConfigChannel+0x7fc>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	61bb      	str	r3, [r7, #24]
  return result;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e003      	b.n	8004414 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3301      	adds	r3, #1
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	ea42 0103 	orr.w	r1, r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10d      	bne.n	800444c <HAL_ADC_ConfigChannel+0x828>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	3301      	adds	r3, #1
 8004438:	f003 021f 	and.w	r2, r3, #31
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	3b1e      	subs	r3, #30
 8004444:	051b      	lsls	r3, r3, #20
 8004446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800444a:	e01b      	b.n	8004484 <HAL_ADC_ConfigChannel+0x860>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	60fb      	str	r3, [r7, #12]
  return result;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e003      	b.n	8004470 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3301      	adds	r3, #1
 8004472:	f003 021f 	and.w	r2, r3, #31
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	3b1e      	subs	r3, #30
 800447e:	051b      	lsls	r3, r3, #20
 8004480:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004484:	430b      	orrs	r3, r1
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	4619      	mov	r1, r3
 800448c:	f7fe fd4d 	bl	8002f2a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f280 80d7 	bge.w	8004648 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a06      	ldr	r2, [pc, #24]	@ (80044b8 <HAL_ADC_ConfigChannel+0x894>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_ADC_ConfigChannel+0x88a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <HAL_ADC_ConfigChannel+0x898>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10a      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x8a0>
 80044ae:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <HAL_ADC_ConfigChannel+0x89c>)
 80044b0:	e009      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x8a2>
 80044b2:	bf00      	nop
 80044b4:	47ff0000 	.word	0x47ff0000
 80044b8:	40022000 	.word	0x40022000
 80044bc:	40022100 	.word	0x40022100
 80044c0:	40022300 	.word	0x40022300
 80044c4:	4b65      	ldr	r3, [pc, #404]	@ (800465c <HAL_ADC_ConfigChannel+0xa38>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fba0 	bl	8002c0c <LL_ADC_GetCommonPathInternalCh>
 80044cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a62      	ldr	r2, [pc, #392]	@ (8004660 <HAL_ADC_ConfigChannel+0xa3c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_ADC_ConfigChannel+0x8c0>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a61      	ldr	r2, [pc, #388]	@ (8004664 <HAL_ADC_ConfigChannel+0xa40>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10e      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x8de>
 80044e4:	485e      	ldr	r0, [pc, #376]	@ (8004660 <HAL_ADC_ConfigChannel+0xa3c>)
 80044e6:	f7fe fe09 	bl	80030fc <LL_ADC_IsEnabled>
 80044ea:	4604      	mov	r4, r0
 80044ec:	485d      	ldr	r0, [pc, #372]	@ (8004664 <HAL_ADC_ConfigChannel+0xa40>)
 80044ee:	f7fe fe05 	bl	80030fc <LL_ADC_IsEnabled>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4323      	orrs	r3, r4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e008      	b.n	8004514 <HAL_ADC_ConfigChannel+0x8f0>
 8004502:	4859      	ldr	r0, [pc, #356]	@ (8004668 <HAL_ADC_ConfigChannel+0xa44>)
 8004504:	f7fe fdfa 	bl	80030fc <LL_ADC_IsEnabled>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8084 	beq.w	8004622 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a53      	ldr	r2, [pc, #332]	@ (800466c <HAL_ADC_ConfigChannel+0xa48>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d132      	bne.n	800458a <HAL_ADC_ConfigChannel+0x966>
 8004524:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004528:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d12c      	bne.n	800458a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a4c      	ldr	r2, [pc, #304]	@ (8004668 <HAL_ADC_ConfigChannel+0xa44>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f040 8086 	bne.w	8004648 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a47      	ldr	r2, [pc, #284]	@ (8004660 <HAL_ADC_ConfigChannel+0xa3c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x92c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a46      	ldr	r2, [pc, #280]	@ (8004664 <HAL_ADC_ConfigChannel+0xa40>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x930>
 8004550:	4a47      	ldr	r2, [pc, #284]	@ (8004670 <HAL_ADC_ConfigChannel+0xa4c>)
 8004552:	e000      	b.n	8004556 <HAL_ADC_ConfigChannel+0x932>
 8004554:	4a41      	ldr	r2, [pc, #260]	@ (800465c <HAL_ADC_ConfigChannel+0xa38>)
 8004556:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800455a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f7fe fb40 	bl	8002be6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004566:	4b43      	ldr	r3, [pc, #268]	@ (8004674 <HAL_ADC_ConfigChannel+0xa50>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	4a42      	ldr	r2, [pc, #264]	@ (8004678 <HAL_ADC_ConfigChannel+0xa54>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	3301      	adds	r3, #1
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800457a:	e002      	b.n	8004582 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f9      	bne.n	800457c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004588:	e05e      	b.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a3b      	ldr	r2, [pc, #236]	@ (800467c <HAL_ADC_ConfigChannel+0xa58>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d120      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x9b2>
 8004594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11a      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a30      	ldr	r2, [pc, #192]	@ (8004668 <HAL_ADC_ConfigChannel+0xa44>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d14e      	bne.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004660 <HAL_ADC_ConfigChannel+0xa3c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_ADC_ConfigChannel+0x99a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004664 <HAL_ADC_ConfigChannel+0xa40>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x99e>
 80045be:	4a2c      	ldr	r2, [pc, #176]	@ (8004670 <HAL_ADC_ConfigChannel+0xa4c>)
 80045c0:	e000      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x9a0>
 80045c2:	4a26      	ldr	r2, [pc, #152]	@ (800465c <HAL_ADC_ConfigChannel+0xa38>)
 80045c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f7fe fb09 	bl	8002be6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045d4:	e038      	b.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a29      	ldr	r2, [pc, #164]	@ (8004680 <HAL_ADC_ConfigChannel+0xa5c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d133      	bne.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
 80045e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d12d      	bne.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004668 <HAL_ADC_ConfigChannel+0xa44>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d128      	bne.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a19      	ldr	r2, [pc, #100]	@ (8004660 <HAL_ADC_ConfigChannel+0xa3c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_ADC_ConfigChannel+0x9e6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a17      	ldr	r2, [pc, #92]	@ (8004664 <HAL_ADC_ConfigChannel+0xa40>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x9ea>
 800460a:	4a19      	ldr	r2, [pc, #100]	@ (8004670 <HAL_ADC_ConfigChannel+0xa4c>)
 800460c:	e000      	b.n	8004610 <HAL_ADC_ConfigChannel+0x9ec>
 800460e:	4a13      	ldr	r2, [pc, #76]	@ (800465c <HAL_ADC_ConfigChannel+0xa38>)
 8004610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004614:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7fe fae3 	bl	8002be6 <LL_ADC_SetCommonPathInternalCh>
 8004620:	e012      	b.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004634:	e008      	b.n	8004648 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004650:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004654:	4618      	mov	r0, r3
 8004656:	37e4      	adds	r7, #228	@ 0xe4
 8004658:	46bd      	mov	sp, r7
 800465a:	bd90      	pop	{r4, r7, pc}
 800465c:	58026300 	.word	0x58026300
 8004660:	40022000 	.word	0x40022000
 8004664:	40022100 	.word	0x40022100
 8004668:	58026000 	.word	0x58026000
 800466c:	c7520000 	.word	0xc7520000
 8004670:	40022300 	.word	0x40022300
 8004674:	24000050 	.word	0x24000050
 8004678:	053e2d63 	.word	0x053e2d63
 800467c:	c3210000 	.word	0xc3210000
 8004680:	cb840000 	.word	0xcb840000

08004684 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fd33 	bl	80030fc <LL_ADC_IsEnabled>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d16e      	bne.n	800477a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	4b38      	ldr	r3, [pc, #224]	@ (8004784 <ADC_Enable+0x100>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ae:	f043 0210 	orr.w	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ba:	f043 0201 	orr.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e05a      	b.n	800477c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fd02 	bl	80030d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046d0:	f7fe fa30 	bl	8002b34 <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2b      	ldr	r2, [pc, #172]	@ (8004788 <ADC_Enable+0x104>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <ADC_Enable+0x66>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a29      	ldr	r2, [pc, #164]	@ (800478c <ADC_Enable+0x108>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <ADC_Enable+0x6a>
 80046ea:	4b29      	ldr	r3, [pc, #164]	@ (8004790 <ADC_Enable+0x10c>)
 80046ec:	e000      	b.n	80046f0 <ADC_Enable+0x6c>
 80046ee:	4b29      	ldr	r3, [pc, #164]	@ (8004794 <ADC_Enable+0x110>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fc85 	bl	8003000 <LL_ADC_GetMultimode>
 80046f6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a23      	ldr	r2, [pc, #140]	@ (800478c <ADC_Enable+0x108>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d002      	beq.n	8004708 <ADC_Enable+0x84>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	e000      	b.n	800470a <ADC_Enable+0x86>
 8004708:	4b1f      	ldr	r3, [pc, #124]	@ (8004788 <ADC_Enable+0x104>)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	4293      	cmp	r3, r2
 8004710:	d02c      	beq.n	800476c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d130      	bne.n	800477a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004718:	e028      	b.n	800476c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fcec 	bl	80030fc <LL_ADC_IsEnabled>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fcd0 	bl	80030d4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004734:	f7fe f9fe 	bl	8002b34 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d914      	bls.n	800476c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d00d      	beq.n	800476c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004754:	f043 0210 	orr.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004760:	f043 0201 	orr.w	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e007      	b.n	800477c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d1cf      	bne.n	800471a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	8000003f 	.word	0x8000003f
 8004788:	40022000 	.word	0x40022000
 800478c:	40022100 	.word	0x40022100
 8004790:	40022300 	.word	0x40022300
 8004794:	58026300 	.word	0x58026300

08004798 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d14b      	bne.n	800484a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d021      	beq.n	8004810 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe fb1b 	bl	8002e0c <LL_ADC_REG_IsTriggerSourceSWStart>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d032      	beq.n	8004842 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d12b      	bne.n	8004842 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11f      	bne.n	8004842 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004806:	f043 0201 	orr.w	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	661a      	str	r2, [r3, #96]	@ 0x60
 800480e:	e018      	b.n	8004842 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d111      	bne.n	8004842 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483a:	f043 0201 	orr.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff f9c6 	bl	8003bd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004848:	e00e      	b.n	8004868 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff f9da 	bl	8003c10 <HAL_ADC_ErrorCallback>
}
 800485c:	e004      	b.n	8004868 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff f9b2 	bl	8003be8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff f9ac 	bl	8003c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a6c      	ldr	r2, [pc, #432]	@ (8004a80 <ADC_ConfigureBoostMode+0x1c0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <ADC_ConfigureBoostMode+0x1c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004a84 <ADC_ConfigureBoostMode+0x1c4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d109      	bne.n	80048f0 <ADC_ConfigureBoostMode+0x30>
 80048dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <ADC_ConfigureBoostMode+0x1c8>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e008      	b.n	8004902 <ADC_ConfigureBoostMode+0x42>
 80048f0:	4b66      	ldr	r3, [pc, #408]	@ (8004a8c <ADC_ConfigureBoostMode+0x1cc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01c      	beq.n	8004940 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004906:	f004 fa85 	bl	8008e14 <HAL_RCC_GetHCLKFreq>
 800490a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004914:	d010      	beq.n	8004938 <ADC_ConfigureBoostMode+0x78>
 8004916:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800491a:	d873      	bhi.n	8004a04 <ADC_ConfigureBoostMode+0x144>
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d002      	beq.n	8004928 <ADC_ConfigureBoostMode+0x68>
 8004922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004926:	d16d      	bne.n	8004a04 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	60fb      	str	r3, [r7, #12]
        break;
 8004936:	e068      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	60fb      	str	r3, [r7, #12]
        break;
 800493e:	e064      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004940:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004944:	f04f 0100 	mov.w	r1, #0
 8004948:	f005 fc60 	bl	800a20c <HAL_RCCEx_GetPeriphCLKFreq>
 800494c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004956:	d051      	beq.n	80049fc <ADC_ConfigureBoostMode+0x13c>
 8004958:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800495c:	d854      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 800495e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004962:	d047      	beq.n	80049f4 <ADC_ConfigureBoostMode+0x134>
 8004964:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004968:	d84e      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 800496a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800496e:	d03d      	beq.n	80049ec <ADC_ConfigureBoostMode+0x12c>
 8004970:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004974:	d848      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 8004976:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800497a:	d033      	beq.n	80049e4 <ADC_ConfigureBoostMode+0x124>
 800497c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004980:	d842      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 8004982:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004986:	d029      	beq.n	80049dc <ADC_ConfigureBoostMode+0x11c>
 8004988:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800498c:	d83c      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 800498e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004992:	d01a      	beq.n	80049ca <ADC_ConfigureBoostMode+0x10a>
 8004994:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004998:	d836      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 800499a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800499e:	d014      	beq.n	80049ca <ADC_ConfigureBoostMode+0x10a>
 80049a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049a4:	d830      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049aa:	d00e      	beq.n	80049ca <ADC_ConfigureBoostMode+0x10a>
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b0:	d82a      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 80049b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049b6:	d008      	beq.n	80049ca <ADC_ConfigureBoostMode+0x10a>
 80049b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049bc:	d824      	bhi.n	8004a08 <ADC_ConfigureBoostMode+0x148>
 80049be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049c2:	d002      	beq.n	80049ca <ADC_ConfigureBoostMode+0x10a>
 80049c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049c8:	d11e      	bne.n	8004a08 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	0c9b      	lsrs	r3, r3, #18
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	60fb      	str	r3, [r7, #12]
        break;
 80049da:	e016      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	60fb      	str	r3, [r7, #12]
        break;
 80049e2:	e012      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	60fb      	str	r3, [r7, #12]
        break;
 80049ea:	e00e      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	60fb      	str	r3, [r7, #12]
        break;
 80049f2:	e00a      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	09db      	lsrs	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
        break;
 80049fa:	e006      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	60fb      	str	r3, [r7, #12]
        break;
 8004a02:	e002      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a04:	bf00      	nop
 8004a06:	e000      	b.n	8004a0a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a08:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <ADC_ConfigureBoostMode+0x1d0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d808      	bhi.n	8004a2a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a28:	e025      	b.n	8004a76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	@ (8004a94 <ADC_ConfigureBoostMode+0x1d4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d80a      	bhi.n	8004a48 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a44:	609a      	str	r2, [r3, #8]
}
 8004a46:	e016      	b.n	8004a76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a13      	ldr	r2, [pc, #76]	@ (8004a98 <ADC_ConfigureBoostMode+0x1d8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d80a      	bhi.n	8004a66 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	e007      	b.n	8004a76 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004a74:	609a      	str	r2, [r3, #8]
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40022100 	.word	0x40022100
 8004a88:	40022300 	.word	0x40022300
 8004a8c:	58026300 	.word	0x58026300
 8004a90:	005f5e10 	.word	0x005f5e10
 8004a94:	00bebc20 	.word	0x00bebc20
 8004a98:	017d7840 	.word	0x017d7840

08004a9c <LL_ADC_IsEnabled>:
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <LL_ADC_IsEnabled+0x18>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <LL_ADC_IsEnabled+0x1a>
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d101      	bne.n	8004ada <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b0a3      	sub	sp, #140	@ 0x8c
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e0c1      	b.n	8004cee <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d102      	bne.n	8004b8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b84:	4b5d      	ldr	r3, [pc, #372]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	e001      	b.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0a0      	b.n	8004cee <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff87 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004bb4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff80 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f040 8081 	bne.w	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d17c      	bne.n	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a48      	ldr	r2, [pc, #288]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a46      	ldr	r2, [pc, #280]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004be6:	4b46      	ldr	r3, [pc, #280]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004be8:	e000      	b.n	8004bec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004bea:	4b46      	ldr	r3, [pc, #280]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004bec:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d039      	beq.n	8004c6a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a39      	ldr	r2, [pc, #228]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10e      	bne.n	8004c3a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c1c:	4836      	ldr	r0, [pc, #216]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c1e:	f7ff ff3d 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c22:	4604      	mov	r4, r0
 8004c24:	4835      	ldr	r0, [pc, #212]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c26:	f7ff ff39 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4323      	orrs	r3, r4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e008      	b.n	8004c4c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004c3a:	4833      	ldr	r0, [pc, #204]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c3c:	f7ff ff2e 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d047      	beq.n	8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	4b2d      	ldr	r3, [pc, #180]	@ (8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	6811      	ldr	r1, [r2, #0]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	6892      	ldr	r2, [r2, #8]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	431a      	orrs	r2, r3
 8004c64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c66:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c68:	e03a      	b.n	8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1d      	ldr	r2, [pc, #116]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d10e      	bne.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004c8a:	481b      	ldr	r0, [pc, #108]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c8c:	f7ff ff06 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c90:	4604      	mov	r4, r0
 8004c92:	481a      	ldr	r0, [pc, #104]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c94:	f7ff ff02 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4323      	orrs	r3, r4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e008      	b.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ca8:	4817      	ldr	r0, [pc, #92]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004caa:	f7ff fef7 	bl	8004a9c <LL_ADC_IsEnabled>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d010      	beq.n	8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	4b12      	ldr	r3, [pc, #72]	@ (8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004cc8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cca:	e009      	b.n	8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004cde:	e000      	b.n	8004ce2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ce0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004cea:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	378c      	adds	r7, #140	@ 0x8c
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd90      	pop	{r4, r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40022000 	.word	0x40022000
 8004cfc:	40022100 	.word	0x40022100
 8004d00:	40022300 	.word	0x40022300
 8004d04:	58026300 	.word	0x58026300
 8004d08:	58026000 	.word	0x58026000
 8004d0c:	fffff0e0 	.word	0xfffff0e0

08004d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d20:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <__NVIC_SetPriorityGrouping+0x40>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <__NVIC_SetPriorityGrouping+0x44>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d3e:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <__NVIC_SetPriorityGrouping+0x40>)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	60d3      	str	r3, [r2, #12]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	e000ed00 	.word	0xe000ed00
 8004d54:	05fa0000 	.word	0x05fa0000

08004d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d5c:	4b04      	ldr	r3, [pc, #16]	@ (8004d70 <__NVIC_GetPriorityGrouping+0x18>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	f003 0307 	and.w	r3, r3, #7
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	db0b      	blt.n	8004d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	f003 021f 	and.w	r2, r3, #31
 8004d8c:	4907      	ldr	r1, [pc, #28]	@ (8004dac <__NVIC_EnableIRQ+0x38>)
 8004d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2001      	movs	r0, #1
 8004d96:	fa00 f202 	lsl.w	r2, r0, r2
 8004d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000e100 	.word	0xe000e100

08004db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db0a      	blt.n	8004dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	490c      	ldr	r1, [pc, #48]	@ (8004dfc <__NVIC_SetPriority+0x4c>)
 8004dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dce:	0112      	lsls	r2, r2, #4
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dd8:	e00a      	b.n	8004df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4908      	ldr	r1, [pc, #32]	@ (8004e00 <__NVIC_SetPriority+0x50>)
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3b04      	subs	r3, #4
 8004de8:	0112      	lsls	r2, r2, #4
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	440b      	add	r3, r1
 8004dee:	761a      	strb	r2, [r3, #24]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	e000e100 	.word	0xe000e100
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	@ 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f1c3 0307 	rsb	r3, r3, #7
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	bf28      	it	cs
 8004e22:	2304      	movcs	r3, #4
 8004e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d902      	bls.n	8004e34 <NVIC_EncodePriority+0x30>
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3b03      	subs	r3, #3
 8004e32:	e000      	b.n	8004e36 <NVIC_EncodePriority+0x32>
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	401a      	ands	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	43d9      	mvns	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e5c:	4313      	orrs	r3, r2
         );
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3724      	adds	r7, #36	@ 0x24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e7c:	d301      	bcc.n	8004e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e00f      	b.n	8004ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e82:	4a0a      	ldr	r2, [pc, #40]	@ (8004eac <SysTick_Config+0x40>)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e8a:	210f      	movs	r1, #15
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	f7ff ff8e 	bl	8004db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e94:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <SysTick_Config+0x40>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e9a:	4b04      	ldr	r3, [pc, #16]	@ (8004eac <SysTick_Config+0x40>)
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	e000e010 	.word	0xe000e010

08004eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ff29 	bl	8004d10 <__NVIC_SetPriorityGrouping>
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	4603      	mov	r3, r0
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ed4:	f7ff ff40 	bl	8004d58 <__NVIC_GetPriorityGrouping>
 8004ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	6978      	ldr	r0, [r7, #20]
 8004ee0:	f7ff ff90 	bl	8004e04 <NVIC_EncodePriority>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff ff5f 	bl	8004db0 <__NVIC_SetPriority>
}
 8004ef2:	bf00      	nop
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	4603      	mov	r3, r0
 8004f02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ff33 	bl	8004d74 <__NVIC_EnableIRQ>
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff ffa4 	bl	8004e6c <SysTick_Config>
 8004f24:	4603      	mov	r3, r0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004f38:	f7fd fdfc 	bl	8002b34 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e312      	b.n	800556e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a66      	ldr	r2, [pc, #408]	@ (80050e8 <HAL_DMA_Init+0x1b8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04a      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a65      	ldr	r2, [pc, #404]	@ (80050ec <HAL_DMA_Init+0x1bc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d045      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a63      	ldr	r2, [pc, #396]	@ (80050f0 <HAL_DMA_Init+0x1c0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d040      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a62      	ldr	r2, [pc, #392]	@ (80050f4 <HAL_DMA_Init+0x1c4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d03b      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a60      	ldr	r2, [pc, #384]	@ (80050f8 <HAL_DMA_Init+0x1c8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d036      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a5f      	ldr	r2, [pc, #380]	@ (80050fc <HAL_DMA_Init+0x1cc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d031      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a5d      	ldr	r2, [pc, #372]	@ (8005100 <HAL_DMA_Init+0x1d0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02c      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a5c      	ldr	r2, [pc, #368]	@ (8005104 <HAL_DMA_Init+0x1d4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d027      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8005108 <HAL_DMA_Init+0x1d8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a59      	ldr	r2, [pc, #356]	@ (800510c <HAL_DMA_Init+0x1dc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a57      	ldr	r2, [pc, #348]	@ (8005110 <HAL_DMA_Init+0x1e0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a56      	ldr	r2, [pc, #344]	@ (8005114 <HAL_DMA_Init+0x1e4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a54      	ldr	r2, [pc, #336]	@ (8005118 <HAL_DMA_Init+0x1e8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a53      	ldr	r2, [pc, #332]	@ (800511c <HAL_DMA_Init+0x1ec>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a51      	ldr	r2, [pc, #324]	@ (8005120 <HAL_DMA_Init+0x1f0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_DMA_Init+0xb8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a50      	ldr	r2, [pc, #320]	@ (8005124 <HAL_DMA_Init+0x1f4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_Init+0xbc>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_DMA_Init+0xbe>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 813c 	beq.w	800526c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a37      	ldr	r2, [pc, #220]	@ (80050e8 <HAL_DMA_Init+0x1b8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04a      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a36      	ldr	r2, [pc, #216]	@ (80050ec <HAL_DMA_Init+0x1bc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d045      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a34      	ldr	r2, [pc, #208]	@ (80050f0 <HAL_DMA_Init+0x1c0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d040      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a33      	ldr	r2, [pc, #204]	@ (80050f4 <HAL_DMA_Init+0x1c4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d03b      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a31      	ldr	r2, [pc, #196]	@ (80050f8 <HAL_DMA_Init+0x1c8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d036      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a30      	ldr	r2, [pc, #192]	@ (80050fc <HAL_DMA_Init+0x1cc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d031      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2e      	ldr	r2, [pc, #184]	@ (8005100 <HAL_DMA_Init+0x1d0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02c      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2d      	ldr	r2, [pc, #180]	@ (8005104 <HAL_DMA_Init+0x1d4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d027      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a2b      	ldr	r2, [pc, #172]	@ (8005108 <HAL_DMA_Init+0x1d8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2a      	ldr	r2, [pc, #168]	@ (800510c <HAL_DMA_Init+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d01d      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a28      	ldr	r2, [pc, #160]	@ (8005110 <HAL_DMA_Init+0x1e0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a27      	ldr	r2, [pc, #156]	@ (8005114 <HAL_DMA_Init+0x1e4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a25      	ldr	r2, [pc, #148]	@ (8005118 <HAL_DMA_Init+0x1e8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a24      	ldr	r2, [pc, #144]	@ (800511c <HAL_DMA_Init+0x1ec>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a22      	ldr	r2, [pc, #136]	@ (8005120 <HAL_DMA_Init+0x1f0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_DMA_Init+0x174>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a21      	ldr	r2, [pc, #132]	@ (8005124 <HAL_DMA_Init+0x1f4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <HAL_DMA_Init+0x186>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e007      	b.n	80050c6 <HAL_DMA_Init+0x196>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050c6:	e02f      	b.n	8005128 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050c8:	f7fd fd34 	bl	8002b34 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	d928      	bls.n	8005128 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2203      	movs	r2, #3
 80050e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e242      	b.n	800556e <HAL_DMA_Init+0x63e>
 80050e8:	40020010 	.word	0x40020010
 80050ec:	40020028 	.word	0x40020028
 80050f0:	40020040 	.word	0x40020040
 80050f4:	40020058 	.word	0x40020058
 80050f8:	40020070 	.word	0x40020070
 80050fc:	40020088 	.word	0x40020088
 8005100:	400200a0 	.word	0x400200a0
 8005104:	400200b8 	.word	0x400200b8
 8005108:	40020410 	.word	0x40020410
 800510c:	40020428 	.word	0x40020428
 8005110:	40020440 	.word	0x40020440
 8005114:	40020458 	.word	0x40020458
 8005118:	40020470 	.word	0x40020470
 800511c:	40020488 	.word	0x40020488
 8005120:	400204a0 	.word	0x400204a0
 8005124:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1c8      	bne.n	80050c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4b83      	ldr	r3, [pc, #524]	@ (8005350 <HAL_DMA_Init+0x420>)
 8005142:	4013      	ands	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800514e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800515a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005166:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	2b04      	cmp	r3, #4
 800517a:	d107      	bne.n	800518c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	4313      	orrs	r3, r2
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b28      	cmp	r3, #40	@ 0x28
 8005192:	d903      	bls.n	800519c <HAL_DMA_Init+0x26c>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b2e      	cmp	r3, #46	@ 0x2e
 800519a:	d91f      	bls.n	80051dc <HAL_DMA_Init+0x2ac>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80051a2:	d903      	bls.n	80051ac <HAL_DMA_Init+0x27c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b42      	cmp	r3, #66	@ 0x42
 80051aa:	d917      	bls.n	80051dc <HAL_DMA_Init+0x2ac>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b46      	cmp	r3, #70	@ 0x46
 80051b2:	d903      	bls.n	80051bc <HAL_DMA_Init+0x28c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b48      	cmp	r3, #72	@ 0x48
 80051ba:	d90f      	bls.n	80051dc <HAL_DMA_Init+0x2ac>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b4e      	cmp	r3, #78	@ 0x4e
 80051c2:	d903      	bls.n	80051cc <HAL_DMA_Init+0x29c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b52      	cmp	r3, #82	@ 0x52
 80051ca:	d907      	bls.n	80051dc <HAL_DMA_Init+0x2ac>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b73      	cmp	r3, #115	@ 0x73
 80051d2:	d905      	bls.n	80051e0 <HAL_DMA_Init+0x2b0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b77      	cmp	r3, #119	@ 0x77
 80051da:	d801      	bhi.n	80051e0 <HAL_DMA_Init+0x2b0>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_DMA_Init+0x2b2>
 80051e0:	2300      	movs	r3, #0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 0307 	bic.w	r3, r3, #7
 8005204:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	2b04      	cmp	r3, #4
 8005216:	d117      	bne.n	8005248 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00e      	beq.n	8005248 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f002 fb2e 	bl	800788c <DMA_CheckFifoParam>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2240      	movs	r2, #64	@ 0x40
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e192      	b.n	800556e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f002 fa69 	bl	8007728 <DMA_CalcBaseAndBitshift>
 8005256:	4603      	mov	r3, r0
 8005258:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	223f      	movs	r2, #63	@ 0x3f
 8005264:	409a      	lsls	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
 800526a:	e0c8      	b.n	80053fe <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a38      	ldr	r2, [pc, #224]	@ (8005354 <HAL_DMA_Init+0x424>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_DMA_Init+0x38c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a37      	ldr	r2, [pc, #220]	@ (8005358 <HAL_DMA_Init+0x428>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <HAL_DMA_Init+0x38c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a35      	ldr	r2, [pc, #212]	@ (800535c <HAL_DMA_Init+0x42c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_DMA_Init+0x38c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a34      	ldr	r2, [pc, #208]	@ (8005360 <HAL_DMA_Init+0x430>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_DMA_Init+0x38c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a32      	ldr	r2, [pc, #200]	@ (8005364 <HAL_DMA_Init+0x434>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_DMA_Init+0x38c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a31      	ldr	r2, [pc, #196]	@ (8005368 <HAL_DMA_Init+0x438>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_DMA_Init+0x38c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2f      	ldr	r2, [pc, #188]	@ (800536c <HAL_DMA_Init+0x43c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_Init+0x38c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005370 <HAL_DMA_Init+0x440>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_DMA_Init+0x390>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_DMA_Init+0x392>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8092 	beq.w	80053ec <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a21      	ldr	r2, [pc, #132]	@ (8005354 <HAL_DMA_Init+0x424>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d021      	beq.n	8005316 <HAL_DMA_Init+0x3e6>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a20      	ldr	r2, [pc, #128]	@ (8005358 <HAL_DMA_Init+0x428>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d01c      	beq.n	8005316 <HAL_DMA_Init+0x3e6>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <HAL_DMA_Init+0x42c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d017      	beq.n	8005316 <HAL_DMA_Init+0x3e6>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005360 <HAL_DMA_Init+0x430>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d012      	beq.n	8005316 <HAL_DMA_Init+0x3e6>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005364 <HAL_DMA_Init+0x434>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00d      	beq.n	8005316 <HAL_DMA_Init+0x3e6>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005368 <HAL_DMA_Init+0x438>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d008      	beq.n	8005316 <HAL_DMA_Init+0x3e6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a18      	ldr	r2, [pc, #96]	@ (800536c <HAL_DMA_Init+0x43c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <HAL_DMA_Init+0x3e6>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a17      	ldr	r2, [pc, #92]	@ (8005370 <HAL_DMA_Init+0x440>)
 8005314:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2202      	movs	r2, #2
 800531a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <HAL_DMA_Init+0x444>)
 8005332:	4013      	ands	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b40      	cmp	r3, #64	@ 0x40
 800533c:	d01c      	beq.n	8005378 <HAL_DMA_Init+0x448>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b80      	cmp	r3, #128	@ 0x80
 8005344:	d102      	bne.n	800534c <HAL_DMA_Init+0x41c>
 8005346:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800534a:	e016      	b.n	800537a <HAL_DMA_Init+0x44a>
 800534c:	2300      	movs	r3, #0
 800534e:	e014      	b.n	800537a <HAL_DMA_Init+0x44a>
 8005350:	fe10803f 	.word	0xfe10803f
 8005354:	58025408 	.word	0x58025408
 8005358:	5802541c 	.word	0x5802541c
 800535c:	58025430 	.word	0x58025430
 8005360:	58025444 	.word	0x58025444
 8005364:	58025458 	.word	0x58025458
 8005368:	5802546c 	.word	0x5802546c
 800536c:	58025480 	.word	0x58025480
 8005370:	58025494 	.word	0x58025494
 8005374:	fffe000f 	.word	0xfffe000f
 8005378:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68d2      	ldr	r2, [r2, #12]
 800537e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005390:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80053a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80053a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	4b6e      	ldr	r3, [pc, #440]	@ (8005578 <HAL_DMA_Init+0x648>)
 80053c0:	4413      	add	r3, r2
 80053c2:	4a6e      	ldr	r2, [pc, #440]	@ (800557c <HAL_DMA_Init+0x64c>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	009a      	lsls	r2, r3, #2
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f002 f9a9 	bl	8007728 <DMA_CalcBaseAndBitshift>
 80053d6:	4603      	mov	r3, r0
 80053d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2201      	movs	r2, #1
 80053e4:	409a      	lsls	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	e008      	b.n	80053fe <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2240      	movs	r2, #64	@ 0x40
 80053f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2203      	movs	r2, #3
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0b7      	b.n	800556e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5f      	ldr	r2, [pc, #380]	@ (8005580 <HAL_DMA_Init+0x650>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d072      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5d      	ldr	r2, [pc, #372]	@ (8005584 <HAL_DMA_Init+0x654>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d06d      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a5c      	ldr	r2, [pc, #368]	@ (8005588 <HAL_DMA_Init+0x658>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d068      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a5a      	ldr	r2, [pc, #360]	@ (800558c <HAL_DMA_Init+0x65c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d063      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a59      	ldr	r2, [pc, #356]	@ (8005590 <HAL_DMA_Init+0x660>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d05e      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a57      	ldr	r2, [pc, #348]	@ (8005594 <HAL_DMA_Init+0x664>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d059      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a56      	ldr	r2, [pc, #344]	@ (8005598 <HAL_DMA_Init+0x668>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d054      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a54      	ldr	r2, [pc, #336]	@ (800559c <HAL_DMA_Init+0x66c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d04f      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a53      	ldr	r2, [pc, #332]	@ (80055a0 <HAL_DMA_Init+0x670>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d04a      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a51      	ldr	r2, [pc, #324]	@ (80055a4 <HAL_DMA_Init+0x674>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d045      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a50      	ldr	r2, [pc, #320]	@ (80055a8 <HAL_DMA_Init+0x678>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d040      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a4e      	ldr	r2, [pc, #312]	@ (80055ac <HAL_DMA_Init+0x67c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d03b      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a4d      	ldr	r2, [pc, #308]	@ (80055b0 <HAL_DMA_Init+0x680>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d036      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a4b      	ldr	r2, [pc, #300]	@ (80055b4 <HAL_DMA_Init+0x684>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d031      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a4a      	ldr	r2, [pc, #296]	@ (80055b8 <HAL_DMA_Init+0x688>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d02c      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a48      	ldr	r2, [pc, #288]	@ (80055bc <HAL_DMA_Init+0x68c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d027      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a47      	ldr	r2, [pc, #284]	@ (80055c0 <HAL_DMA_Init+0x690>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d022      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a45      	ldr	r2, [pc, #276]	@ (80055c4 <HAL_DMA_Init+0x694>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01d      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a44      	ldr	r2, [pc, #272]	@ (80055c8 <HAL_DMA_Init+0x698>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d018      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a42      	ldr	r2, [pc, #264]	@ (80055cc <HAL_DMA_Init+0x69c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a41      	ldr	r2, [pc, #260]	@ (80055d0 <HAL_DMA_Init+0x6a0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a3f      	ldr	r2, [pc, #252]	@ (80055d4 <HAL_DMA_Init+0x6a4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a3e      	ldr	r2, [pc, #248]	@ (80055d8 <HAL_DMA_Init+0x6a8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_DMA_Init+0x5be>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a3c      	ldr	r2, [pc, #240]	@ (80055dc <HAL_DMA_Init+0x6ac>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_DMA_Init+0x5c2>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_DMA_Init+0x5c4>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d032      	beq.n	800555e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f002 fa43 	bl	8007984 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b80      	cmp	r3, #128	@ 0x80
 8005504:	d102      	bne.n	800550c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005520:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <HAL_DMA_Init+0x61c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b08      	cmp	r3, #8
 8005530:	d80c      	bhi.n	800554c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f002 fac0 	bl	8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	e008      	b.n	800555e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	a7fdabf8 	.word	0xa7fdabf8
 800557c:	cccccccd 	.word	0xcccccccd
 8005580:	40020010 	.word	0x40020010
 8005584:	40020028 	.word	0x40020028
 8005588:	40020040 	.word	0x40020040
 800558c:	40020058 	.word	0x40020058
 8005590:	40020070 	.word	0x40020070
 8005594:	40020088 	.word	0x40020088
 8005598:	400200a0 	.word	0x400200a0
 800559c:	400200b8 	.word	0x400200b8
 80055a0:	40020410 	.word	0x40020410
 80055a4:	40020428 	.word	0x40020428
 80055a8:	40020440 	.word	0x40020440
 80055ac:	40020458 	.word	0x40020458
 80055b0:	40020470 	.word	0x40020470
 80055b4:	40020488 	.word	0x40020488
 80055b8:	400204a0 	.word	0x400204a0
 80055bc:	400204b8 	.word	0x400204b8
 80055c0:	58025408 	.word	0x58025408
 80055c4:	5802541c 	.word	0x5802541c
 80055c8:	58025430 	.word	0x58025430
 80055cc:	58025444 	.word	0x58025444
 80055d0:	58025458 	.word	0x58025458
 80055d4:	5802546c 	.word	0x5802546c
 80055d8:	58025480 	.word	0x58025480
 80055dc:	58025494 	.word	0x58025494

080055e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e226      	b.n	8005a4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_DMA_Start_IT+0x2a>
 8005606:	2302      	movs	r3, #2
 8005608:	e21f      	b.n	8005a4a <HAL_DMA_Start_IT+0x46a>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	f040 820a 	bne.w	8005a34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a68      	ldr	r2, [pc, #416]	@ (80057d4 <HAL_DMA_Start_IT+0x1f4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d04a      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a66      	ldr	r2, [pc, #408]	@ (80057d8 <HAL_DMA_Start_IT+0x1f8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d045      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a65      	ldr	r2, [pc, #404]	@ (80057dc <HAL_DMA_Start_IT+0x1fc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d040      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a63      	ldr	r2, [pc, #396]	@ (80057e0 <HAL_DMA_Start_IT+0x200>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a62      	ldr	r2, [pc, #392]	@ (80057e4 <HAL_DMA_Start_IT+0x204>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d036      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a60      	ldr	r2, [pc, #384]	@ (80057e8 <HAL_DMA_Start_IT+0x208>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d031      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5f      	ldr	r2, [pc, #380]	@ (80057ec <HAL_DMA_Start_IT+0x20c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d02c      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5d      	ldr	r2, [pc, #372]	@ (80057f0 <HAL_DMA_Start_IT+0x210>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d027      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a5c      	ldr	r2, [pc, #368]	@ (80057f4 <HAL_DMA_Start_IT+0x214>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5a      	ldr	r2, [pc, #360]	@ (80057f8 <HAL_DMA_Start_IT+0x218>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a59      	ldr	r2, [pc, #356]	@ (80057fc <HAL_DMA_Start_IT+0x21c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a57      	ldr	r2, [pc, #348]	@ (8005800 <HAL_DMA_Start_IT+0x220>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a56      	ldr	r2, [pc, #344]	@ (8005804 <HAL_DMA_Start_IT+0x224>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a54      	ldr	r2, [pc, #336]	@ (8005808 <HAL_DMA_Start_IT+0x228>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a53      	ldr	r2, [pc, #332]	@ (800580c <HAL_DMA_Start_IT+0x22c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_Start_IT+0xee>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a51      	ldr	r2, [pc, #324]	@ (8005810 <HAL_DMA_Start_IT+0x230>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d108      	bne.n	80056e0 <HAL_DMA_Start_IT+0x100>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e007      	b.n	80056f0 <HAL_DMA_Start_IT+0x110>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f001 fe6a 	bl	80073d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a34      	ldr	r2, [pc, #208]	@ (80057d4 <HAL_DMA_Start_IT+0x1f4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d04a      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a33      	ldr	r2, [pc, #204]	@ (80057d8 <HAL_DMA_Start_IT+0x1f8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d045      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a31      	ldr	r2, [pc, #196]	@ (80057dc <HAL_DMA_Start_IT+0x1fc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d040      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a30      	ldr	r2, [pc, #192]	@ (80057e0 <HAL_DMA_Start_IT+0x200>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d03b      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2e      	ldr	r2, [pc, #184]	@ (80057e4 <HAL_DMA_Start_IT+0x204>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d036      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2d      	ldr	r2, [pc, #180]	@ (80057e8 <HAL_DMA_Start_IT+0x208>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d031      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2b      	ldr	r2, [pc, #172]	@ (80057ec <HAL_DMA_Start_IT+0x20c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02c      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <HAL_DMA_Start_IT+0x210>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d027      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a28      	ldr	r2, [pc, #160]	@ (80057f4 <HAL_DMA_Start_IT+0x214>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d022      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a27      	ldr	r2, [pc, #156]	@ (80057f8 <HAL_DMA_Start_IT+0x218>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d01d      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a25      	ldr	r2, [pc, #148]	@ (80057fc <HAL_DMA_Start_IT+0x21c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a24      	ldr	r2, [pc, #144]	@ (8005800 <HAL_DMA_Start_IT+0x220>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a22      	ldr	r2, [pc, #136]	@ (8005804 <HAL_DMA_Start_IT+0x224>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a21      	ldr	r2, [pc, #132]	@ (8005808 <HAL_DMA_Start_IT+0x228>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <HAL_DMA_Start_IT+0x22c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_DMA_Start_IT+0x1bc>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1e      	ldr	r2, [pc, #120]	@ (8005810 <HAL_DMA_Start_IT+0x230>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d101      	bne.n	80057a0 <HAL_DMA_Start_IT+0x1c0>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <HAL_DMA_Start_IT+0x1c2>
 80057a0:	2300      	movs	r3, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d036      	beq.n	8005814 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f023 021e 	bic.w	r2, r3, #30
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0216 	orr.w	r2, r2, #22
 80057b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d03e      	beq.n	8005840 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0208 	orr.w	r2, r2, #8
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e035      	b.n	8005840 <HAL_DMA_Start_IT+0x260>
 80057d4:	40020010 	.word	0x40020010
 80057d8:	40020028 	.word	0x40020028
 80057dc:	40020040 	.word	0x40020040
 80057e0:	40020058 	.word	0x40020058
 80057e4:	40020070 	.word	0x40020070
 80057e8:	40020088 	.word	0x40020088
 80057ec:	400200a0 	.word	0x400200a0
 80057f0:	400200b8 	.word	0x400200b8
 80057f4:	40020410 	.word	0x40020410
 80057f8:	40020428 	.word	0x40020428
 80057fc:	40020440 	.word	0x40020440
 8005800:	40020458 	.word	0x40020458
 8005804:	40020470 	.word	0x40020470
 8005808:	40020488 	.word	0x40020488
 800580c:	400204a0 	.word	0x400204a0
 8005810:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f023 020e 	bic.w	r2, r3, #14
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 020a 	orr.w	r2, r2, #10
 8005826:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0204 	orr.w	r2, r2, #4
 800583e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a83      	ldr	r2, [pc, #524]	@ (8005a54 <HAL_DMA_Start_IT+0x474>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d072      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a82      	ldr	r2, [pc, #520]	@ (8005a58 <HAL_DMA_Start_IT+0x478>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d06d      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a80      	ldr	r2, [pc, #512]	@ (8005a5c <HAL_DMA_Start_IT+0x47c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d068      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7f      	ldr	r2, [pc, #508]	@ (8005a60 <HAL_DMA_Start_IT+0x480>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d063      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a7d      	ldr	r2, [pc, #500]	@ (8005a64 <HAL_DMA_Start_IT+0x484>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d05e      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a7c      	ldr	r2, [pc, #496]	@ (8005a68 <HAL_DMA_Start_IT+0x488>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d059      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a7a      	ldr	r2, [pc, #488]	@ (8005a6c <HAL_DMA_Start_IT+0x48c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d054      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a79      	ldr	r2, [pc, #484]	@ (8005a70 <HAL_DMA_Start_IT+0x490>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04f      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a77      	ldr	r2, [pc, #476]	@ (8005a74 <HAL_DMA_Start_IT+0x494>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d04a      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a76      	ldr	r2, [pc, #472]	@ (8005a78 <HAL_DMA_Start_IT+0x498>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d045      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a74      	ldr	r2, [pc, #464]	@ (8005a7c <HAL_DMA_Start_IT+0x49c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d040      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a73      	ldr	r2, [pc, #460]	@ (8005a80 <HAL_DMA_Start_IT+0x4a0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d03b      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a71      	ldr	r2, [pc, #452]	@ (8005a84 <HAL_DMA_Start_IT+0x4a4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d036      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a70      	ldr	r2, [pc, #448]	@ (8005a88 <HAL_DMA_Start_IT+0x4a8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d031      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a6e      	ldr	r2, [pc, #440]	@ (8005a8c <HAL_DMA_Start_IT+0x4ac>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d02c      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6d      	ldr	r2, [pc, #436]	@ (8005a90 <HAL_DMA_Start_IT+0x4b0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d027      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005a94 <HAL_DMA_Start_IT+0x4b4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d022      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005a98 <HAL_DMA_Start_IT+0x4b8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d01d      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a68      	ldr	r2, [pc, #416]	@ (8005a9c <HAL_DMA_Start_IT+0x4bc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d018      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a67      	ldr	r2, [pc, #412]	@ (8005aa0 <HAL_DMA_Start_IT+0x4c0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d013      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a65      	ldr	r2, [pc, #404]	@ (8005aa4 <HAL_DMA_Start_IT+0x4c4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00e      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a64      	ldr	r2, [pc, #400]	@ (8005aa8 <HAL_DMA_Start_IT+0x4c8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a62      	ldr	r2, [pc, #392]	@ (8005aac <HAL_DMA_Start_IT+0x4cc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_DMA_Start_IT+0x350>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a61      	ldr	r2, [pc, #388]	@ (8005ab0 <HAL_DMA_Start_IT+0x4d0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d101      	bne.n	8005934 <HAL_DMA_Start_IT+0x354>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_DMA_Start_IT+0x356>
 8005934:	2300      	movs	r3, #0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01a      	beq.n	8005970 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005956:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800596a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800596e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a37      	ldr	r2, [pc, #220]	@ (8005a54 <HAL_DMA_Start_IT+0x474>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d04a      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a36      	ldr	r2, [pc, #216]	@ (8005a58 <HAL_DMA_Start_IT+0x478>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d045      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a34      	ldr	r2, [pc, #208]	@ (8005a5c <HAL_DMA_Start_IT+0x47c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d040      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a33      	ldr	r2, [pc, #204]	@ (8005a60 <HAL_DMA_Start_IT+0x480>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d03b      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a31      	ldr	r2, [pc, #196]	@ (8005a64 <HAL_DMA_Start_IT+0x484>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d036      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a30      	ldr	r2, [pc, #192]	@ (8005a68 <HAL_DMA_Start_IT+0x488>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d031      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a6c <HAL_DMA_Start_IT+0x48c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d02c      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005a70 <HAL_DMA_Start_IT+0x490>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d027      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005a74 <HAL_DMA_Start_IT+0x494>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005a78 <HAL_DMA_Start_IT+0x498>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d01d      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a28      	ldr	r2, [pc, #160]	@ (8005a7c <HAL_DMA_Start_IT+0x49c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a27      	ldr	r2, [pc, #156]	@ (8005a80 <HAL_DMA_Start_IT+0x4a0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a25      	ldr	r2, [pc, #148]	@ (8005a84 <HAL_DMA_Start_IT+0x4a4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a24      	ldr	r2, [pc, #144]	@ (8005a88 <HAL_DMA_Start_IT+0x4a8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <HAL_DMA_Start_IT+0x4ac>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_DMA_Start_IT+0x430>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a21      	ldr	r2, [pc, #132]	@ (8005a90 <HAL_DMA_Start_IT+0x4b0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <HAL_DMA_Start_IT+0x442>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e012      	b.n	8005a48 <HAL_DMA_Start_IT+0x468>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e009      	b.n	8005a48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40020010 	.word	0x40020010
 8005a58:	40020028 	.word	0x40020028
 8005a5c:	40020040 	.word	0x40020040
 8005a60:	40020058 	.word	0x40020058
 8005a64:	40020070 	.word	0x40020070
 8005a68:	40020088 	.word	0x40020088
 8005a6c:	400200a0 	.word	0x400200a0
 8005a70:	400200b8 	.word	0x400200b8
 8005a74:	40020410 	.word	0x40020410
 8005a78:	40020428 	.word	0x40020428
 8005a7c:	40020440 	.word	0x40020440
 8005a80:	40020458 	.word	0x40020458
 8005a84:	40020470 	.word	0x40020470
 8005a88:	40020488 	.word	0x40020488
 8005a8c:	400204a0 	.word	0x400204a0
 8005a90:	400204b8 	.word	0x400204b8
 8005a94:	58025408 	.word	0x58025408
 8005a98:	5802541c 	.word	0x5802541c
 8005a9c:	58025430 	.word	0x58025430
 8005aa0:	58025444 	.word	0x58025444
 8005aa4:	58025458 	.word	0x58025458
 8005aa8:	5802546c 	.word	0x5802546c
 8005aac:	58025480 	.word	0x58025480
 8005ab0:	58025494 	.word	0x58025494

08005ab4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005abc:	f7fd f83a 	bl	8002b34 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e2dc      	b.n	8006086 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d008      	beq.n	8005aea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2280      	movs	r2, #128	@ 0x80
 8005adc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e2cd      	b.n	8006086 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a76      	ldr	r2, [pc, #472]	@ (8005cc8 <HAL_DMA_Abort+0x214>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d04a      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a74      	ldr	r2, [pc, #464]	@ (8005ccc <HAL_DMA_Abort+0x218>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d045      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a73      	ldr	r2, [pc, #460]	@ (8005cd0 <HAL_DMA_Abort+0x21c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d040      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a71      	ldr	r2, [pc, #452]	@ (8005cd4 <HAL_DMA_Abort+0x220>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d03b      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a70      	ldr	r2, [pc, #448]	@ (8005cd8 <HAL_DMA_Abort+0x224>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d036      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6e      	ldr	r2, [pc, #440]	@ (8005cdc <HAL_DMA_Abort+0x228>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d031      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce0 <HAL_DMA_Abort+0x22c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d02c      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a6b      	ldr	r2, [pc, #428]	@ (8005ce4 <HAL_DMA_Abort+0x230>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d027      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8005ce8 <HAL_DMA_Abort+0x234>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a68      	ldr	r2, [pc, #416]	@ (8005cec <HAL_DMA_Abort+0x238>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01d      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a67      	ldr	r2, [pc, #412]	@ (8005cf0 <HAL_DMA_Abort+0x23c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a65      	ldr	r2, [pc, #404]	@ (8005cf4 <HAL_DMA_Abort+0x240>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a64      	ldr	r2, [pc, #400]	@ (8005cf8 <HAL_DMA_Abort+0x244>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a62      	ldr	r2, [pc, #392]	@ (8005cfc <HAL_DMA_Abort+0x248>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a61      	ldr	r2, [pc, #388]	@ (8005d00 <HAL_DMA_Abort+0x24c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_DMA_Abort+0xd6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a5f      	ldr	r2, [pc, #380]	@ (8005d04 <HAL_DMA_Abort+0x250>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d101      	bne.n	8005b8e <HAL_DMA_Abort+0xda>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <HAL_DMA_Abort+0xdc>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d013      	beq.n	8005bbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 021e 	bic.w	r2, r2, #30
 8005ba2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bb2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e00a      	b.n	8005bd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 020e 	bic.w	r2, r2, #14
 8005bca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8005cc8 <HAL_DMA_Abort+0x214>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d072      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a3a      	ldr	r2, [pc, #232]	@ (8005ccc <HAL_DMA_Abort+0x218>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d06d      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a39      	ldr	r2, [pc, #228]	@ (8005cd0 <HAL_DMA_Abort+0x21c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d068      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a37      	ldr	r2, [pc, #220]	@ (8005cd4 <HAL_DMA_Abort+0x220>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d063      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a36      	ldr	r2, [pc, #216]	@ (8005cd8 <HAL_DMA_Abort+0x224>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d05e      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a34      	ldr	r2, [pc, #208]	@ (8005cdc <HAL_DMA_Abort+0x228>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d059      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a33      	ldr	r2, [pc, #204]	@ (8005ce0 <HAL_DMA_Abort+0x22c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d054      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ce4 <HAL_DMA_Abort+0x230>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d04f      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a30      	ldr	r2, [pc, #192]	@ (8005ce8 <HAL_DMA_Abort+0x234>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d04a      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2e      	ldr	r2, [pc, #184]	@ (8005cec <HAL_DMA_Abort+0x238>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d045      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf0 <HAL_DMA_Abort+0x23c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d040      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf4 <HAL_DMA_Abort+0x240>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d03b      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf8 <HAL_DMA_Abort+0x244>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d036      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a28      	ldr	r2, [pc, #160]	@ (8005cfc <HAL_DMA_Abort+0x248>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d031      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a27      	ldr	r2, [pc, #156]	@ (8005d00 <HAL_DMA_Abort+0x24c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d02c      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	@ (8005d04 <HAL_DMA_Abort+0x250>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d027      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a24      	ldr	r2, [pc, #144]	@ (8005d08 <HAL_DMA_Abort+0x254>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a22      	ldr	r2, [pc, #136]	@ (8005d0c <HAL_DMA_Abort+0x258>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a21      	ldr	r2, [pc, #132]	@ (8005d10 <HAL_DMA_Abort+0x25c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_DMA_Abort+0x260>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <HAL_DMA_Abort+0x264>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d1c <HAL_DMA_Abort+0x268>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <HAL_DMA_Abort+0x26c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_DMA_Abort+0x20e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <HAL_DMA_Abort+0x270>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d132      	bne.n	8005d28 <HAL_DMA_Abort+0x274>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e031      	b.n	8005d2a <HAL_DMA_Abort+0x276>
 8005cc6:	bf00      	nop
 8005cc8:	40020010 	.word	0x40020010
 8005ccc:	40020028 	.word	0x40020028
 8005cd0:	40020040 	.word	0x40020040
 8005cd4:	40020058 	.word	0x40020058
 8005cd8:	40020070 	.word	0x40020070
 8005cdc:	40020088 	.word	0x40020088
 8005ce0:	400200a0 	.word	0x400200a0
 8005ce4:	400200b8 	.word	0x400200b8
 8005ce8:	40020410 	.word	0x40020410
 8005cec:	40020428 	.word	0x40020428
 8005cf0:	40020440 	.word	0x40020440
 8005cf4:	40020458 	.word	0x40020458
 8005cf8:	40020470 	.word	0x40020470
 8005cfc:	40020488 	.word	0x40020488
 8005d00:	400204a0 	.word	0x400204a0
 8005d04:	400204b8 	.word	0x400204b8
 8005d08:	58025408 	.word	0x58025408
 8005d0c:	5802541c 	.word	0x5802541c
 8005d10:	58025430 	.word	0x58025430
 8005d14:	58025444 	.word	0x58025444
 8005d18:	58025458 	.word	0x58025458
 8005d1c:	5802546c 	.word	0x5802546c
 8005d20:	58025480 	.word	0x58025480
 8005d24:	58025494 	.word	0x58025494
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a6d      	ldr	r2, [pc, #436]	@ (8005ef8 <HAL_DMA_Abort+0x444>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d04a      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a6b      	ldr	r2, [pc, #428]	@ (8005efc <HAL_DMA_Abort+0x448>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d045      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a6a      	ldr	r2, [pc, #424]	@ (8005f00 <HAL_DMA_Abort+0x44c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d040      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a68      	ldr	r2, [pc, #416]	@ (8005f04 <HAL_DMA_Abort+0x450>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d03b      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a67      	ldr	r2, [pc, #412]	@ (8005f08 <HAL_DMA_Abort+0x454>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d036      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a65      	ldr	r2, [pc, #404]	@ (8005f0c <HAL_DMA_Abort+0x458>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d031      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a64      	ldr	r2, [pc, #400]	@ (8005f10 <HAL_DMA_Abort+0x45c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d02c      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a62      	ldr	r2, [pc, #392]	@ (8005f14 <HAL_DMA_Abort+0x460>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d027      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a61      	ldr	r2, [pc, #388]	@ (8005f18 <HAL_DMA_Abort+0x464>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d022      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a5f      	ldr	r2, [pc, #380]	@ (8005f1c <HAL_DMA_Abort+0x468>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01d      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a5e      	ldr	r2, [pc, #376]	@ (8005f20 <HAL_DMA_Abort+0x46c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d018      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5c      	ldr	r2, [pc, #368]	@ (8005f24 <HAL_DMA_Abort+0x470>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a5b      	ldr	r2, [pc, #364]	@ (8005f28 <HAL_DMA_Abort+0x474>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a59      	ldr	r2, [pc, #356]	@ (8005f2c <HAL_DMA_Abort+0x478>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a58      	ldr	r2, [pc, #352]	@ (8005f30 <HAL_DMA_Abort+0x47c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_DMA_Abort+0x32a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a56      	ldr	r2, [pc, #344]	@ (8005f34 <HAL_DMA_Abort+0x480>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d108      	bne.n	8005df0 <HAL_DMA_Abort+0x33c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e007      	b.n	8005e00 <HAL_DMA_Abort+0x34c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e00:	e013      	b.n	8005e2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e02:	f7fc fe97 	bl	8002b34 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b05      	cmp	r3, #5
 8005e0e:	d90c      	bls.n	8005e2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e12d      	b.n	8006086 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e5      	bne.n	8005e02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ef8 <HAL_DMA_Abort+0x444>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d04a      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2d      	ldr	r2, [pc, #180]	@ (8005efc <HAL_DMA_Abort+0x448>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d045      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005f00 <HAL_DMA_Abort+0x44c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d040      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2a      	ldr	r2, [pc, #168]	@ (8005f04 <HAL_DMA_Abort+0x450>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d03b      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a29      	ldr	r2, [pc, #164]	@ (8005f08 <HAL_DMA_Abort+0x454>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d036      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a27      	ldr	r2, [pc, #156]	@ (8005f0c <HAL_DMA_Abort+0x458>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d031      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a26      	ldr	r2, [pc, #152]	@ (8005f10 <HAL_DMA_Abort+0x45c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d02c      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a24      	ldr	r2, [pc, #144]	@ (8005f14 <HAL_DMA_Abort+0x460>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d027      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a23      	ldr	r2, [pc, #140]	@ (8005f18 <HAL_DMA_Abort+0x464>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a21      	ldr	r2, [pc, #132]	@ (8005f1c <HAL_DMA_Abort+0x468>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01d      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a20      	ldr	r2, [pc, #128]	@ (8005f20 <HAL_DMA_Abort+0x46c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f24 <HAL_DMA_Abort+0x470>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f28 <HAL_DMA_Abort+0x474>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f2c <HAL_DMA_Abort+0x478>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f30 <HAL_DMA_Abort+0x47c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_DMA_Abort+0x422>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <HAL_DMA_Abort+0x480>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <HAL_DMA_Abort+0x426>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_DMA_Abort+0x428>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d02b      	beq.n	8005f38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	223f      	movs	r2, #63	@ 0x3f
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	e02a      	b.n	8005f4e <HAL_DMA_Abort+0x49a>
 8005ef8:	40020010 	.word	0x40020010
 8005efc:	40020028 	.word	0x40020028
 8005f00:	40020040 	.word	0x40020040
 8005f04:	40020058 	.word	0x40020058
 8005f08:	40020070 	.word	0x40020070
 8005f0c:	40020088 	.word	0x40020088
 8005f10:	400200a0 	.word	0x400200a0
 8005f14:	400200b8 	.word	0x400200b8
 8005f18:	40020410 	.word	0x40020410
 8005f1c:	40020428 	.word	0x40020428
 8005f20:	40020440 	.word	0x40020440
 8005f24:	40020458 	.word	0x40020458
 8005f28:	40020470 	.word	0x40020470
 8005f2c:	40020488 	.word	0x40020488
 8005f30:	400204a0 	.word	0x400204a0
 8005f34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2201      	movs	r2, #1
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4f      	ldr	r2, [pc, #316]	@ (8006090 <HAL_DMA_Abort+0x5dc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d072      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8006094 <HAL_DMA_Abort+0x5e0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d06d      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a4c      	ldr	r2, [pc, #304]	@ (8006098 <HAL_DMA_Abort+0x5e4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d068      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a4a      	ldr	r2, [pc, #296]	@ (800609c <HAL_DMA_Abort+0x5e8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d063      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a49      	ldr	r2, [pc, #292]	@ (80060a0 <HAL_DMA_Abort+0x5ec>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d05e      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a47      	ldr	r2, [pc, #284]	@ (80060a4 <HAL_DMA_Abort+0x5f0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d059      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a46      	ldr	r2, [pc, #280]	@ (80060a8 <HAL_DMA_Abort+0x5f4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d054      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a44      	ldr	r2, [pc, #272]	@ (80060ac <HAL_DMA_Abort+0x5f8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04f      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a43      	ldr	r2, [pc, #268]	@ (80060b0 <HAL_DMA_Abort+0x5fc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d04a      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a41      	ldr	r2, [pc, #260]	@ (80060b4 <HAL_DMA_Abort+0x600>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d045      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a40      	ldr	r2, [pc, #256]	@ (80060b8 <HAL_DMA_Abort+0x604>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d040      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80060bc <HAL_DMA_Abort+0x608>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d03b      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3d      	ldr	r2, [pc, #244]	@ (80060c0 <HAL_DMA_Abort+0x60c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d036      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3b      	ldr	r2, [pc, #236]	@ (80060c4 <HAL_DMA_Abort+0x610>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d031      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a3a      	ldr	r2, [pc, #232]	@ (80060c8 <HAL_DMA_Abort+0x614>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d02c      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a38      	ldr	r2, [pc, #224]	@ (80060cc <HAL_DMA_Abort+0x618>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d027      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a37      	ldr	r2, [pc, #220]	@ (80060d0 <HAL_DMA_Abort+0x61c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d022      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a35      	ldr	r2, [pc, #212]	@ (80060d4 <HAL_DMA_Abort+0x620>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01d      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a34      	ldr	r2, [pc, #208]	@ (80060d8 <HAL_DMA_Abort+0x624>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d018      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a32      	ldr	r2, [pc, #200]	@ (80060dc <HAL_DMA_Abort+0x628>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a31      	ldr	r2, [pc, #196]	@ (80060e0 <HAL_DMA_Abort+0x62c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2f      	ldr	r2, [pc, #188]	@ (80060e4 <HAL_DMA_Abort+0x630>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <HAL_DMA_Abort+0x634>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_DMA_Abort+0x58a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2c      	ldr	r2, [pc, #176]	@ (80060ec <HAL_DMA_Abort+0x638>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <HAL_DMA_Abort+0x58e>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_DMA_Abort+0x590>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d015      	beq.n	8006074 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006050:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00c      	beq.n	8006074 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006064:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006068:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006072:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40020010 	.word	0x40020010
 8006094:	40020028 	.word	0x40020028
 8006098:	40020040 	.word	0x40020040
 800609c:	40020058 	.word	0x40020058
 80060a0:	40020070 	.word	0x40020070
 80060a4:	40020088 	.word	0x40020088
 80060a8:	400200a0 	.word	0x400200a0
 80060ac:	400200b8 	.word	0x400200b8
 80060b0:	40020410 	.word	0x40020410
 80060b4:	40020428 	.word	0x40020428
 80060b8:	40020440 	.word	0x40020440
 80060bc:	40020458 	.word	0x40020458
 80060c0:	40020470 	.word	0x40020470
 80060c4:	40020488 	.word	0x40020488
 80060c8:	400204a0 	.word	0x400204a0
 80060cc:	400204b8 	.word	0x400204b8
 80060d0:	58025408 	.word	0x58025408
 80060d4:	5802541c 	.word	0x5802541c
 80060d8:	58025430 	.word	0x58025430
 80060dc:	58025444 	.word	0x58025444
 80060e0:	58025458 	.word	0x58025458
 80060e4:	5802546c 	.word	0x5802546c
 80060e8:	58025480 	.word	0x58025480
 80060ec:	58025494 	.word	0x58025494

080060f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e237      	b.n	8006572 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d004      	beq.n	8006118 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2280      	movs	r2, #128	@ 0x80
 8006112:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e22c      	b.n	8006572 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5c      	ldr	r2, [pc, #368]	@ (8006290 <HAL_DMA_Abort_IT+0x1a0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d04a      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a5b      	ldr	r2, [pc, #364]	@ (8006294 <HAL_DMA_Abort_IT+0x1a4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d045      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a59      	ldr	r2, [pc, #356]	@ (8006298 <HAL_DMA_Abort_IT+0x1a8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d040      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a58      	ldr	r2, [pc, #352]	@ (800629c <HAL_DMA_Abort_IT+0x1ac>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d03b      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a56      	ldr	r2, [pc, #344]	@ (80062a0 <HAL_DMA_Abort_IT+0x1b0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d036      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a55      	ldr	r2, [pc, #340]	@ (80062a4 <HAL_DMA_Abort_IT+0x1b4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d031      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a53      	ldr	r2, [pc, #332]	@ (80062a8 <HAL_DMA_Abort_IT+0x1b8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d02c      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a52      	ldr	r2, [pc, #328]	@ (80062ac <HAL_DMA_Abort_IT+0x1bc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d027      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a50      	ldr	r2, [pc, #320]	@ (80062b0 <HAL_DMA_Abort_IT+0x1c0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d022      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4f      	ldr	r2, [pc, #316]	@ (80062b4 <HAL_DMA_Abort_IT+0x1c4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d01d      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a4d      	ldr	r2, [pc, #308]	@ (80062b8 <HAL_DMA_Abort_IT+0x1c8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d018      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4c      	ldr	r2, [pc, #304]	@ (80062bc <HAL_DMA_Abort_IT+0x1cc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a4a      	ldr	r2, [pc, #296]	@ (80062c0 <HAL_DMA_Abort_IT+0x1d0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00e      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a49      	ldr	r2, [pc, #292]	@ (80062c4 <HAL_DMA_Abort_IT+0x1d4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d009      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a47      	ldr	r2, [pc, #284]	@ (80062c8 <HAL_DMA_Abort_IT+0x1d8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d004      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xc8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a46      	ldr	r2, [pc, #280]	@ (80062cc <HAL_DMA_Abort_IT+0x1dc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d101      	bne.n	80061bc <HAL_DMA_Abort_IT+0xcc>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <HAL_DMA_Abort_IT+0xce>
 80061bc:	2300      	movs	r3, #0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8086 	beq.w	80062d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2204      	movs	r2, #4
 80061c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006290 <HAL_DMA_Abort_IT+0x1a0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d04a      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2e      	ldr	r2, [pc, #184]	@ (8006294 <HAL_DMA_Abort_IT+0x1a4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d045      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006298 <HAL_DMA_Abort_IT+0x1a8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d040      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2b      	ldr	r2, [pc, #172]	@ (800629c <HAL_DMA_Abort_IT+0x1ac>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d03b      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a29      	ldr	r2, [pc, #164]	@ (80062a0 <HAL_DMA_Abort_IT+0x1b0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d036      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a28      	ldr	r2, [pc, #160]	@ (80062a4 <HAL_DMA_Abort_IT+0x1b4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d031      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a26      	ldr	r2, [pc, #152]	@ (80062a8 <HAL_DMA_Abort_IT+0x1b8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d02c      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a25      	ldr	r2, [pc, #148]	@ (80062ac <HAL_DMA_Abort_IT+0x1bc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d027      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a23      	ldr	r2, [pc, #140]	@ (80062b0 <HAL_DMA_Abort_IT+0x1c0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <HAL_DMA_Abort_IT+0x1c4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01d      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a20      	ldr	r2, [pc, #128]	@ (80062b8 <HAL_DMA_Abort_IT+0x1c8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <HAL_DMA_Abort_IT+0x1cc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1d      	ldr	r2, [pc, #116]	@ (80062c0 <HAL_DMA_Abort_IT+0x1d0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1c      	ldr	r2, [pc, #112]	@ (80062c4 <HAL_DMA_Abort_IT+0x1d4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1a      	ldr	r2, [pc, #104]	@ (80062c8 <HAL_DMA_Abort_IT+0x1d8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_DMA_Abort_IT+0x17c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a19      	ldr	r2, [pc, #100]	@ (80062cc <HAL_DMA_Abort_IT+0x1dc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d108      	bne.n	800627e <HAL_DMA_Abort_IT+0x18e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e178      	b.n	8006570 <HAL_DMA_Abort_IT+0x480>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e16f      	b.n	8006570 <HAL_DMA_Abort_IT+0x480>
 8006290:	40020010 	.word	0x40020010
 8006294:	40020028 	.word	0x40020028
 8006298:	40020040 	.word	0x40020040
 800629c:	40020058 	.word	0x40020058
 80062a0:	40020070 	.word	0x40020070
 80062a4:	40020088 	.word	0x40020088
 80062a8:	400200a0 	.word	0x400200a0
 80062ac:	400200b8 	.word	0x400200b8
 80062b0:	40020410 	.word	0x40020410
 80062b4:	40020428 	.word	0x40020428
 80062b8:	40020440 	.word	0x40020440
 80062bc:	40020458 	.word	0x40020458
 80062c0:	40020470 	.word	0x40020470
 80062c4:	40020488 	.word	0x40020488
 80062c8:	400204a0 	.word	0x400204a0
 80062cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 020e 	bic.w	r2, r2, #14
 80062de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a6c      	ldr	r2, [pc, #432]	@ (8006498 <HAL_DMA_Abort_IT+0x3a8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d04a      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a6b      	ldr	r2, [pc, #428]	@ (800649c <HAL_DMA_Abort_IT+0x3ac>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d045      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a69      	ldr	r2, [pc, #420]	@ (80064a0 <HAL_DMA_Abort_IT+0x3b0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d040      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a68      	ldr	r2, [pc, #416]	@ (80064a4 <HAL_DMA_Abort_IT+0x3b4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d03b      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a66      	ldr	r2, [pc, #408]	@ (80064a8 <HAL_DMA_Abort_IT+0x3b8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d036      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a65      	ldr	r2, [pc, #404]	@ (80064ac <HAL_DMA_Abort_IT+0x3bc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d031      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a63      	ldr	r2, [pc, #396]	@ (80064b0 <HAL_DMA_Abort_IT+0x3c0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d02c      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a62      	ldr	r2, [pc, #392]	@ (80064b4 <HAL_DMA_Abort_IT+0x3c4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d027      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a60      	ldr	r2, [pc, #384]	@ (80064b8 <HAL_DMA_Abort_IT+0x3c8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d022      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a5f      	ldr	r2, [pc, #380]	@ (80064bc <HAL_DMA_Abort_IT+0x3cc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d01d      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a5d      	ldr	r2, [pc, #372]	@ (80064c0 <HAL_DMA_Abort_IT+0x3d0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a5c      	ldr	r2, [pc, #368]	@ (80064c4 <HAL_DMA_Abort_IT+0x3d4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a5a      	ldr	r2, [pc, #360]	@ (80064c8 <HAL_DMA_Abort_IT+0x3d8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a59      	ldr	r2, [pc, #356]	@ (80064cc <HAL_DMA_Abort_IT+0x3dc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a57      	ldr	r2, [pc, #348]	@ (80064d0 <HAL_DMA_Abort_IT+0x3e0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_DMA_Abort_IT+0x290>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a56      	ldr	r2, [pc, #344]	@ (80064d4 <HAL_DMA_Abort_IT+0x3e4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d108      	bne.n	8006392 <HAL_DMA_Abort_IT+0x2a2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e007      	b.n	80063a2 <HAL_DMA_Abort_IT+0x2b2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a3c      	ldr	r2, [pc, #240]	@ (8006498 <HAL_DMA_Abort_IT+0x3a8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d072      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a3a      	ldr	r2, [pc, #232]	@ (800649c <HAL_DMA_Abort_IT+0x3ac>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d06d      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a39      	ldr	r2, [pc, #228]	@ (80064a0 <HAL_DMA_Abort_IT+0x3b0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d068      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a37      	ldr	r2, [pc, #220]	@ (80064a4 <HAL_DMA_Abort_IT+0x3b4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d063      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a36      	ldr	r2, [pc, #216]	@ (80064a8 <HAL_DMA_Abort_IT+0x3b8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d05e      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a34      	ldr	r2, [pc, #208]	@ (80064ac <HAL_DMA_Abort_IT+0x3bc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d059      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a33      	ldr	r2, [pc, #204]	@ (80064b0 <HAL_DMA_Abort_IT+0x3c0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d054      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a31      	ldr	r2, [pc, #196]	@ (80064b4 <HAL_DMA_Abort_IT+0x3c4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d04f      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a30      	ldr	r2, [pc, #192]	@ (80064b8 <HAL_DMA_Abort_IT+0x3c8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04a      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2e      	ldr	r2, [pc, #184]	@ (80064bc <HAL_DMA_Abort_IT+0x3cc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d045      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a2d      	ldr	r2, [pc, #180]	@ (80064c0 <HAL_DMA_Abort_IT+0x3d0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2b      	ldr	r2, [pc, #172]	@ (80064c4 <HAL_DMA_Abort_IT+0x3d4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d03b      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2a      	ldr	r2, [pc, #168]	@ (80064c8 <HAL_DMA_Abort_IT+0x3d8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d036      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a28      	ldr	r2, [pc, #160]	@ (80064cc <HAL_DMA_Abort_IT+0x3dc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a27      	ldr	r2, [pc, #156]	@ (80064d0 <HAL_DMA_Abort_IT+0x3e0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d02c      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a25      	ldr	r2, [pc, #148]	@ (80064d4 <HAL_DMA_Abort_IT+0x3e4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d027      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a24      	ldr	r2, [pc, #144]	@ (80064d8 <HAL_DMA_Abort_IT+0x3e8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a22      	ldr	r2, [pc, #136]	@ (80064dc <HAL_DMA_Abort_IT+0x3ec>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01d      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a21      	ldr	r2, [pc, #132]	@ (80064e0 <HAL_DMA_Abort_IT+0x3f0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1f      	ldr	r2, [pc, #124]	@ (80064e4 <HAL_DMA_Abort_IT+0x3f4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1e      	ldr	r2, [pc, #120]	@ (80064e8 <HAL_DMA_Abort_IT+0x3f8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1c      	ldr	r2, [pc, #112]	@ (80064ec <HAL_DMA_Abort_IT+0x3fc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1b      	ldr	r2, [pc, #108]	@ (80064f0 <HAL_DMA_Abort_IT+0x400>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_DMA_Abort_IT+0x3a2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a19      	ldr	r2, [pc, #100]	@ (80064f4 <HAL_DMA_Abort_IT+0x404>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d132      	bne.n	80064f8 <HAL_DMA_Abort_IT+0x408>
 8006492:	2301      	movs	r3, #1
 8006494:	e031      	b.n	80064fa <HAL_DMA_Abort_IT+0x40a>
 8006496:	bf00      	nop
 8006498:	40020010 	.word	0x40020010
 800649c:	40020028 	.word	0x40020028
 80064a0:	40020040 	.word	0x40020040
 80064a4:	40020058 	.word	0x40020058
 80064a8:	40020070 	.word	0x40020070
 80064ac:	40020088 	.word	0x40020088
 80064b0:	400200a0 	.word	0x400200a0
 80064b4:	400200b8 	.word	0x400200b8
 80064b8:	40020410 	.word	0x40020410
 80064bc:	40020428 	.word	0x40020428
 80064c0:	40020440 	.word	0x40020440
 80064c4:	40020458 	.word	0x40020458
 80064c8:	40020470 	.word	0x40020470
 80064cc:	40020488 	.word	0x40020488
 80064d0:	400204a0 	.word	0x400204a0
 80064d4:	400204b8 	.word	0x400204b8
 80064d8:	58025408 	.word	0x58025408
 80064dc:	5802541c 	.word	0x5802541c
 80064e0:	58025430 	.word	0x58025430
 80064e4:	58025444 	.word	0x58025444
 80064e8:	58025458 	.word	0x58025458
 80064ec:	5802546c 	.word	0x5802546c
 80064f0:	58025480 	.word	0x58025480
 80064f4:	58025494 	.word	0x58025494
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d028      	beq.n	8006550 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800650c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	2201      	movs	r2, #1
 800651e:	409a      	lsls	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800652c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00c      	beq.n	8006550 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006544:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800654e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop

0800657c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	@ 0x28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006588:	4b67      	ldr	r3, [pc, #412]	@ (8006728 <HAL_DMA_IRQHandler+0x1ac>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a67      	ldr	r2, [pc, #412]	@ (800672c <HAL_DMA_IRQHandler+0x1b0>)
 800658e:	fba2 2303 	umull	r2, r3, r2, r3
 8006592:	0a9b      	lsrs	r3, r3, #10
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a5f      	ldr	r2, [pc, #380]	@ (8006730 <HAL_DMA_IRQHandler+0x1b4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d04a      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006734 <HAL_DMA_IRQHandler+0x1b8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d045      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a5c      	ldr	r2, [pc, #368]	@ (8006738 <HAL_DMA_IRQHandler+0x1bc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d040      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a5a      	ldr	r2, [pc, #360]	@ (800673c <HAL_DMA_IRQHandler+0x1c0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d03b      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a59      	ldr	r2, [pc, #356]	@ (8006740 <HAL_DMA_IRQHandler+0x1c4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d036      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a57      	ldr	r2, [pc, #348]	@ (8006744 <HAL_DMA_IRQHandler+0x1c8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d031      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a56      	ldr	r2, [pc, #344]	@ (8006748 <HAL_DMA_IRQHandler+0x1cc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d02c      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a54      	ldr	r2, [pc, #336]	@ (800674c <HAL_DMA_IRQHandler+0x1d0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d027      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a53      	ldr	r2, [pc, #332]	@ (8006750 <HAL_DMA_IRQHandler+0x1d4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d022      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a51      	ldr	r2, [pc, #324]	@ (8006754 <HAL_DMA_IRQHandler+0x1d8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01d      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a50      	ldr	r2, [pc, #320]	@ (8006758 <HAL_DMA_IRQHandler+0x1dc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d018      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a4e      	ldr	r2, [pc, #312]	@ (800675c <HAL_DMA_IRQHandler+0x1e0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4d      	ldr	r2, [pc, #308]	@ (8006760 <HAL_DMA_IRQHandler+0x1e4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00e      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a4b      	ldr	r2, [pc, #300]	@ (8006764 <HAL_DMA_IRQHandler+0x1e8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d009      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a4a      	ldr	r2, [pc, #296]	@ (8006768 <HAL_DMA_IRQHandler+0x1ec>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d004      	beq.n	800664e <HAL_DMA_IRQHandler+0xd2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a48      	ldr	r2, [pc, #288]	@ (800676c <HAL_DMA_IRQHandler+0x1f0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d101      	bne.n	8006652 <HAL_DMA_IRQHandler+0xd6>
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <HAL_DMA_IRQHandler+0xd8>
 8006652:	2300      	movs	r3, #0
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 842b 	beq.w	8006eb0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2208      	movs	r2, #8
 8006664:	409a      	lsls	r2, r3
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80a2 	beq.w	80067b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a2e      	ldr	r2, [pc, #184]	@ (8006730 <HAL_DMA_IRQHandler+0x1b4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d04a      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2d      	ldr	r2, [pc, #180]	@ (8006734 <HAL_DMA_IRQHandler+0x1b8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d045      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2b      	ldr	r2, [pc, #172]	@ (8006738 <HAL_DMA_IRQHandler+0x1bc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d040      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2a      	ldr	r2, [pc, #168]	@ (800673c <HAL_DMA_IRQHandler+0x1c0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d03b      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a28      	ldr	r2, [pc, #160]	@ (8006740 <HAL_DMA_IRQHandler+0x1c4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d036      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a27      	ldr	r2, [pc, #156]	@ (8006744 <HAL_DMA_IRQHandler+0x1c8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d031      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a25      	ldr	r2, [pc, #148]	@ (8006748 <HAL_DMA_IRQHandler+0x1cc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d02c      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a24      	ldr	r2, [pc, #144]	@ (800674c <HAL_DMA_IRQHandler+0x1d0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d027      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a22      	ldr	r2, [pc, #136]	@ (8006750 <HAL_DMA_IRQHandler+0x1d4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d022      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a21      	ldr	r2, [pc, #132]	@ (8006754 <HAL_DMA_IRQHandler+0x1d8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d01d      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006758 <HAL_DMA_IRQHandler+0x1dc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d018      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1e      	ldr	r2, [pc, #120]	@ (800675c <HAL_DMA_IRQHandler+0x1e0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006760 <HAL_DMA_IRQHandler+0x1e4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00e      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006764 <HAL_DMA_IRQHandler+0x1e8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d009      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a19      	ldr	r2, [pc, #100]	@ (8006768 <HAL_DMA_IRQHandler+0x1ec>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <HAL_DMA_IRQHandler+0x194>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a18      	ldr	r2, [pc, #96]	@ (800676c <HAL_DMA_IRQHandler+0x1f0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d12f      	bne.n	8006770 <HAL_DMA_IRQHandler+0x1f4>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf14      	ite	ne
 800671e:	2301      	movne	r3, #1
 8006720:	2300      	moveq	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	e02e      	b.n	8006784 <HAL_DMA_IRQHandler+0x208>
 8006726:	bf00      	nop
 8006728:	24000050 	.word	0x24000050
 800672c:	1b4e81b5 	.word	0x1b4e81b5
 8006730:	40020010 	.word	0x40020010
 8006734:	40020028 	.word	0x40020028
 8006738:	40020040 	.word	0x40020040
 800673c:	40020058 	.word	0x40020058
 8006740:	40020070 	.word	0x40020070
 8006744:	40020088 	.word	0x40020088
 8006748:	400200a0 	.word	0x400200a0
 800674c:	400200b8 	.word	0x400200b8
 8006750:	40020410 	.word	0x40020410
 8006754:	40020428 	.word	0x40020428
 8006758:	40020440 	.word	0x40020440
 800675c:	40020458 	.word	0x40020458
 8006760:	40020470 	.word	0x40020470
 8006764:	40020488 	.word	0x40020488
 8006768:	400204a0 	.word	0x400204a0
 800676c:	400204b8 	.word	0x400204b8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	bf14      	ite	ne
 800677e:	2301      	movne	r3, #1
 8006780:	2300      	moveq	r3, #0
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d015      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0204 	bic.w	r2, r2, #4
 8006796:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679c:	f003 031f 	and.w	r3, r3, #31
 80067a0:	2208      	movs	r2, #8
 80067a2:	409a      	lsls	r2, r3
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ac:	f043 0201 	orr.w	r2, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	fa22 f303 	lsr.w	r3, r2, r3
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d06e      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a69      	ldr	r2, [pc, #420]	@ (8006974 <HAL_DMA_IRQHandler+0x3f8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d04a      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a67      	ldr	r2, [pc, #412]	@ (8006978 <HAL_DMA_IRQHandler+0x3fc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d045      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a66      	ldr	r2, [pc, #408]	@ (800697c <HAL_DMA_IRQHandler+0x400>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d040      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a64      	ldr	r2, [pc, #400]	@ (8006980 <HAL_DMA_IRQHandler+0x404>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d03b      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a63      	ldr	r2, [pc, #396]	@ (8006984 <HAL_DMA_IRQHandler+0x408>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d036      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a61      	ldr	r2, [pc, #388]	@ (8006988 <HAL_DMA_IRQHandler+0x40c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d031      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a60      	ldr	r2, [pc, #384]	@ (800698c <HAL_DMA_IRQHandler+0x410>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d02c      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a5e      	ldr	r2, [pc, #376]	@ (8006990 <HAL_DMA_IRQHandler+0x414>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d027      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a5d      	ldr	r2, [pc, #372]	@ (8006994 <HAL_DMA_IRQHandler+0x418>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a5b      	ldr	r2, [pc, #364]	@ (8006998 <HAL_DMA_IRQHandler+0x41c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01d      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a5a      	ldr	r2, [pc, #360]	@ (800699c <HAL_DMA_IRQHandler+0x420>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a58      	ldr	r2, [pc, #352]	@ (80069a0 <HAL_DMA_IRQHandler+0x424>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a57      	ldr	r2, [pc, #348]	@ (80069a4 <HAL_DMA_IRQHandler+0x428>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a55      	ldr	r2, [pc, #340]	@ (80069a8 <HAL_DMA_IRQHandler+0x42c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a54      	ldr	r2, [pc, #336]	@ (80069ac <HAL_DMA_IRQHandler+0x430>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_DMA_IRQHandler+0x2ee>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a52      	ldr	r2, [pc, #328]	@ (80069b0 <HAL_DMA_IRQHandler+0x434>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d10a      	bne.n	8006880 <HAL_DMA_IRQHandler+0x304>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	e003      	b.n	8006888 <HAL_DMA_IRQHandler+0x30c>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00d      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2201      	movs	r2, #1
 8006896:	409a      	lsls	r2, r3
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	f043 0202 	orr.w	r2, r3, #2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2204      	movs	r2, #4
 80068b2:	409a      	lsls	r2, r3
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 808f 	beq.w	80069dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <HAL_DMA_IRQHandler+0x3f8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d04a      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <HAL_DMA_IRQHandler+0x3fc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d045      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a29      	ldr	r2, [pc, #164]	@ (800697c <HAL_DMA_IRQHandler+0x400>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d040      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a27      	ldr	r2, [pc, #156]	@ (8006980 <HAL_DMA_IRQHandler+0x404>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d03b      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a26      	ldr	r2, [pc, #152]	@ (8006984 <HAL_DMA_IRQHandler+0x408>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d036      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a24      	ldr	r2, [pc, #144]	@ (8006988 <HAL_DMA_IRQHandler+0x40c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d031      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a23      	ldr	r2, [pc, #140]	@ (800698c <HAL_DMA_IRQHandler+0x410>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d02c      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a21      	ldr	r2, [pc, #132]	@ (8006990 <HAL_DMA_IRQHandler+0x414>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d027      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a20      	ldr	r2, [pc, #128]	@ (8006994 <HAL_DMA_IRQHandler+0x418>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d022      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <HAL_DMA_IRQHandler+0x41c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01d      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1d      	ldr	r2, [pc, #116]	@ (800699c <HAL_DMA_IRQHandler+0x420>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d018      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1b      	ldr	r2, [pc, #108]	@ (80069a0 <HAL_DMA_IRQHandler+0x424>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1a      	ldr	r2, [pc, #104]	@ (80069a4 <HAL_DMA_IRQHandler+0x428>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a18      	ldr	r2, [pc, #96]	@ (80069a8 <HAL_DMA_IRQHandler+0x42c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a17      	ldr	r2, [pc, #92]	@ (80069ac <HAL_DMA_IRQHandler+0x430>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_DMA_IRQHandler+0x3e2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <HAL_DMA_IRQHandler+0x434>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d12a      	bne.n	80069b4 <HAL_DMA_IRQHandler+0x438>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e023      	b.n	80069bc <HAL_DMA_IRQHandler+0x440>
 8006974:	40020010 	.word	0x40020010
 8006978:	40020028 	.word	0x40020028
 800697c:	40020040 	.word	0x40020040
 8006980:	40020058 	.word	0x40020058
 8006984:	40020070 	.word	0x40020070
 8006988:	40020088 	.word	0x40020088
 800698c:	400200a0 	.word	0x400200a0
 8006990:	400200b8 	.word	0x400200b8
 8006994:	40020410 	.word	0x40020410
 8006998:	40020428 	.word	0x40020428
 800699c:	40020440 	.word	0x40020440
 80069a0:	40020458 	.word	0x40020458
 80069a4:	40020470 	.word	0x40020470
 80069a8:	40020488 	.word	0x40020488
 80069ac:	400204a0 	.word	0x400204a0
 80069b0:	400204b8 	.word	0x400204b8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2300      	movs	r3, #0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00d      	beq.n	80069dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c4:	f003 031f 	and.w	r3, r3, #31
 80069c8:	2204      	movs	r2, #4
 80069ca:	409a      	lsls	r2, r3
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d4:	f043 0204 	orr.w	r2, r3, #4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2210      	movs	r2, #16
 80069e6:	409a      	lsls	r2, r3
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80a6 	beq.w	8006b3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a85      	ldr	r2, [pc, #532]	@ (8006c0c <HAL_DMA_IRQHandler+0x690>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d04a      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a83      	ldr	r2, [pc, #524]	@ (8006c10 <HAL_DMA_IRQHandler+0x694>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d045      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a82      	ldr	r2, [pc, #520]	@ (8006c14 <HAL_DMA_IRQHandler+0x698>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d040      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a80      	ldr	r2, [pc, #512]	@ (8006c18 <HAL_DMA_IRQHandler+0x69c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d03b      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7f      	ldr	r2, [pc, #508]	@ (8006c1c <HAL_DMA_IRQHandler+0x6a0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d036      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7d      	ldr	r2, [pc, #500]	@ (8006c20 <HAL_DMA_IRQHandler+0x6a4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d031      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a7c      	ldr	r2, [pc, #496]	@ (8006c24 <HAL_DMA_IRQHandler+0x6a8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d02c      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a7a      	ldr	r2, [pc, #488]	@ (8006c28 <HAL_DMA_IRQHandler+0x6ac>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d027      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a79      	ldr	r2, [pc, #484]	@ (8006c2c <HAL_DMA_IRQHandler+0x6b0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d022      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a77      	ldr	r2, [pc, #476]	@ (8006c30 <HAL_DMA_IRQHandler+0x6b4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01d      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a76      	ldr	r2, [pc, #472]	@ (8006c34 <HAL_DMA_IRQHandler+0x6b8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d018      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a74      	ldr	r2, [pc, #464]	@ (8006c38 <HAL_DMA_IRQHandler+0x6bc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a73      	ldr	r2, [pc, #460]	@ (8006c3c <HAL_DMA_IRQHandler+0x6c0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00e      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a71      	ldr	r2, [pc, #452]	@ (8006c40 <HAL_DMA_IRQHandler+0x6c4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d009      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a70      	ldr	r2, [pc, #448]	@ (8006c44 <HAL_DMA_IRQHandler+0x6c8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d004      	beq.n	8006a92 <HAL_DMA_IRQHandler+0x516>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8006c48 <HAL_DMA_IRQHandler+0x6cc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d10a      	bne.n	8006aa8 <HAL_DMA_IRQHandler+0x52c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	e009      	b.n	8006abc <HAL_DMA_IRQHandler+0x540>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d03e      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2210      	movs	r2, #16
 8006aca:	409a      	lsls	r2, r3
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d018      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d108      	bne.n	8006afe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d024      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
 8006afc:	e01f      	b.n	8006b3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d01b      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	e016      	b.n	8006b3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0208 	bic.w	r2, r2, #8
 8006b2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2220      	movs	r2, #32
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8110 	beq.w	8006d74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a2c      	ldr	r2, [pc, #176]	@ (8006c0c <HAL_DMA_IRQHandler+0x690>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d04a      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2b      	ldr	r2, [pc, #172]	@ (8006c10 <HAL_DMA_IRQHandler+0x694>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d045      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a29      	ldr	r2, [pc, #164]	@ (8006c14 <HAL_DMA_IRQHandler+0x698>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d040      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a28      	ldr	r2, [pc, #160]	@ (8006c18 <HAL_DMA_IRQHandler+0x69c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d03b      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a26      	ldr	r2, [pc, #152]	@ (8006c1c <HAL_DMA_IRQHandler+0x6a0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d036      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a25      	ldr	r2, [pc, #148]	@ (8006c20 <HAL_DMA_IRQHandler+0x6a4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d031      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a23      	ldr	r2, [pc, #140]	@ (8006c24 <HAL_DMA_IRQHandler+0x6a8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d02c      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a22      	ldr	r2, [pc, #136]	@ (8006c28 <HAL_DMA_IRQHandler+0x6ac>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d027      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a20      	ldr	r2, [pc, #128]	@ (8006c2c <HAL_DMA_IRQHandler+0x6b0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d022      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8006c30 <HAL_DMA_IRQHandler+0x6b4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d01d      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c34 <HAL_DMA_IRQHandler+0x6b8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c38 <HAL_DMA_IRQHandler+0x6bc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c3c <HAL_DMA_IRQHandler+0x6c0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a19      	ldr	r2, [pc, #100]	@ (8006c40 <HAL_DMA_IRQHandler+0x6c4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a17      	ldr	r2, [pc, #92]	@ (8006c44 <HAL_DMA_IRQHandler+0x6c8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x678>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <HAL_DMA_IRQHandler+0x6cc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d12b      	bne.n	8006c4c <HAL_DMA_IRQHandler+0x6d0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e02a      	b.n	8006c60 <HAL_DMA_IRQHandler+0x6e4>
 8006c0a:	bf00      	nop
 8006c0c:	40020010 	.word	0x40020010
 8006c10:	40020028 	.word	0x40020028
 8006c14:	40020040 	.word	0x40020040
 8006c18:	40020058 	.word	0x40020058
 8006c1c:	40020070 	.word	0x40020070
 8006c20:	40020088 	.word	0x40020088
 8006c24:	400200a0 	.word	0x400200a0
 8006c28:	400200b8 	.word	0x400200b8
 8006c2c:	40020410 	.word	0x40020410
 8006c30:	40020428 	.word	0x40020428
 8006c34:	40020440 	.word	0x40020440
 8006c38:	40020458 	.word	0x40020458
 8006c3c:	40020470 	.word	0x40020470
 8006c40:	40020488 	.word	0x40020488
 8006c44:	400204a0 	.word	0x400204a0
 8006c48:	400204b8 	.word	0x400204b8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bf14      	ite	ne
 8006c5a:	2301      	movne	r3, #1
 8006c5c:	2300      	moveq	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8087 	beq.w	8006d74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2220      	movs	r2, #32
 8006c70:	409a      	lsls	r2, r3
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d139      	bne.n	8006cf6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0216 	bic.w	r2, r2, #22
 8006c90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ca0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0x736>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0208 	bic.w	r2, r2, #8
 8006cc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	223f      	movs	r2, #63	@ 0x3f
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 834a 	beq.w	8007380 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
          }
          return;
 8006cf4:	e344      	b.n	8007380 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d018      	beq.n	8006d36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d108      	bne.n	8006d24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d02c      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
 8006d22:	e027      	b.n	8006d74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d023      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
 8006d34:	e01e      	b.n	8006d74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10f      	bne.n	8006d64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0210 	bic.w	r2, r2, #16
 8006d52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8306 	beq.w	800738a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8088 	beq.w	8006e9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2204      	movs	r2, #4
 8006d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a7a      	ldr	r2, [pc, #488]	@ (8006f84 <HAL_DMA_IRQHandler+0xa08>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d04a      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a79      	ldr	r2, [pc, #484]	@ (8006f88 <HAL_DMA_IRQHandler+0xa0c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d045      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a77      	ldr	r2, [pc, #476]	@ (8006f8c <HAL_DMA_IRQHandler+0xa10>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d040      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a76      	ldr	r2, [pc, #472]	@ (8006f90 <HAL_DMA_IRQHandler+0xa14>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d03b      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a74      	ldr	r2, [pc, #464]	@ (8006f94 <HAL_DMA_IRQHandler+0xa18>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d036      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a73      	ldr	r2, [pc, #460]	@ (8006f98 <HAL_DMA_IRQHandler+0xa1c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d031      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a71      	ldr	r2, [pc, #452]	@ (8006f9c <HAL_DMA_IRQHandler+0xa20>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d02c      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a70      	ldr	r2, [pc, #448]	@ (8006fa0 <HAL_DMA_IRQHandler+0xa24>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d027      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a6e      	ldr	r2, [pc, #440]	@ (8006fa4 <HAL_DMA_IRQHandler+0xa28>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d022      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a6d      	ldr	r2, [pc, #436]	@ (8006fa8 <HAL_DMA_IRQHandler+0xa2c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d01d      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a6b      	ldr	r2, [pc, #428]	@ (8006fac <HAL_DMA_IRQHandler+0xa30>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d018      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a6a      	ldr	r2, [pc, #424]	@ (8006fb0 <HAL_DMA_IRQHandler+0xa34>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d013      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a68      	ldr	r2, [pc, #416]	@ (8006fb4 <HAL_DMA_IRQHandler+0xa38>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00e      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a67      	ldr	r2, [pc, #412]	@ (8006fb8 <HAL_DMA_IRQHandler+0xa3c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d009      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a65      	ldr	r2, [pc, #404]	@ (8006fbc <HAL_DMA_IRQHandler+0xa40>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d004      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x8b8>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a64      	ldr	r2, [pc, #400]	@ (8006fc0 <HAL_DMA_IRQHandler+0xa44>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d108      	bne.n	8006e46 <HAL_DMA_IRQHandler+0x8ca>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e007      	b.n	8006e56 <HAL_DMA_IRQHandler+0x8da>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d307      	bcc.n	8006e72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f2      	bne.n	8006e56 <HAL_DMA_IRQHandler+0x8da>
 8006e70:	e000      	b.n	8006e74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006e72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2203      	movs	r2, #3
 8006e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006e8a:	e003      	b.n	8006e94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8272 	beq.w	800738a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	e26c      	b.n	800738a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a43      	ldr	r2, [pc, #268]	@ (8006fc4 <HAL_DMA_IRQHandler+0xa48>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x984>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a42      	ldr	r2, [pc, #264]	@ (8006fc8 <HAL_DMA_IRQHandler+0xa4c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x984>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a40      	ldr	r2, [pc, #256]	@ (8006fcc <HAL_DMA_IRQHandler+0xa50>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x984>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd0 <HAL_DMA_IRQHandler+0xa54>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x984>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a3d      	ldr	r2, [pc, #244]	@ (8006fd4 <HAL_DMA_IRQHandler+0xa58>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x984>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8006fd8 <HAL_DMA_IRQHandler+0xa5c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x984>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8006fdc <HAL_DMA_IRQHandler+0xa60>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x984>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a39      	ldr	r2, [pc, #228]	@ (8006fe0 <HAL_DMA_IRQHandler+0xa64>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d101      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x988>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <HAL_DMA_IRQHandler+0x98a>
 8006f04:	2300      	movs	r3, #0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 823f 	beq.w	800738a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	2204      	movs	r2, #4
 8006f1e:	409a      	lsls	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80cd 	beq.w	80070c4 <HAL_DMA_IRQHandler+0xb48>
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80c7 	beq.w	80070c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2204      	movs	r2, #4
 8006f40:	409a      	lsls	r2, r3
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d049      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 8210 	beq.w	8007384 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f6c:	e20a      	b.n	8007384 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8206 	beq.w	8007384 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f80:	e200      	b.n	8007384 <HAL_DMA_IRQHandler+0xe08>
 8006f82:	bf00      	nop
 8006f84:	40020010 	.word	0x40020010
 8006f88:	40020028 	.word	0x40020028
 8006f8c:	40020040 	.word	0x40020040
 8006f90:	40020058 	.word	0x40020058
 8006f94:	40020070 	.word	0x40020070
 8006f98:	40020088 	.word	0x40020088
 8006f9c:	400200a0 	.word	0x400200a0
 8006fa0:	400200b8 	.word	0x400200b8
 8006fa4:	40020410 	.word	0x40020410
 8006fa8:	40020428 	.word	0x40020428
 8006fac:	40020440 	.word	0x40020440
 8006fb0:	40020458 	.word	0x40020458
 8006fb4:	40020470 	.word	0x40020470
 8006fb8:	40020488 	.word	0x40020488
 8006fbc:	400204a0 	.word	0x400204a0
 8006fc0:	400204b8 	.word	0x400204b8
 8006fc4:	58025408 	.word	0x58025408
 8006fc8:	5802541c 	.word	0x5802541c
 8006fcc:	58025430 	.word	0x58025430
 8006fd0:	58025444 	.word	0x58025444
 8006fd4:	58025458 	.word	0x58025458
 8006fd8:	5802546c 	.word	0x5802546c
 8006fdc:	58025480 	.word	0x58025480
 8006fe0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d160      	bne.n	80070b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7f      	ldr	r2, [pc, #508]	@ (80071f0 <HAL_DMA_IRQHandler+0xc74>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d04a      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80071f4 <HAL_DMA_IRQHandler+0xc78>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d045      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a7c      	ldr	r2, [pc, #496]	@ (80071f8 <HAL_DMA_IRQHandler+0xc7c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d040      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a7a      	ldr	r2, [pc, #488]	@ (80071fc <HAL_DMA_IRQHandler+0xc80>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d03b      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a79      	ldr	r2, [pc, #484]	@ (8007200 <HAL_DMA_IRQHandler+0xc84>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d036      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a77      	ldr	r2, [pc, #476]	@ (8007204 <HAL_DMA_IRQHandler+0xc88>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d031      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a76      	ldr	r2, [pc, #472]	@ (8007208 <HAL_DMA_IRQHandler+0xc8c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d02c      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a74      	ldr	r2, [pc, #464]	@ (800720c <HAL_DMA_IRQHandler+0xc90>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d027      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a73      	ldr	r2, [pc, #460]	@ (8007210 <HAL_DMA_IRQHandler+0xc94>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d022      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a71      	ldr	r2, [pc, #452]	@ (8007214 <HAL_DMA_IRQHandler+0xc98>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a70      	ldr	r2, [pc, #448]	@ (8007218 <HAL_DMA_IRQHandler+0xc9c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d018      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a6e      	ldr	r2, [pc, #440]	@ (800721c <HAL_DMA_IRQHandler+0xca0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a6d      	ldr	r2, [pc, #436]	@ (8007220 <HAL_DMA_IRQHandler+0xca4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00e      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a6b      	ldr	r2, [pc, #428]	@ (8007224 <HAL_DMA_IRQHandler+0xca8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d009      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a6a      	ldr	r2, [pc, #424]	@ (8007228 <HAL_DMA_IRQHandler+0xcac>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_DMA_IRQHandler+0xb12>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a68      	ldr	r2, [pc, #416]	@ (800722c <HAL_DMA_IRQHandler+0xcb0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d108      	bne.n	80070a0 <HAL_DMA_IRQHandler+0xb24>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0208 	bic.w	r2, r2, #8
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e007      	b.n	80070b0 <HAL_DMA_IRQHandler+0xb34>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0204 	bic.w	r2, r2, #4
 80070ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8165 	beq.w	8007384 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070c2:	e15f      	b.n	8007384 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2202      	movs	r2, #2
 80070ce:	409a      	lsls	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80c5 	beq.w	8007264 <HAL_DMA_IRQHandler+0xce8>
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 80bf 	beq.w	8007264 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	2202      	movs	r2, #2
 80070f0:	409a      	lsls	r2, r3
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d018      	beq.n	8007132 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 813a 	beq.w	8007388 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800711c:	e134      	b.n	8007388 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8130 	beq.w	8007388 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007130:	e12a      	b.n	8007388 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	f040 8089 	bne.w	8007250 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2b      	ldr	r2, [pc, #172]	@ (80071f0 <HAL_DMA_IRQHandler+0xc74>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d04a      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a29      	ldr	r2, [pc, #164]	@ (80071f4 <HAL_DMA_IRQHandler+0xc78>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d045      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a28      	ldr	r2, [pc, #160]	@ (80071f8 <HAL_DMA_IRQHandler+0xc7c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d040      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a26      	ldr	r2, [pc, #152]	@ (80071fc <HAL_DMA_IRQHandler+0xc80>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d03b      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a25      	ldr	r2, [pc, #148]	@ (8007200 <HAL_DMA_IRQHandler+0xc84>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d036      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a23      	ldr	r2, [pc, #140]	@ (8007204 <HAL_DMA_IRQHandler+0xc88>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d031      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a22      	ldr	r2, [pc, #136]	@ (8007208 <HAL_DMA_IRQHandler+0xc8c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d02c      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a20      	ldr	r2, [pc, #128]	@ (800720c <HAL_DMA_IRQHandler+0xc90>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d027      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a1f      	ldr	r2, [pc, #124]	@ (8007210 <HAL_DMA_IRQHandler+0xc94>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d022      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1d      	ldr	r2, [pc, #116]	@ (8007214 <HAL_DMA_IRQHandler+0xc98>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01d      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <HAL_DMA_IRQHandler+0xc9c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d018      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1a      	ldr	r2, [pc, #104]	@ (800721c <HAL_DMA_IRQHandler+0xca0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a19      	ldr	r2, [pc, #100]	@ (8007220 <HAL_DMA_IRQHandler+0xca4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a17      	ldr	r2, [pc, #92]	@ (8007224 <HAL_DMA_IRQHandler+0xca8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a16      	ldr	r2, [pc, #88]	@ (8007228 <HAL_DMA_IRQHandler+0xcac>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_DMA_IRQHandler+0xc62>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a14      	ldr	r2, [pc, #80]	@ (800722c <HAL_DMA_IRQHandler+0xcb0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d128      	bne.n	8007230 <HAL_DMA_IRQHandler+0xcb4>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0214 	bic.w	r2, r2, #20
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e027      	b.n	8007240 <HAL_DMA_IRQHandler+0xcc4>
 80071f0:	40020010 	.word	0x40020010
 80071f4:	40020028 	.word	0x40020028
 80071f8:	40020040 	.word	0x40020040
 80071fc:	40020058 	.word	0x40020058
 8007200:	40020070 	.word	0x40020070
 8007204:	40020088 	.word	0x40020088
 8007208:	400200a0 	.word	0x400200a0
 800720c:	400200b8 	.word	0x400200b8
 8007210:	40020410 	.word	0x40020410
 8007214:	40020428 	.word	0x40020428
 8007218:	40020440 	.word	0x40020440
 800721c:	40020458 	.word	0x40020458
 8007220:	40020470 	.word	0x40020470
 8007224:	40020488 	.word	0x40020488
 8007228:	400204a0 	.word	0x400204a0
 800722c:	400204b8 	.word	0x400204b8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 020a 	bic.w	r2, r2, #10
 800723e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8097 	beq.w	8007388 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007262:	e091      	b.n	8007388 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2208      	movs	r2, #8
 800726e:	409a      	lsls	r2, r3
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4013      	ands	r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8088 	beq.w	800738a <HAL_DMA_IRQHandler+0xe0e>
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8082 	beq.w	800738a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a41      	ldr	r2, [pc, #260]	@ (8007390 <HAL_DMA_IRQHandler+0xe14>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d04a      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a3f      	ldr	r2, [pc, #252]	@ (8007394 <HAL_DMA_IRQHandler+0xe18>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d045      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a3e      	ldr	r2, [pc, #248]	@ (8007398 <HAL_DMA_IRQHandler+0xe1c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d040      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a3c      	ldr	r2, [pc, #240]	@ (800739c <HAL_DMA_IRQHandler+0xe20>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d03b      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a3b      	ldr	r2, [pc, #236]	@ (80073a0 <HAL_DMA_IRQHandler+0xe24>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d036      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a39      	ldr	r2, [pc, #228]	@ (80073a4 <HAL_DMA_IRQHandler+0xe28>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d031      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a38      	ldr	r2, [pc, #224]	@ (80073a8 <HAL_DMA_IRQHandler+0xe2c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d02c      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a36      	ldr	r2, [pc, #216]	@ (80073ac <HAL_DMA_IRQHandler+0xe30>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d027      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a35      	ldr	r2, [pc, #212]	@ (80073b0 <HAL_DMA_IRQHandler+0xe34>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d022      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a33      	ldr	r2, [pc, #204]	@ (80073b4 <HAL_DMA_IRQHandler+0xe38>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01d      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a32      	ldr	r2, [pc, #200]	@ (80073b8 <HAL_DMA_IRQHandler+0xe3c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a30      	ldr	r2, [pc, #192]	@ (80073bc <HAL_DMA_IRQHandler+0xe40>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a2f      	ldr	r2, [pc, #188]	@ (80073c0 <HAL_DMA_IRQHandler+0xe44>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2d      	ldr	r2, [pc, #180]	@ (80073c4 <HAL_DMA_IRQHandler+0xe48>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2c      	ldr	r2, [pc, #176]	@ (80073c8 <HAL_DMA_IRQHandler+0xe4c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_DMA_IRQHandler+0xdaa>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2a      	ldr	r2, [pc, #168]	@ (80073cc <HAL_DMA_IRQHandler+0xe50>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d108      	bne.n	8007338 <HAL_DMA_IRQHandler+0xdbc>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 021c 	bic.w	r2, r2, #28
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e007      	b.n	8007348 <HAL_DMA_IRQHandler+0xdcc>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 020e 	bic.w	r2, r2, #14
 8007346:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	2201      	movs	r2, #1
 8007352:	409a      	lsls	r2, r3
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d009      	beq.n	800738a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
 800737e:	e004      	b.n	800738a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007380:	bf00      	nop
 8007382:	e002      	b.n	800738a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007384:	bf00      	nop
 8007386:	e000      	b.n	800738a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007388:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800738a:	3728      	adds	r7, #40	@ 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40020010 	.word	0x40020010
 8007394:	40020028 	.word	0x40020028
 8007398:	40020040 	.word	0x40020040
 800739c:	40020058 	.word	0x40020058
 80073a0:	40020070 	.word	0x40020070
 80073a4:	40020088 	.word	0x40020088
 80073a8:	400200a0 	.word	0x400200a0
 80073ac:	400200b8 	.word	0x400200b8
 80073b0:	40020410 	.word	0x40020410
 80073b4:	40020428 	.word	0x40020428
 80073b8:	40020440 	.word	0x40020440
 80073bc:	40020458 	.word	0x40020458
 80073c0:	40020470 	.word	0x40020470
 80073c4:	40020488 	.word	0x40020488
 80073c8:	400204a0 	.word	0x400204a0
 80073cc:	400204b8 	.word	0x400204b8

080073d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a7f      	ldr	r2, [pc, #508]	@ (80075ec <DMA_SetConfig+0x21c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d072      	beq.n	80074da <DMA_SetConfig+0x10a>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a7d      	ldr	r2, [pc, #500]	@ (80075f0 <DMA_SetConfig+0x220>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d06d      	beq.n	80074da <DMA_SetConfig+0x10a>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a7c      	ldr	r2, [pc, #496]	@ (80075f4 <DMA_SetConfig+0x224>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d068      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a7a      	ldr	r2, [pc, #488]	@ (80075f8 <DMA_SetConfig+0x228>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d063      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a79      	ldr	r2, [pc, #484]	@ (80075fc <DMA_SetConfig+0x22c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d05e      	beq.n	80074da <DMA_SetConfig+0x10a>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a77      	ldr	r2, [pc, #476]	@ (8007600 <DMA_SetConfig+0x230>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d059      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a76      	ldr	r2, [pc, #472]	@ (8007604 <DMA_SetConfig+0x234>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d054      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a74      	ldr	r2, [pc, #464]	@ (8007608 <DMA_SetConfig+0x238>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d04f      	beq.n	80074da <DMA_SetConfig+0x10a>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a73      	ldr	r2, [pc, #460]	@ (800760c <DMA_SetConfig+0x23c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d04a      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a71      	ldr	r2, [pc, #452]	@ (8007610 <DMA_SetConfig+0x240>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d045      	beq.n	80074da <DMA_SetConfig+0x10a>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a70      	ldr	r2, [pc, #448]	@ (8007614 <DMA_SetConfig+0x244>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d040      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a6e      	ldr	r2, [pc, #440]	@ (8007618 <DMA_SetConfig+0x248>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d03b      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a6d      	ldr	r2, [pc, #436]	@ (800761c <DMA_SetConfig+0x24c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d036      	beq.n	80074da <DMA_SetConfig+0x10a>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a6b      	ldr	r2, [pc, #428]	@ (8007620 <DMA_SetConfig+0x250>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d031      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a6a      	ldr	r2, [pc, #424]	@ (8007624 <DMA_SetConfig+0x254>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d02c      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a68      	ldr	r2, [pc, #416]	@ (8007628 <DMA_SetConfig+0x258>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d027      	beq.n	80074da <DMA_SetConfig+0x10a>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a67      	ldr	r2, [pc, #412]	@ (800762c <DMA_SetConfig+0x25c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d022      	beq.n	80074da <DMA_SetConfig+0x10a>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a65      	ldr	r2, [pc, #404]	@ (8007630 <DMA_SetConfig+0x260>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01d      	beq.n	80074da <DMA_SetConfig+0x10a>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a64      	ldr	r2, [pc, #400]	@ (8007634 <DMA_SetConfig+0x264>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d018      	beq.n	80074da <DMA_SetConfig+0x10a>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a62      	ldr	r2, [pc, #392]	@ (8007638 <DMA_SetConfig+0x268>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <DMA_SetConfig+0x10a>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a61      	ldr	r2, [pc, #388]	@ (800763c <DMA_SetConfig+0x26c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00e      	beq.n	80074da <DMA_SetConfig+0x10a>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5f      	ldr	r2, [pc, #380]	@ (8007640 <DMA_SetConfig+0x270>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d009      	beq.n	80074da <DMA_SetConfig+0x10a>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007644 <DMA_SetConfig+0x274>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d004      	beq.n	80074da <DMA_SetConfig+0x10a>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a5c      	ldr	r2, [pc, #368]	@ (8007648 <DMA_SetConfig+0x278>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d101      	bne.n	80074de <DMA_SetConfig+0x10e>
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <DMA_SetConfig+0x110>
 80074de:	2300      	movs	r3, #0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00d      	beq.n	8007500 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80074ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80074fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a39      	ldr	r2, [pc, #228]	@ (80075ec <DMA_SetConfig+0x21c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d04a      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a38      	ldr	r2, [pc, #224]	@ (80075f0 <DMA_SetConfig+0x220>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d045      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a36      	ldr	r2, [pc, #216]	@ (80075f4 <DMA_SetConfig+0x224>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d040      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a35      	ldr	r2, [pc, #212]	@ (80075f8 <DMA_SetConfig+0x228>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d03b      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a33      	ldr	r2, [pc, #204]	@ (80075fc <DMA_SetConfig+0x22c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d036      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a32      	ldr	r2, [pc, #200]	@ (8007600 <DMA_SetConfig+0x230>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d031      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a30      	ldr	r2, [pc, #192]	@ (8007604 <DMA_SetConfig+0x234>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d02c      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a2f      	ldr	r2, [pc, #188]	@ (8007608 <DMA_SetConfig+0x238>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d027      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2d      	ldr	r2, [pc, #180]	@ (800760c <DMA_SetConfig+0x23c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d022      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2c      	ldr	r2, [pc, #176]	@ (8007610 <DMA_SetConfig+0x240>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d01d      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2a      	ldr	r2, [pc, #168]	@ (8007614 <DMA_SetConfig+0x244>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d018      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a29      	ldr	r2, [pc, #164]	@ (8007618 <DMA_SetConfig+0x248>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d013      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a27      	ldr	r2, [pc, #156]	@ (800761c <DMA_SetConfig+0x24c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00e      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a26      	ldr	r2, [pc, #152]	@ (8007620 <DMA_SetConfig+0x250>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a24      	ldr	r2, [pc, #144]	@ (8007624 <DMA_SetConfig+0x254>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <DMA_SetConfig+0x1d0>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a23      	ldr	r2, [pc, #140]	@ (8007628 <DMA_SetConfig+0x258>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d101      	bne.n	80075a4 <DMA_SetConfig+0x1d4>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <DMA_SetConfig+0x1d6>
 80075a4:	2300      	movs	r3, #0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d059      	beq.n	800765e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	223f      	movs	r2, #63	@ 0x3f
 80075b4:	409a      	lsls	r2, r3
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80075c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b40      	cmp	r3, #64	@ 0x40
 80075d8:	d138      	bne.n	800764c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075ea:	e086      	b.n	80076fa <DMA_SetConfig+0x32a>
 80075ec:	40020010 	.word	0x40020010
 80075f0:	40020028 	.word	0x40020028
 80075f4:	40020040 	.word	0x40020040
 80075f8:	40020058 	.word	0x40020058
 80075fc:	40020070 	.word	0x40020070
 8007600:	40020088 	.word	0x40020088
 8007604:	400200a0 	.word	0x400200a0
 8007608:	400200b8 	.word	0x400200b8
 800760c:	40020410 	.word	0x40020410
 8007610:	40020428 	.word	0x40020428
 8007614:	40020440 	.word	0x40020440
 8007618:	40020458 	.word	0x40020458
 800761c:	40020470 	.word	0x40020470
 8007620:	40020488 	.word	0x40020488
 8007624:	400204a0 	.word	0x400204a0
 8007628:	400204b8 	.word	0x400204b8
 800762c:	58025408 	.word	0x58025408
 8007630:	5802541c 	.word	0x5802541c
 8007634:	58025430 	.word	0x58025430
 8007638:	58025444 	.word	0x58025444
 800763c:	58025458 	.word	0x58025458
 8007640:	5802546c 	.word	0x5802546c
 8007644:	58025480 	.word	0x58025480
 8007648:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	60da      	str	r2, [r3, #12]
}
 800765c:	e04d      	b.n	80076fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a29      	ldr	r2, [pc, #164]	@ (8007708 <DMA_SetConfig+0x338>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d022      	beq.n	80076ae <DMA_SetConfig+0x2de>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a27      	ldr	r2, [pc, #156]	@ (800770c <DMA_SetConfig+0x33c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d01d      	beq.n	80076ae <DMA_SetConfig+0x2de>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a26      	ldr	r2, [pc, #152]	@ (8007710 <DMA_SetConfig+0x340>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d018      	beq.n	80076ae <DMA_SetConfig+0x2de>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a24      	ldr	r2, [pc, #144]	@ (8007714 <DMA_SetConfig+0x344>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d013      	beq.n	80076ae <DMA_SetConfig+0x2de>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a23      	ldr	r2, [pc, #140]	@ (8007718 <DMA_SetConfig+0x348>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00e      	beq.n	80076ae <DMA_SetConfig+0x2de>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a21      	ldr	r2, [pc, #132]	@ (800771c <DMA_SetConfig+0x34c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d009      	beq.n	80076ae <DMA_SetConfig+0x2de>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a20      	ldr	r2, [pc, #128]	@ (8007720 <DMA_SetConfig+0x350>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d004      	beq.n	80076ae <DMA_SetConfig+0x2de>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007724 <DMA_SetConfig+0x354>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d101      	bne.n	80076b2 <DMA_SetConfig+0x2e2>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <DMA_SetConfig+0x2e4>
 80076b2:	2300      	movs	r3, #0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d020      	beq.n	80076fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076bc:	f003 031f 	and.w	r3, r3, #31
 80076c0:	2201      	movs	r2, #1
 80076c2:	409a      	lsls	r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b40      	cmp	r3, #64	@ 0x40
 80076d6:	d108      	bne.n	80076ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	60da      	str	r2, [r3, #12]
}
 80076e8:	e007      	b.n	80076fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	58025408 	.word	0x58025408
 800770c:	5802541c 	.word	0x5802541c
 8007710:	58025430 	.word	0x58025430
 8007714:	58025444 	.word	0x58025444
 8007718:	58025458 	.word	0x58025458
 800771c:	5802546c 	.word	0x5802546c
 8007720:	58025480 	.word	0x58025480
 8007724:	58025494 	.word	0x58025494

08007728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a42      	ldr	r2, [pc, #264]	@ (8007840 <DMA_CalcBaseAndBitshift+0x118>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d04a      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a41      	ldr	r2, [pc, #260]	@ (8007844 <DMA_CalcBaseAndBitshift+0x11c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d045      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a3f      	ldr	r2, [pc, #252]	@ (8007848 <DMA_CalcBaseAndBitshift+0x120>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d040      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a3e      	ldr	r2, [pc, #248]	@ (800784c <DMA_CalcBaseAndBitshift+0x124>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d03b      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a3c      	ldr	r2, [pc, #240]	@ (8007850 <DMA_CalcBaseAndBitshift+0x128>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d036      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a3b      	ldr	r2, [pc, #236]	@ (8007854 <DMA_CalcBaseAndBitshift+0x12c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d031      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a39      	ldr	r2, [pc, #228]	@ (8007858 <DMA_CalcBaseAndBitshift+0x130>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d02c      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a38      	ldr	r2, [pc, #224]	@ (800785c <DMA_CalcBaseAndBitshift+0x134>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d027      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a36      	ldr	r2, [pc, #216]	@ (8007860 <DMA_CalcBaseAndBitshift+0x138>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a35      	ldr	r2, [pc, #212]	@ (8007864 <DMA_CalcBaseAndBitshift+0x13c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d01d      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a33      	ldr	r2, [pc, #204]	@ (8007868 <DMA_CalcBaseAndBitshift+0x140>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a32      	ldr	r2, [pc, #200]	@ (800786c <DMA_CalcBaseAndBitshift+0x144>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a30      	ldr	r2, [pc, #192]	@ (8007870 <DMA_CalcBaseAndBitshift+0x148>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007874 <DMA_CalcBaseAndBitshift+0x14c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007878 <DMA_CalcBaseAndBitshift+0x150>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <DMA_CalcBaseAndBitshift+0xa8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a2c      	ldr	r2, [pc, #176]	@ (800787c <DMA_CalcBaseAndBitshift+0x154>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d101      	bne.n	80077d4 <DMA_CalcBaseAndBitshift+0xac>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <DMA_CalcBaseAndBitshift+0xae>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d024      	beq.n	8007824 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	3b10      	subs	r3, #16
 80077e2:	4a27      	ldr	r2, [pc, #156]	@ (8007880 <DMA_CalcBaseAndBitshift+0x158>)
 80077e4:	fba2 2303 	umull	r2, r3, r2, r3
 80077e8:	091b      	lsrs	r3, r3, #4
 80077ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	4a24      	ldr	r2, [pc, #144]	@ (8007884 <DMA_CalcBaseAndBitshift+0x15c>)
 80077f4:	5cd3      	ldrb	r3, [r2, r3]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d908      	bls.n	8007814 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	4b1f      	ldr	r3, [pc, #124]	@ (8007888 <DMA_CalcBaseAndBitshift+0x160>)
 800780a:	4013      	ands	r3, r2
 800780c:	1d1a      	adds	r2, r3, #4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	659a      	str	r2, [r3, #88]	@ 0x58
 8007812:	e00d      	b.n	8007830 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	4b1b      	ldr	r3, [pc, #108]	@ (8007888 <DMA_CalcBaseAndBitshift+0x160>)
 800781c:	4013      	ands	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6593      	str	r3, [r2, #88]	@ 0x58
 8007822:	e005      	b.n	8007830 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40020010 	.word	0x40020010
 8007844:	40020028 	.word	0x40020028
 8007848:	40020040 	.word	0x40020040
 800784c:	40020058 	.word	0x40020058
 8007850:	40020070 	.word	0x40020070
 8007854:	40020088 	.word	0x40020088
 8007858:	400200a0 	.word	0x400200a0
 800785c:	400200b8 	.word	0x400200b8
 8007860:	40020410 	.word	0x40020410
 8007864:	40020428 	.word	0x40020428
 8007868:	40020440 	.word	0x40020440
 800786c:	40020458 	.word	0x40020458
 8007870:	40020470 	.word	0x40020470
 8007874:	40020488 	.word	0x40020488
 8007878:	400204a0 	.word	0x400204a0
 800787c:	400204b8 	.word	0x400204b8
 8007880:	aaaaaaab 	.word	0xaaaaaaab
 8007884:	08010610 	.word	0x08010610
 8007888:	fffffc00 	.word	0xfffffc00

0800788c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d120      	bne.n	80078e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d858      	bhi.n	800795a <DMA_CheckFifoParam+0xce>
 80078a8:	a201      	add	r2, pc, #4	@ (adr r2, 80078b0 <DMA_CheckFifoParam+0x24>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078c1 	.word	0x080078c1
 80078b4:	080078d3 	.word	0x080078d3
 80078b8:	080078c1 	.word	0x080078c1
 80078bc:	0800795b 	.word	0x0800795b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d048      	beq.n	800795e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078d0:	e045      	b.n	800795e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078da:	d142      	bne.n	8007962 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078e0:	e03f      	b.n	8007962 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ea:	d123      	bne.n	8007934 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d838      	bhi.n	8007966 <DMA_CheckFifoParam+0xda>
 80078f4:	a201      	add	r2, pc, #4	@ (adr r2, 80078fc <DMA_CheckFifoParam+0x70>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	08007913 	.word	0x08007913
 8007904:	0800790d 	.word	0x0800790d
 8007908:	08007925 	.word	0x08007925
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
        break;
 8007910:	e030      	b.n	8007974 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d025      	beq.n	800796a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007922:	e022      	b.n	800796a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800792c:	d11f      	bne.n	800796e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007932:	e01c      	b.n	800796e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	2b02      	cmp	r3, #2
 800793a:	d902      	bls.n	8007942 <DMA_CheckFifoParam+0xb6>
 800793c:	2b03      	cmp	r3, #3
 800793e:	d003      	beq.n	8007948 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007940:	e018      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	73fb      	strb	r3, [r7, #15]
        break;
 8007946:	e015      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	73fb      	strb	r3, [r7, #15]
    break;
 8007958:	e00b      	b.n	8007972 <DMA_CheckFifoParam+0xe6>
        break;
 800795a:	bf00      	nop
 800795c:	e00a      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
        break;
 800795e:	bf00      	nop
 8007960:	e008      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
        break;
 8007962:	bf00      	nop
 8007964:	e006      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
        break;
 8007966:	bf00      	nop
 8007968:	e004      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
        break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
        break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <DMA_CheckFifoParam+0xe8>
    break;
 8007972:	bf00      	nop
    }
  }

  return status;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop

08007984 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a38      	ldr	r2, [pc, #224]	@ (8007a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d022      	beq.n	80079e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a36      	ldr	r2, [pc, #216]	@ (8007a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d01d      	beq.n	80079e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a35      	ldr	r2, [pc, #212]	@ (8007a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d018      	beq.n	80079e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a33      	ldr	r2, [pc, #204]	@ (8007a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a32      	ldr	r2, [pc, #200]	@ (8007a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00e      	beq.n	80079e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a30      	ldr	r2, [pc, #192]	@ (8007a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d009      	beq.n	80079e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d101      	bne.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80079e6:	2300      	movs	r3, #0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01a      	beq.n	8007a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	3b08      	subs	r3, #8
 80079f4:	4a28      	ldr	r2, [pc, #160]	@ (8007a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80079f6:	fba2 2303 	umull	r2, r3, r2, r3
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4b26      	ldr	r3, [pc, #152]	@ (8007a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a24      	ldr	r2, [pc, #144]	@ (8007aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007a10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2201      	movs	r2, #1
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007a20:	e024      	b.n	8007a6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	3b10      	subs	r3, #16
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4a1c      	ldr	r2, [pc, #112]	@ (8007aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d806      	bhi.n	8007a4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007aac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d902      	bls.n	8007a4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3308      	adds	r3, #8
 8007a48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4b18      	ldr	r3, [pc, #96]	@ (8007ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a16      	ldr	r2, [pc, #88]	@ (8007ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007a5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	2201      	movs	r2, #1
 8007a66:	409a      	lsls	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	58025408 	.word	0x58025408
 8007a7c:	5802541c 	.word	0x5802541c
 8007a80:	58025430 	.word	0x58025430
 8007a84:	58025444 	.word	0x58025444
 8007a88:	58025458 	.word	0x58025458
 8007a8c:	5802546c 	.word	0x5802546c
 8007a90:	58025480 	.word	0x58025480
 8007a94:	58025494 	.word	0x58025494
 8007a98:	cccccccd 	.word	0xcccccccd
 8007a9c:	16009600 	.word	0x16009600
 8007aa0:	58025880 	.word	0x58025880
 8007aa4:	aaaaaaab 	.word	0xaaaaaaab
 8007aa8:	400204b8 	.word	0x400204b8
 8007aac:	4002040f 	.word	0x4002040f
 8007ab0:	10008200 	.word	0x10008200
 8007ab4:	40020880 	.word	0x40020880

08007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d04a      	beq.n	8007b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d847      	bhi.n	8007b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a25      	ldr	r2, [pc, #148]	@ (8007b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d022      	beq.n	8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a24      	ldr	r2, [pc, #144]	@ (8007b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d01d      	beq.n	8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a22      	ldr	r2, [pc, #136]	@ (8007b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d018      	beq.n	8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a21      	ldr	r2, [pc, #132]	@ (8007b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1f      	ldr	r2, [pc, #124]	@ (8007b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00e      	beq.n	8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d009      	beq.n	8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1c      	ldr	r2, [pc, #112]	@ (8007b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d101      	bne.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	461a      	mov	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a15      	ldr	r2, [pc, #84]	@ (8007b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007b40:	671a      	str	r2, [r3, #112]	@ 0x70
 8007b42:	e009      	b.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a11      	ldr	r2, [pc, #68]	@ (8007b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007b56:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	409a      	lsls	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	58025408 	.word	0x58025408
 8007b74:	5802541c 	.word	0x5802541c
 8007b78:	58025430 	.word	0x58025430
 8007b7c:	58025444 	.word	0x58025444
 8007b80:	58025458 	.word	0x58025458
 8007b84:	5802546c 	.word	0x5802546c
 8007b88:	58025480 	.word	0x58025480
 8007b8c:	58025494 	.word	0x58025494
 8007b90:	1600963f 	.word	0x1600963f
 8007b94:	58025940 	.word	0x58025940
 8007b98:	1000823f 	.word	0x1000823f
 8007b9c:	40020940 	.word	0x40020940

08007ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b089      	sub	sp, #36	@ 0x24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bae:	4b86      	ldr	r3, [pc, #536]	@ (8007dc8 <HAL_GPIO_Init+0x228>)
 8007bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bb2:	e18c      	b.n	8007ece <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	2101      	movs	r1, #1
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 817e 	beq.w	8007ec8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d005      	beq.n	8007be4 <HAL_GPIO_Init+0x44>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 0303 	and.w	r3, r3, #3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d130      	bne.n	8007c46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	2203      	movs	r2, #3
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	43db      	mvns	r3, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	4013      	ands	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	091b      	lsrs	r3, r3, #4
 8007c30:	f003 0201 	and.w	r2, r3, #1
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d017      	beq.n	8007c82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c62:	43db      	mvns	r3, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4013      	ands	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d123      	bne.n	8007cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	08da      	lsrs	r2, r3, #3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3208      	adds	r2, #8
 8007c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	220f      	movs	r2, #15
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43db      	mvns	r3, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	08da      	lsrs	r2, r3, #3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3208      	adds	r2, #8
 8007cd0:	69b9      	ldr	r1, [r7, #24]
 8007cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4013      	ands	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 0203 	and.w	r2, r3, #3
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 80d8 	beq.w	8007ec8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d18:	4b2c      	ldr	r3, [pc, #176]	@ (8007dcc <HAL_GPIO_Init+0x22c>)
 8007d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dcc <HAL_GPIO_Init+0x22c>)
 8007d20:	f043 0302 	orr.w	r3, r3, #2
 8007d24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007d28:	4b28      	ldr	r3, [pc, #160]	@ (8007dcc <HAL_GPIO_Init+0x22c>)
 8007d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d36:	4a26      	ldr	r2, [pc, #152]	@ (8007dd0 <HAL_GPIO_Init+0x230>)
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	089b      	lsrs	r3, r3, #2
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	220f      	movs	r2, #15
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43db      	mvns	r3, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4013      	ands	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd4 <HAL_GPIO_Init+0x234>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d04a      	beq.n	8007df8 <HAL_GPIO_Init+0x258>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd8 <HAL_GPIO_Init+0x238>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d02b      	beq.n	8007dc2 <HAL_GPIO_Init+0x222>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ddc <HAL_GPIO_Init+0x23c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d025      	beq.n	8007dbe <HAL_GPIO_Init+0x21e>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a1a      	ldr	r2, [pc, #104]	@ (8007de0 <HAL_GPIO_Init+0x240>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01f      	beq.n	8007dba <HAL_GPIO_Init+0x21a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a19      	ldr	r2, [pc, #100]	@ (8007de4 <HAL_GPIO_Init+0x244>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d019      	beq.n	8007db6 <HAL_GPIO_Init+0x216>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a18      	ldr	r2, [pc, #96]	@ (8007de8 <HAL_GPIO_Init+0x248>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_GPIO_Init+0x212>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a17      	ldr	r2, [pc, #92]	@ (8007dec <HAL_GPIO_Init+0x24c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00d      	beq.n	8007dae <HAL_GPIO_Init+0x20e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a16      	ldr	r2, [pc, #88]	@ (8007df0 <HAL_GPIO_Init+0x250>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d007      	beq.n	8007daa <HAL_GPIO_Init+0x20a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	@ (8007df4 <HAL_GPIO_Init+0x254>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d101      	bne.n	8007da6 <HAL_GPIO_Init+0x206>
 8007da2:	2309      	movs	r3, #9
 8007da4:	e029      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007da6:	230a      	movs	r3, #10
 8007da8:	e027      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007daa:	2307      	movs	r3, #7
 8007dac:	e025      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007dae:	2306      	movs	r3, #6
 8007db0:	e023      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007db2:	2305      	movs	r3, #5
 8007db4:	e021      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007db6:	2304      	movs	r3, #4
 8007db8:	e01f      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e01d      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e01b      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e019      	b.n	8007dfa <HAL_GPIO_Init+0x25a>
 8007dc6:	bf00      	nop
 8007dc8:	58000080 	.word	0x58000080
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	58000400 	.word	0x58000400
 8007dd4:	58020000 	.word	0x58020000
 8007dd8:	58020400 	.word	0x58020400
 8007ddc:	58020800 	.word	0x58020800
 8007de0:	58020c00 	.word	0x58020c00
 8007de4:	58021000 	.word	0x58021000
 8007de8:	58021400 	.word	0x58021400
 8007dec:	58021800 	.word	0x58021800
 8007df0:	58021c00 	.word	0x58021c00
 8007df4:	58022400 	.word	0x58022400
 8007df8:	2300      	movs	r3, #0
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	f002 0203 	and.w	r2, r2, #3
 8007e00:	0092      	lsls	r2, r2, #2
 8007e02:	4093      	lsls	r3, r2
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e0a:	4938      	ldr	r1, [pc, #224]	@ (8007eec <HAL_GPIO_Init+0x34c>)
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	089b      	lsrs	r3, r3, #2
 8007e10:	3302      	adds	r3, #2
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	43db      	mvns	r3, r3
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	4013      	ands	r3, r2
 8007e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	4013      	ands	r3, r2
 8007e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	4013      	ands	r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f47f ae6b 	bne.w	8007bb4 <HAL_GPIO_Init+0x14>
  }
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	3724      	adds	r7, #36	@ 0x24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	58000400 	.word	0x58000400

08007ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	807b      	strh	r3, [r7, #2]
 8007efc:	4613      	mov	r3, r2
 8007efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f00:	787b      	ldrb	r3, [r7, #1]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f06:	887a      	ldrh	r2, [r7, #2]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f0c:	e003      	b.n	8007f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f0e:	887b      	ldrh	r3, [r7, #2]
 8007f10:	041a      	lsls	r2, r3, #16
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	619a      	str	r2, [r3, #24]
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f34:	887a      	ldrh	r2, [r7, #2]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	041a      	lsls	r2, r3, #16
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	43d9      	mvns	r1, r3
 8007f40:	887b      	ldrh	r3, [r7, #2]
 8007f42:	400b      	ands	r3, r1
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	619a      	str	r2, [r3, #24]
}
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7f8 ff27 	bl	8000dd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f94:	4b19      	ldr	r3, [pc, #100]	@ (8007ffc <HAL_PWREx_ConfigSupply+0x70>)
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d00a      	beq.n	8007fb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007fa0:	4b16      	ldr	r3, [pc, #88]	@ (8007ffc <HAL_PWREx_ConfigSupply+0x70>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d001      	beq.n	8007fb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e01f      	b.n	8007ff2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	e01d      	b.n	8007ff2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007fb6:	4b11      	ldr	r3, [pc, #68]	@ (8007ffc <HAL_PWREx_ConfigSupply+0x70>)
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f023 0207 	bic.w	r2, r3, #7
 8007fbe:	490f      	ldr	r1, [pc, #60]	@ (8007ffc <HAL_PWREx_ConfigSupply+0x70>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007fc6:	f7fa fdb5 	bl	8002b34 <HAL_GetTick>
 8007fca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fcc:	e009      	b.n	8007fe2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007fce:	f7fa fdb1 	bl	8002b34 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fdc:	d901      	bls.n	8007fe2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e007      	b.n	8007ff2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fe2:	4b06      	ldr	r3, [pc, #24]	@ (8007ffc <HAL_PWREx_ConfigSupply+0x70>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fee:	d1ee      	bne.n	8007fce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	58024800 	.word	0x58024800

08008000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	@ 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e3c8      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 8087 	beq.w	800812e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008020:	4b88      	ldr	r3, [pc, #544]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800802a:	4b86      	ldr	r3, [pc, #536]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 800802c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008032:	2b10      	cmp	r3, #16
 8008034:	d007      	beq.n	8008046 <HAL_RCC_OscConfig+0x46>
 8008036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008038:	2b18      	cmp	r3, #24
 800803a:	d110      	bne.n	800805e <HAL_RCC_OscConfig+0x5e>
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d10b      	bne.n	800805e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008046:	4b7f      	ldr	r3, [pc, #508]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d06c      	beq.n	800812c <HAL_RCC_OscConfig+0x12c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d168      	bne.n	800812c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e3a2      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008066:	d106      	bne.n	8008076 <HAL_RCC_OscConfig+0x76>
 8008068:	4b76      	ldr	r3, [pc, #472]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a75      	ldr	r2, [pc, #468]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 800806e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	e02e      	b.n	80080d4 <HAL_RCC_OscConfig+0xd4>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10c      	bne.n	8008098 <HAL_RCC_OscConfig+0x98>
 800807e:	4b71      	ldr	r3, [pc, #452]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a70      	ldr	r2, [pc, #448]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	4b6e      	ldr	r3, [pc, #440]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a6d      	ldr	r2, [pc, #436]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e01d      	b.n	80080d4 <HAL_RCC_OscConfig+0xd4>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080a0:	d10c      	bne.n	80080bc <HAL_RCC_OscConfig+0xbc>
 80080a2:	4b68      	ldr	r3, [pc, #416]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a67      	ldr	r2, [pc, #412]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	4b65      	ldr	r3, [pc, #404]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a64      	ldr	r2, [pc, #400]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e00b      	b.n	80080d4 <HAL_RCC_OscConfig+0xd4>
 80080bc:	4b61      	ldr	r3, [pc, #388]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a60      	ldr	r2, [pc, #384]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	4b5e      	ldr	r3, [pc, #376]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a5d      	ldr	r2, [pc, #372]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d013      	beq.n	8008104 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080dc:	f7fa fd2a 	bl	8002b34 <HAL_GetTick>
 80080e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e4:	f7fa fd26 	bl	8002b34 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b64      	cmp	r3, #100	@ 0x64
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e356      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080f6:	4b53      	ldr	r3, [pc, #332]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f0      	beq.n	80080e4 <HAL_RCC_OscConfig+0xe4>
 8008102:	e014      	b.n	800812e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fa fd16 	bl	8002b34 <HAL_GetTick>
 8008108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800810c:	f7fa fd12 	bl	8002b34 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b64      	cmp	r3, #100	@ 0x64
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e342      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800811e:	4b49      	ldr	r3, [pc, #292]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x10c>
 800812a:	e000      	b.n	800812e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800812c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 808c 	beq.w	8008254 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800813c:	4b41      	ldr	r3, [pc, #260]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008144:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008146:	4b3f      	ldr	r3, [pc, #252]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <HAL_RCC_OscConfig+0x162>
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2b18      	cmp	r3, #24
 8008156:	d137      	bne.n	80081c8 <HAL_RCC_OscConfig+0x1c8>
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d132      	bne.n	80081c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008162:	4b38      	ldr	r3, [pc, #224]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0304 	and.w	r3, r3, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <HAL_RCC_OscConfig+0x17a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e314      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800817a:	4b32      	ldr	r3, [pc, #200]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f023 0219 	bic.w	r2, r3, #25
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	492f      	ldr	r1, [pc, #188]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008188:	4313      	orrs	r3, r2
 800818a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818c:	f7fa fcd2 	bl	8002b34 <HAL_GetTick>
 8008190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008192:	e008      	b.n	80081a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008194:	f7fa fcce 	bl	8002b34 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e2fe      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081a6:	4b27      	ldr	r3, [pc, #156]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0f0      	beq.n	8008194 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081b2:	4b24      	ldr	r3, [pc, #144]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	061b      	lsls	r3, r3, #24
 80081c0:	4920      	ldr	r1, [pc, #128]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081c6:	e045      	b.n	8008254 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d026      	beq.n	800821e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f023 0219 	bic.w	r2, r3, #25
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	4919      	ldr	r1, [pc, #100]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e2:	f7fa fca7 	bl	8002b34 <HAL_GetTick>
 80081e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ea:	f7fa fca3 	bl	8002b34 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e2d3      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081fc:	4b11      	ldr	r3, [pc, #68]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0f0      	beq.n	80081ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008208:	4b0e      	ldr	r3, [pc, #56]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	061b      	lsls	r3, r3, #24
 8008216:	490b      	ldr	r1, [pc, #44]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008218:	4313      	orrs	r3, r2
 800821a:	604b      	str	r3, [r1, #4]
 800821c:	e01a      	b.n	8008254 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800821e:	4b09      	ldr	r3, [pc, #36]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a08      	ldr	r2, [pc, #32]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822a:	f7fa fc83 	bl	8002b34 <HAL_GetTick>
 800822e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008230:	e00a      	b.n	8008248 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008232:	f7fa fc7f 	bl	8002b34 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d903      	bls.n	8008248 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e2af      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
 8008244:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008248:	4b96      	ldr	r3, [pc, #600]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1ee      	bne.n	8008232 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b00      	cmp	r3, #0
 800825e:	d06a      	beq.n	8008336 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008260:	4b90      	ldr	r3, [pc, #576]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008268:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800826a:	4b8e      	ldr	r3, [pc, #568]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800826c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b08      	cmp	r3, #8
 8008274:	d007      	beq.n	8008286 <HAL_RCC_OscConfig+0x286>
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b18      	cmp	r3, #24
 800827a:	d11b      	bne.n	80082b4 <HAL_RCC_OscConfig+0x2b4>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b01      	cmp	r3, #1
 8008284:	d116      	bne.n	80082b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008286:	4b87      	ldr	r3, [pc, #540]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <HAL_RCC_OscConfig+0x29e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	2b80      	cmp	r3, #128	@ 0x80
 8008298:	d001      	beq.n	800829e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e282      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800829e:	4b81      	ldr	r3, [pc, #516]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	061b      	lsls	r3, r3, #24
 80082ac:	497d      	ldr	r1, [pc, #500]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082b2:	e040      	b.n	8008336 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d023      	beq.n	8008304 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80082bc:	4b79      	ldr	r3, [pc, #484]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a78      	ldr	r2, [pc, #480]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c8:	f7fa fc34 	bl	8002b34 <HAL_GetTick>
 80082cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082ce:	e008      	b.n	80082e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082d0:	f7fa fc30 	bl	8002b34 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e260      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082e2:	4b70      	ldr	r3, [pc, #448]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f0      	beq.n	80082d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082ee:	4b6d      	ldr	r3, [pc, #436]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	061b      	lsls	r3, r3, #24
 80082fc:	4969      	ldr	r1, [pc, #420]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	60cb      	str	r3, [r1, #12]
 8008302:	e018      	b.n	8008336 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008304:	4b67      	ldr	r3, [pc, #412]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a66      	ldr	r2, [pc, #408]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800830a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800830e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008310:	f7fa fc10 	bl	8002b34 <HAL_GetTick>
 8008314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008318:	f7fa fc0c 	bl	8002b34 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e23c      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800832a:	4b5e      	ldr	r3, [pc, #376]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f0      	bne.n	8008318 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d036      	beq.n	80083b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d019      	beq.n	800837e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800834a:	4b56      	ldr	r3, [pc, #344]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800834c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800834e:	4a55      	ldr	r2, [pc, #340]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008350:	f043 0301 	orr.w	r3, r3, #1
 8008354:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008356:	f7fa fbed 	bl	8002b34 <HAL_GetTick>
 800835a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800835e:	f7fa fbe9 	bl	8002b34 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e219      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008370:	4b4c      	ldr	r3, [pc, #304]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0f0      	beq.n	800835e <HAL_RCC_OscConfig+0x35e>
 800837c:	e018      	b.n	80083b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800837e:	4b49      	ldr	r3, [pc, #292]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008382:	4a48      	ldr	r2, [pc, #288]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008384:	f023 0301 	bic.w	r3, r3, #1
 8008388:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800838a:	f7fa fbd3 	bl	8002b34 <HAL_GetTick>
 800838e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008390:	e008      	b.n	80083a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008392:	f7fa fbcf 	bl	8002b34 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d901      	bls.n	80083a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e1ff      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083a4:	4b3f      	ldr	r3, [pc, #252]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80083a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1f0      	bne.n	8008392 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d036      	beq.n	800842a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d019      	beq.n	80083f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083c4:	4b37      	ldr	r3, [pc, #220]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a36      	ldr	r2, [pc, #216]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80083ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083d0:	f7fa fbb0 	bl	8002b34 <HAL_GetTick>
 80083d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083d8:	f7fa fbac 	bl	8002b34 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e1dc      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083ea:	4b2e      	ldr	r3, [pc, #184]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f0      	beq.n	80083d8 <HAL_RCC_OscConfig+0x3d8>
 80083f6:	e018      	b.n	800842a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083f8:	4b2a      	ldr	r3, [pc, #168]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a29      	ldr	r2, [pc, #164]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 80083fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008402:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008404:	f7fa fb96 	bl	8002b34 <HAL_GetTick>
 8008408:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800840c:	f7fa fb92 	bl	8002b34 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b02      	cmp	r3, #2
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e1c2      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800841e:	4b21      	ldr	r3, [pc, #132]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8086 	beq.w	8008544 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008438:	4b1b      	ldr	r3, [pc, #108]	@ (80084a8 <HAL_RCC_OscConfig+0x4a8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1a      	ldr	r2, [pc, #104]	@ (80084a8 <HAL_RCC_OscConfig+0x4a8>)
 800843e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008444:	f7fa fb76 	bl	8002b34 <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800844c:	f7fa fb72 	bl	8002b34 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b64      	cmp	r3, #100	@ 0x64
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e1a2      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800845e:	4b12      	ldr	r3, [pc, #72]	@ (80084a8 <HAL_RCC_OscConfig+0x4a8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f0      	beq.n	800844c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d106      	bne.n	8008480 <HAL_RCC_OscConfig+0x480>
 8008472:	4b0c      	ldr	r3, [pc, #48]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008476:	4a0b      	ldr	r2, [pc, #44]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008478:	f043 0301 	orr.w	r3, r3, #1
 800847c:	6713      	str	r3, [r2, #112]	@ 0x70
 800847e:	e032      	b.n	80084e6 <HAL_RCC_OscConfig+0x4e6>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d111      	bne.n	80084ac <HAL_RCC_OscConfig+0x4ac>
 8008488:	4b06      	ldr	r3, [pc, #24]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800848a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848c:	4a05      	ldr	r2, [pc, #20]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800848e:	f023 0301 	bic.w	r3, r3, #1
 8008492:	6713      	str	r3, [r2, #112]	@ 0x70
 8008494:	4b03      	ldr	r3, [pc, #12]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 8008496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008498:	4a02      	ldr	r2, [pc, #8]	@ (80084a4 <HAL_RCC_OscConfig+0x4a4>)
 800849a:	f023 0304 	bic.w	r3, r3, #4
 800849e:	6713      	str	r3, [r2, #112]	@ 0x70
 80084a0:	e021      	b.n	80084e6 <HAL_RCC_OscConfig+0x4e6>
 80084a2:	bf00      	nop
 80084a4:	58024400 	.word	0x58024400
 80084a8:	58024800 	.word	0x58024800
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	d10c      	bne.n	80084ce <HAL_RCC_OscConfig+0x4ce>
 80084b4:	4b83      	ldr	r3, [pc, #524]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b8:	4a82      	ldr	r2, [pc, #520]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084ba:	f043 0304 	orr.w	r3, r3, #4
 80084be:	6713      	str	r3, [r2, #112]	@ 0x70
 80084c0:	4b80      	ldr	r3, [pc, #512]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c4:	4a7f      	ldr	r2, [pc, #508]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80084cc:	e00b      	b.n	80084e6 <HAL_RCC_OscConfig+0x4e6>
 80084ce:	4b7d      	ldr	r3, [pc, #500]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d2:	4a7c      	ldr	r2, [pc, #496]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80084da:	4b7a      	ldr	r3, [pc, #488]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084de:	4a79      	ldr	r2, [pc, #484]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80084e0:	f023 0304 	bic.w	r3, r3, #4
 80084e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d015      	beq.n	800851a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ee:	f7fa fb21 	bl	8002b34 <HAL_GetTick>
 80084f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084f4:	e00a      	b.n	800850c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084f6:	f7fa fb1d 	bl	8002b34 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008504:	4293      	cmp	r3, r2
 8008506:	d901      	bls.n	800850c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e14b      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800850c:	4b6d      	ldr	r3, [pc, #436]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800850e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0ee      	beq.n	80084f6 <HAL_RCC_OscConfig+0x4f6>
 8008518:	e014      	b.n	8008544 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800851a:	f7fa fb0b 	bl	8002b34 <HAL_GetTick>
 800851e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008520:	e00a      	b.n	8008538 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008522:	f7fa fb07 	bl	8002b34 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008530:	4293      	cmp	r3, r2
 8008532:	d901      	bls.n	8008538 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e135      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008538:	4b62      	ldr	r3, [pc, #392]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800853a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1ee      	bne.n	8008522 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 812a 	beq.w	80087a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800854e:	4b5d      	ldr	r3, [pc, #372]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008556:	2b18      	cmp	r3, #24
 8008558:	f000 80ba 	beq.w	80086d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008560:	2b02      	cmp	r3, #2
 8008562:	f040 8095 	bne.w	8008690 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008566:	4b57      	ldr	r3, [pc, #348]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a56      	ldr	r2, [pc, #344]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800856c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008572:	f7fa fadf 	bl	8002b34 <HAL_GetTick>
 8008576:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008578:	e008      	b.n	800858c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800857a:	f7fa fadb 	bl	8002b34 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d901      	bls.n	800858c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e10b      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800858c:	4b4d      	ldr	r3, [pc, #308]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1f0      	bne.n	800857a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008598:	4b4a      	ldr	r3, [pc, #296]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800859a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800859c:	4b4a      	ldr	r3, [pc, #296]	@ (80086c8 <HAL_RCC_OscConfig+0x6c8>)
 800859e:	4013      	ands	r3, r2
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80085a8:	0112      	lsls	r2, r2, #4
 80085aa:	430a      	orrs	r2, r1
 80085ac:	4945      	ldr	r1, [pc, #276]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	628b      	str	r3, [r1, #40]	@ 0x28
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b6:	3b01      	subs	r3, #1
 80085b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c0:	3b01      	subs	r3, #1
 80085c2:	025b      	lsls	r3, r3, #9
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085cc:	3b01      	subs	r3, #1
 80085ce:	041b      	lsls	r3, r3, #16
 80085d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085da:	3b01      	subs	r3, #1
 80085dc:	061b      	lsls	r3, r3, #24
 80085de:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085e2:	4938      	ldr	r1, [pc, #224]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80085e8:	4b36      	ldr	r3, [pc, #216]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	4a35      	ldr	r2, [pc, #212]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085f4:	4b33      	ldr	r3, [pc, #204]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80085f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085f8:	4b34      	ldr	r3, [pc, #208]	@ (80086cc <HAL_RCC_OscConfig+0x6cc>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008600:	00d2      	lsls	r2, r2, #3
 8008602:	4930      	ldr	r1, [pc, #192]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008604:	4313      	orrs	r3, r2
 8008606:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008608:	4b2e      	ldr	r3, [pc, #184]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	f023 020c 	bic.w	r2, r3, #12
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008614:	492b      	ldr	r1, [pc, #172]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008616:	4313      	orrs	r3, r2
 8008618:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800861a:	4b2a      	ldr	r3, [pc, #168]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	f023 0202 	bic.w	r2, r3, #2
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008626:	4927      	ldr	r1, [pc, #156]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008628:	4313      	orrs	r3, r2
 800862a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800862c:	4b25      	ldr	r3, [pc, #148]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800862e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008630:	4a24      	ldr	r2, [pc, #144]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008638:	4b22      	ldr	r3, [pc, #136]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800863a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863c:	4a21      	ldr	r2, [pc, #132]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800863e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008644:	4b1f      	ldr	r3, [pc, #124]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008648:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800864a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800864e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008650:	4b1c      	ldr	r3, [pc, #112]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	4a1b      	ldr	r2, [pc, #108]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800865c:	4b19      	ldr	r3, [pc, #100]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a18      	ldr	r2, [pc, #96]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008668:	f7fa fa64 	bl	8002b34 <HAL_GetTick>
 800866c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008670:	f7fa fa60 	bl	8002b34 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e090      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008682:	4b10      	ldr	r3, [pc, #64]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0f0      	beq.n	8008670 <HAL_RCC_OscConfig+0x670>
 800868e:	e088      	b.n	80087a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008690:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a0b      	ldr	r2, [pc, #44]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 8008696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800869a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869c:	f7fa fa4a 	bl	8002b34 <HAL_GetTick>
 80086a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086a4:	f7fa fa46 	bl	8002b34 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e076      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086b6:	4b03      	ldr	r3, [pc, #12]	@ (80086c4 <HAL_RCC_OscConfig+0x6c4>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f0      	bne.n	80086a4 <HAL_RCC_OscConfig+0x6a4>
 80086c2:	e06e      	b.n	80087a2 <HAL_RCC_OscConfig+0x7a2>
 80086c4:	58024400 	.word	0x58024400
 80086c8:	fffffc0c 	.word	0xfffffc0c
 80086cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086d0:	4b36      	ldr	r3, [pc, #216]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 80086d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086d6:	4b35      	ldr	r3, [pc, #212]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d031      	beq.n	8008748 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f003 0203 	and.w	r2, r3, #3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d12a      	bne.n	8008748 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	091b      	lsrs	r3, r3, #4
 80086f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086fe:	429a      	cmp	r2, r3
 8008700:	d122      	bne.n	8008748 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800870e:	429a      	cmp	r2, r3
 8008710:	d11a      	bne.n	8008748 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	0a5b      	lsrs	r3, r3, #9
 8008716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	d111      	bne.n	8008748 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008730:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008732:	429a      	cmp	r2, r3
 8008734:	d108      	bne.n	8008748 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	0e1b      	lsrs	r3, r3, #24
 800873a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008742:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008744:	429a      	cmp	r2, r3
 8008746:	d001      	beq.n	800874c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e02b      	b.n	80087a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800874c:	4b17      	ldr	r3, [pc, #92]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 800874e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008756:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	d01f      	beq.n	80087a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008762:	4b12      	ldr	r3, [pc, #72]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	4a11      	ldr	r2, [pc, #68]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 8008768:	f023 0301 	bic.w	r3, r3, #1
 800876c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800876e:	f7fa f9e1 	bl	8002b34 <HAL_GetTick>
 8008772:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008774:	bf00      	nop
 8008776:	f7fa f9dd 	bl	8002b34 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	4293      	cmp	r3, r2
 8008780:	d0f9      	beq.n	8008776 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008782:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 8008784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008786:	4b0a      	ldr	r3, [pc, #40]	@ (80087b0 <HAL_RCC_OscConfig+0x7b0>)
 8008788:	4013      	ands	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800878e:	00d2      	lsls	r2, r2, #3
 8008790:	4906      	ldr	r1, [pc, #24]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 8008792:	4313      	orrs	r3, r2
 8008794:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008796:	4b05      	ldr	r3, [pc, #20]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	4a04      	ldr	r2, [pc, #16]	@ (80087ac <HAL_RCC_OscConfig+0x7ac>)
 800879c:	f043 0301 	orr.w	r3, r3, #1
 80087a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3730      	adds	r7, #48	@ 0x30
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	58024400 	.word	0x58024400
 80087b0:	ffff0007 	.word	0xffff0007

080087b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e19c      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087c8:	4b8a      	ldr	r3, [pc, #552]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d910      	bls.n	80087f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087d6:	4b87      	ldr	r3, [pc, #540]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f023 020f 	bic.w	r2, r3, #15
 80087de:	4985      	ldr	r1, [pc, #532]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087e6:	4b83      	ldr	r3, [pc, #524]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d001      	beq.n	80087f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e184      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d010      	beq.n	8008826 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	4b7b      	ldr	r3, [pc, #492]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008810:	429a      	cmp	r2, r3
 8008812:	d908      	bls.n	8008826 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008814:	4b78      	ldr	r3, [pc, #480]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	4975      	ldr	r1, [pc, #468]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008822:	4313      	orrs	r3, r2
 8008824:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d010      	beq.n	8008854 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	4b70      	ldr	r3, [pc, #448]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800883e:	429a      	cmp	r2, r3
 8008840:	d908      	bls.n	8008854 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008842:	4b6d      	ldr	r3, [pc, #436]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	496a      	ldr	r1, [pc, #424]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008850:	4313      	orrs	r3, r2
 8008852:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b00      	cmp	r3, #0
 800885e:	d010      	beq.n	8008882 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699a      	ldr	r2, [r3, #24]
 8008864:	4b64      	ldr	r3, [pc, #400]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800886c:	429a      	cmp	r2, r3
 800886e:	d908      	bls.n	8008882 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008870:	4b61      	ldr	r3, [pc, #388]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	495e      	ldr	r1, [pc, #376]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 800887e:	4313      	orrs	r3, r2
 8008880:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d010      	beq.n	80088b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69da      	ldr	r2, [r3, #28]
 8008892:	4b59      	ldr	r3, [pc, #356]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800889a:	429a      	cmp	r2, r3
 800889c:	d908      	bls.n	80088b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800889e:	4b56      	ldr	r3, [pc, #344]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	4953      	ldr	r1, [pc, #332]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	4b4d      	ldr	r3, [pc, #308]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	f003 030f 	and.w	r3, r3, #15
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d908      	bls.n	80088de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088cc:	4b4a      	ldr	r3, [pc, #296]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f023 020f 	bic.w	r2, r3, #15
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	4947      	ldr	r1, [pc, #284]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d055      	beq.n	8008996 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80088ea:	4b43      	ldr	r3, [pc, #268]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	4940      	ldr	r1, [pc, #256]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d107      	bne.n	8008914 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008904:	4b3c      	ldr	r3, [pc, #240]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d121      	bne.n	8008954 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e0f6      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d107      	bne.n	800892c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800891c:	4b36      	ldr	r3, [pc, #216]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d115      	bne.n	8008954 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e0ea      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d107      	bne.n	8008944 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008934:	4b30      	ldr	r3, [pc, #192]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800893c:	2b00      	cmp	r3, #0
 800893e:	d109      	bne.n	8008954 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0de      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008944:	4b2c      	ldr	r3, [pc, #176]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e0d6      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008954:	4b28      	ldr	r3, [pc, #160]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f023 0207 	bic.w	r2, r3, #7
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4925      	ldr	r1, [pc, #148]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008962:	4313      	orrs	r3, r2
 8008964:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008966:	f7fa f8e5 	bl	8002b34 <HAL_GetTick>
 800896a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800896c:	e00a      	b.n	8008984 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800896e:	f7fa f8e1 	bl	8002b34 <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800897c:	4293      	cmp	r3, r2
 800897e:	d901      	bls.n	8008984 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e0be      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008984:	4b1c      	ldr	r3, [pc, #112]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	429a      	cmp	r2, r3
 8008994:	d1eb      	bne.n	800896e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d010      	beq.n	80089c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d208      	bcs.n	80089c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089b2:	4b11      	ldr	r3, [pc, #68]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f023 020f 	bic.w	r2, r3, #15
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	490e      	ldr	r1, [pc, #56]	@ (80089f8 <HAL_RCC_ClockConfig+0x244>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089c4:	4b0b      	ldr	r3, [pc, #44]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 030f 	and.w	r3, r3, #15
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d214      	bcs.n	80089fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d2:	4b08      	ldr	r3, [pc, #32]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f023 020f 	bic.w	r2, r3, #15
 80089da:	4906      	ldr	r1, [pc, #24]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	4313      	orrs	r3, r2
 80089e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089e2:	4b04      	ldr	r3, [pc, #16]	@ (80089f4 <HAL_RCC_ClockConfig+0x240>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 030f 	and.w	r3, r3, #15
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d005      	beq.n	80089fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e086      	b.n	8008b02 <HAL_RCC_ClockConfig+0x34e>
 80089f4:	52002000 	.word	0x52002000
 80089f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d010      	beq.n	8008a2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691a      	ldr	r2, [r3, #16]
 8008a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d208      	bcs.n	8008a2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a18:	4b3c      	ldr	r3, [pc, #240]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	4939      	ldr	r1, [pc, #228]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d010      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695a      	ldr	r2, [r3, #20]
 8008a3a:	4b34      	ldr	r3, [pc, #208]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d208      	bcs.n	8008a58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a46:	4b31      	ldr	r3, [pc, #196]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	492e      	ldr	r1, [pc, #184]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	699a      	ldr	r2, [r3, #24]
 8008a68:	4b28      	ldr	r3, [pc, #160]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d208      	bcs.n	8008a86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a74:	4b25      	ldr	r3, [pc, #148]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	4922      	ldr	r1, [pc, #136]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d010      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	4b1d      	ldr	r3, [pc, #116]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d208      	bcs.n	8008ab4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	4917      	ldr	r1, [pc, #92]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ab4:	f000 f834 	bl	8008b20 <HAL_RCC_GetSysClockFreq>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	4b14      	ldr	r3, [pc, #80]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	0a1b      	lsrs	r3, r3, #8
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	4912      	ldr	r1, [pc, #72]	@ (8008b10 <HAL_RCC_ClockConfig+0x35c>)
 8008ac6:	5ccb      	ldrb	r3, [r1, r3]
 8008ac8:	f003 031f 	and.w	r3, r3, #31
 8008acc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8008b0c <HAL_RCC_ClockConfig+0x358>)
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	4a0d      	ldr	r2, [pc, #52]	@ (8008b10 <HAL_RCC_ClockConfig+0x35c>)
 8008adc:	5cd3      	ldrb	r3, [r2, r3]
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8008b14 <HAL_RCC_ClockConfig+0x360>)
 8008aea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008aec:	4a0a      	ldr	r2, [pc, #40]	@ (8008b18 <HAL_RCC_ClockConfig+0x364>)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008af2:	4b0a      	ldr	r3, [pc, #40]	@ (8008b1c <HAL_RCC_ClockConfig+0x368>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f9 ffd2 	bl	8002aa0 <HAL_InitTick>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	08010600 	.word	0x08010600
 8008b14:	24000054 	.word	0x24000054
 8008b18:	24000050 	.word	0x24000050
 8008b1c:	24000058 	.word	0x24000058

08008b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b089      	sub	sp, #36	@ 0x24
 8008b24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b26:	4bb3      	ldr	r3, [pc, #716]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b2e:	2b18      	cmp	r3, #24
 8008b30:	f200 8155 	bhi.w	8008dde <HAL_RCC_GetSysClockFreq+0x2be>
 8008b34:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008ba1 	.word	0x08008ba1
 8008b40:	08008ddf 	.word	0x08008ddf
 8008b44:	08008ddf 	.word	0x08008ddf
 8008b48:	08008ddf 	.word	0x08008ddf
 8008b4c:	08008ddf 	.word	0x08008ddf
 8008b50:	08008ddf 	.word	0x08008ddf
 8008b54:	08008ddf 	.word	0x08008ddf
 8008b58:	08008ddf 	.word	0x08008ddf
 8008b5c:	08008bc7 	.word	0x08008bc7
 8008b60:	08008ddf 	.word	0x08008ddf
 8008b64:	08008ddf 	.word	0x08008ddf
 8008b68:	08008ddf 	.word	0x08008ddf
 8008b6c:	08008ddf 	.word	0x08008ddf
 8008b70:	08008ddf 	.word	0x08008ddf
 8008b74:	08008ddf 	.word	0x08008ddf
 8008b78:	08008ddf 	.word	0x08008ddf
 8008b7c:	08008bcd 	.word	0x08008bcd
 8008b80:	08008ddf 	.word	0x08008ddf
 8008b84:	08008ddf 	.word	0x08008ddf
 8008b88:	08008ddf 	.word	0x08008ddf
 8008b8c:	08008ddf 	.word	0x08008ddf
 8008b90:	08008ddf 	.word	0x08008ddf
 8008b94:	08008ddf 	.word	0x08008ddf
 8008b98:	08008ddf 	.word	0x08008ddf
 8008b9c:	08008bd3 	.word	0x08008bd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ba0:	4b94      	ldr	r3, [pc, #592]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d009      	beq.n	8008bc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bac:	4b91      	ldr	r3, [pc, #580]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	08db      	lsrs	r3, r3, #3
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	4a90      	ldr	r2, [pc, #576]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008bbe:	e111      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bc0:	4b8d      	ldr	r3, [pc, #564]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bc2:	61bb      	str	r3, [r7, #24]
      break;
 8008bc4:	e10e      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008bc6:	4b8d      	ldr	r3, [pc, #564]	@ (8008dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bc8:	61bb      	str	r3, [r7, #24]
      break;
 8008bca:	e10b      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008bcc:	4b8c      	ldr	r3, [pc, #560]	@ (8008e00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008bce:	61bb      	str	r3, [r7, #24]
      break;
 8008bd0:	e108      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bd2:	4b88      	ldr	r3, [pc, #544]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008bdc:	4b85      	ldr	r3, [pc, #532]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be0:	091b      	lsrs	r3, r3, #4
 8008be2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008be6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008be8:	4b82      	ldr	r3, [pc, #520]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bf2:	4b80      	ldr	r3, [pc, #512]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf6:	08db      	lsrs	r3, r3, #3
 8008bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	fb02 f303 	mul.w	r3, r2, r3
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80e1 	beq.w	8008dd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	f000 8083 	beq.w	8008d24 <HAL_RCC_GetSysClockFreq+0x204>
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	f200 80a1 	bhi.w	8008d68 <HAL_RCC_GetSysClockFreq+0x248>
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_RCC_GetSysClockFreq+0x114>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d056      	beq.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c32:	e099      	b.n	8008d68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c34:	4b6f      	ldr	r3, [pc, #444]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d02d      	beq.n	8008c9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c40:	4b6c      	ldr	r3, [pc, #432]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	08db      	lsrs	r3, r3, #3
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	4a6b      	ldr	r2, [pc, #428]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	ee07 3a90 	vmov	s15, r3
 8008c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6a:	4b62      	ldr	r3, [pc, #392]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008c9a:	e087      	b.n	8008dac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008e08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cae:	4b51      	ldr	r3, [pc, #324]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cde:	e065      	b.n	8008dac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf2:	4b40      	ldr	r3, [pc, #256]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d22:	e043      	b.n	8008dac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008e10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d36:	4b2f      	ldr	r3, [pc, #188]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d66:	e021      	b.n	8008dac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008daa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008dac:	4b11      	ldr	r3, [pc, #68]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db0:	0a5b      	lsrs	r3, r3, #9
 8008db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008db6:	3301      	adds	r3, #1
 8008db8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dd0:	ee17 3a90 	vmov	r3, s15
 8008dd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008dd6:	e005      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61bb      	str	r3, [r7, #24]
      break;
 8008ddc:	e002      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008dde:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008de0:	61bb      	str	r3, [r7, #24]
      break;
 8008de2:	bf00      	nop
  }

  return sysclockfreq;
 8008de4:	69bb      	ldr	r3, [r7, #24]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3724      	adds	r7, #36	@ 0x24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400
 8008df8:	03d09000 	.word	0x03d09000
 8008dfc:	003d0900 	.word	0x003d0900
 8008e00:	017d7840 	.word	0x017d7840
 8008e04:	46000000 	.word	0x46000000
 8008e08:	4c742400 	.word	0x4c742400
 8008e0c:	4a742400 	.word	0x4a742400
 8008e10:	4bbebc20 	.word	0x4bbebc20

08008e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e1a:	f7ff fe81 	bl	8008b20 <HAL_RCC_GetSysClockFreq>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	0a1b      	lsrs	r3, r3, #8
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	490f      	ldr	r1, [pc, #60]	@ (8008e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e2c:	5ccb      	ldrb	r3, [r1, r3]
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	fa22 f303 	lsr.w	r3, r2, r3
 8008e36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e38:	4b0a      	ldr	r3, [pc, #40]	@ (8008e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	4a09      	ldr	r2, [pc, #36]	@ (8008e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	f003 031f 	and.w	r3, r3, #31
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4e:	4a07      	ldr	r2, [pc, #28]	@ (8008e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008e50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e52:	4a07      	ldr	r2, [pc, #28]	@ (8008e70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e58:	4b04      	ldr	r3, [pc, #16]	@ (8008e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	58024400 	.word	0x58024400
 8008e68:	08010600 	.word	0x08010600
 8008e6c:	24000054 	.word	0x24000054
 8008e70:	24000050 	.word	0x24000050

08008e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e78:	f7ff ffcc 	bl	8008e14 <HAL_RCC_GetHCLKFreq>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	091b      	lsrs	r3, r3, #4
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	4904      	ldr	r1, [pc, #16]	@ (8008e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e8a:	5ccb      	ldrb	r3, [r1, r3]
 8008e8c:	f003 031f 	and.w	r3, r3, #31
 8008e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	58024400 	.word	0x58024400
 8008e9c:	08010600 	.word	0x08010600

08008ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008ea4:	f7ff ffb6 	bl	8008e14 <HAL_RCC_GetHCLKFreq>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	4904      	ldr	r1, [pc, #16]	@ (8008ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008eb6:	5ccb      	ldrb	r3, [r1, r3]
 8008eb8:	f003 031f 	and.w	r3, r3, #31
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	08010600 	.word	0x08010600

08008ecc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ed0:	b0c6      	sub	sp, #280	@ 0x118
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	ea54 0305 	orrs.w	r3, r4, r5
 8008ef6:	d049      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008efe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f02:	d02f      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008f04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f08:	d828      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f0e:	d01a      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f14:	d822      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f1e:	d007      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f20:	e01c      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f22:	4bab      	ldr	r3, [pc, #684]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f26:	4aaa      	ldr	r2, [pc, #680]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f2e:	e01a      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f34:	3308      	adds	r3, #8
 8008f36:	2102      	movs	r1, #2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f002 fa49 	bl	800b3d0 <RCCEx_PLL2_Config>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f44:	e00f      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f4a:	3328      	adds	r3, #40	@ 0x28
 8008f4c:	2102      	movs	r1, #2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f002 faf0 	bl	800b534 <RCCEx_PLL3_Config>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f5a:	e004      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f62:	e000      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f6e:	4b98      	ldr	r3, [pc, #608]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f7c:	4a94      	ldr	r2, [pc, #592]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f82:	e003      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f98:	f04f 0900 	mov.w	r9, #0
 8008f9c:	ea58 0309 	orrs.w	r3, r8, r9
 8008fa0:	d047      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d82a      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008fac:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb2:	bf00      	nop
 8008fb4:	08008fc9 	.word	0x08008fc9
 8008fb8:	08008fd7 	.word	0x08008fd7
 8008fbc:	08008fed 	.word	0x08008fed
 8008fc0:	0800900b 	.word	0x0800900b
 8008fc4:	0800900b 	.word	0x0800900b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc8:	4b81      	ldr	r3, [pc, #516]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	4a80      	ldr	r2, [pc, #512]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fd4:	e01a      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fda:	3308      	adds	r3, #8
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f002 f9f6 	bl	800b3d0 <RCCEx_PLL2_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fea:	e00f      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff0:	3328      	adds	r3, #40	@ 0x28
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f002 fa9d 	bl	800b534 <RCCEx_PLL3_Config>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009000:	e004      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009008:	e000      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800900a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800900c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009014:	4b6e      	ldr	r3, [pc, #440]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009018:	f023 0107 	bic.w	r1, r3, #7
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009022:	4a6b      	ldr	r2, [pc, #428]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009024:	430b      	orrs	r3, r1
 8009026:	6513      	str	r3, [r2, #80]	@ 0x50
 8009028:	e003      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800902e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800903e:	f04f 0b00 	mov.w	fp, #0
 8009042:	ea5a 030b 	orrs.w	r3, sl, fp
 8009046:	d05b      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009050:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009054:	d03b      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009056:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800905a:	d834      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800905c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009060:	d037      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009062:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009066:	d82e      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009068:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800906c:	d033      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800906e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009072:	d828      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009078:	d01a      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800907a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800907e:	d822      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009084:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009088:	d007      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800908a:	e01c      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800908c:	4b50      	ldr	r3, [pc, #320]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	4a4f      	ldr	r2, [pc, #316]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009098:	e01e      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800909a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909e:	3308      	adds	r3, #8
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f002 f994 	bl	800b3d0 <RCCEx_PLL2_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80090ae:	e013      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b4:	3328      	adds	r3, #40	@ 0x28
 80090b6:	2100      	movs	r1, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f002 fa3b 	bl	800b534 <RCCEx_PLL3_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090c4:	e008      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090cc:	e004      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80090ce:	bf00      	nop
 80090d0:	e002      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80090d2:	bf00      	nop
 80090d4:	e000      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80090d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10b      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090e0:	4b3b      	ldr	r3, [pc, #236]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80090e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090f0:	4a37      	ldr	r2, [pc, #220]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090f2:	430b      	orrs	r3, r1
 80090f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80090f6:	e003      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800910c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009116:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	d05d      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009124:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009128:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800912c:	d03b      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800912e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009132:	d834      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009138:	d037      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800913a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800913e:	d82e      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009140:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009144:	d033      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009146:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800914a:	d828      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800914c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009150:	d01a      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009156:	d822      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800915c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009160:	d007      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009162:	e01c      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009164:	4b1a      	ldr	r3, [pc, #104]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009168:	4a19      	ldr	r2, [pc, #100]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800916a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800916e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009170:	e01e      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009176:	3308      	adds	r3, #8
 8009178:	2100      	movs	r1, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f002 f928 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009180:	4603      	mov	r3, r0
 8009182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009186:	e013      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918c:	3328      	adds	r3, #40	@ 0x28
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f002 f9cf 	bl	800b534 <RCCEx_PLL3_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800919c:	e008      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091a4:	e004      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80091a6:	bf00      	nop
 80091a8:	e002      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80091aa:	bf00      	nop
 80091ac:	e000      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80091ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10d      	bne.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091b8:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80091c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091c8:	4a01      	ldr	r2, [pc, #4]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091ca:	430b      	orrs	r3, r1
 80091cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80091ce:	e005      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80091d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80091e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091ec:	2300      	movs	r3, #0
 80091ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80091f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4313      	orrs	r3, r2
 80091fa:	d03a      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80091fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009202:	2b30      	cmp	r3, #48	@ 0x30
 8009204:	d01f      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009206:	2b30      	cmp	r3, #48	@ 0x30
 8009208:	d819      	bhi.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d00c      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800920e:	2b20      	cmp	r3, #32
 8009210:	d815      	bhi.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d019      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009216:	2b10      	cmp	r3, #16
 8009218:	d111      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921a:	4baa      	ldr	r3, [pc, #680]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800921c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921e:	4aa9      	ldr	r2, [pc, #676]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009226:	e011      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800922c:	3308      	adds	r3, #8
 800922e:	2102      	movs	r1, #2
 8009230:	4618      	mov	r0, r3
 8009232:	f002 f8cd 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009236:	4603      	mov	r3, r0
 8009238:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800923c:	e006      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009244:	e002      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800924a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800924c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009254:	4b9b      	ldr	r3, [pc, #620]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009258:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800925c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009262:	4a98      	ldr	r2, [pc, #608]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009264:	430b      	orrs	r3, r1
 8009266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009268:	e003      	b.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800926a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800926e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800927e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009282:	2300      	movs	r3, #0
 8009284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009288:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800928c:	460b      	mov	r3, r1
 800928e:	4313      	orrs	r3, r2
 8009290:	d051      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009298:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800929c:	d035      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800929e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092a2:	d82e      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80092a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092a8:	d031      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80092aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092ae:	d828      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80092b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092b4:	d01a      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 80092b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ba:	d822      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80092c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c4:	d007      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80092c6:	e01c      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c8:	4b7e      	ldr	r3, [pc, #504]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	4a7d      	ldr	r2, [pc, #500]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092d4:	e01c      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092da:	3308      	adds	r3, #8
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f002 f876 	bl	800b3d0 <RCCEx_PLL2_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092ea:	e011      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f0:	3328      	adds	r3, #40	@ 0x28
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f002 f91d 	bl	800b534 <RCCEx_PLL3_Config>
 80092fa:	4603      	mov	r3, r0
 80092fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009300:	e006      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009308:	e002      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800930e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009318:	4b6a      	ldr	r3, [pc, #424]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800931a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009326:	4a67      	ldr	r2, [pc, #412]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009328:	430b      	orrs	r3, r1
 800932a:	6513      	str	r3, [r2, #80]	@ 0x50
 800932c:	e003      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009332:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009342:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009346:	2300      	movs	r3, #0
 8009348:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800934c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d053      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800935c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009360:	d033      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009362:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009366:	d82c      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009368:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800936c:	d02f      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x502>
 800936e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009372:	d826      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009374:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009378:	d02b      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800937a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800937e:	d820      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009384:	d012      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800938a:	d81a      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d022      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009394:	d115      	bne.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939a:	3308      	adds	r3, #8
 800939c:	2101      	movs	r1, #1
 800939e:	4618      	mov	r0, r3
 80093a0:	f002 f816 	bl	800b3d0 <RCCEx_PLL2_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093aa:	e015      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b0:	3328      	adds	r3, #40	@ 0x28
 80093b2:	2101      	movs	r1, #1
 80093b4:	4618      	mov	r0, r3
 80093b6:	f002 f8bd 	bl	800b534 <RCCEx_PLL3_Config>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093c0:	e00a      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093c8:	e006      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093ca:	bf00      	nop
 80093cc:	e004      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093ce:	bf00      	nop
 80093d0:	e002      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093d2:	bf00      	nop
 80093d4:	e000      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80093e0:	4b38      	ldr	r3, [pc, #224]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ee:	4a35      	ldr	r2, [pc, #212]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80093f4:	e003      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800940a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800940e:	2300      	movs	r3, #0
 8009410:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009414:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009418:	460b      	mov	r3, r1
 800941a:	4313      	orrs	r3, r2
 800941c:	d058      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800941e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009422:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800942a:	d033      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800942c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009430:	d82c      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009436:	d02f      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943c:	d826      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800943e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009442:	d02b      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009444:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009448:	d820      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800944a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800944e:	d012      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009454:	d81a      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d022      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800945a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800945e:	d115      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009464:	3308      	adds	r3, #8
 8009466:	2101      	movs	r1, #1
 8009468:	4618      	mov	r0, r3
 800946a:	f001 ffb1 	bl	800b3d0 <RCCEx_PLL2_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009474:	e015      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947a:	3328      	adds	r3, #40	@ 0x28
 800947c:	2101      	movs	r1, #1
 800947e:	4618      	mov	r0, r3
 8009480:	f002 f858 	bl	800b534 <RCCEx_PLL3_Config>
 8009484:	4603      	mov	r3, r0
 8009486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800948a:	e00a      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009492:	e006      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009494:	bf00      	nop
 8009496:	e004      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009498:	bf00      	nop
 800949a:	e002      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80094a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10e      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80094aa:	4b06      	ldr	r3, [pc, #24]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80094ba:	4a02      	ldr	r2, [pc, #8]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094bc:	430b      	orrs	r3, r1
 80094be:	6593      	str	r3, [r2, #88]	@ 0x58
 80094c0:	e006      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80094c2:	bf00      	nop
 80094c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80094dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094e0:	2300      	movs	r3, #0
 80094e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80094e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4313      	orrs	r3, r2
 80094ee:	d037      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80094f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094fa:	d00e      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80094fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009500:	d816      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d018      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800950a:	d111      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800950c:	4bc4      	ldr	r3, [pc, #784]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800950e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009510:	4ac3      	ldr	r2, [pc, #780]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009518:	e00f      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800951a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800951e:	3308      	adds	r3, #8
 8009520:	2101      	movs	r1, #1
 8009522:	4618      	mov	r0, r3
 8009524:	f001 ff54 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800952e:	e004      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009536:	e000      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800953a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009542:	4bb7      	ldr	r3, [pc, #732]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009546:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800954a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009550:	4ab3      	ldr	r2, [pc, #716]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009552:	430b      	orrs	r3, r1
 8009554:	6513      	str	r3, [r2, #80]	@ 0x50
 8009556:	e003      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800955c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800956c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009570:	2300      	movs	r3, #0
 8009572:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009576:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800957a:	460b      	mov	r3, r1
 800957c:	4313      	orrs	r3, r2
 800957e:	d039      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009586:	2b03      	cmp	r3, #3
 8009588:	d81c      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095cd 	.word	0x080095cd
 8009594:	080095a1 	.word	0x080095a1
 8009598:	080095af 	.word	0x080095af
 800959c:	080095cd 	.word	0x080095cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095a0:	4b9f      	ldr	r3, [pc, #636]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a4:	4a9e      	ldr	r2, [pc, #632]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095ac:	e00f      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b2:	3308      	adds	r3, #8
 80095b4:	2102      	movs	r1, #2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 ff0a 	bl	800b3d0 <RCCEx_PLL2_Config>
 80095bc:	4603      	mov	r3, r0
 80095be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095c2:	e004      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095ca:	e000      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80095cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10a      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095d6:	4b92      	ldr	r3, [pc, #584]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095da:	f023 0103 	bic.w	r1, r3, #3
 80095de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095e4:	4a8e      	ldr	r2, [pc, #568]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095e6:	430b      	orrs	r3, r1
 80095e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095ea:	e003      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009604:	2300      	movs	r3, #0
 8009606:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800960a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800960e:	460b      	mov	r3, r1
 8009610:	4313      	orrs	r3, r2
 8009612:	f000 8099 	beq.w	8009748 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009616:	4b83      	ldr	r3, [pc, #524]	@ (8009824 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a82      	ldr	r2, [pc, #520]	@ (8009824 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800961c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009620:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009622:	f7f9 fa87 	bl	8002b34 <HAL_GetTick>
 8009626:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800962a:	e00b      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800962c:	f7f9 fa82 	bl	8002b34 <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	2b64      	cmp	r3, #100	@ 0x64
 800963a:	d903      	bls.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009642:	e005      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009644:	4b77      	ldr	r3, [pc, #476]	@ (8009824 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0ed      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009654:	2b00      	cmp	r3, #0
 8009656:	d173      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009658:	4b71      	ldr	r3, [pc, #452]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800965a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800965c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009664:	4053      	eors	r3, r2
 8009666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800966a:	2b00      	cmp	r3, #0
 800966c:	d015      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800966e:	4b6c      	ldr	r3, [pc, #432]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009676:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800967a:	4b69      	ldr	r3, [pc, #420]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800967c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800967e:	4a68      	ldr	r2, [pc, #416]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009684:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009686:	4b66      	ldr	r3, [pc, #408]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800968a:	4a65      	ldr	r2, [pc, #404]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800968c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009690:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009692:	4a63      	ldr	r2, [pc, #396]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009698:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a6:	d118      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a8:	f7f9 fa44 	bl	8002b34 <HAL_GetTick>
 80096ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096b0:	e00d      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096b2:	f7f9 fa3f 	bl	8002b34 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80096bc:	1ad2      	subs	r2, r2, r3
 80096be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d903      	bls.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80096cc:	e005      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ce:	4b54      	ldr	r3, [pc, #336]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096d2:	f003 0302 	and.w	r3, r3, #2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0eb      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80096da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d129      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096f2:	d10e      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80096f4:	4b4a      	ldr	r3, [pc, #296]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80096fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009704:	091a      	lsrs	r2, r3, #4
 8009706:	4b48      	ldr	r3, [pc, #288]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009708:	4013      	ands	r3, r2
 800970a:	4a45      	ldr	r2, [pc, #276]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800970c:	430b      	orrs	r3, r1
 800970e:	6113      	str	r3, [r2, #16]
 8009710:	e005      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009712:	4b43      	ldr	r3, [pc, #268]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	4a42      	ldr	r2, [pc, #264]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009718:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800971c:	6113      	str	r3, [r2, #16]
 800971e:	4b40      	ldr	r3, [pc, #256]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009720:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009726:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800972a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800972e:	4a3c      	ldr	r2, [pc, #240]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009730:	430b      	orrs	r3, r1
 8009732:	6713      	str	r3, [r2, #112]	@ 0x70
 8009734:	e008      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800973a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800973e:	e003      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009744:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f002 0301 	and.w	r3, r2, #1
 8009754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009758:	2300      	movs	r3, #0
 800975a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800975e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009762:	460b      	mov	r3, r1
 8009764:	4313      	orrs	r3, r2
 8009766:	f000 808f 	beq.w	8009888 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009770:	2b28      	cmp	r3, #40	@ 0x28
 8009772:	d871      	bhi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009774:	a201      	add	r2, pc, #4	@ (adr r2, 800977c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	08009861 	.word	0x08009861
 8009780:	08009859 	.word	0x08009859
 8009784:	08009859 	.word	0x08009859
 8009788:	08009859 	.word	0x08009859
 800978c:	08009859 	.word	0x08009859
 8009790:	08009859 	.word	0x08009859
 8009794:	08009859 	.word	0x08009859
 8009798:	08009859 	.word	0x08009859
 800979c:	0800982d 	.word	0x0800982d
 80097a0:	08009859 	.word	0x08009859
 80097a4:	08009859 	.word	0x08009859
 80097a8:	08009859 	.word	0x08009859
 80097ac:	08009859 	.word	0x08009859
 80097b0:	08009859 	.word	0x08009859
 80097b4:	08009859 	.word	0x08009859
 80097b8:	08009859 	.word	0x08009859
 80097bc:	08009843 	.word	0x08009843
 80097c0:	08009859 	.word	0x08009859
 80097c4:	08009859 	.word	0x08009859
 80097c8:	08009859 	.word	0x08009859
 80097cc:	08009859 	.word	0x08009859
 80097d0:	08009859 	.word	0x08009859
 80097d4:	08009859 	.word	0x08009859
 80097d8:	08009859 	.word	0x08009859
 80097dc:	08009861 	.word	0x08009861
 80097e0:	08009859 	.word	0x08009859
 80097e4:	08009859 	.word	0x08009859
 80097e8:	08009859 	.word	0x08009859
 80097ec:	08009859 	.word	0x08009859
 80097f0:	08009859 	.word	0x08009859
 80097f4:	08009859 	.word	0x08009859
 80097f8:	08009859 	.word	0x08009859
 80097fc:	08009861 	.word	0x08009861
 8009800:	08009859 	.word	0x08009859
 8009804:	08009859 	.word	0x08009859
 8009808:	08009859 	.word	0x08009859
 800980c:	08009859 	.word	0x08009859
 8009810:	08009859 	.word	0x08009859
 8009814:	08009859 	.word	0x08009859
 8009818:	08009859 	.word	0x08009859
 800981c:	08009861 	.word	0x08009861
 8009820:	58024400 	.word	0x58024400
 8009824:	58024800 	.word	0x58024800
 8009828:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009830:	3308      	adds	r3, #8
 8009832:	2101      	movs	r1, #1
 8009834:	4618      	mov	r0, r3
 8009836:	f001 fdcb 	bl	800b3d0 <RCCEx_PLL2_Config>
 800983a:	4603      	mov	r3, r0
 800983c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009840:	e00f      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009846:	3328      	adds	r3, #40	@ 0x28
 8009848:	2101      	movs	r1, #1
 800984a:	4618      	mov	r0, r3
 800984c:	f001 fe72 	bl	800b534 <RCCEx_PLL3_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009856:	e004      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800985e:	e000      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10a      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800986a:	4bbf      	ldr	r3, [pc, #764]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800986c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009876:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009878:	4abb      	ldr	r2, [pc, #748]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800987a:	430b      	orrs	r3, r1
 800987c:	6553      	str	r3, [r2, #84]	@ 0x54
 800987e:	e003      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f002 0302 	and.w	r3, r2, #2
 8009894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009898:	2300      	movs	r3, #0
 800989a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800989e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4313      	orrs	r3, r2
 80098a6:	d041      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80098a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	d824      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80098b2:	a201      	add	r2, pc, #4	@ (adr r2, 80098b8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	08009905 	.word	0x08009905
 80098bc:	080098d1 	.word	0x080098d1
 80098c0:	080098e7 	.word	0x080098e7
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
 80098cc:	08009905 	.word	0x08009905
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d4:	3308      	adds	r3, #8
 80098d6:	2101      	movs	r1, #1
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fd79 	bl	800b3d0 <RCCEx_PLL2_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098e4:	e00f      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ea:	3328      	adds	r3, #40	@ 0x28
 80098ec:	2101      	movs	r1, #1
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 fe20 	bl	800b534 <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098fa:	e004      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009902:	e000      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800990e:	4b96      	ldr	r3, [pc, #600]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009912:	f023 0107 	bic.w	r1, r3, #7
 8009916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800991c:	4a92      	ldr	r2, [pc, #584]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800991e:	430b      	orrs	r3, r1
 8009920:	6553      	str	r3, [r2, #84]	@ 0x54
 8009922:	e003      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f002 0304 	and.w	r3, r2, #4
 8009938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009942:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d044      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009954:	2b05      	cmp	r3, #5
 8009956:	d825      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009958:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	080099ad 	.word	0x080099ad
 8009964:	08009979 	.word	0x08009979
 8009968:	0800998f 	.word	0x0800998f
 800996c:	080099ad 	.word	0x080099ad
 8009970:	080099ad 	.word	0x080099ad
 8009974:	080099ad 	.word	0x080099ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997c:	3308      	adds	r3, #8
 800997e:	2101      	movs	r1, #1
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fd25 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800998c:	e00f      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800998e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009992:	3328      	adds	r3, #40	@ 0x28
 8009994:	2101      	movs	r1, #1
 8009996:	4618      	mov	r0, r3
 8009998:	f001 fdcc 	bl	800b534 <RCCEx_PLL3_Config>
 800999c:	4603      	mov	r3, r0
 800999e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099a2:	e004      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099aa:	e000      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80099ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099b6:	4b6c      	ldr	r3, [pc, #432]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ba:	f023 0107 	bic.w	r1, r3, #7
 80099be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c6:	4a68      	ldr	r2, [pc, #416]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099c8:	430b      	orrs	r3, r1
 80099ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80099cc:	e003      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f002 0320 	and.w	r3, r2, #32
 80099e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099e6:	2300      	movs	r3, #0
 80099e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80099ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4313      	orrs	r3, r2
 80099f4:	d055      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80099f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a02:	d033      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a08:	d82c      	bhi.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a0e:	d02f      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a14:	d826      	bhi.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a1a:	d02b      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009a1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a20:	d820      	bhi.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a26:	d012      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a2c:	d81a      	bhi.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d022      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a36:	d115      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 fcc5 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009a46:	4603      	mov	r3, r0
 8009a48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a4c:	e015      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a52:	3328      	adds	r3, #40	@ 0x28
 8009a54:	2102      	movs	r1, #2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f001 fd6c 	bl	800b534 <RCCEx_PLL3_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a62:	e00a      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a6a:	e006      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a6c:	bf00      	nop
 8009a6e:	e004      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a70:	bf00      	nop
 8009a72:	e002      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a74:	bf00      	nop
 8009a76:	e000      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a82:	4b39      	ldr	r3, [pc, #228]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a92:	4a35      	ldr	r2, [pc, #212]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a94:	430b      	orrs	r3, r1
 8009a96:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a98:	e003      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009aae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ab8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009abc:	460b      	mov	r3, r1
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	d058      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009aca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ace:	d033      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009ad0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ad4:	d82c      	bhi.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ada:	d02f      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae0:	d826      	bhi.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ae6:	d02b      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009ae8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aec:	d820      	bhi.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009af2:	d012      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009af8:	d81a      	bhi.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d022      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b02:	d115      	bne.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b08:	3308      	adds	r3, #8
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 fc5f 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b18:	e015      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1e:	3328      	adds	r3, #40	@ 0x28
 8009b20:	2102      	movs	r1, #2
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fd06 	bl	800b534 <RCCEx_PLL3_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b2e:	e00a      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b36:	e006      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b38:	bf00      	nop
 8009b3a:	e004      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b3c:	bf00      	nop
 8009b3e:	e002      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b40:	bf00      	nop
 8009b42:	e000      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10e      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b4e:	4b06      	ldr	r3, [pc, #24]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b5e:	4a02      	ldr	r2, [pc, #8]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b60:	430b      	orrs	r3, r1
 8009b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b64:	e006      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b84:	2300      	movs	r3, #0
 8009b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4313      	orrs	r3, r2
 8009b92:	d055      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009ba0:	d033      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009ba2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009ba6:	d82c      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bac:	d02f      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb2:	d826      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009bb4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bb8:	d02b      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009bba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bbe:	d820      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bc4:	d012      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bca:	d81a      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d022      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd4:	d115      	bne.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bda:	3308      	adds	r3, #8
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 fbf6 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bea:	e015      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf0:	3328      	adds	r3, #40	@ 0x28
 8009bf2:	2102      	movs	r1, #2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 fc9d 	bl	800b534 <RCCEx_PLL3_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c00:	e00a      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c08:	e006      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e004      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c0e:	bf00      	nop
 8009c10:	e002      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c12:	bf00      	nop
 8009c14:	e000      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c20:	4ba0      	ldr	r3, [pc, #640]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c30:	4a9c      	ldr	r2, [pc, #624]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c32:	430b      	orrs	r3, r1
 8009c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c36:	e003      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f002 0308 	and.w	r3, r2, #8
 8009c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c56:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	d01e      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c6c:	d10c      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c72:	3328      	adds	r3, #40	@ 0x28
 8009c74:	2102      	movs	r1, #2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 fc5c 	bl	800b534 <RCCEx_PLL3_Config>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009c88:	4b86      	ldr	r3, [pc, #536]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c98:	4a82      	ldr	r2, [pc, #520]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f002 0310 	and.w	r3, r2, #16
 8009caa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cb4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	d01e      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cca:	d10c      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd0:	3328      	adds	r3, #40	@ 0x28
 8009cd2:	2102      	movs	r1, #2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f001 fc2d 	bl	800b534 <RCCEx_PLL3_Config>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cf6:	4a6b      	ldr	r2, [pc, #428]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cf8:	430b      	orrs	r3, r1
 8009cfa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d0e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009d12:	460b      	mov	r3, r1
 8009d14:	4313      	orrs	r3, r2
 8009d16:	d03e      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d24:	d022      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d2a:	d81b      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d34:	d00b      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009d36:	e015      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	2100      	movs	r1, #0
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 fb45 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d4c:	e00f      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d52:	3328      	adds	r3, #40	@ 0x28
 8009d54:	2102      	movs	r1, #2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fbec 	bl	800b534 <RCCEx_PLL3_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d62:	e004      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10b      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d76:	4b4b      	ldr	r3, [pc, #300]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d86:	4a47      	ldr	r2, [pc, #284]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d8c:	e003      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009da2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009da4:	2300      	movs	r3, #0
 8009da6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009da8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009dac:	460b      	mov	r3, r1
 8009dae:	4313      	orrs	r3, r2
 8009db0:	d03b      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009dbe:	d01f      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009dc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009dc4:	d818      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009dc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dca:	d003      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009dcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dd0:	d007      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009dd2:	e011      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd4:	4b33      	ldr	r3, [pc, #204]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd8:	4a32      	ldr	r2, [pc, #200]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009de0:	e00f      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de6:	3328      	adds	r3, #40	@ 0x28
 8009de8:	2101      	movs	r1, #1
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fba2 	bl	800b534 <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009df6:	e004      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009dfe:	e000      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e0a:	4b26      	ldr	r3, [pc, #152]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e1a:	4a22      	ldr	r2, [pc, #136]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e20:	e003      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e38:	2300      	movs	r3, #0
 8009e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009e40:	460b      	mov	r3, r1
 8009e42:	4313      	orrs	r3, r2
 8009e44:	d034      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e54:	d007      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009e56:	e011      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e58:	4b12      	ldr	r3, [pc, #72]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5c:	4a11      	ldr	r2, [pc, #68]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e64:	e00e      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 faae 	bl	800b3d0 <RCCEx_PLL2_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e7a:	e003      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10d      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e9a:	4a02      	ldr	r2, [pc, #8]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ea0:	e006      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ec2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	d00c      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed0:	3328      	adds	r3, #40	@ 0x28
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fb2d 	bl	800b534 <RCCEx_PLL3_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ef8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009efc:	460b      	mov	r3, r1
 8009efe:	4313      	orrs	r3, r2
 8009f00:	d036      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f0c:	d018      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f12:	d811      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f18:	d014      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f1e:	d80b      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d011      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f28:	d106      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2a:	4bb7      	ldr	r3, [pc, #732]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2e:	4ab6      	ldr	r2, [pc, #728]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f36:	e008      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f3e:	e004      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009f40:	bf00      	nop
 8009f42:	e002      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009f44:	bf00      	nop
 8009f46:	e000      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10a      	bne.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f52:	4bad      	ldr	r3, [pc, #692]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f60:	4aa9      	ldr	r2, [pc, #676]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f62:	430b      	orrs	r3, r1
 8009f64:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f66:	e003      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009f7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f7e:	2300      	movs	r3, #0
 8009f80:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009f86:	460b      	mov	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	d009      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f8c:	4b9e      	ldr	r3, [pc, #632]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9a:	4a9b      	ldr	r2, [pc, #620]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fae:	2300      	movs	r3, #0
 8009fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fb2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	d009      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fbc:	4b92      	ldr	r3, [pc, #584]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fca:	4a8f      	ldr	r2, [pc, #572]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fcc:	430b      	orrs	r3, r1
 8009fce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fde:	2300      	movs	r3, #0
 8009fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fe2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	d00e      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fec:	4b86      	ldr	r3, [pc, #536]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	4a85      	ldr	r2, [pc, #532]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ff6:	6113      	str	r3, [r2, #16]
 8009ff8:	4b83      	ldr	r3, [pc, #524]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ffa:	6919      	ldr	r1, [r3, #16]
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a000:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a004:	4a80      	ldr	r2, [pc, #512]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a006:	430b      	orrs	r3, r1
 800a008:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a016:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a018:	2300      	movs	r3, #0
 800a01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a01c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a020:	460b      	mov	r3, r1
 800a022:	4313      	orrs	r3, r2
 800a024:	d009      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a026:	4b78      	ldr	r3, [pc, #480]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a02a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a034:	4a74      	ldr	r2, [pc, #464]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a036:	430b      	orrs	r3, r1
 800a038:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a042:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a046:	633b      	str	r3, [r7, #48]	@ 0x30
 800a048:	2300      	movs	r3, #0
 800a04a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a04c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a050:	460b      	mov	r3, r1
 800a052:	4313      	orrs	r3, r2
 800a054:	d00a      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a056:	4b6c      	ldr	r3, [pc, #432]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a05a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a066:	4a68      	ldr	r2, [pc, #416]	@ (800a208 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a068:	430b      	orrs	r3, r1
 800a06a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	2100      	movs	r1, #0
 800a076:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a07e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a082:	460b      	mov	r3, r1
 800a084:	4313      	orrs	r3, r2
 800a086:	d011      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08c:	3308      	adds	r3, #8
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f001 f99d 	bl	800b3d0 <RCCEx_PLL2_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a09c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	6239      	str	r1, [r7, #32]
 800a0b8:	f003 0302 	and.w	r3, r3, #2
 800a0bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	d011      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 f97d 	bl	800b3d0 <RCCEx_PLL2_Config>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a0dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	61b9      	str	r1, [r7, #24]
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	61fb      	str	r3, [r7, #28]
 800a0fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a102:	460b      	mov	r3, r1
 800a104:	4313      	orrs	r3, r2
 800a106:	d011      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10c:	3308      	adds	r3, #8
 800a10e:	2102      	movs	r1, #2
 800a110:	4618      	mov	r0, r3
 800a112:	f001 f95d 	bl	800b3d0 <RCCEx_PLL2_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a11c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a128:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	2100      	movs	r1, #0
 800a136:	6139      	str	r1, [r7, #16]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	617b      	str	r3, [r7, #20]
 800a13e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a142:	460b      	mov	r3, r1
 800a144:	4313      	orrs	r3, r2
 800a146:	d011      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14c:	3328      	adds	r3, #40	@ 0x28
 800a14e:	2100      	movs	r1, #0
 800a150:	4618      	mov	r0, r3
 800a152:	f001 f9ef 	bl	800b534 <RCCEx_PLL3_Config>
 800a156:	4603      	mov	r3, r0
 800a158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a15c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	2100      	movs	r1, #0
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a182:	460b      	mov	r3, r1
 800a184:	4313      	orrs	r3, r2
 800a186:	d011      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a18c:	3328      	adds	r3, #40	@ 0x28
 800a18e:	2101      	movs	r1, #1
 800a190:	4618      	mov	r0, r3
 800a192:	f001 f9cf 	bl	800b534 <RCCEx_PLL3_Config>
 800a196:	4603      	mov	r3, r0
 800a198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a19c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6039      	str	r1, [r7, #0]
 800a1b8:	f003 0320 	and.w	r3, r3, #32
 800a1bc:	607b      	str	r3, [r7, #4]
 800a1be:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	d011      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1cc:	3328      	adds	r3, #40	@ 0x28
 800a1ce:	2102      	movs	r1, #2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f001 f9af 	bl	800b534 <RCCEx_PLL3_Config>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d003      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a1ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e000      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a200:	46bd      	mov	sp, r7
 800a202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a206:	bf00      	nop
 800a208:	58024400 	.word	0x58024400

0800a20c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b090      	sub	sp, #64	@ 0x40
 800a210:	af00      	add	r7, sp, #0
 800a212:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a21a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a21e:	430b      	orrs	r3, r1
 800a220:	f040 8094 	bne.w	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a224:	4b9b      	ldr	r3, [pc, #620]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a228:	f003 0307 	and.w	r3, r3, #7
 800a22c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a230:	2b04      	cmp	r3, #4
 800a232:	f200 8087 	bhi.w	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a236:	a201      	add	r2, pc, #4	@ (adr r2, 800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23c:	0800a251 	.word	0x0800a251
 800a240:	0800a279 	.word	0x0800a279
 800a244:	0800a2a1 	.word	0x0800a2a1
 800a248:	0800a33d 	.word	0x0800a33d
 800a24c:	0800a2c9 	.word	0x0800a2c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a250:	4b90      	ldr	r3, [pc, #576]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a25c:	d108      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a25e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a262:	4618      	mov	r0, r3
 800a264:	f000 ff62 	bl	800b12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a26c:	f000 bc93 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a274:	f000 bc8f 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a278:	4b86      	ldr	r3, [pc, #536]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a284:	d108      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a286:	f107 0318 	add.w	r3, r7, #24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fca6 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a294:	f000 bc7f 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29c:	f000 bc7b 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2a0:	4b7c      	ldr	r3, [pc, #496]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ac:	d108      	bne.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ae:	f107 030c 	add.w	r3, r7, #12
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fde6 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2bc:	f000 bc6b 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c4:	f000 bc67 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2c8:	4b72      	ldr	r3, [pc, #456]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2d2:	4b70      	ldr	r3, [pc, #448]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0304 	and.w	r3, r3, #4
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d10c      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d109      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2e4:	4b6b      	ldr	r3, [pc, #428]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	08db      	lsrs	r3, r3, #3
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	4a6a      	ldr	r2, [pc, #424]	@ (800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2f6:	e01f      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2f8:	4b66      	ldr	r3, [pc, #408]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a304:	d106      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a30c:	d102      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a30e:	4b63      	ldr	r3, [pc, #396]	@ (800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a312:	e011      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a314:	4b5f      	ldr	r3, [pc, #380]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a31c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a320:	d106      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a328:	d102      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a32a:	4b5d      	ldr	r3, [pc, #372]	@ (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a32e:	e003      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a334:	f000 bc2f 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a338:	f000 bc2d 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a33c:	4b59      	ldr	r3, [pc, #356]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a340:	f000 bc29 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a348:	f000 bc25 	b.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a350:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a354:	430b      	orrs	r3, r1
 800a356:	f040 80a7 	bne.w	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a35a:	4b4e      	ldr	r3, [pc, #312]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a35c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a35e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a36a:	d054      	beq.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a372:	f200 808b 	bhi.w	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a37c:	f000 8083 	beq.w	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a382:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a386:	f200 8081 	bhi.w	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a390:	d02f      	beq.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a398:	d878      	bhi.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3a6:	d012      	beq.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a3a8:	e070      	b.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3aa:	4b3a      	ldr	r3, [pc, #232]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3b6:	d107      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 feb5 	bl	800b12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3c6:	e3e6      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3cc:	e3e3      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3ce:	4b31      	ldr	r3, [pc, #196]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3da:	d107      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3dc:	f107 0318 	add.w	r3, r7, #24
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 fbfb 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ea:	e3d4      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f0:	e3d1      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3f2:	4b28      	ldr	r3, [pc, #160]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3fe:	d107      	bne.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a400:	f107 030c 	add.w	r3, r7, #12
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fd3d 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a40e:	e3c2      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a414:	e3bf      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a416:	4b1f      	ldr	r3, [pc, #124]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a41a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a41e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a420:	4b1c      	ldr	r3, [pc, #112]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b04      	cmp	r3, #4
 800a42a:	d10c      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a432:	4b18      	ldr	r3, [pc, #96]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	08db      	lsrs	r3, r3, #3
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	4a16      	ldr	r2, [pc, #88]	@ (800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a43e:	fa22 f303 	lsr.w	r3, r2, r3
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a444:	e01e      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a446:	4b13      	ldr	r3, [pc, #76]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a44e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a452:	d106      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a45a:	d102      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a45c:	4b0f      	ldr	r3, [pc, #60]	@ (800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a460:	e010      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a462:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a46a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a46e:	d106      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a476:	d102      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a478:	4b09      	ldr	r3, [pc, #36]	@ (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a47c:	e002      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a47e:	2300      	movs	r3, #0
 800a480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a482:	e388      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a484:	e387      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a486:	4b07      	ldr	r3, [pc, #28]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a48a:	e384      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a490:	e381      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a492:	bf00      	nop
 800a494:	58024400 	.word	0x58024400
 800a498:	03d09000 	.word	0x03d09000
 800a49c:	003d0900 	.word	0x003d0900
 800a4a0:	017d7840 	.word	0x017d7840
 800a4a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ac:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	f040 809c 	bne.w	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a4b6:	4b9e      	ldr	r3, [pc, #632]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ba:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a4be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4c6:	d054      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4ce:	f200 808b 	bhi.w	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4d8:	f000 8083 	beq.w	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4e2:	f200 8081 	bhi.w	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4ec:	d02f      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4f4:	d878      	bhi.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d004      	beq.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a502:	d012      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a504:	e070      	b.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a506:	4b8a      	ldr	r3, [pc, #552]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a50e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a512:	d107      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fe07 	bl	800b12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a522:	e338      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a528:	e335      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a52a:	4b81      	ldr	r3, [pc, #516]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a536:	d107      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a538:	f107 0318 	add.w	r3, r7, #24
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fb4d 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a546:	e326      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54c:	e323      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a54e:	4b78      	ldr	r3, [pc, #480]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a55a:	d107      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a55c:	f107 030c 	add.w	r3, r7, #12
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fc8f 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a56a:	e314      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a570:	e311      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a572:	4b6f      	ldr	r3, [pc, #444]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a576:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a57a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a57c:	4b6c      	ldr	r3, [pc, #432]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b04      	cmp	r3, #4
 800a586:	d10c      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d109      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a58e:	4b68      	ldr	r3, [pc, #416]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	08db      	lsrs	r3, r3, #3
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	4a66      	ldr	r2, [pc, #408]	@ (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a59a:	fa22 f303 	lsr.w	r3, r2, r3
 800a59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5a0:	e01e      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5a2:	4b63      	ldr	r3, [pc, #396]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ae:	d106      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5b6:	d102      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5b8:	4b5f      	ldr	r3, [pc, #380]	@ (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5bc:	e010      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5be:	4b5c      	ldr	r3, [pc, #368]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5ca:	d106      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5d2:	d102      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5d4:	4b59      	ldr	r3, [pc, #356]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d8:	e002      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5de:	e2da      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5e0:	e2d9      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5e2:	4b57      	ldr	r3, [pc, #348]	@ (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e6:	e2d6      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ec:	e2d3      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a5ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a5f6:	430b      	orrs	r3, r1
 800a5f8:	f040 80a7 	bne.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a5fc:	4b4c      	ldr	r3, [pc, #304]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a600:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a604:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a60c:	d055      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a614:	f200 8096 	bhi.w	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a61e:	f000 8084 	beq.w	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a628:	f200 808c 	bhi.w	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a632:	d030      	beq.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a63a:	f200 8083 	bhi.w	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a64a:	d012      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a64c:	e07a      	b.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a64e:	4b38      	ldr	r3, [pc, #224]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a65a:	d107      	bne.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a65c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fd63 	bl	800b12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66a:	e294      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a670:	e291      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a672:	4b2f      	ldr	r3, [pc, #188]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a67a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a67e:	d107      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a680:	f107 0318 	add.w	r3, r7, #24
 800a684:	4618      	mov	r0, r3
 800a686:	f000 faa9 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68e:	e282      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a694:	e27f      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a696:	4b26      	ldr	r3, [pc, #152]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a69e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6a2:	d107      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fbeb 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b2:	e270      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b8:	e26d      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d10c      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d109      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6d6:	4b16      	ldr	r3, [pc, #88]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	08db      	lsrs	r3, r3, #3
 800a6dc:	f003 0303 	and.w	r3, r3, #3
 800a6e0:	4a14      	ldr	r2, [pc, #80]	@ (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e8:	e01e      	b.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ea:	4b11      	ldr	r3, [pc, #68]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6f6:	d106      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6fe:	d102      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a700:	4b0d      	ldr	r3, [pc, #52]	@ (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a704:	e010      	b.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a706:	4b0a      	ldr	r3, [pc, #40]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a70e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a712:	d106      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a71a:	d102      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a71c:	4b07      	ldr	r3, [pc, #28]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a720:	e002      	b.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a726:	e236      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a728:	e235      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a72a:	4b05      	ldr	r3, [pc, #20]	@ (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72e:	e232      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a730:	58024400 	.word	0x58024400
 800a734:	03d09000 	.word	0x03d09000
 800a738:	003d0900 	.word	0x003d0900
 800a73c:	017d7840 	.word	0x017d7840
 800a740:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a748:	e225      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a752:	430b      	orrs	r3, r1
 800a754:	f040 8085 	bne.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a758:	4b9c      	ldr	r3, [pc, #624]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a75a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a75c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a760:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a768:	d06b      	beq.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a770:	d874      	bhi.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a778:	d056      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a780:	d86c      	bhi.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a788:	d03b      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a790:	d864      	bhi.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a798:	d021      	beq.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a0:	d85c      	bhi.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d004      	beq.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ae:	d004      	beq.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a7b0:	e054      	b.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a7b2:	f7fe fb5f 	bl	8008e74 <HAL_RCC_GetPCLK1Freq>
 800a7b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7b8:	e1ed      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7ba:	4b84      	ldr	r3, [pc, #528]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c6:	d107      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c8:	f107 0318 	add.w	r3, r7, #24
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fa05 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d6:	e1de      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7dc:	e1db      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7de:	4b7b      	ldr	r3, [pc, #492]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ea:	d107      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ec:	f107 030c 	add.w	r3, r7, #12
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fb47 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fa:	e1cc      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a800:	e1c9      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a802:	4b72      	ldr	r3, [pc, #456]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0304 	and.w	r3, r3, #4
 800a80a:	2b04      	cmp	r3, #4
 800a80c:	d109      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a80e:	4b6f      	ldr	r3, [pc, #444]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	08db      	lsrs	r3, r3, #3
 800a814:	f003 0303 	and.w	r3, r3, #3
 800a818:	4a6d      	ldr	r2, [pc, #436]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a81a:	fa22 f303 	lsr.w	r3, r2, r3
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a820:	e1b9      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a826:	e1b6      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a828:	4b68      	ldr	r3, [pc, #416]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a834:	d102      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a836:	4b67      	ldr	r3, [pc, #412]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a83a:	e1ac      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a840:	e1a9      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a842:	4b62      	ldr	r3, [pc, #392]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a84a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a84e:	d102      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a850:	4b61      	ldr	r3, [pc, #388]	@ (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a854:	e19f      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85a:	e19c      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a860:	e199      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a866:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a86a:	430b      	orrs	r3, r1
 800a86c:	d173      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a86e:	4b57      	ldr	r3, [pc, #348]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a872:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a876:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a87e:	d02f      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a886:	d863      	bhi.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d004      	beq.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a894:	d012      	beq.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a896:	e05b      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a898:	4b4c      	ldr	r3, [pc, #304]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8a4:	d107      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a6:	f107 0318 	add.w	r3, r7, #24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 f996 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b4:	e16f      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ba:	e16c      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8bc:	4b43      	ldr	r3, [pc, #268]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8c8:	d107      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ca:	f107 030c 	add.w	r3, r7, #12
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fad8 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d8:	e15d      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8de:	e15a      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8e0:	4b3a      	ldr	r3, [pc, #232]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8ea:	4b38      	ldr	r3, [pc, #224]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d10c      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d109      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8fc:	4b33      	ldr	r3, [pc, #204]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	08db      	lsrs	r3, r3, #3
 800a902:	f003 0303 	and.w	r3, r3, #3
 800a906:	4a32      	ldr	r2, [pc, #200]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a908:	fa22 f303 	lsr.w	r3, r2, r3
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a90e:	e01e      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a910:	4b2e      	ldr	r3, [pc, #184]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a91c:	d106      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a924:	d102      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a926:	4b2b      	ldr	r3, [pc, #172]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a92a:	e010      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a92c:	4b27      	ldr	r3, [pc, #156]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a938:	d106      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a940:	d102      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a942:	4b25      	ldr	r3, [pc, #148]	@ (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a946:	e002      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a94c:	e123      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a94e:	e122      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a954:	e11f      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a95a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a95e:	430b      	orrs	r3, r1
 800a960:	d13c      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a962:	4b1a      	ldr	r3, [pc, #104]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a96a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d004      	beq.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a978:	d012      	beq.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a97a:	e023      	b.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a97c:	4b13      	ldr	r3, [pc, #76]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a988:	d107      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a98a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 fbcc 	bl	800b12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a998:	e0fd      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99e:	e0fa      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9ac:	d107      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ae:	f107 0318 	add.w	r3, r7, #24
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 f912 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9bc:	e0eb      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c2:	e0e8      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c8:	e0e5      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9ca:	bf00      	nop
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	03d09000 	.word	0x03d09000
 800a9d4:	003d0900 	.word	0x003d0900
 800a9d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a9e4:	430b      	orrs	r3, r1
 800a9e6:	f040 8085 	bne.w	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a9ea:	4b6d      	ldr	r3, [pc, #436]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a9f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9fa:	d06b      	beq.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa02:	d874      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa0a:	d056      	beq.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa12:	d86c      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aa14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa1a:	d03b      	beq.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa22:	d864      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa2a:	d021      	beq.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa32:	d85c      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa40:	d004      	beq.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800aa42:	e054      	b.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa44:	f000 f8b4 	bl	800abb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa4a:	e0a4      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa4c:	4b54      	ldr	r3, [pc, #336]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa58:	d107      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa5a:	f107 0318 	add.w	r3, r7, #24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 f8bc 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa68:	e095      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6e:	e092      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa70:	4b4b      	ldr	r3, [pc, #300]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa7c:	d107      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa7e:	f107 030c 	add.w	r3, r7, #12
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f9fe 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa8c:	e083      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa92:	e080      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa94:	4b42      	ldr	r3, [pc, #264]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d109      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa0:	4b3f      	ldr	r3, [pc, #252]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	08db      	lsrs	r3, r3, #3
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	4a3e      	ldr	r2, [pc, #248]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab2:	e070      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab8:	e06d      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aaba:	4b39      	ldr	r3, [pc, #228]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aac6:	d102      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800aac8:	4b37      	ldr	r3, [pc, #220]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aaca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aacc:	e063      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad2:	e060      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aad4:	4b32      	ldr	r3, [pc, #200]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aadc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aae0:	d102      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800aae2:	4b32      	ldr	r3, [pc, #200]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae6:	e056      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaec:	e053      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf2:	e050      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aaf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aafc:	430b      	orrs	r3, r1
 800aafe:	d148      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ab00:	4b27      	ldr	r3, [pc, #156]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab10:	d02a      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ab12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab18:	d838      	bhi.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d004      	beq.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ab20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab26:	d00d      	beq.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ab28:	e030      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab36:	d102      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ab38:	4b1c      	ldr	r3, [pc, #112]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab3c:	e02b      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab42:	e028      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab44:	4b16      	ldr	r3, [pc, #88]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab50:	d107      	bne.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 fae8 	bl	800b12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab60:	e019      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab66:	e016      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab68:	4b0d      	ldr	r3, [pc, #52]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab74:	d107      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab76:	f107 0318 	add.w	r3, r7, #24
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 f82e 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab84:	e007      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8a:	e004      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab90:	e001      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ab96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3740      	adds	r7, #64	@ 0x40
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	58024400 	.word	0x58024400
 800aba4:	03d09000 	.word	0x03d09000
 800aba8:	003d0900 	.word	0x003d0900
 800abac:	017d7840 	.word	0x017d7840

0800abb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800abb4:	f7fe f92e 	bl	8008e14 <HAL_RCC_GetHCLKFreq>
 800abb8:	4602      	mov	r2, r0
 800abba:	4b06      	ldr	r3, [pc, #24]	@ (800abd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	091b      	lsrs	r3, r3, #4
 800abc0:	f003 0307 	and.w	r3, r3, #7
 800abc4:	4904      	ldr	r1, [pc, #16]	@ (800abd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800abc6:	5ccb      	ldrb	r3, [r1, r3]
 800abc8:	f003 031f 	and.w	r3, r3, #31
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	58024400 	.word	0x58024400
 800abd8:	08010600 	.word	0x08010600

0800abdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800abdc:	b480      	push	{r7}
 800abde:	b089      	sub	sp, #36	@ 0x24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abe4:	4ba1      	ldr	r3, [pc, #644]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe8:	f003 0303 	and.w	r3, r3, #3
 800abec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800abee:	4b9f      	ldr	r3, [pc, #636]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf2:	0b1b      	lsrs	r3, r3, #12
 800abf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abfa:	4b9c      	ldr	r3, [pc, #624]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfe:	091b      	lsrs	r3, r3, #4
 800ac00:	f003 0301 	and.w	r3, r3, #1
 800ac04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac06:	4b99      	ldr	r3, [pc, #612]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac0a:	08db      	lsrs	r3, r3, #3
 800ac0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	fb02 f303 	mul.w	r3, r2, r3
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8111 	beq.w	800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	f000 8083 	beq.w	800ad38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	f200 80a1 	bhi.w	800ad7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d003      	beq.n	800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d056      	beq.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac46:	e099      	b.n	800ad7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac48:	4b88      	ldr	r3, [pc, #544]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0320 	and.w	r3, r3, #32
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d02d      	beq.n	800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac54:	4b85      	ldr	r3, [pc, #532]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	08db      	lsrs	r3, r3, #3
 800ac5a:	f003 0303 	and.w	r3, r3, #3
 800ac5e:	4a84      	ldr	r2, [pc, #528]	@ (800ae70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac60:	fa22 f303 	lsr.w	r3, r2, r3
 800ac64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	ee07 3a90 	vmov	s15, r3
 800ac76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac7e:	4b7b      	ldr	r3, [pc, #492]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acae:	e087      	b.n	800adc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800acbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc2:	4b6a      	ldr	r3, [pc, #424]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ace6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acf2:	e065      	b.n	800adc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad06:	4b59      	ldr	r3, [pc, #356]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad36:	e043      	b.n	800adc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4a:	4b48      	ldr	r3, [pc, #288]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad7a:	e021      	b.n	800adc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8e:	4b37      	ldr	r3, [pc, #220]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ada6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800adc0:	4b2a      	ldr	r3, [pc, #168]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc4:	0a5b      	lsrs	r3, r3, #9
 800adc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800add6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adda:	edd7 6a07 	vldr	s13, [r7, #28]
 800adde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ade2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade6:	ee17 2a90 	vmov	r2, s15
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800adee:	4b1f      	ldr	r3, [pc, #124]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf2:	0c1b      	lsrs	r3, r3, #16
 800adf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adf8:	ee07 3a90 	vmov	s15, r3
 800adfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae08:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae14:	ee17 2a90 	vmov	r2, s15
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ae1c:	4b13      	ldr	r3, [pc, #76]	@ (800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae20:	0e1b      	lsrs	r3, r3, #24
 800ae22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae42:	ee17 2a90 	vmov	r2, s15
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae4a:	e008      	b.n	800ae5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	609a      	str	r2, [r3, #8]
}
 800ae5e:	bf00      	nop
 800ae60:	3724      	adds	r7, #36	@ 0x24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	58024400 	.word	0x58024400
 800ae70:	03d09000 	.word	0x03d09000
 800ae74:	46000000 	.word	0x46000000
 800ae78:	4c742400 	.word	0x4c742400
 800ae7c:	4a742400 	.word	0x4a742400
 800ae80:	4bbebc20 	.word	0x4bbebc20

0800ae84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b089      	sub	sp, #36	@ 0x24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae8c:	4ba1      	ldr	r3, [pc, #644]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae90:	f003 0303 	and.w	r3, r3, #3
 800ae94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ae96:	4b9f      	ldr	r3, [pc, #636]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9a:	0d1b      	lsrs	r3, r3, #20
 800ae9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aea0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aea2:	4b9c      	ldr	r3, [pc, #624]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea6:	0a1b      	lsrs	r3, r3, #8
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aeae:	4b99      	ldr	r3, [pc, #612]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeb2:	08db      	lsrs	r3, r3, #3
 800aeb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	fb02 f303 	mul.w	r3, r2, r3
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 8111 	beq.w	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	f000 8083 	beq.w	800afe0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	f200 80a1 	bhi.w	800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d003      	beq.n	800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d056      	beq.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aeee:	e099      	b.n	800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aef0:	4b88      	ldr	r3, [pc, #544]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0320 	and.w	r3, r3, #32
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d02d      	beq.n	800af58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aefc:	4b85      	ldr	r3, [pc, #532]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	08db      	lsrs	r3, r3, #3
 800af02:	f003 0303 	and.w	r3, r3, #3
 800af06:	4a84      	ldr	r2, [pc, #528]	@ (800b118 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af08:	fa22 f303 	lsr.w	r3, r2, r3
 800af0c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af26:	4b7b      	ldr	r3, [pc, #492]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af36:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af56:	e087      	b.n	800b068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b120 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6a:	4b6a      	ldr	r3, [pc, #424]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af72:	ee07 3a90 	vmov	s15, r3
 800af76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af9a:	e065      	b.n	800b068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afae:	4b59      	ldr	r3, [pc, #356]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afde:	e043      	b.n	800b068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff2:	4b48      	ldr	r3, [pc, #288]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b002:	ed97 6a03 	vldr	s12, [r7, #12]
 800b006:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b022:	e021      	b.n	800b068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b036:	4b37      	ldr	r3, [pc, #220]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03e:	ee07 3a90 	vmov	s15, r3
 800b042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b046:	ed97 6a03 	vldr	s12, [r7, #12]
 800b04a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b066:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b068:	4b2a      	ldr	r3, [pc, #168]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b06c:	0a5b      	lsrs	r3, r3, #9
 800b06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b07e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b082:	edd7 6a07 	vldr	s13, [r7, #28]
 800b086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b08a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b08e:	ee17 2a90 	vmov	r2, s15
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b096:	4b1f      	ldr	r3, [pc, #124]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09a:	0c1b      	lsrs	r3, r3, #16
 800b09c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0a0:	ee07 3a90 	vmov	s15, r3
 800b0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0bc:	ee17 2a90 	vmov	r2, s15
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b0c4:	4b13      	ldr	r3, [pc, #76]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c8:	0e1b      	lsrs	r3, r3, #24
 800b0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ea:	ee17 2a90 	vmov	r2, s15
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0f2:	e008      	b.n	800b106 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	609a      	str	r2, [r3, #8]
}
 800b106:	bf00      	nop
 800b108:	3724      	adds	r7, #36	@ 0x24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	58024400 	.word	0x58024400
 800b118:	03d09000 	.word	0x03d09000
 800b11c:	46000000 	.word	0x46000000
 800b120:	4c742400 	.word	0x4c742400
 800b124:	4a742400 	.word	0x4a742400
 800b128:	4bbebc20 	.word	0x4bbebc20

0800b12c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b089      	sub	sp, #36	@ 0x24
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b134:	4ba0      	ldr	r3, [pc, #640]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b138:	f003 0303 	and.w	r3, r3, #3
 800b13c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b13e:	4b9e      	ldr	r3, [pc, #632]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b142:	091b      	lsrs	r3, r3, #4
 800b144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b148:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b14a:	4b9b      	ldr	r3, [pc, #620]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b154:	4b98      	ldr	r3, [pc, #608]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b158:	08db      	lsrs	r3, r3, #3
 800b15a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	fb02 f303 	mul.w	r3, r2, r3
 800b164:	ee07 3a90 	vmov	s15, r3
 800b168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 8111 	beq.w	800b39a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	f000 8083 	beq.w	800b286 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	2b02      	cmp	r3, #2
 800b184:	f200 80a1 	bhi.w	800b2ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d056      	beq.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b194:	e099      	b.n	800b2ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b196:	4b88      	ldr	r3, [pc, #544]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 0320 	and.w	r3, r3, #32
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d02d      	beq.n	800b1fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1a2:	4b85      	ldr	r3, [pc, #532]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	08db      	lsrs	r3, r3, #3
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	4a83      	ldr	r2, [pc, #524]	@ (800b3bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	ee07 3a90 	vmov	s15, r3
 800b1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1cc:	4b7a      	ldr	r3, [pc, #488]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d4:	ee07 3a90 	vmov	s15, r3
 800b1d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1fc:	e087      	b.n	800b30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b208:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b20c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b210:	4b69      	ldr	r3, [pc, #420]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b218:	ee07 3a90 	vmov	s15, r3
 800b21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b220:	ed97 6a03 	vldr	s12, [r7, #12]
 800b224:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b22c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b230:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b240:	e065      	b.n	800b30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b254:	4b58      	ldr	r3, [pc, #352]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25c:	ee07 3a90 	vmov	s15, r3
 800b260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b264:	ed97 6a03 	vldr	s12, [r7, #12]
 800b268:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b26c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b280:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b284:	e043      	b.n	800b30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	ee07 3a90 	vmov	s15, r3
 800b28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b290:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b298:	4b47      	ldr	r3, [pc, #284]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a0:	ee07 3a90 	vmov	s15, r3
 800b2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2c8:	e021      	b.n	800b30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	ee07 3a90 	vmov	s15, r3
 800b2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2dc:	4b36      	ldr	r3, [pc, #216]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e4:	ee07 3a90 	vmov	s15, r3
 800b2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b30c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b30e:	4b2a      	ldr	r3, [pc, #168]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b312:	0a5b      	lsrs	r3, r3, #9
 800b314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b318:	ee07 3a90 	vmov	s15, r3
 800b31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b324:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b328:	edd7 6a07 	vldr	s13, [r7, #28]
 800b32c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b334:	ee17 2a90 	vmov	r2, s15
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b33c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b33e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b340:	0c1b      	lsrs	r3, r3, #16
 800b342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b352:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b356:	edd7 6a07 	vldr	s13, [r7, #28]
 800b35a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b362:	ee17 2a90 	vmov	r2, s15
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b36a:	4b13      	ldr	r3, [pc, #76]	@ (800b3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b36c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b36e:	0e1b      	lsrs	r3, r3, #24
 800b370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b374:	ee07 3a90 	vmov	s15, r3
 800b378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b380:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b384:	edd7 6a07 	vldr	s13, [r7, #28]
 800b388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b38c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b390:	ee17 2a90 	vmov	r2, s15
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b398:	e008      	b.n	800b3ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	609a      	str	r2, [r3, #8]
}
 800b3ac:	bf00      	nop
 800b3ae:	3724      	adds	r7, #36	@ 0x24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	58024400 	.word	0x58024400
 800b3bc:	03d09000 	.word	0x03d09000
 800b3c0:	46000000 	.word	0x46000000
 800b3c4:	4c742400 	.word	0x4c742400
 800b3c8:	4a742400 	.word	0x4a742400
 800b3cc:	4bbebc20 	.word	0x4bbebc20

0800b3d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3de:	4b53      	ldr	r3, [pc, #332]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e2:	f003 0303 	and.w	r3, r3, #3
 800b3e6:	2b03      	cmp	r3, #3
 800b3e8:	d101      	bne.n	800b3ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e099      	b.n	800b522 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b3ee:	4b4f      	ldr	r3, [pc, #316]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a4e      	ldr	r2, [pc, #312]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3fa:	f7f7 fb9b 	bl	8002b34 <HAL_GetTick>
 800b3fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b400:	e008      	b.n	800b414 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b402:	f7f7 fb97 	bl	8002b34 <HAL_GetTick>
 800b406:	4602      	mov	r2, r0
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d901      	bls.n	800b414 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e086      	b.n	800b522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b414:	4b45      	ldr	r3, [pc, #276]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1f0      	bne.n	800b402 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b420:	4b42      	ldr	r3, [pc, #264]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b424:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	031b      	lsls	r3, r3, #12
 800b42e:	493f      	ldr	r1, [pc, #252]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b430:	4313      	orrs	r3, r2
 800b432:	628b      	str	r3, [r1, #40]	@ 0x28
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	3b01      	subs	r3, #1
 800b43a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	3b01      	subs	r3, #1
 800b444:	025b      	lsls	r3, r3, #9
 800b446:	b29b      	uxth	r3, r3
 800b448:	431a      	orrs	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	3b01      	subs	r3, #1
 800b450:	041b      	lsls	r3, r3, #16
 800b452:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b456:	431a      	orrs	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	061b      	lsls	r3, r3, #24
 800b460:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b464:	4931      	ldr	r1, [pc, #196]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b466:	4313      	orrs	r3, r2
 800b468:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b46a:	4b30      	ldr	r3, [pc, #192]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	492d      	ldr	r1, [pc, #180]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b47c:	4b2b      	ldr	r3, [pc, #172]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b480:	f023 0220 	bic.w	r2, r3, #32
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	4928      	ldr	r1, [pc, #160]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b48e:	4b27      	ldr	r3, [pc, #156]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b492:	4a26      	ldr	r2, [pc, #152]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b494:	f023 0310 	bic.w	r3, r3, #16
 800b498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b49a:	4b24      	ldr	r3, [pc, #144]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b49c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b49e:	4b24      	ldr	r3, [pc, #144]	@ (800b530 <RCCEx_PLL2_Config+0x160>)
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	69d2      	ldr	r2, [r2, #28]
 800b4a6:	00d2      	lsls	r2, r2, #3
 800b4a8:	4920      	ldr	r1, [pc, #128]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b4ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4b4:	f043 0310 	orr.w	r3, r3, #16
 800b4b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d106      	bne.n	800b4ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c4:	4a19      	ldr	r2, [pc, #100]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4cc:	e00f      	b.n	800b4ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d106      	bne.n	800b4e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b4d4:	4b15      	ldr	r3, [pc, #84]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d8:	4a14      	ldr	r2, [pc, #80]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4e0:	e005      	b.n	800b4ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b4e2:	4b12      	ldr	r3, [pc, #72]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e6:	4a11      	ldr	r2, [pc, #68]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b4ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a0e      	ldr	r2, [pc, #56]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b4f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b4f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4fa:	f7f7 fb1b 	bl	8002b34 <HAL_GetTick>
 800b4fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b500:	e008      	b.n	800b514 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b502:	f7f7 fb17 	bl	8002b34 <HAL_GetTick>
 800b506:	4602      	mov	r2, r0
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d901      	bls.n	800b514 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b510:	2303      	movs	r3, #3
 800b512:	e006      	b.n	800b522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b514:	4b05      	ldr	r3, [pc, #20]	@ (800b52c <RCCEx_PLL2_Config+0x15c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0f0      	beq.n	800b502 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	58024400 	.word	0x58024400
 800b530:	ffff0007 	.word	0xffff0007

0800b534 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b542:	4b53      	ldr	r3, [pc, #332]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	d101      	bne.n	800b552 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e099      	b.n	800b686 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b552:	4b4f      	ldr	r3, [pc, #316]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a4e      	ldr	r2, [pc, #312]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b55c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b55e:	f7f7 fae9 	bl	8002b34 <HAL_GetTick>
 800b562:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b564:	e008      	b.n	800b578 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b566:	f7f7 fae5 	bl	8002b34 <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	2b02      	cmp	r3, #2
 800b572:	d901      	bls.n	800b578 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b574:	2303      	movs	r3, #3
 800b576:	e086      	b.n	800b686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b578:	4b45      	ldr	r3, [pc, #276]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1f0      	bne.n	800b566 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b584:	4b42      	ldr	r3, [pc, #264]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b588:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	051b      	lsls	r3, r3, #20
 800b592:	493f      	ldr	r1, [pc, #252]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b594:	4313      	orrs	r3, r2
 800b596:	628b      	str	r3, [r1, #40]	@ 0x28
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	025b      	lsls	r3, r3, #9
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	431a      	orrs	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	041b      	lsls	r3, r3, #16
 800b5b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b5ba:	431a      	orrs	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	061b      	lsls	r3, r3, #24
 800b5c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5c8:	4931      	ldr	r1, [pc, #196]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5ce:	4b30      	ldr	r3, [pc, #192]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	695b      	ldr	r3, [r3, #20]
 800b5da:	492d      	ldr	r1, [pc, #180]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5e0:	4b2b      	ldr	r3, [pc, #172]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	4928      	ldr	r1, [pc, #160]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5f2:	4b27      	ldr	r3, [pc, #156]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f6:	4a26      	ldr	r2, [pc, #152]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b5f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5fe:	4b24      	ldr	r3, [pc, #144]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b602:	4b24      	ldr	r3, [pc, #144]	@ (800b694 <RCCEx_PLL3_Config+0x160>)
 800b604:	4013      	ands	r3, r2
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	69d2      	ldr	r2, [r2, #28]
 800b60a:	00d2      	lsls	r2, r2, #3
 800b60c:	4920      	ldr	r1, [pc, #128]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b60e:	4313      	orrs	r3, r2
 800b610:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b612:	4b1f      	ldr	r3, [pc, #124]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b616:	4a1e      	ldr	r2, [pc, #120]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b61c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d106      	bne.n	800b632 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b624:	4b1a      	ldr	r3, [pc, #104]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b628:	4a19      	ldr	r2, [pc, #100]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b62a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b62e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b630:	e00f      	b.n	800b652 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d106      	bne.n	800b646 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b638:	4b15      	ldr	r3, [pc, #84]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63c:	4a14      	ldr	r2, [pc, #80]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b63e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b644:	e005      	b.n	800b652 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b646:	4b12      	ldr	r3, [pc, #72]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64a:	4a11      	ldr	r2, [pc, #68]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b64c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b650:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b652:	4b0f      	ldr	r3, [pc, #60]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a0e      	ldr	r2, [pc, #56]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b65c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b65e:	f7f7 fa69 	bl	8002b34 <HAL_GetTick>
 800b662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b664:	e008      	b.n	800b678 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b666:	f7f7 fa65 	bl	8002b34 <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	2b02      	cmp	r3, #2
 800b672:	d901      	bls.n	800b678 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e006      	b.n	800b686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b678:	4b05      	ldr	r3, [pc, #20]	@ (800b690 <RCCEx_PLL3_Config+0x15c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0f0      	beq.n	800b666 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b684:	7bfb      	ldrb	r3, [r7, #15]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	58024400 	.word	0x58024400
 800b694:	ffff0007 	.word	0xffff0007

0800b698 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e10f      	b.n	800b8ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a87      	ldr	r2, [pc, #540]	@ (800b8d4 <HAL_SPI_Init+0x23c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <HAL_SPI_Init+0x42>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a86      	ldr	r2, [pc, #536]	@ (800b8d8 <HAL_SPI_Init+0x240>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00a      	beq.n	800b6da <HAL_SPI_Init+0x42>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a84      	ldr	r2, [pc, #528]	@ (800b8dc <HAL_SPI_Init+0x244>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d005      	beq.n	800b6da <HAL_SPI_Init+0x42>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	d901      	bls.n	800b6da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e0f7      	b.n	800b8ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fe3c 	bl	800c358 <SPI_GetPacketSize>
 800b6e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a7b      	ldr	r2, [pc, #492]	@ (800b8d4 <HAL_SPI_Init+0x23c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d00c      	beq.n	800b706 <HAL_SPI_Init+0x6e>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a79      	ldr	r2, [pc, #484]	@ (800b8d8 <HAL_SPI_Init+0x240>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d007      	beq.n	800b706 <HAL_SPI_Init+0x6e>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a78      	ldr	r2, [pc, #480]	@ (800b8dc <HAL_SPI_Init+0x244>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d002      	beq.n	800b706 <HAL_SPI_Init+0x6e>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b08      	cmp	r3, #8
 800b704:	d811      	bhi.n	800b72a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b70a:	4a72      	ldr	r2, [pc, #456]	@ (800b8d4 <HAL_SPI_Init+0x23c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d009      	beq.n	800b724 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a70      	ldr	r2, [pc, #448]	@ (800b8d8 <HAL_SPI_Init+0x240>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d004      	beq.n	800b724 <HAL_SPI_Init+0x8c>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a6f      	ldr	r2, [pc, #444]	@ (800b8dc <HAL_SPI_Init+0x244>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d104      	bne.n	800b72e <HAL_SPI_Init+0x96>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b10      	cmp	r3, #16
 800b728:	d901      	bls.n	800b72e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e0cd      	b.n	800b8ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7f6 fe32 	bl	80023ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0201 	bic.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b76a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b774:	d119      	bne.n	800b7aa <HAL_SPI_Init+0x112>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b77e:	d103      	bne.n	800b788 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b784:	2b00      	cmp	r3, #0
 800b786:	d008      	beq.n	800b79a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10c      	bne.n	800b7aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b798:	d107      	bne.n	800b7aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b7a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00f      	beq.n	800b7d6 <HAL_SPI_Init+0x13e>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	2b06      	cmp	r3, #6
 800b7bc:	d90b      	bls.n	800b7d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	430a      	orrs	r2, r1
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	e007      	b.n	800b7e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b7e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	69da      	ldr	r2, [r3, #28]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ee:	431a      	orrs	r2, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f8:	ea42 0103 	orr.w	r1, r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b810:	431a      	orrs	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b816:	431a      	orrs	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	431a      	orrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	431a      	orrs	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	431a      	orrs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b83a:	431a      	orrs	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	431a      	orrs	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b846:	ea42 0103 	orr.w	r1, r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d113      	bne.n	800b886 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b870:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b884:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f022 0201 	bic.w	r2, r2, #1
 800b894:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00a      	beq.n	800b8b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	430a      	orrs	r2, r1
 800b8b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	40013000 	.word	0x40013000
 800b8d8:	40003800 	.word	0x40003800
 800b8dc:	40003c00 	.word	0x40003c00

0800b8e0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3320      	adds	r3, #32
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8f8:	f7f7 f91c 	bl	8002b34 <HAL_GetTick>
 800b8fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b01      	cmp	r3, #1
 800b908:	d001      	beq.n	800b90e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b90a:	2302      	movs	r3, #2
 800b90c:	e1d1      	b.n	800bcb2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <HAL_SPI_Transmit+0x3a>
 800b914:	88fb      	ldrh	r3, [r7, #6]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e1c9      	b.n	800bcb2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b924:	2b01      	cmp	r3, #1
 800b926:	d101      	bne.n	800b92c <HAL_SPI_Transmit+0x4c>
 800b928:	2302      	movs	r3, #2
 800b92a:	e1c2      	b.n	800bcb2 <HAL_SPI_Transmit+0x3d2>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2203      	movs	r2, #3
 800b938:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	88fa      	ldrh	r2, [r7, #6]
 800b94e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	88fa      	ldrh	r2, [r7, #6]
 800b956:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b984:	d108      	bne.n	800b998 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e009      	b.n	800b9ac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b9aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	4b96      	ldr	r3, [pc, #600]	@ (800bc0c <HAL_SPI_Transmit+0x32c>)
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	88f9      	ldrh	r1, [r7, #6]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	6812      	ldr	r2, [r2, #0]
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9d8:	d107      	bne.n	800b9ea <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	2b0f      	cmp	r3, #15
 800b9f0:	d947      	bls.n	800ba82 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b9f2:	e03f      	b.n	800ba74 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d114      	bne.n	800ba2c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6812      	ldr	r2, [r2, #0]
 800ba0c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba12:	1d1a      	adds	r2, r3, #4
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	3b01      	subs	r3, #1
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba2a:	e023      	b.n	800ba74 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba2c:	f7f7 f882 	bl	8002b34 <HAL_GetTick>
 800ba30:	4602      	mov	r2, r0
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d803      	bhi.n	800ba44 <HAL_SPI_Transmit+0x164>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba42:	d102      	bne.n	800ba4a <HAL_SPI_Transmit+0x16a>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d114      	bne.n	800ba74 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 fbb6 	bl	800c1bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e11e      	b.n	800bcb2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1b9      	bne.n	800b9f4 <HAL_SPI_Transmit+0x114>
 800ba80:	e0f1      	b.n	800bc66 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	2b07      	cmp	r3, #7
 800ba88:	f240 80e6 	bls.w	800bc58 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ba8c:	e05d      	b.n	800bb4a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d132      	bne.n	800bb02 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d918      	bls.n	800bada <HAL_SPI_Transmit+0x1fa>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baac:	2b00      	cmp	r3, #0
 800baae:	d014      	beq.n	800bada <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac0:	1d1a      	adds	r2, r3, #4
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bacc:	b29b      	uxth	r3, r3
 800bace:	3b02      	subs	r3, #2
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bad8:	e037      	b.n	800bb4a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bade:	881a      	ldrh	r2, [r3, #0]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bae8:	1c9a      	adds	r2, r3, #2
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bb00:	e023      	b.n	800bb4a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb02:	f7f7 f817 	bl	8002b34 <HAL_GetTick>
 800bb06:	4602      	mov	r2, r0
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d803      	bhi.n	800bb1a <HAL_SPI_Transmit+0x23a>
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb18:	d102      	bne.n	800bb20 <HAL_SPI_Transmit+0x240>
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d114      	bne.n	800bb4a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 fb4b 	bl	800c1bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e0b3      	b.n	800bcb2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d19b      	bne.n	800ba8e <HAL_SPI_Transmit+0x1ae>
 800bb56:	e086      	b.n	800bc66 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	f003 0302 	and.w	r3, r3, #2
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d154      	bne.n	800bc10 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d918      	bls.n	800bba4 <HAL_SPI_Transmit+0x2c4>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb76:	2b40      	cmp	r3, #64	@ 0x40
 800bb78:	d914      	bls.n	800bba4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6812      	ldr	r2, [r2, #0]
 800bb84:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb8a:	1d1a      	adds	r2, r3, #4
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	3b04      	subs	r3, #4
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bba2:	e059      	b.n	800bc58 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d917      	bls.n	800bbe0 <HAL_SPI_Transmit+0x300>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d013      	beq.n	800bbe0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbbc:	881a      	ldrh	r2, [r3, #0]
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbc6:	1c9a      	adds	r2, r3, #2
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	3b02      	subs	r3, #2
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bbde:	e03b      	b.n	800bc58 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3320      	adds	r3, #32
 800bbea:	7812      	ldrb	r2, [r2, #0]
 800bbec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	3b01      	subs	r3, #1
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bc0a:	e025      	b.n	800bc58 <HAL_SPI_Transmit+0x378>
 800bc0c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc10:	f7f6 ff90 	bl	8002b34 <HAL_GetTick>
 800bc14:	4602      	mov	r2, r0
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d803      	bhi.n	800bc28 <HAL_SPI_Transmit+0x348>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d102      	bne.n	800bc2e <HAL_SPI_Transmit+0x34e>
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d114      	bne.n	800bc58 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 fac4 	bl	800c1bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e02c      	b.n	800bcb2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f47f af79 	bne.w	800bb58 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2108      	movs	r1, #8
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fb43 	bl	800c2fc <SPI_WaitOnFlagUntilTimeout>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d007      	beq.n	800bc8c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc82:	f043 0220 	orr.w	r2, r3, #32
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 fa95 	bl	800c1bc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
  }
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop

0800bcbc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd0:	095b      	lsrs	r3, r3, #5
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3330      	adds	r3, #48	@ 0x30
 800bcde:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bce0:	f7f6 ff28 	bl	8002b34 <HAL_GetTick>
 800bce4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d001      	beq.n	800bcf6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	e250      	b.n	800c198 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <HAL_SPI_Receive+0x46>
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e248      	b.n	800c198 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d101      	bne.n	800bd14 <HAL_SPI_Receive+0x58>
 800bd10:	2302      	movs	r3, #2
 800bd12:	e241      	b.n	800c198 <HAL_SPI_Receive+0x4dc>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2204      	movs	r2, #4
 800bd20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	88fa      	ldrh	r2, [r7, #6]
 800bd36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	88fa      	ldrh	r2, [r7, #6]
 800bd3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bd6c:	d108      	bne.n	800bd80 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	e009      	b.n	800bd94 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bd92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	4b95      	ldr	r3, [pc, #596]	@ (800bff0 <HAL_SPI_Receive+0x334>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	88f9      	ldrh	r1, [r7, #6]
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	6812      	ldr	r2, [r2, #0]
 800bda4:	430b      	orrs	r3, r1
 800bda6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f042 0201 	orr.w	r2, r2, #1
 800bdb6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdc0:	d107      	bne.n	800bdd2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b0f      	cmp	r3, #15
 800bdd8:	d96c      	bls.n	800beb4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bdda:	e064      	b.n	800bea6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d114      	bne.n	800be1c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bdfc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be02:	1d1a      	adds	r2, r3, #4
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be0e:	b29b      	uxth	r3, r3
 800be10:	3b01      	subs	r3, #1
 800be12:	b29a      	uxth	r2, r3
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be1a:	e044      	b.n	800bea6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be22:	b29b      	uxth	r3, r3
 800be24:	8bfa      	ldrh	r2, [r7, #30]
 800be26:	429a      	cmp	r2, r3
 800be28:	d919      	bls.n	800be5e <HAL_SPI_Receive+0x1a2>
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d014      	beq.n	800be5e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800be3e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be44:	1d1a      	adds	r2, r3, #4
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be50:	b29b      	uxth	r3, r3
 800be52:	3b01      	subs	r3, #1
 800be54:	b29a      	uxth	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be5c:	e023      	b.n	800bea6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be5e:	f7f6 fe69 	bl	8002b34 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d803      	bhi.n	800be76 <HAL_SPI_Receive+0x1ba>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be74:	d102      	bne.n	800be7c <HAL_SPI_Receive+0x1c0>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d114      	bne.n	800bea6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f99d 	bl	800c1bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bea2:	2303      	movs	r3, #3
 800bea4:	e178      	b.n	800c198 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beac:	b29b      	uxth	r3, r3
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d194      	bne.n	800bddc <HAL_SPI_Receive+0x120>
 800beb2:	e15e      	b.n	800c172 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	2b07      	cmp	r3, #7
 800beba:	f240 8153 	bls.w	800c164 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bebe:	e08f      	b.n	800bfe0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d114      	bne.n	800bf00 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	8812      	ldrh	r2, [r2, #0]
 800bede:	b292      	uxth	r2, r2
 800bee0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bee6:	1c9a      	adds	r2, r3, #2
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	3b01      	subs	r3, #1
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800befe:	e06f      	b.n	800bfe0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	8bfa      	ldrh	r2, [r7, #30]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d924      	bls.n	800bf58 <HAL_SPI_Receive+0x29c>
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d01f      	beq.n	800bf58 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	8812      	ldrh	r2, [r2, #0]
 800bf20:	b292      	uxth	r2, r2
 800bf22:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf28:	1c9a      	adds	r2, r3, #2
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf32:	69ba      	ldr	r2, [r7, #24]
 800bf34:	8812      	ldrh	r2, [r2, #0]
 800bf36:	b292      	uxth	r2, r2
 800bf38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf3e:	1c9a      	adds	r2, r3, #2
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	3b02      	subs	r3, #2
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf56:	e043      	b.n	800bfe0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d119      	bne.n	800bf98 <HAL_SPI_Receive+0x2dc>
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d014      	beq.n	800bf98 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	8812      	ldrh	r2, [r2, #0]
 800bf76:	b292      	uxth	r2, r2
 800bf78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf7e:	1c9a      	adds	r2, r3, #2
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf96:	e023      	b.n	800bfe0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf98:	f7f6 fdcc 	bl	8002b34 <HAL_GetTick>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d803      	bhi.n	800bfb0 <HAL_SPI_Receive+0x2f4>
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d102      	bne.n	800bfb6 <HAL_SPI_Receive+0x2fa>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d114      	bne.n	800bfe0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f900 	bl	800c1bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e0db      	b.n	800c198 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f47f af69 	bne.w	800bec0 <HAL_SPI_Receive+0x204>
 800bfee:	e0c0      	b.n	800c172 <HAL_SPI_Receive+0x4b6>
 800bff0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b01      	cmp	r3, #1
 800c008:	d117      	bne.n	800c03a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c016:	7812      	ldrb	r2, [r2, #0]
 800c018:	b2d2      	uxtb	r2, r2
 800c01a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	3b01      	subs	r3, #1
 800c030:	b29a      	uxth	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c038:	e094      	b.n	800c164 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c040:	b29b      	uxth	r3, r3
 800c042:	8bfa      	ldrh	r2, [r7, #30]
 800c044:	429a      	cmp	r2, r3
 800c046:	d946      	bls.n	800c0d6 <HAL_SPI_Receive+0x41a>
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d041      	beq.n	800c0d6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c05e:	7812      	ldrb	r2, [r2, #0]
 800c060:	b2d2      	uxtb	r2, r2
 800c062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c07a:	7812      	ldrb	r2, [r2, #0]
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c096:	7812      	ldrb	r2, [r2, #0]
 800c098:	b2d2      	uxtb	r2, r2
 800c09a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0b2:	7812      	ldrb	r2, [r2, #0]
 800c0b4:	b2d2      	uxtb	r2, r2
 800c0b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	3b04      	subs	r3, #4
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c0d4:	e046      	b.n	800c164 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d81c      	bhi.n	800c11c <HAL_SPI_Receive+0x460>
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d017      	beq.n	800c11c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0f8:	7812      	ldrb	r2, [r2, #0]
 800c0fa:	b2d2      	uxtb	r2, r2
 800c0fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c10e:	b29b      	uxth	r3, r3
 800c110:	3b01      	subs	r3, #1
 800c112:	b29a      	uxth	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c11a:	e023      	b.n	800c164 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c11c:	f7f6 fd0a 	bl	8002b34 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d803      	bhi.n	800c134 <HAL_SPI_Receive+0x478>
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c132:	d102      	bne.n	800c13a <HAL_SPI_Receive+0x47e>
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d114      	bne.n	800c164 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f000 f83e 	bl	800c1bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c146:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c160:	2303      	movs	r3, #3
 800c162:	e019      	b.n	800c198 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f47f af41 	bne.w	800bff4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 f822 	bl	800c1bc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d001      	beq.n	800c196 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e000      	b.n	800c198 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c196:	2300      	movs	r3, #0
  }
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3720      	adds	r7, #32
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c1ae:	b2db      	uxtb	r3, r3
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	699a      	ldr	r2, [r3, #24]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 0208 	orr.w	r2, r2, #8
 800c1da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	699a      	ldr	r2, [r3, #24]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f042 0210 	orr.w	r2, r2, #16
 800c1ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f022 0201 	bic.w	r2, r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6919      	ldr	r1, [r3, #16]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	4b3c      	ldr	r3, [pc, #240]	@ (800c2f8 <SPI_CloseTransfer+0x13c>)
 800c208:	400b      	ands	r3, r1
 800c20a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	689a      	ldr	r2, [r3, #8]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c21a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b04      	cmp	r3, #4
 800c226:	d014      	beq.n	800c252 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00f      	beq.n	800c252 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c238:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	699a      	ldr	r2, [r3, #24]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f042 0220 	orr.w	r2, r2, #32
 800c250:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	d014      	beq.n	800c288 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00f      	beq.n	800c288 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c26e:	f043 0204 	orr.w	r2, r3, #4
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	699a      	ldr	r2, [r3, #24]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c286:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00f      	beq.n	800c2b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c298:	f043 0201 	orr.w	r2, r3, #1
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00f      	beq.n	800c2dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2c2:	f043 0208 	orr.w	r2, r3, #8
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	699a      	ldr	r2, [r3, #24]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c2ec:	bf00      	nop
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	fffffc90 	.word	0xfffffc90

0800c2fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	4613      	mov	r3, r2
 800c30a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c30c:	e010      	b.n	800c330 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c30e:	f7f6 fc11 	bl	8002b34 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d803      	bhi.n	800c326 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c324:	d102      	bne.n	800c32c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d101      	bne.n	800c330 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e00f      	b.n	800c350 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	695a      	ldr	r2, [r3, #20]
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	4013      	ands	r3, r2
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	bf0c      	ite	eq
 800c340:	2301      	moveq	r3, #1
 800c342:	2300      	movne	r3, #0
 800c344:	b2db      	uxtb	r3, r3
 800c346:	461a      	mov	r2, r3
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d0df      	beq.n	800c30e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c364:	095b      	lsrs	r3, r3, #5
 800c366:	3301      	adds	r3, #1
 800c368:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	3301      	adds	r3, #1
 800c370:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	3307      	adds	r3, #7
 800c376:	08db      	lsrs	r3, r3, #3
 800c378:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b082      	sub	sp, #8
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	e049      	b.n	800c434 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7f6 f8a9 	bl	800250c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2202      	movs	r2, #2
 800c3be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	3304      	adds	r3, #4
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	f000 fd6b 	bl	800cea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d001      	beq.n	800c454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e05e      	b.n	800c512 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f042 0201 	orr.w	r2, r2, #1
 800c46a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a2b      	ldr	r2, [pc, #172]	@ (800c520 <HAL_TIM_Base_Start_IT+0xe4>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d02c      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c47e:	d027      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a27      	ldr	r2, [pc, #156]	@ (800c524 <HAL_TIM_Base_Start_IT+0xe8>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d022      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a26      	ldr	r2, [pc, #152]	@ (800c528 <HAL_TIM_Base_Start_IT+0xec>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d01d      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a24      	ldr	r2, [pc, #144]	@ (800c52c <HAL_TIM_Base_Start_IT+0xf0>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d018      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a23      	ldr	r2, [pc, #140]	@ (800c530 <HAL_TIM_Base_Start_IT+0xf4>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d013      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a21      	ldr	r2, [pc, #132]	@ (800c534 <HAL_TIM_Base_Start_IT+0xf8>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00e      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a20      	ldr	r2, [pc, #128]	@ (800c538 <HAL_TIM_Base_Start_IT+0xfc>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d009      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a1e      	ldr	r2, [pc, #120]	@ (800c53c <HAL_TIM_Base_Start_IT+0x100>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d004      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x94>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a1d      	ldr	r2, [pc, #116]	@ (800c540 <HAL_TIM_Base_Start_IT+0x104>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d115      	bne.n	800c4fc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	689a      	ldr	r2, [r3, #8]
 800c4d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c544 <HAL_TIM_Base_Start_IT+0x108>)
 800c4d8:	4013      	ands	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b06      	cmp	r3, #6
 800c4e0:	d015      	beq.n	800c50e <HAL_TIM_Base_Start_IT+0xd2>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4e8:	d011      	beq.n	800c50e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f042 0201 	orr.w	r2, r2, #1
 800c4f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4fa:	e008      	b.n	800c50e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0201 	orr.w	r2, r2, #1
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	e000      	b.n	800c510 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	40010000 	.word	0x40010000
 800c524:	40000400 	.word	0x40000400
 800c528:	40000800 	.word	0x40000800
 800c52c:	40000c00 	.word	0x40000c00
 800c530:	40010400 	.word	0x40010400
 800c534:	40001800 	.word	0x40001800
 800c538:	40014000 	.word	0x40014000
 800c53c:	4000e000 	.word	0x4000e000
 800c540:	4000e400 	.word	0x4000e400
 800c544:	00010007 	.word	0x00010007

0800c548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	e049      	b.n	800c5ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7f5 ffac 	bl	80024cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2202      	movs	r2, #2
 800c578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3304      	adds	r3, #4
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f000 fc8e 	bl	800cea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d109      	bne.n	800c61c <HAL_TIM_PWM_Start+0x24>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	bf14      	ite	ne
 800c614:	2301      	movne	r3, #1
 800c616:	2300      	moveq	r3, #0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	e03c      	b.n	800c696 <HAL_TIM_PWM_Start+0x9e>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b04      	cmp	r3, #4
 800c620:	d109      	bne.n	800c636 <HAL_TIM_PWM_Start+0x3e>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	bf14      	ite	ne
 800c62e:	2301      	movne	r3, #1
 800c630:	2300      	moveq	r3, #0
 800c632:	b2db      	uxtb	r3, r3
 800c634:	e02f      	b.n	800c696 <HAL_TIM_PWM_Start+0x9e>
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d109      	bne.n	800c650 <HAL_TIM_PWM_Start+0x58>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b01      	cmp	r3, #1
 800c646:	bf14      	ite	ne
 800c648:	2301      	movne	r3, #1
 800c64a:	2300      	moveq	r3, #0
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	e022      	b.n	800c696 <HAL_TIM_PWM_Start+0x9e>
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2b0c      	cmp	r3, #12
 800c654:	d109      	bne.n	800c66a <HAL_TIM_PWM_Start+0x72>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b01      	cmp	r3, #1
 800c660:	bf14      	ite	ne
 800c662:	2301      	movne	r3, #1
 800c664:	2300      	moveq	r3, #0
 800c666:	b2db      	uxtb	r3, r3
 800c668:	e015      	b.n	800c696 <HAL_TIM_PWM_Start+0x9e>
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2b10      	cmp	r3, #16
 800c66e:	d109      	bne.n	800c684 <HAL_TIM_PWM_Start+0x8c>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b01      	cmp	r3, #1
 800c67a:	bf14      	ite	ne
 800c67c:	2301      	movne	r3, #1
 800c67e:	2300      	moveq	r3, #0
 800c680:	b2db      	uxtb	r3, r3
 800c682:	e008      	b.n	800c696 <HAL_TIM_PWM_Start+0x9e>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	bf14      	ite	ne
 800c690:	2301      	movne	r3, #1
 800c692:	2300      	moveq	r3, #0
 800c694:	b2db      	uxtb	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e0ab      	b.n	800c7f6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d104      	bne.n	800c6ae <HAL_TIM_PWM_Start+0xb6>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6ac:	e023      	b.n	800c6f6 <HAL_TIM_PWM_Start+0xfe>
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d104      	bne.n	800c6be <HAL_TIM_PWM_Start+0xc6>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6bc:	e01b      	b.n	800c6f6 <HAL_TIM_PWM_Start+0xfe>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b08      	cmp	r3, #8
 800c6c2:	d104      	bne.n	800c6ce <HAL_TIM_PWM_Start+0xd6>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6cc:	e013      	b.n	800c6f6 <HAL_TIM_PWM_Start+0xfe>
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2b0c      	cmp	r3, #12
 800c6d2:	d104      	bne.n	800c6de <HAL_TIM_PWM_Start+0xe6>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6dc:	e00b      	b.n	800c6f6 <HAL_TIM_PWM_Start+0xfe>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b10      	cmp	r3, #16
 800c6e2:	d104      	bne.n	800c6ee <HAL_TIM_PWM_Start+0xf6>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6ec:	e003      	b.n	800c6f6 <HAL_TIM_PWM_Start+0xfe>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 fff8 	bl	800d6f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a3d      	ldr	r2, [pc, #244]	@ (800c800 <HAL_TIM_PWM_Start+0x208>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d013      	beq.n	800c736 <HAL_TIM_PWM_Start+0x13e>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a3c      	ldr	r2, [pc, #240]	@ (800c804 <HAL_TIM_PWM_Start+0x20c>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d00e      	beq.n	800c736 <HAL_TIM_PWM_Start+0x13e>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a3a      	ldr	r2, [pc, #232]	@ (800c808 <HAL_TIM_PWM_Start+0x210>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d009      	beq.n	800c736 <HAL_TIM_PWM_Start+0x13e>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a39      	ldr	r2, [pc, #228]	@ (800c80c <HAL_TIM_PWM_Start+0x214>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d004      	beq.n	800c736 <HAL_TIM_PWM_Start+0x13e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a37      	ldr	r2, [pc, #220]	@ (800c810 <HAL_TIM_PWM_Start+0x218>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d101      	bne.n	800c73a <HAL_TIM_PWM_Start+0x142>
 800c736:	2301      	movs	r3, #1
 800c738:	e000      	b.n	800c73c <HAL_TIM_PWM_Start+0x144>
 800c73a:	2300      	movs	r3, #0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d007      	beq.n	800c750 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c74e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a2a      	ldr	r2, [pc, #168]	@ (800c800 <HAL_TIM_PWM_Start+0x208>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d02c      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c762:	d027      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a2a      	ldr	r2, [pc, #168]	@ (800c814 <HAL_TIM_PWM_Start+0x21c>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d022      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a29      	ldr	r2, [pc, #164]	@ (800c818 <HAL_TIM_PWM_Start+0x220>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d01d      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a27      	ldr	r2, [pc, #156]	@ (800c81c <HAL_TIM_PWM_Start+0x224>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d018      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a1f      	ldr	r2, [pc, #124]	@ (800c804 <HAL_TIM_PWM_Start+0x20c>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d013      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a23      	ldr	r2, [pc, #140]	@ (800c820 <HAL_TIM_PWM_Start+0x228>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d00e      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a1b      	ldr	r2, [pc, #108]	@ (800c808 <HAL_TIM_PWM_Start+0x210>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d009      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a1f      	ldr	r2, [pc, #124]	@ (800c824 <HAL_TIM_PWM_Start+0x22c>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d004      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1bc>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c828 <HAL_TIM_PWM_Start+0x230>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d115      	bne.n	800c7e0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689a      	ldr	r2, [r3, #8]
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	@ (800c82c <HAL_TIM_PWM_Start+0x234>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b06      	cmp	r3, #6
 800c7c4:	d015      	beq.n	800c7f2 <HAL_TIM_PWM_Start+0x1fa>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7cc:	d011      	beq.n	800c7f2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f042 0201 	orr.w	r2, r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7de:	e008      	b.n	800c7f2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0201 	orr.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	e000      	b.n	800c7f4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	40010000 	.word	0x40010000
 800c804:	40010400 	.word	0x40010400
 800c808:	40014000 	.word	0x40014000
 800c80c:	40014400 	.word	0x40014400
 800c810:	40014800 	.word	0x40014800
 800c814:	40000400 	.word	0x40000400
 800c818:	40000800 	.word	0x40000800
 800c81c:	40000c00 	.word	0x40000c00
 800c820:	40001800 	.word	0x40001800
 800c824:	4000e000 	.word	0x4000e000
 800c828:	4000e400 	.word	0x4000e400
 800c82c:	00010007 	.word	0x00010007

0800c830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	f003 0302 	and.w	r3, r3, #2
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d020      	beq.n	800c894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f003 0302 	and.w	r3, r3, #2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d01b      	beq.n	800c894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f06f 0202 	mvn.w	r2, #2
 800c864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	f003 0303 	and.w	r3, r3, #3
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 faf6 	bl	800ce6c <HAL_TIM_IC_CaptureCallback>
 800c880:	e005      	b.n	800c88e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fae8 	bl	800ce58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 faf9 	bl	800ce80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	f003 0304 	and.w	r3, r3, #4
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d020      	beq.n	800c8e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d01b      	beq.n	800c8e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f06f 0204 	mvn.w	r2, #4
 800c8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d003      	beq.n	800c8ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fad0 	bl	800ce6c <HAL_TIM_IC_CaptureCallback>
 800c8cc:	e005      	b.n	800c8da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fac2 	bl	800ce58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 fad3 	bl	800ce80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	f003 0308 	and.w	r3, r3, #8
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d020      	beq.n	800c92c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f003 0308 	and.w	r3, r3, #8
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01b      	beq.n	800c92c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f06f 0208 	mvn.w	r2, #8
 800c8fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2204      	movs	r2, #4
 800c902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	f003 0303 	and.w	r3, r3, #3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d003      	beq.n	800c91a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 faaa 	bl	800ce6c <HAL_TIM_IC_CaptureCallback>
 800c918:	e005      	b.n	800c926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fa9c 	bl	800ce58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 faad 	bl	800ce80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f003 0310 	and.w	r3, r3, #16
 800c932:	2b00      	cmp	r3, #0
 800c934:	d020      	beq.n	800c978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f003 0310 	and.w	r3, r3, #16
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d01b      	beq.n	800c978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f06f 0210 	mvn.w	r2, #16
 800c948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2208      	movs	r2, #8
 800c94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	69db      	ldr	r3, [r3, #28]
 800c956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d003      	beq.n	800c966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fa84 	bl	800ce6c <HAL_TIM_IC_CaptureCallback>
 800c964:	e005      	b.n	800c972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fa76 	bl	800ce58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fa87 	bl	800ce80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	f003 0301 	and.w	r3, r3, #1
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00c      	beq.n	800c99c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f003 0301 	and.w	r3, r3, #1
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d007      	beq.n	800c99c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f06f 0201 	mvn.w	r2, #1
 800c994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7f4 fa82 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d104      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00c      	beq.n	800c9ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d007      	beq.n	800c9ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 ff61 	bl	800d88c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00c      	beq.n	800c9ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d007      	beq.n	800c9ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 ff59 	bl	800d8a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00c      	beq.n	800ca12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d007      	beq.n	800ca12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ca0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fa41 	bl	800ce94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	f003 0320 	and.w	r3, r3, #32
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00c      	beq.n	800ca36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f003 0320 	and.w	r3, r3, #32
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d007      	beq.n	800ca36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f06f 0220 	mvn.w	r2, #32
 800ca2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 ff21 	bl	800d878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
	...

0800ca40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d101      	bne.n	800ca5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	e0ff      	b.n	800cc5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b14      	cmp	r3, #20
 800ca6a:	f200 80f0 	bhi.w	800cc4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca74:	0800cac9 	.word	0x0800cac9
 800ca78:	0800cc4f 	.word	0x0800cc4f
 800ca7c:	0800cc4f 	.word	0x0800cc4f
 800ca80:	0800cc4f 	.word	0x0800cc4f
 800ca84:	0800cb09 	.word	0x0800cb09
 800ca88:	0800cc4f 	.word	0x0800cc4f
 800ca8c:	0800cc4f 	.word	0x0800cc4f
 800ca90:	0800cc4f 	.word	0x0800cc4f
 800ca94:	0800cb4b 	.word	0x0800cb4b
 800ca98:	0800cc4f 	.word	0x0800cc4f
 800ca9c:	0800cc4f 	.word	0x0800cc4f
 800caa0:	0800cc4f 	.word	0x0800cc4f
 800caa4:	0800cb8b 	.word	0x0800cb8b
 800caa8:	0800cc4f 	.word	0x0800cc4f
 800caac:	0800cc4f 	.word	0x0800cc4f
 800cab0:	0800cc4f 	.word	0x0800cc4f
 800cab4:	0800cbcd 	.word	0x0800cbcd
 800cab8:	0800cc4f 	.word	0x0800cc4f
 800cabc:	0800cc4f 	.word	0x0800cc4f
 800cac0:	0800cc4f 	.word	0x0800cc4f
 800cac4:	0800cc0d 	.word	0x0800cc0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 fa9c 	bl	800d00c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	699a      	ldr	r2, [r3, #24]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0208 	orr.w	r2, r2, #8
 800cae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	699a      	ldr	r2, [r3, #24]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f022 0204 	bic.w	r2, r2, #4
 800caf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6999      	ldr	r1, [r3, #24]
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	691a      	ldr	r2, [r3, #16]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	619a      	str	r2, [r3, #24]
      break;
 800cb06:	e0a5      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 fb0c 	bl	800d12c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	699a      	ldr	r2, [r3, #24]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	699a      	ldr	r2, [r3, #24]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6999      	ldr	r1, [r3, #24]
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	021a      	lsls	r2, r3, #8
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	619a      	str	r2, [r3, #24]
      break;
 800cb48:	e084      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 fb75 	bl	800d240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	69da      	ldr	r2, [r3, #28]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f042 0208 	orr.w	r2, r2, #8
 800cb64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	69da      	ldr	r2, [r3, #28]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 0204 	bic.w	r2, r2, #4
 800cb74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	69d9      	ldr	r1, [r3, #28]
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	691a      	ldr	r2, [r3, #16]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	430a      	orrs	r2, r1
 800cb86:	61da      	str	r2, [r3, #28]
      break;
 800cb88:	e064      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	68b9      	ldr	r1, [r7, #8]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fbdd 	bl	800d350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	69da      	ldr	r2, [r3, #28]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69da      	ldr	r2, [r3, #28]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	69d9      	ldr	r1, [r3, #28]
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	021a      	lsls	r2, r3, #8
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	61da      	str	r2, [r3, #28]
      break;
 800cbca:	e043      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68b9      	ldr	r1, [r7, #8]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fc26 	bl	800d424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f042 0208 	orr.w	r2, r2, #8
 800cbe6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 0204 	bic.w	r2, r2, #4
 800cbf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	691a      	ldr	r2, [r3, #16]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cc0a:	e023      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68b9      	ldr	r1, [r7, #8]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 fc6a 	bl	800d4ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	021a      	lsls	r2, r3, #8
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	430a      	orrs	r2, r1
 800cc4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cc4c:	e002      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	75fb      	strb	r3, [r7, #23]
      break;
 800cc52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop

0800cc68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d101      	bne.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c>
 800cc80:	2302      	movs	r3, #2
 800cc82:	e0dc      	b.n	800ce3e <HAL_TIM_ConfigClockSource+0x1d6>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2202      	movs	r2, #2
 800cc90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	4b6a      	ldr	r3, [pc, #424]	@ (800ce48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cca0:	4013      	ands	r3, r2
 800cca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a64      	ldr	r2, [pc, #400]	@ (800ce4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	f000 80a9 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccc0:	4a62      	ldr	r2, [pc, #392]	@ (800ce4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	f200 80ae 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccc8:	4a61      	ldr	r2, [pc, #388]	@ (800ce50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	f000 80a1 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccd0:	4a5f      	ldr	r2, [pc, #380]	@ (800ce50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	f200 80a6 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd8:	4a5e      	ldr	r2, [pc, #376]	@ (800ce54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	f000 8099 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cce0:	4a5c      	ldr	r2, [pc, #368]	@ (800ce54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	f200 809e 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cce8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ccec:	f000 8091 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccf0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ccf4:	f200 8096 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ccfc:	f000 8089 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd04:	f200 808e 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd0c:	d03e      	beq.n	800cd8c <HAL_TIM_ConfigClockSource+0x124>
 800cd0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd12:	f200 8087 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd1a:	f000 8086 	beq.w	800ce2a <HAL_TIM_ConfigClockSource+0x1c2>
 800cd1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd22:	d87f      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd24:	2b70      	cmp	r3, #112	@ 0x70
 800cd26:	d01a      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0xf6>
 800cd28:	2b70      	cmp	r3, #112	@ 0x70
 800cd2a:	d87b      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd2c:	2b60      	cmp	r3, #96	@ 0x60
 800cd2e:	d050      	beq.n	800cdd2 <HAL_TIM_ConfigClockSource+0x16a>
 800cd30:	2b60      	cmp	r3, #96	@ 0x60
 800cd32:	d877      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd34:	2b50      	cmp	r3, #80	@ 0x50
 800cd36:	d03c      	beq.n	800cdb2 <HAL_TIM_ConfigClockSource+0x14a>
 800cd38:	2b50      	cmp	r3, #80	@ 0x50
 800cd3a:	d873      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd3c:	2b40      	cmp	r3, #64	@ 0x40
 800cd3e:	d058      	beq.n	800cdf2 <HAL_TIM_ConfigClockSource+0x18a>
 800cd40:	2b40      	cmp	r3, #64	@ 0x40
 800cd42:	d86f      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd44:	2b30      	cmp	r3, #48	@ 0x30
 800cd46:	d064      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd48:	2b30      	cmp	r3, #48	@ 0x30
 800cd4a:	d86b      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd4c:	2b20      	cmp	r3, #32
 800cd4e:	d060      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd50:	2b20      	cmp	r3, #32
 800cd52:	d867      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d05c      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd58:	2b10      	cmp	r3, #16
 800cd5a:	d05a      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd5c:	e062      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd6e:	f000 fca1 	bl	800d6b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cd80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	609a      	str	r2, [r3, #8]
      break;
 800cd8a:	e04f      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd9c:	f000 fc8a 	bl	800d6b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689a      	ldr	r2, [r3, #8]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdae:	609a      	str	r2, [r3, #8]
      break;
 800cdb0:	e03c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	f000 fbfa 	bl	800d5b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2150      	movs	r1, #80	@ 0x50
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fc54 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800cdd0:	e02c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdde:	461a      	mov	r2, r3
 800cde0:	f000 fc19 	bl	800d616 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2160      	movs	r1, #96	@ 0x60
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 fc44 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800cdf0:	e01c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f000 fbda 	bl	800d5b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2140      	movs	r1, #64	@ 0x40
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fc34 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800ce10:	e00c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f000 fc2b 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800ce22:	e003      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
      break;
 800ce28:	e000      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	ffceff88 	.word	0xffceff88
 800ce4c:	00100040 	.word	0x00100040
 800ce50:	00100030 	.word	0x00100030
 800ce54:	00100020 	.word	0x00100020

0800ce58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce60:	bf00      	nop
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce74:	bf00      	nop
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a4a      	ldr	r2, [pc, #296]	@ (800cfe4 <TIM_Base_SetConfig+0x13c>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d013      	beq.n	800cee8 <TIM_Base_SetConfig+0x40>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cec6:	d00f      	beq.n	800cee8 <TIM_Base_SetConfig+0x40>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a47      	ldr	r2, [pc, #284]	@ (800cfe8 <TIM_Base_SetConfig+0x140>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d00b      	beq.n	800cee8 <TIM_Base_SetConfig+0x40>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a46      	ldr	r2, [pc, #280]	@ (800cfec <TIM_Base_SetConfig+0x144>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d007      	beq.n	800cee8 <TIM_Base_SetConfig+0x40>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a45      	ldr	r2, [pc, #276]	@ (800cff0 <TIM_Base_SetConfig+0x148>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d003      	beq.n	800cee8 <TIM_Base_SetConfig+0x40>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a44      	ldr	r2, [pc, #272]	@ (800cff4 <TIM_Base_SetConfig+0x14c>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d108      	bne.n	800cefa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ceee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a39      	ldr	r2, [pc, #228]	@ (800cfe4 <TIM_Base_SetConfig+0x13c>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d027      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf08:	d023      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a36      	ldr	r2, [pc, #216]	@ (800cfe8 <TIM_Base_SetConfig+0x140>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d01f      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a35      	ldr	r2, [pc, #212]	@ (800cfec <TIM_Base_SetConfig+0x144>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d01b      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4a34      	ldr	r2, [pc, #208]	@ (800cff0 <TIM_Base_SetConfig+0x148>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d017      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4a33      	ldr	r2, [pc, #204]	@ (800cff4 <TIM_Base_SetConfig+0x14c>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d013      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4a32      	ldr	r2, [pc, #200]	@ (800cff8 <TIM_Base_SetConfig+0x150>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d00f      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a31      	ldr	r2, [pc, #196]	@ (800cffc <TIM_Base_SetConfig+0x154>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d00b      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a30      	ldr	r2, [pc, #192]	@ (800d000 <TIM_Base_SetConfig+0x158>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d007      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a2f      	ldr	r2, [pc, #188]	@ (800d004 <TIM_Base_SetConfig+0x15c>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d003      	beq.n	800cf52 <TIM_Base_SetConfig+0xaa>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a2e      	ldr	r2, [pc, #184]	@ (800d008 <TIM_Base_SetConfig+0x160>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d108      	bne.n	800cf64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	4313      	orrs	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	689a      	ldr	r2, [r3, #8]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a16      	ldr	r2, [pc, #88]	@ (800cfe4 <TIM_Base_SetConfig+0x13c>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d00f      	beq.n	800cfb0 <TIM_Base_SetConfig+0x108>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a18      	ldr	r2, [pc, #96]	@ (800cff4 <TIM_Base_SetConfig+0x14c>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d00b      	beq.n	800cfb0 <TIM_Base_SetConfig+0x108>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a17      	ldr	r2, [pc, #92]	@ (800cff8 <TIM_Base_SetConfig+0x150>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d007      	beq.n	800cfb0 <TIM_Base_SetConfig+0x108>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a16      	ldr	r2, [pc, #88]	@ (800cffc <TIM_Base_SetConfig+0x154>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d003      	beq.n	800cfb0 <TIM_Base_SetConfig+0x108>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a15      	ldr	r2, [pc, #84]	@ (800d000 <TIM_Base_SetConfig+0x158>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d103      	bne.n	800cfb8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	691a      	ldr	r2, [r3, #16]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d105      	bne.n	800cfd6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	f023 0201 	bic.w	r2, r3, #1
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	611a      	str	r2, [r3, #16]
  }
}
 800cfd6:	bf00      	nop
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	40010000 	.word	0x40010000
 800cfe8:	40000400 	.word	0x40000400
 800cfec:	40000800 	.word	0x40000800
 800cff0:	40000c00 	.word	0x40000c00
 800cff4:	40010400 	.word	0x40010400
 800cff8:	40014000 	.word	0x40014000
 800cffc:	40014400 	.word	0x40014400
 800d000:	40014800 	.word	0x40014800
 800d004:	4000e000 	.word	0x4000e000
 800d008:	4000e400 	.word	0x4000e400

0800d00c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b087      	sub	sp, #28
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a1b      	ldr	r3, [r3, #32]
 800d020:	f023 0201 	bic.w	r2, r3, #1
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	4b37      	ldr	r3, [pc, #220]	@ (800d114 <TIM_OC1_SetConfig+0x108>)
 800d038:	4013      	ands	r3, r2
 800d03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f023 0302 	bic.w	r3, r3, #2
 800d054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a2d      	ldr	r2, [pc, #180]	@ (800d118 <TIM_OC1_SetConfig+0x10c>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d00f      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a2c      	ldr	r2, [pc, #176]	@ (800d11c <TIM_OC1_SetConfig+0x110>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d00b      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a2b      	ldr	r2, [pc, #172]	@ (800d120 <TIM_OC1_SetConfig+0x114>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d007      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a2a      	ldr	r2, [pc, #168]	@ (800d124 <TIM_OC1_SetConfig+0x118>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d003      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a29      	ldr	r2, [pc, #164]	@ (800d128 <TIM_OC1_SetConfig+0x11c>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d10c      	bne.n	800d0a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	f023 0308 	bic.w	r3, r3, #8
 800d08e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	4313      	orrs	r3, r2
 800d098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f023 0304 	bic.w	r3, r3, #4
 800d0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d118 <TIM_OC1_SetConfig+0x10c>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d11c <TIM_OC1_SetConfig+0x110>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d120 <TIM_OC1_SetConfig+0x114>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a19      	ldr	r2, [pc, #100]	@ (800d124 <TIM_OC1_SetConfig+0x118>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a18      	ldr	r2, [pc, #96]	@ (800d128 <TIM_OC1_SetConfig+0x11c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d111      	bne.n	800d0ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	685a      	ldr	r2, [r3, #4]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	621a      	str	r2, [r3, #32]
}
 800d108:	bf00      	nop
 800d10a:	371c      	adds	r7, #28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	fffeff8f 	.word	0xfffeff8f
 800d118:	40010000 	.word	0x40010000
 800d11c:	40010400 	.word	0x40010400
 800d120:	40014000 	.word	0x40014000
 800d124:	40014400 	.word	0x40014400
 800d128:	40014800 	.word	0x40014800

0800d12c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a1b      	ldr	r3, [r3, #32]
 800d140:	f023 0210 	bic.w	r2, r3, #16
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	4b34      	ldr	r3, [pc, #208]	@ (800d228 <TIM_OC2_SetConfig+0xfc>)
 800d158:	4013      	ands	r3, r2
 800d15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	021b      	lsls	r3, r3, #8
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f023 0320 	bic.w	r3, r3, #32
 800d176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	011b      	lsls	r3, r3, #4
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	4313      	orrs	r3, r2
 800d182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a29      	ldr	r2, [pc, #164]	@ (800d22c <TIM_OC2_SetConfig+0x100>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d003      	beq.n	800d194 <TIM_OC2_SetConfig+0x68>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a28      	ldr	r2, [pc, #160]	@ (800d230 <TIM_OC2_SetConfig+0x104>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d10d      	bne.n	800d1b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a1e      	ldr	r2, [pc, #120]	@ (800d22c <TIM_OC2_SetConfig+0x100>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d00f      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4a1d      	ldr	r2, [pc, #116]	@ (800d230 <TIM_OC2_SetConfig+0x104>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d00b      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d234 <TIM_OC2_SetConfig+0x108>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d007      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d238 <TIM_OC2_SetConfig+0x10c>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d003      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a1a      	ldr	r2, [pc, #104]	@ (800d23c <TIM_OC2_SetConfig+0x110>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d113      	bne.n	800d200 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d1de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	699b      	ldr	r3, [r3, #24]
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	685a      	ldr	r2, [r3, #4]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	621a      	str	r2, [r3, #32]
}
 800d21a:	bf00      	nop
 800d21c:	371c      	adds	r7, #28
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	feff8fff 	.word	0xfeff8fff
 800d22c:	40010000 	.word	0x40010000
 800d230:	40010400 	.word	0x40010400
 800d234:	40014000 	.word	0x40014000
 800d238:	40014400 	.word	0x40014400
 800d23c:	40014800 	.word	0x40014800

0800d240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d240:	b480      	push	{r7}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a1b      	ldr	r3, [r3, #32]
 800d254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	4b33      	ldr	r3, [pc, #204]	@ (800d338 <TIM_OC3_SetConfig+0xf8>)
 800d26c:	4013      	ands	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f023 0303 	bic.w	r3, r3, #3
 800d276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	021b      	lsls	r3, r3, #8
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	4313      	orrs	r3, r2
 800d294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a28      	ldr	r2, [pc, #160]	@ (800d33c <TIM_OC3_SetConfig+0xfc>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d003      	beq.n	800d2a6 <TIM_OC3_SetConfig+0x66>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a27      	ldr	r2, [pc, #156]	@ (800d340 <TIM_OC3_SetConfig+0x100>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d10d      	bne.n	800d2c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	021b      	lsls	r3, r3, #8
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a1d      	ldr	r2, [pc, #116]	@ (800d33c <TIM_OC3_SetConfig+0xfc>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d00f      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a1c      	ldr	r2, [pc, #112]	@ (800d340 <TIM_OC3_SetConfig+0x100>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d00b      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a1b      	ldr	r2, [pc, #108]	@ (800d344 <TIM_OC3_SetConfig+0x104>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d007      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a1a      	ldr	r2, [pc, #104]	@ (800d348 <TIM_OC3_SetConfig+0x108>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d003      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a19      	ldr	r2, [pc, #100]	@ (800d34c <TIM_OC3_SetConfig+0x10c>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d113      	bne.n	800d312 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d2f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	693a      	ldr	r2, [r7, #16]
 800d302:	4313      	orrs	r3, r2
 800d304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	011b      	lsls	r3, r3, #4
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	4313      	orrs	r3, r2
 800d310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	685a      	ldr	r2, [r3, #4]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	621a      	str	r2, [r3, #32]
}
 800d32c:	bf00      	nop
 800d32e:	371c      	adds	r7, #28
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	fffeff8f 	.word	0xfffeff8f
 800d33c:	40010000 	.word	0x40010000
 800d340:	40010400 	.word	0x40010400
 800d344:	40014000 	.word	0x40014000
 800d348:	40014400 	.word	0x40014400
 800d34c:	40014800 	.word	0x40014800

0800d350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d350:	b480      	push	{r7}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a1b      	ldr	r3, [r3, #32]
 800d35e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a1b      	ldr	r3, [r3, #32]
 800d364:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	69db      	ldr	r3, [r3, #28]
 800d376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	4b24      	ldr	r3, [pc, #144]	@ (800d40c <TIM_OC4_SetConfig+0xbc>)
 800d37c:	4013      	ands	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	021b      	lsls	r3, r3, #8
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	4313      	orrs	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d39a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	031b      	lsls	r3, r3, #12
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a19      	ldr	r2, [pc, #100]	@ (800d410 <TIM_OC4_SetConfig+0xc0>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d00f      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a18      	ldr	r2, [pc, #96]	@ (800d414 <TIM_OC4_SetConfig+0xc4>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d00b      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a17      	ldr	r2, [pc, #92]	@ (800d418 <TIM_OC4_SetConfig+0xc8>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d007      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a16      	ldr	r2, [pc, #88]	@ (800d41c <TIM_OC4_SetConfig+0xcc>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d003      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a15      	ldr	r2, [pc, #84]	@ (800d420 <TIM_OC4_SetConfig+0xd0>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d109      	bne.n	800d3e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	019b      	lsls	r3, r3, #6
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	621a      	str	r2, [r3, #32]
}
 800d3fe:	bf00      	nop
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	feff8fff 	.word	0xfeff8fff
 800d410:	40010000 	.word	0x40010000
 800d414:	40010400 	.word	0x40010400
 800d418:	40014000 	.word	0x40014000
 800d41c:	40014400 	.word	0x40014400
 800d420:	40014800 	.word	0x40014800

0800d424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a1b      	ldr	r3, [r3, #32]
 800d432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4b21      	ldr	r3, [pc, #132]	@ (800d4d4 <TIM_OC5_SetConfig+0xb0>)
 800d450:	4013      	ands	r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	041b      	lsls	r3, r3, #16
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	4313      	orrs	r3, r2
 800d470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a18      	ldr	r2, [pc, #96]	@ (800d4d8 <TIM_OC5_SetConfig+0xb4>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d00f      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a17      	ldr	r2, [pc, #92]	@ (800d4dc <TIM_OC5_SetConfig+0xb8>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d00b      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a16      	ldr	r2, [pc, #88]	@ (800d4e0 <TIM_OC5_SetConfig+0xbc>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d007      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a15      	ldr	r2, [pc, #84]	@ (800d4e4 <TIM_OC5_SetConfig+0xc0>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d003      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a14      	ldr	r2, [pc, #80]	@ (800d4e8 <TIM_OC5_SetConfig+0xc4>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d109      	bne.n	800d4ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	021b      	lsls	r3, r3, #8
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	621a      	str	r2, [r3, #32]
}
 800d4c8:	bf00      	nop
 800d4ca:	371c      	adds	r7, #28
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr
 800d4d4:	fffeff8f 	.word	0xfffeff8f
 800d4d8:	40010000 	.word	0x40010000
 800d4dc:	40010400 	.word	0x40010400
 800d4e0:	40014000 	.word	0x40014000
 800d4e4:	40014400 	.word	0x40014400
 800d4e8:	40014800 	.word	0x40014800

0800d4ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b087      	sub	sp, #28
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	4b22      	ldr	r3, [pc, #136]	@ (800d5a0 <TIM_OC6_SetConfig+0xb4>)
 800d518:	4013      	ands	r3, r2
 800d51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	021b      	lsls	r3, r3, #8
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	4313      	orrs	r3, r2
 800d526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d52e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	051b      	lsls	r3, r3, #20
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	4313      	orrs	r3, r2
 800d53a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4a19      	ldr	r2, [pc, #100]	@ (800d5a4 <TIM_OC6_SetConfig+0xb8>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d00f      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a18      	ldr	r2, [pc, #96]	@ (800d5a8 <TIM_OC6_SetConfig+0xbc>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d00b      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a17      	ldr	r2, [pc, #92]	@ (800d5ac <TIM_OC6_SetConfig+0xc0>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d007      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4a16      	ldr	r2, [pc, #88]	@ (800d5b0 <TIM_OC6_SetConfig+0xc4>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d003      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a15      	ldr	r2, [pc, #84]	@ (800d5b4 <TIM_OC6_SetConfig+0xc8>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d109      	bne.n	800d578 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d56a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	695b      	ldr	r3, [r3, #20]
 800d570:	029b      	lsls	r3, r3, #10
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	4313      	orrs	r3, r2
 800d576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	685a      	ldr	r2, [r3, #4]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	621a      	str	r2, [r3, #32]
}
 800d592:	bf00      	nop
 800d594:	371c      	adds	r7, #28
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	feff8fff 	.word	0xfeff8fff
 800d5a4:	40010000 	.word	0x40010000
 800d5a8:	40010400 	.word	0x40010400
 800d5ac:	40014000 	.word	0x40014000
 800d5b0:	40014400 	.word	0x40014400
 800d5b4:	40014800 	.word	0x40014800

0800d5b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b087      	sub	sp, #28
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	f023 0201 	bic.w	r2, r3, #1
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	011b      	lsls	r3, r3, #4
 800d5e8:	693a      	ldr	r2, [r7, #16]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f023 030a 	bic.w	r3, r3, #10
 800d5f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	621a      	str	r2, [r3, #32]
}
 800d60a:	bf00      	nop
 800d60c:	371c      	adds	r7, #28
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d616:	b480      	push	{r7}
 800d618:	b087      	sub	sp, #28
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	60f8      	str	r0, [r7, #12]
 800d61e:	60b9      	str	r1, [r7, #8]
 800d620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6a1b      	ldr	r3, [r3, #32]
 800d62c:	f023 0210 	bic.w	r2, r3, #16
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	031b      	lsls	r3, r3, #12
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	4313      	orrs	r3, r2
 800d64a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	011b      	lsls	r3, r3, #4
 800d658:	697a      	ldr	r2, [r7, #20]
 800d65a:	4313      	orrs	r3, r2
 800d65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	693a      	ldr	r2, [r7, #16]
 800d662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	621a      	str	r2, [r3, #32]
}
 800d66a:	bf00      	nop
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
	...

0800d678 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	4b09      	ldr	r3, [pc, #36]	@ (800d6b0 <TIM_ITRx_SetConfig+0x38>)
 800d68c:	4013      	ands	r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	4313      	orrs	r3, r2
 800d696:	f043 0307 	orr.w	r3, r3, #7
 800d69a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	609a      	str	r2, [r3, #8]
}
 800d6a2:	bf00      	nop
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	ffcfff8f 	.word	0xffcfff8f

0800d6b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
 800d6c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d6ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	021a      	lsls	r2, r3, #8
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	697a      	ldr	r2, [r7, #20]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	609a      	str	r2, [r3, #8]
}
 800d6e8:	bf00      	nop
 800d6ea:	371c      	adds	r7, #28
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f003 031f 	and.w	r3, r3, #31
 800d706:	2201      	movs	r2, #1
 800d708:	fa02 f303 	lsl.w	r3, r2, r3
 800d70c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6a1a      	ldr	r2, [r3, #32]
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	43db      	mvns	r3, r3
 800d716:	401a      	ands	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6a1a      	ldr	r2, [r3, #32]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f003 031f 	and.w	r3, r3, #31
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	fa01 f303 	lsl.w	r3, r1, r3
 800d72c:	431a      	orrs	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	621a      	str	r2, [r3, #32]
}
 800d732:	bf00      	nop
 800d734:	371c      	adds	r7, #28
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
	...

0800d740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d750:	2b01      	cmp	r3, #1
 800d752:	d101      	bne.n	800d758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d754:	2302      	movs	r3, #2
 800d756:	e077      	b.n	800d848 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2202      	movs	r2, #2
 800d764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a35      	ldr	r2, [pc, #212]	@ (800d854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d004      	beq.n	800d78c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a34      	ldr	r2, [pc, #208]	@ (800d858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d108      	bne.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a25      	ldr	r2, [pc, #148]	@ (800d854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d02c      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ca:	d027      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a22      	ldr	r2, [pc, #136]	@ (800d85c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d022      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a21      	ldr	r2, [pc, #132]	@ (800d860 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d01d      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a1f      	ldr	r2, [pc, #124]	@ (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d018      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a1a      	ldr	r2, [pc, #104]	@ (800d858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d013      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800d868 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d00e      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a1a      	ldr	r2, [pc, #104]	@ (800d86c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d009      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a18      	ldr	r2, [pc, #96]	@ (800d870 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d004      	beq.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a17      	ldr	r2, [pc, #92]	@ (800d874 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d10c      	bne.n	800d836 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d822:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	40010000 	.word	0x40010000
 800d858:	40010400 	.word	0x40010400
 800d85c:	40000400 	.word	0x40000400
 800d860:	40000800 	.word	0x40000800
 800d864:	40000c00 	.word	0x40000c00
 800d868:	40001800 	.word	0x40001800
 800d86c:	40014000 	.word	0x40014000
 800d870:	4000e000 	.word	0x4000e000
 800d874:	4000e400 	.word	0x4000e400

0800d878 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d894:	bf00      	nop
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e042      	b.n	800d94c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d106      	bne.n	800d8de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7f4 fe97 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2224      	movs	r2, #36	@ 0x24
 800d8e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f022 0201 	bic.w	r2, r2, #1
 800d8f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d002      	beq.n	800d904 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f001 fafa 	bl	800eef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fc8b 	bl	800e220 <UART_SetConfig>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d101      	bne.n	800d914 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d910:	2301      	movs	r3, #1
 800d912:	e01b      	b.n	800d94c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685a      	ldr	r2, [r3, #4]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	689a      	ldr	r2, [r3, #8]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f042 0201 	orr.w	r2, r2, #1
 800d942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f001 fb79 	bl	800f03c <UART_CheckIdleState>
 800d94a:	4603      	mov	r3, r0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b08a      	sub	sp, #40	@ 0x28
 800d958:	af02      	add	r7, sp, #8
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	603b      	str	r3, [r7, #0]
 800d960:	4613      	mov	r3, r2
 800d962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d96a:	2b20      	cmp	r3, #32
 800d96c:	d17b      	bne.n	800da66 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <HAL_UART_Transmit+0x26>
 800d974:	88fb      	ldrh	r3, [r7, #6]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e074      	b.n	800da68 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2200      	movs	r2, #0
 800d982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2221      	movs	r2, #33	@ 0x21
 800d98a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d98e:	f7f5 f8d1 	bl	8002b34 <HAL_GetTick>
 800d992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	88fa      	ldrh	r2, [r7, #6]
 800d998:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	88fa      	ldrh	r2, [r7, #6]
 800d9a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9ac:	d108      	bne.n	800d9c0 <HAL_UART_Transmit+0x6c>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d104      	bne.n	800d9c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	61bb      	str	r3, [r7, #24]
 800d9be:	e003      	b.n	800d9c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d9c8:	e030      	b.n	800da2c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2180      	movs	r1, #128	@ 0x80
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f001 fbdb 	bl	800f190 <UART_WaitOnFlagUntilTimeout>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d005      	beq.n	800d9ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2220      	movs	r2, #32
 800d9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	e03d      	b.n	800da68 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10b      	bne.n	800da0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	3302      	adds	r3, #2
 800da06:	61bb      	str	r3, [r7, #24]
 800da08:	e007      	b.n	800da1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	781a      	ldrb	r2, [r3, #0]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	3301      	adds	r3, #1
 800da18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800da20:	b29b      	uxth	r3, r3
 800da22:	3b01      	subs	r3, #1
 800da24:	b29a      	uxth	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800da32:	b29b      	uxth	r3, r3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1c8      	bne.n	800d9ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	2200      	movs	r2, #0
 800da40:	2140      	movs	r1, #64	@ 0x40
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f001 fba4 	bl	800f190 <UART_WaitOnFlagUntilTimeout>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d005      	beq.n	800da5a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2220      	movs	r2, #32
 800da52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800da56:	2303      	movs	r3, #3
 800da58:	e006      	b.n	800da68 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2220      	movs	r2, #32
 800da5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800da62:	2300      	movs	r3, #0
 800da64:	e000      	b.n	800da68 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800da66:	2302      	movs	r3, #2
  }
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3720      	adds	r7, #32
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b0ba      	sub	sp, #232	@ 0xe8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800da9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800da9e:	4013      	ands	r3, r2
 800daa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800daa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d11b      	bne.n	800dae4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800daac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dab0:	f003 0320 	and.w	r3, r3, #32
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d015      	beq.n	800dae4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dabc:	f003 0320 	and.w	r3, r3, #32
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d105      	bne.n	800dad0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d009      	beq.n	800dae4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 8377 	beq.w	800e1c8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	4798      	blx	r3
      }
      return;
 800dae2:	e371      	b.n	800e1c8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f000 8123 	beq.w	800dd34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800daee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800daf2:	4b8d      	ldr	r3, [pc, #564]	@ (800dd28 <HAL_UART_IRQHandler+0x2b8>)
 800daf4:	4013      	ands	r3, r2
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d106      	bne.n	800db08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dafa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800dafe:	4b8b      	ldr	r3, [pc, #556]	@ (800dd2c <HAL_UART_IRQHandler+0x2bc>)
 800db00:	4013      	ands	r3, r2
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 8116 	beq.w	800dd34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d011      	beq.n	800db38 <HAL_UART_IRQHandler+0xc8>
 800db14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2201      	movs	r2, #1
 800db26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db2e:	f043 0201 	orr.w	r2, r3, #1
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d011      	beq.n	800db68 <HAL_UART_IRQHandler+0xf8>
 800db44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00b      	beq.n	800db68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2202      	movs	r2, #2
 800db56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db5e:	f043 0204 	orr.w	r2, r3, #4
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db6c:	f003 0304 	and.w	r3, r3, #4
 800db70:	2b00      	cmp	r3, #0
 800db72:	d011      	beq.n	800db98 <HAL_UART_IRQHandler+0x128>
 800db74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00b      	beq.n	800db98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2204      	movs	r2, #4
 800db86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db8e:	f043 0202 	orr.w	r2, r3, #2
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db9c:	f003 0308 	and.w	r3, r3, #8
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d017      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dba8:	f003 0320 	and.w	r3, r3, #32
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d105      	bne.n	800dbbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dbb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800dbb4:	4b5c      	ldr	r3, [pc, #368]	@ (800dd28 <HAL_UART_IRQHandler+0x2b8>)
 800dbb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00b      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2208      	movs	r2, #8
 800dbc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbca:	f043 0208 	orr.w	r2, r3, #8
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d012      	beq.n	800dc06 <HAL_UART_IRQHandler+0x196>
 800dbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbe4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00c      	beq.n	800dc06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbfc:	f043 0220 	orr.w	r2, r3, #32
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f000 82dd 	beq.w	800e1cc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc16:	f003 0320 	and.w	r3, r3, #32
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d013      	beq.n	800dc46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc22:	f003 0320 	and.w	r3, r3, #32
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d105      	bne.n	800dc36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d007      	beq.n	800dc46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc5a:	2b40      	cmp	r3, #64	@ 0x40
 800dc5c:	d005      	beq.n	800dc6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dc5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d054      	beq.n	800dd14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f001 fc20 	bl	800f4b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc7a:	2b40      	cmp	r3, #64	@ 0x40
 800dc7c:	d146      	bne.n	800dd0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3308      	adds	r3, #8
 800dc84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dc8c:	e853 3f00 	ldrex	r3, [r3]
 800dc90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dc94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3308      	adds	r3, #8
 800dca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dcaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dcae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dcb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dcba:	e841 2300 	strex	r3, r2, [r1]
 800dcbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dcc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1d9      	bne.n	800dc7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d017      	beq.n	800dd04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcda:	4a15      	ldr	r2, [pc, #84]	@ (800dd30 <HAL_UART_IRQHandler+0x2c0>)
 800dcdc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7f8 fa03 	bl	80060f0 <HAL_DMA_Abort_IT>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d019      	beq.n	800dd24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800dcfe:	4610      	mov	r0, r2
 800dd00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd02:	e00f      	b.n	800dd24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 fa81 	bl	800e20c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd0a:	e00b      	b.n	800dd24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fa7d 	bl	800e20c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd12:	e007      	b.n	800dd24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 fa79 	bl	800e20c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800dd22:	e253      	b.n	800e1cc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd24:	bf00      	nop
    return;
 800dd26:	e251      	b.n	800e1cc <HAL_UART_IRQHandler+0x75c>
 800dd28:	10000001 	.word	0x10000001
 800dd2c:	04000120 	.word	0x04000120
 800dd30:	0800f57d 	.word	0x0800f57d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	f040 81e7 	bne.w	800e10c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dd3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd42:	f003 0310 	and.w	r3, r3, #16
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 81e0 	beq.w	800e10c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd50:	f003 0310 	and.w	r3, r3, #16
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f000 81d9 	beq.w	800e10c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2210      	movs	r2, #16
 800dd60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd6c:	2b40      	cmp	r3, #64	@ 0x40
 800dd6e:	f040 8151 	bne.w	800e014 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a96      	ldr	r2, [pc, #600]	@ (800dfd4 <HAL_UART_IRQHandler+0x564>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d068      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a93      	ldr	r2, [pc, #588]	@ (800dfd8 <HAL_UART_IRQHandler+0x568>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d061      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a91      	ldr	r2, [pc, #580]	@ (800dfdc <HAL_UART_IRQHandler+0x56c>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d05a      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a8e      	ldr	r2, [pc, #568]	@ (800dfe0 <HAL_UART_IRQHandler+0x570>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d053      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a8c      	ldr	r2, [pc, #560]	@ (800dfe4 <HAL_UART_IRQHandler+0x574>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d04c      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a89      	ldr	r2, [pc, #548]	@ (800dfe8 <HAL_UART_IRQHandler+0x578>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d045      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a87      	ldr	r2, [pc, #540]	@ (800dfec <HAL_UART_IRQHandler+0x57c>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d03e      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a84      	ldr	r2, [pc, #528]	@ (800dff0 <HAL_UART_IRQHandler+0x580>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d037      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a82      	ldr	r2, [pc, #520]	@ (800dff4 <HAL_UART_IRQHandler+0x584>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d030      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a7f      	ldr	r2, [pc, #508]	@ (800dff8 <HAL_UART_IRQHandler+0x588>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d029      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a7d      	ldr	r2, [pc, #500]	@ (800dffc <HAL_UART_IRQHandler+0x58c>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d022      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a7a      	ldr	r2, [pc, #488]	@ (800e000 <HAL_UART_IRQHandler+0x590>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d01b      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a78      	ldr	r2, [pc, #480]	@ (800e004 <HAL_UART_IRQHandler+0x594>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d014      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a75      	ldr	r2, [pc, #468]	@ (800e008 <HAL_UART_IRQHandler+0x598>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d00d      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a73      	ldr	r2, [pc, #460]	@ (800e00c <HAL_UART_IRQHandler+0x59c>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d006      	beq.n	800de52 <HAL_UART_IRQHandler+0x3e2>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a70      	ldr	r2, [pc, #448]	@ (800e010 <HAL_UART_IRQHandler+0x5a0>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d106      	bne.n	800de60 <HAL_UART_IRQHandler+0x3f0>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	e005      	b.n	800de6c <HAL_UART_IRQHandler+0x3fc>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800de70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800de74:	2b00      	cmp	r3, #0
 800de76:	f000 81ab 	beq.w	800e1d0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800de80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800de84:	429a      	cmp	r2, r3
 800de86:	f080 81a3 	bcs.w	800e1d0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800de90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dea0:	f000 8087 	beq.w	800dfb2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800deb0:	e853 3f00 	ldrex	r3, [r3]
 800deb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800deb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800debc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	461a      	mov	r2, r3
 800deca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dece:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ded2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800deda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800dee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1da      	bne.n	800dea4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3308      	adds	r3, #8
 800def4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800def8:	e853 3f00 	ldrex	r3, [r3]
 800defc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800defe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800df00:	f023 0301 	bic.w	r3, r3, #1
 800df04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	3308      	adds	r3, #8
 800df0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800df12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800df16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800df1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800df1e:	e841 2300 	strex	r3, r2, [r1]
 800df22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800df24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1e1      	bne.n	800deee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3308      	adds	r3, #8
 800df30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df34:	e853 3f00 	ldrex	r3, [r3]
 800df38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800df3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3308      	adds	r3, #8
 800df4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800df4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800df50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800df54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800df56:	e841 2300 	strex	r3, r2, [r1]
 800df5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800df5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1e3      	bne.n	800df2a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2220      	movs	r2, #32
 800df66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df78:	e853 3f00 	ldrex	r3, [r3]
 800df7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800df7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df80:	f023 0310 	bic.w	r3, r3, #16
 800df84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	461a      	mov	r2, r3
 800df8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800df98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df9a:	e841 2300 	strex	r3, r2, [r1]
 800df9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dfa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1e4      	bne.n	800df70 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7f7 fd81 	bl	8005ab4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7f2 ff45 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfd2:	e0fd      	b.n	800e1d0 <HAL_UART_IRQHandler+0x760>
 800dfd4:	40020010 	.word	0x40020010
 800dfd8:	40020028 	.word	0x40020028
 800dfdc:	40020040 	.word	0x40020040
 800dfe0:	40020058 	.word	0x40020058
 800dfe4:	40020070 	.word	0x40020070
 800dfe8:	40020088 	.word	0x40020088
 800dfec:	400200a0 	.word	0x400200a0
 800dff0:	400200b8 	.word	0x400200b8
 800dff4:	40020410 	.word	0x40020410
 800dff8:	40020428 	.word	0x40020428
 800dffc:	40020440 	.word	0x40020440
 800e000:	40020458 	.word	0x40020458
 800e004:	40020470 	.word	0x40020470
 800e008:	40020488 	.word	0x40020488
 800e00c:	400204a0 	.word	0x400204a0
 800e010:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e020:	b29b      	uxth	r3, r3
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e02e:	b29b      	uxth	r3, r3
 800e030:	2b00      	cmp	r3, #0
 800e032:	f000 80cf 	beq.w	800e1d4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 80ca 	beq.w	800e1d4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e048:	e853 3f00 	ldrex	r3, [r3]
 800e04c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e054:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	461a      	mov	r2, r3
 800e05e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e062:	647b      	str	r3, [r7, #68]	@ 0x44
 800e064:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e066:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e06a:	e841 2300 	strex	r3, r2, [r1]
 800e06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1e4      	bne.n	800e040 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	3308      	adds	r3, #8
 800e07c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e080:	e853 3f00 	ldrex	r3, [r3]
 800e084:	623b      	str	r3, [r7, #32]
   return(result);
 800e086:	6a3a      	ldr	r2, [r7, #32]
 800e088:	4b55      	ldr	r3, [pc, #340]	@ (800e1e0 <HAL_UART_IRQHandler+0x770>)
 800e08a:	4013      	ands	r3, r2
 800e08c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3308      	adds	r3, #8
 800e096:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e09a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e09c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0a2:	e841 2300 	strex	r3, r2, [r1]
 800e0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1e3      	bne.n	800e076 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2220      	movs	r2, #32
 800e0b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	e853 3f00 	ldrex	r3, [r3]
 800e0ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f023 0310 	bic.w	r3, r3, #16
 800e0d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e0e4:	61fb      	str	r3, [r7, #28]
 800e0e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e8:	69b9      	ldr	r1, [r7, #24]
 800e0ea:	69fa      	ldr	r2, [r7, #28]
 800e0ec:	e841 2300 	strex	r3, r2, [r1]
 800e0f0:	617b      	str	r3, [r7, #20]
   return(result);
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1e4      	bne.n	800e0c2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2202      	movs	r2, #2
 800e0fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e0fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7f2 fea9 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e10a:	e063      	b.n	800e1d4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00e      	beq.n	800e136 <HAL_UART_IRQHandler+0x6c6>
 800e118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e11c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e120:	2b00      	cmp	r3, #0
 800e122:	d008      	beq.n	800e136 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e12c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f001 ff82 	bl	8010038 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e134:	e051      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d014      	beq.n	800e16c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d105      	bne.n	800e15a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e14e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e156:	2b00      	cmp	r3, #0
 800e158:	d008      	beq.n	800e16c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d03a      	beq.n	800e1d8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	4798      	blx	r3
    }
    return;
 800e16a:	e035      	b.n	800e1d8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e174:	2b00      	cmp	r3, #0
 800e176:	d009      	beq.n	800e18c <HAL_UART_IRQHandler+0x71c>
 800e178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e180:	2b00      	cmp	r3, #0
 800e182:	d003      	beq.n	800e18c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f001 fa0f 	bl	800f5a8 <UART_EndTransmit_IT>
    return;
 800e18a:	e026      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e194:	2b00      	cmp	r3, #0
 800e196:	d009      	beq.n	800e1ac <HAL_UART_IRQHandler+0x73c>
 800e198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e19c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d003      	beq.n	800e1ac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f001 ff5b 	bl	8010060 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1aa:	e016      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d010      	beq.n	800e1da <HAL_UART_IRQHandler+0x76a>
 800e1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	da0c      	bge.n	800e1da <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f001 ff43 	bl	801004c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1c6:	e008      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
      return;
 800e1c8:	bf00      	nop
 800e1ca:	e006      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
    return;
 800e1cc:	bf00      	nop
 800e1ce:	e004      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
      return;
 800e1d0:	bf00      	nop
 800e1d2:	e002      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
      return;
 800e1d4:	bf00      	nop
 800e1d6:	e000      	b.n	800e1da <HAL_UART_IRQHandler+0x76a>
    return;
 800e1d8:	bf00      	nop
  }
}
 800e1da:	37e8      	adds	r7, #232	@ 0xe8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	effffffe 	.word	0xeffffffe

0800e1e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e224:	b092      	sub	sp, #72	@ 0x48
 800e226:	af00      	add	r7, sp, #0
 800e228:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e22a:	2300      	movs	r3, #0
 800e22c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	689a      	ldr	r2, [r3, #8]
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	431a      	orrs	r2, r3
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	431a      	orrs	r2, r3
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	69db      	ldr	r3, [r3, #28]
 800e244:	4313      	orrs	r3, r2
 800e246:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	4bbe      	ldr	r3, [pc, #760]	@ (800e548 <UART_SetConfig+0x328>)
 800e250:	4013      	ands	r3, r2
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	6812      	ldr	r2, [r2, #0]
 800e256:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e258:	430b      	orrs	r3, r1
 800e25a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	68da      	ldr	r2, [r3, #12]
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	430a      	orrs	r2, r1
 800e270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	699b      	ldr	r3, [r3, #24]
 800e276:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4ab3      	ldr	r2, [pc, #716]	@ (800e54c <UART_SetConfig+0x32c>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d004      	beq.n	800e28c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	6a1b      	ldr	r3, [r3, #32]
 800e286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e288:	4313      	orrs	r3, r2
 800e28a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689a      	ldr	r2, [r3, #8]
 800e292:	4baf      	ldr	r3, [pc, #700]	@ (800e550 <UART_SetConfig+0x330>)
 800e294:	4013      	ands	r3, r2
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	6812      	ldr	r2, [r2, #0]
 800e29a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e29c:	430b      	orrs	r3, r1
 800e29e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a6:	f023 010f 	bic.w	r1, r3, #15
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	430a      	orrs	r2, r1
 800e2b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4aa6      	ldr	r2, [pc, #664]	@ (800e554 <UART_SetConfig+0x334>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d177      	bne.n	800e3b0 <UART_SetConfig+0x190>
 800e2c0:	4ba5      	ldr	r3, [pc, #660]	@ (800e558 <UART_SetConfig+0x338>)
 800e2c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e2c8:	2b28      	cmp	r3, #40	@ 0x28
 800e2ca:	d86d      	bhi.n	800e3a8 <UART_SetConfig+0x188>
 800e2cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e2d4 <UART_SetConfig+0xb4>)
 800e2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d2:	bf00      	nop
 800e2d4:	0800e379 	.word	0x0800e379
 800e2d8:	0800e3a9 	.word	0x0800e3a9
 800e2dc:	0800e3a9 	.word	0x0800e3a9
 800e2e0:	0800e3a9 	.word	0x0800e3a9
 800e2e4:	0800e3a9 	.word	0x0800e3a9
 800e2e8:	0800e3a9 	.word	0x0800e3a9
 800e2ec:	0800e3a9 	.word	0x0800e3a9
 800e2f0:	0800e3a9 	.word	0x0800e3a9
 800e2f4:	0800e381 	.word	0x0800e381
 800e2f8:	0800e3a9 	.word	0x0800e3a9
 800e2fc:	0800e3a9 	.word	0x0800e3a9
 800e300:	0800e3a9 	.word	0x0800e3a9
 800e304:	0800e3a9 	.word	0x0800e3a9
 800e308:	0800e3a9 	.word	0x0800e3a9
 800e30c:	0800e3a9 	.word	0x0800e3a9
 800e310:	0800e3a9 	.word	0x0800e3a9
 800e314:	0800e389 	.word	0x0800e389
 800e318:	0800e3a9 	.word	0x0800e3a9
 800e31c:	0800e3a9 	.word	0x0800e3a9
 800e320:	0800e3a9 	.word	0x0800e3a9
 800e324:	0800e3a9 	.word	0x0800e3a9
 800e328:	0800e3a9 	.word	0x0800e3a9
 800e32c:	0800e3a9 	.word	0x0800e3a9
 800e330:	0800e3a9 	.word	0x0800e3a9
 800e334:	0800e391 	.word	0x0800e391
 800e338:	0800e3a9 	.word	0x0800e3a9
 800e33c:	0800e3a9 	.word	0x0800e3a9
 800e340:	0800e3a9 	.word	0x0800e3a9
 800e344:	0800e3a9 	.word	0x0800e3a9
 800e348:	0800e3a9 	.word	0x0800e3a9
 800e34c:	0800e3a9 	.word	0x0800e3a9
 800e350:	0800e3a9 	.word	0x0800e3a9
 800e354:	0800e399 	.word	0x0800e399
 800e358:	0800e3a9 	.word	0x0800e3a9
 800e35c:	0800e3a9 	.word	0x0800e3a9
 800e360:	0800e3a9 	.word	0x0800e3a9
 800e364:	0800e3a9 	.word	0x0800e3a9
 800e368:	0800e3a9 	.word	0x0800e3a9
 800e36c:	0800e3a9 	.word	0x0800e3a9
 800e370:	0800e3a9 	.word	0x0800e3a9
 800e374:	0800e3a1 	.word	0x0800e3a1
 800e378:	2301      	movs	r3, #1
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e37e:	e326      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e380:	2304      	movs	r3, #4
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e386:	e322      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e388:	2308      	movs	r3, #8
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e38e:	e31e      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e390:	2310      	movs	r3, #16
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e396:	e31a      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e398:	2320      	movs	r3, #32
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e39e:	e316      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e3a0:	2340      	movs	r3, #64	@ 0x40
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3a6:	e312      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e3a8:	2380      	movs	r3, #128	@ 0x80
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ae:	e30e      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a69      	ldr	r2, [pc, #420]	@ (800e55c <UART_SetConfig+0x33c>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d130      	bne.n	800e41c <UART_SetConfig+0x1fc>
 800e3ba:	4b67      	ldr	r3, [pc, #412]	@ (800e558 <UART_SetConfig+0x338>)
 800e3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3be:	f003 0307 	and.w	r3, r3, #7
 800e3c2:	2b05      	cmp	r3, #5
 800e3c4:	d826      	bhi.n	800e414 <UART_SetConfig+0x1f4>
 800e3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e3cc <UART_SetConfig+0x1ac>)
 800e3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3cc:	0800e3e5 	.word	0x0800e3e5
 800e3d0:	0800e3ed 	.word	0x0800e3ed
 800e3d4:	0800e3f5 	.word	0x0800e3f5
 800e3d8:	0800e3fd 	.word	0x0800e3fd
 800e3dc:	0800e405 	.word	0x0800e405
 800e3e0:	0800e40d 	.word	0x0800e40d
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ea:	e2f0      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e3ec:	2304      	movs	r3, #4
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3f2:	e2ec      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e3f4:	2308      	movs	r3, #8
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3fa:	e2e8      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e3fc:	2310      	movs	r3, #16
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e402:	e2e4      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e404:	2320      	movs	r3, #32
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e40a:	e2e0      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e40c:	2340      	movs	r3, #64	@ 0x40
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e412:	e2dc      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e414:	2380      	movs	r3, #128	@ 0x80
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e41a:	e2d8      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a4f      	ldr	r2, [pc, #316]	@ (800e560 <UART_SetConfig+0x340>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d130      	bne.n	800e488 <UART_SetConfig+0x268>
 800e426:	4b4c      	ldr	r3, [pc, #304]	@ (800e558 <UART_SetConfig+0x338>)
 800e428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e42a:	f003 0307 	and.w	r3, r3, #7
 800e42e:	2b05      	cmp	r3, #5
 800e430:	d826      	bhi.n	800e480 <UART_SetConfig+0x260>
 800e432:	a201      	add	r2, pc, #4	@ (adr r2, 800e438 <UART_SetConfig+0x218>)
 800e434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e438:	0800e451 	.word	0x0800e451
 800e43c:	0800e459 	.word	0x0800e459
 800e440:	0800e461 	.word	0x0800e461
 800e444:	0800e469 	.word	0x0800e469
 800e448:	0800e471 	.word	0x0800e471
 800e44c:	0800e479 	.word	0x0800e479
 800e450:	2300      	movs	r3, #0
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e456:	e2ba      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e458:	2304      	movs	r3, #4
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e45e:	e2b6      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e460:	2308      	movs	r3, #8
 800e462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e466:	e2b2      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e468:	2310      	movs	r3, #16
 800e46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e46e:	e2ae      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e470:	2320      	movs	r3, #32
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e476:	e2aa      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e478:	2340      	movs	r3, #64	@ 0x40
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e47e:	e2a6      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e480:	2380      	movs	r3, #128	@ 0x80
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e486:	e2a2      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a35      	ldr	r2, [pc, #212]	@ (800e564 <UART_SetConfig+0x344>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d130      	bne.n	800e4f4 <UART_SetConfig+0x2d4>
 800e492:	4b31      	ldr	r3, [pc, #196]	@ (800e558 <UART_SetConfig+0x338>)
 800e494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b05      	cmp	r3, #5
 800e49c:	d826      	bhi.n	800e4ec <UART_SetConfig+0x2cc>
 800e49e:	a201      	add	r2, pc, #4	@ (adr r2, 800e4a4 <UART_SetConfig+0x284>)
 800e4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a4:	0800e4bd 	.word	0x0800e4bd
 800e4a8:	0800e4c5 	.word	0x0800e4c5
 800e4ac:	0800e4cd 	.word	0x0800e4cd
 800e4b0:	0800e4d5 	.word	0x0800e4d5
 800e4b4:	0800e4dd 	.word	0x0800e4dd
 800e4b8:	0800e4e5 	.word	0x0800e4e5
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4c2:	e284      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e4c4:	2304      	movs	r3, #4
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4ca:	e280      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e4cc:	2308      	movs	r3, #8
 800e4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4d2:	e27c      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e4d4:	2310      	movs	r3, #16
 800e4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4da:	e278      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e4dc:	2320      	movs	r3, #32
 800e4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4e2:	e274      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e4e4:	2340      	movs	r3, #64	@ 0x40
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4ea:	e270      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e4ec:	2380      	movs	r3, #128	@ 0x80
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4f2:	e26c      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e568 <UART_SetConfig+0x348>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d142      	bne.n	800e584 <UART_SetConfig+0x364>
 800e4fe:	4b16      	ldr	r3, [pc, #88]	@ (800e558 <UART_SetConfig+0x338>)
 800e500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e502:	f003 0307 	and.w	r3, r3, #7
 800e506:	2b05      	cmp	r3, #5
 800e508:	d838      	bhi.n	800e57c <UART_SetConfig+0x35c>
 800e50a:	a201      	add	r2, pc, #4	@ (adr r2, 800e510 <UART_SetConfig+0x2f0>)
 800e50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e510:	0800e529 	.word	0x0800e529
 800e514:	0800e531 	.word	0x0800e531
 800e518:	0800e539 	.word	0x0800e539
 800e51c:	0800e541 	.word	0x0800e541
 800e520:	0800e56d 	.word	0x0800e56d
 800e524:	0800e575 	.word	0x0800e575
 800e528:	2300      	movs	r3, #0
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e52e:	e24e      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e530:	2304      	movs	r3, #4
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e536:	e24a      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e538:	2308      	movs	r3, #8
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e53e:	e246      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e540:	2310      	movs	r3, #16
 800e542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e546:	e242      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e548:	cfff69f3 	.word	0xcfff69f3
 800e54c:	58000c00 	.word	0x58000c00
 800e550:	11fff4ff 	.word	0x11fff4ff
 800e554:	40011000 	.word	0x40011000
 800e558:	58024400 	.word	0x58024400
 800e55c:	40004400 	.word	0x40004400
 800e560:	40004800 	.word	0x40004800
 800e564:	40004c00 	.word	0x40004c00
 800e568:	40005000 	.word	0x40005000
 800e56c:	2320      	movs	r3, #32
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e572:	e22c      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e574:	2340      	movs	r3, #64	@ 0x40
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e57a:	e228      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e57c:	2380      	movs	r3, #128	@ 0x80
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e582:	e224      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4ab1      	ldr	r2, [pc, #708]	@ (800e850 <UART_SetConfig+0x630>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d176      	bne.n	800e67c <UART_SetConfig+0x45c>
 800e58e:	4bb1      	ldr	r3, [pc, #708]	@ (800e854 <UART_SetConfig+0x634>)
 800e590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e596:	2b28      	cmp	r3, #40	@ 0x28
 800e598:	d86c      	bhi.n	800e674 <UART_SetConfig+0x454>
 800e59a:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a0 <UART_SetConfig+0x380>)
 800e59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a0:	0800e645 	.word	0x0800e645
 800e5a4:	0800e675 	.word	0x0800e675
 800e5a8:	0800e675 	.word	0x0800e675
 800e5ac:	0800e675 	.word	0x0800e675
 800e5b0:	0800e675 	.word	0x0800e675
 800e5b4:	0800e675 	.word	0x0800e675
 800e5b8:	0800e675 	.word	0x0800e675
 800e5bc:	0800e675 	.word	0x0800e675
 800e5c0:	0800e64d 	.word	0x0800e64d
 800e5c4:	0800e675 	.word	0x0800e675
 800e5c8:	0800e675 	.word	0x0800e675
 800e5cc:	0800e675 	.word	0x0800e675
 800e5d0:	0800e675 	.word	0x0800e675
 800e5d4:	0800e675 	.word	0x0800e675
 800e5d8:	0800e675 	.word	0x0800e675
 800e5dc:	0800e675 	.word	0x0800e675
 800e5e0:	0800e655 	.word	0x0800e655
 800e5e4:	0800e675 	.word	0x0800e675
 800e5e8:	0800e675 	.word	0x0800e675
 800e5ec:	0800e675 	.word	0x0800e675
 800e5f0:	0800e675 	.word	0x0800e675
 800e5f4:	0800e675 	.word	0x0800e675
 800e5f8:	0800e675 	.word	0x0800e675
 800e5fc:	0800e675 	.word	0x0800e675
 800e600:	0800e65d 	.word	0x0800e65d
 800e604:	0800e675 	.word	0x0800e675
 800e608:	0800e675 	.word	0x0800e675
 800e60c:	0800e675 	.word	0x0800e675
 800e610:	0800e675 	.word	0x0800e675
 800e614:	0800e675 	.word	0x0800e675
 800e618:	0800e675 	.word	0x0800e675
 800e61c:	0800e675 	.word	0x0800e675
 800e620:	0800e665 	.word	0x0800e665
 800e624:	0800e675 	.word	0x0800e675
 800e628:	0800e675 	.word	0x0800e675
 800e62c:	0800e675 	.word	0x0800e675
 800e630:	0800e675 	.word	0x0800e675
 800e634:	0800e675 	.word	0x0800e675
 800e638:	0800e675 	.word	0x0800e675
 800e63c:	0800e675 	.word	0x0800e675
 800e640:	0800e66d 	.word	0x0800e66d
 800e644:	2301      	movs	r3, #1
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e64a:	e1c0      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e64c:	2304      	movs	r3, #4
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e652:	e1bc      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e654:	2308      	movs	r3, #8
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e65a:	e1b8      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e65c:	2310      	movs	r3, #16
 800e65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e662:	e1b4      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e664:	2320      	movs	r3, #32
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e66a:	e1b0      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e66c:	2340      	movs	r3, #64	@ 0x40
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e672:	e1ac      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e674:	2380      	movs	r3, #128	@ 0x80
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e67a:	e1a8      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a75      	ldr	r2, [pc, #468]	@ (800e858 <UART_SetConfig+0x638>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d130      	bne.n	800e6e8 <UART_SetConfig+0x4c8>
 800e686:	4b73      	ldr	r3, [pc, #460]	@ (800e854 <UART_SetConfig+0x634>)
 800e688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e68a:	f003 0307 	and.w	r3, r3, #7
 800e68e:	2b05      	cmp	r3, #5
 800e690:	d826      	bhi.n	800e6e0 <UART_SetConfig+0x4c0>
 800e692:	a201      	add	r2, pc, #4	@ (adr r2, 800e698 <UART_SetConfig+0x478>)
 800e694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e698:	0800e6b1 	.word	0x0800e6b1
 800e69c:	0800e6b9 	.word	0x0800e6b9
 800e6a0:	0800e6c1 	.word	0x0800e6c1
 800e6a4:	0800e6c9 	.word	0x0800e6c9
 800e6a8:	0800e6d1 	.word	0x0800e6d1
 800e6ac:	0800e6d9 	.word	0x0800e6d9
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6b6:	e18a      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e6b8:	2304      	movs	r3, #4
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6be:	e186      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e6c0:	2308      	movs	r3, #8
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6c6:	e182      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e6c8:	2310      	movs	r3, #16
 800e6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ce:	e17e      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e6d0:	2320      	movs	r3, #32
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6d6:	e17a      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e6d8:	2340      	movs	r3, #64	@ 0x40
 800e6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6de:	e176      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e6e0:	2380      	movs	r3, #128	@ 0x80
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6e6:	e172      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a5b      	ldr	r2, [pc, #364]	@ (800e85c <UART_SetConfig+0x63c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d130      	bne.n	800e754 <UART_SetConfig+0x534>
 800e6f2:	4b58      	ldr	r3, [pc, #352]	@ (800e854 <UART_SetConfig+0x634>)
 800e6f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	2b05      	cmp	r3, #5
 800e6fc:	d826      	bhi.n	800e74c <UART_SetConfig+0x52c>
 800e6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e704 <UART_SetConfig+0x4e4>)
 800e700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e704:	0800e71d 	.word	0x0800e71d
 800e708:	0800e725 	.word	0x0800e725
 800e70c:	0800e72d 	.word	0x0800e72d
 800e710:	0800e735 	.word	0x0800e735
 800e714:	0800e73d 	.word	0x0800e73d
 800e718:	0800e745 	.word	0x0800e745
 800e71c:	2300      	movs	r3, #0
 800e71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e722:	e154      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e724:	2304      	movs	r3, #4
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e72a:	e150      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e72c:	2308      	movs	r3, #8
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e732:	e14c      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e734:	2310      	movs	r3, #16
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e73a:	e148      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e73c:	2320      	movs	r3, #32
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e742:	e144      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e744:	2340      	movs	r3, #64	@ 0x40
 800e746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e74a:	e140      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e74c:	2380      	movs	r3, #128	@ 0x80
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e752:	e13c      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a41      	ldr	r2, [pc, #260]	@ (800e860 <UART_SetConfig+0x640>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	f040 8082 	bne.w	800e864 <UART_SetConfig+0x644>
 800e760:	4b3c      	ldr	r3, [pc, #240]	@ (800e854 <UART_SetConfig+0x634>)
 800e762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e764:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e768:	2b28      	cmp	r3, #40	@ 0x28
 800e76a:	d86d      	bhi.n	800e848 <UART_SetConfig+0x628>
 800e76c:	a201      	add	r2, pc, #4	@ (adr r2, 800e774 <UART_SetConfig+0x554>)
 800e76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e772:	bf00      	nop
 800e774:	0800e819 	.word	0x0800e819
 800e778:	0800e849 	.word	0x0800e849
 800e77c:	0800e849 	.word	0x0800e849
 800e780:	0800e849 	.word	0x0800e849
 800e784:	0800e849 	.word	0x0800e849
 800e788:	0800e849 	.word	0x0800e849
 800e78c:	0800e849 	.word	0x0800e849
 800e790:	0800e849 	.word	0x0800e849
 800e794:	0800e821 	.word	0x0800e821
 800e798:	0800e849 	.word	0x0800e849
 800e79c:	0800e849 	.word	0x0800e849
 800e7a0:	0800e849 	.word	0x0800e849
 800e7a4:	0800e849 	.word	0x0800e849
 800e7a8:	0800e849 	.word	0x0800e849
 800e7ac:	0800e849 	.word	0x0800e849
 800e7b0:	0800e849 	.word	0x0800e849
 800e7b4:	0800e829 	.word	0x0800e829
 800e7b8:	0800e849 	.word	0x0800e849
 800e7bc:	0800e849 	.word	0x0800e849
 800e7c0:	0800e849 	.word	0x0800e849
 800e7c4:	0800e849 	.word	0x0800e849
 800e7c8:	0800e849 	.word	0x0800e849
 800e7cc:	0800e849 	.word	0x0800e849
 800e7d0:	0800e849 	.word	0x0800e849
 800e7d4:	0800e831 	.word	0x0800e831
 800e7d8:	0800e849 	.word	0x0800e849
 800e7dc:	0800e849 	.word	0x0800e849
 800e7e0:	0800e849 	.word	0x0800e849
 800e7e4:	0800e849 	.word	0x0800e849
 800e7e8:	0800e849 	.word	0x0800e849
 800e7ec:	0800e849 	.word	0x0800e849
 800e7f0:	0800e849 	.word	0x0800e849
 800e7f4:	0800e839 	.word	0x0800e839
 800e7f8:	0800e849 	.word	0x0800e849
 800e7fc:	0800e849 	.word	0x0800e849
 800e800:	0800e849 	.word	0x0800e849
 800e804:	0800e849 	.word	0x0800e849
 800e808:	0800e849 	.word	0x0800e849
 800e80c:	0800e849 	.word	0x0800e849
 800e810:	0800e849 	.word	0x0800e849
 800e814:	0800e841 	.word	0x0800e841
 800e818:	2301      	movs	r3, #1
 800e81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e81e:	e0d6      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e820:	2304      	movs	r3, #4
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e826:	e0d2      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e828:	2308      	movs	r3, #8
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e82e:	e0ce      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e830:	2310      	movs	r3, #16
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e836:	e0ca      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e838:	2320      	movs	r3, #32
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e83e:	e0c6      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e840:	2340      	movs	r3, #64	@ 0x40
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e846:	e0c2      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e848:	2380      	movs	r3, #128	@ 0x80
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e84e:	e0be      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e850:	40011400 	.word	0x40011400
 800e854:	58024400 	.word	0x58024400
 800e858:	40007800 	.word	0x40007800
 800e85c:	40007c00 	.word	0x40007c00
 800e860:	40011800 	.word	0x40011800
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4aad      	ldr	r2, [pc, #692]	@ (800eb20 <UART_SetConfig+0x900>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d176      	bne.n	800e95c <UART_SetConfig+0x73c>
 800e86e:	4bad      	ldr	r3, [pc, #692]	@ (800eb24 <UART_SetConfig+0x904>)
 800e870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e876:	2b28      	cmp	r3, #40	@ 0x28
 800e878:	d86c      	bhi.n	800e954 <UART_SetConfig+0x734>
 800e87a:	a201      	add	r2, pc, #4	@ (adr r2, 800e880 <UART_SetConfig+0x660>)
 800e87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e880:	0800e925 	.word	0x0800e925
 800e884:	0800e955 	.word	0x0800e955
 800e888:	0800e955 	.word	0x0800e955
 800e88c:	0800e955 	.word	0x0800e955
 800e890:	0800e955 	.word	0x0800e955
 800e894:	0800e955 	.word	0x0800e955
 800e898:	0800e955 	.word	0x0800e955
 800e89c:	0800e955 	.word	0x0800e955
 800e8a0:	0800e92d 	.word	0x0800e92d
 800e8a4:	0800e955 	.word	0x0800e955
 800e8a8:	0800e955 	.word	0x0800e955
 800e8ac:	0800e955 	.word	0x0800e955
 800e8b0:	0800e955 	.word	0x0800e955
 800e8b4:	0800e955 	.word	0x0800e955
 800e8b8:	0800e955 	.word	0x0800e955
 800e8bc:	0800e955 	.word	0x0800e955
 800e8c0:	0800e935 	.word	0x0800e935
 800e8c4:	0800e955 	.word	0x0800e955
 800e8c8:	0800e955 	.word	0x0800e955
 800e8cc:	0800e955 	.word	0x0800e955
 800e8d0:	0800e955 	.word	0x0800e955
 800e8d4:	0800e955 	.word	0x0800e955
 800e8d8:	0800e955 	.word	0x0800e955
 800e8dc:	0800e955 	.word	0x0800e955
 800e8e0:	0800e93d 	.word	0x0800e93d
 800e8e4:	0800e955 	.word	0x0800e955
 800e8e8:	0800e955 	.word	0x0800e955
 800e8ec:	0800e955 	.word	0x0800e955
 800e8f0:	0800e955 	.word	0x0800e955
 800e8f4:	0800e955 	.word	0x0800e955
 800e8f8:	0800e955 	.word	0x0800e955
 800e8fc:	0800e955 	.word	0x0800e955
 800e900:	0800e945 	.word	0x0800e945
 800e904:	0800e955 	.word	0x0800e955
 800e908:	0800e955 	.word	0x0800e955
 800e90c:	0800e955 	.word	0x0800e955
 800e910:	0800e955 	.word	0x0800e955
 800e914:	0800e955 	.word	0x0800e955
 800e918:	0800e955 	.word	0x0800e955
 800e91c:	0800e955 	.word	0x0800e955
 800e920:	0800e94d 	.word	0x0800e94d
 800e924:	2301      	movs	r3, #1
 800e926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e92a:	e050      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e92c:	2304      	movs	r3, #4
 800e92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e932:	e04c      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e934:	2308      	movs	r3, #8
 800e936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e93a:	e048      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e93c:	2310      	movs	r3, #16
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e942:	e044      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e944:	2320      	movs	r3, #32
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94a:	e040      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e94c:	2340      	movs	r3, #64	@ 0x40
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e952:	e03c      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e954:	2380      	movs	r3, #128	@ 0x80
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e95a:	e038      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a71      	ldr	r2, [pc, #452]	@ (800eb28 <UART_SetConfig+0x908>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d130      	bne.n	800e9c8 <UART_SetConfig+0x7a8>
 800e966:	4b6f      	ldr	r3, [pc, #444]	@ (800eb24 <UART_SetConfig+0x904>)
 800e968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e96a:	f003 0307 	and.w	r3, r3, #7
 800e96e:	2b05      	cmp	r3, #5
 800e970:	d826      	bhi.n	800e9c0 <UART_SetConfig+0x7a0>
 800e972:	a201      	add	r2, pc, #4	@ (adr r2, 800e978 <UART_SetConfig+0x758>)
 800e974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e978:	0800e991 	.word	0x0800e991
 800e97c:	0800e999 	.word	0x0800e999
 800e980:	0800e9a1 	.word	0x0800e9a1
 800e984:	0800e9a9 	.word	0x0800e9a9
 800e988:	0800e9b1 	.word	0x0800e9b1
 800e98c:	0800e9b9 	.word	0x0800e9b9
 800e990:	2302      	movs	r3, #2
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e996:	e01a      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e998:	2304      	movs	r3, #4
 800e99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99e:	e016      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e9a0:	2308      	movs	r3, #8
 800e9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a6:	e012      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e9a8:	2310      	movs	r3, #16
 800e9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ae:	e00e      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e9b0:	2320      	movs	r3, #32
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b6:	e00a      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e9b8:	2340      	movs	r3, #64	@ 0x40
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9be:	e006      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e9c0:	2380      	movs	r3, #128	@ 0x80
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c6:	e002      	b.n	800e9ce <UART_SetConfig+0x7ae>
 800e9c8:	2380      	movs	r3, #128	@ 0x80
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a55      	ldr	r2, [pc, #340]	@ (800eb28 <UART_SetConfig+0x908>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	f040 80f8 	bne.w	800ebca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e9da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e9de:	2b20      	cmp	r3, #32
 800e9e0:	dc46      	bgt.n	800ea70 <UART_SetConfig+0x850>
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	db75      	blt.n	800ead2 <UART_SetConfig+0x8b2>
 800e9e6:	3b02      	subs	r3, #2
 800e9e8:	2b1e      	cmp	r3, #30
 800e9ea:	d872      	bhi.n	800ead2 <UART_SetConfig+0x8b2>
 800e9ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e9f4 <UART_SetConfig+0x7d4>)
 800e9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f2:	bf00      	nop
 800e9f4:	0800ea77 	.word	0x0800ea77
 800e9f8:	0800ead3 	.word	0x0800ead3
 800e9fc:	0800ea7f 	.word	0x0800ea7f
 800ea00:	0800ead3 	.word	0x0800ead3
 800ea04:	0800ead3 	.word	0x0800ead3
 800ea08:	0800ead3 	.word	0x0800ead3
 800ea0c:	0800ea8f 	.word	0x0800ea8f
 800ea10:	0800ead3 	.word	0x0800ead3
 800ea14:	0800ead3 	.word	0x0800ead3
 800ea18:	0800ead3 	.word	0x0800ead3
 800ea1c:	0800ead3 	.word	0x0800ead3
 800ea20:	0800ead3 	.word	0x0800ead3
 800ea24:	0800ead3 	.word	0x0800ead3
 800ea28:	0800ead3 	.word	0x0800ead3
 800ea2c:	0800ea9f 	.word	0x0800ea9f
 800ea30:	0800ead3 	.word	0x0800ead3
 800ea34:	0800ead3 	.word	0x0800ead3
 800ea38:	0800ead3 	.word	0x0800ead3
 800ea3c:	0800ead3 	.word	0x0800ead3
 800ea40:	0800ead3 	.word	0x0800ead3
 800ea44:	0800ead3 	.word	0x0800ead3
 800ea48:	0800ead3 	.word	0x0800ead3
 800ea4c:	0800ead3 	.word	0x0800ead3
 800ea50:	0800ead3 	.word	0x0800ead3
 800ea54:	0800ead3 	.word	0x0800ead3
 800ea58:	0800ead3 	.word	0x0800ead3
 800ea5c:	0800ead3 	.word	0x0800ead3
 800ea60:	0800ead3 	.word	0x0800ead3
 800ea64:	0800ead3 	.word	0x0800ead3
 800ea68:	0800ead3 	.word	0x0800ead3
 800ea6c:	0800eac5 	.word	0x0800eac5
 800ea70:	2b40      	cmp	r3, #64	@ 0x40
 800ea72:	d02a      	beq.n	800eaca <UART_SetConfig+0x8aa>
 800ea74:	e02d      	b.n	800ead2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ea76:	f7fc f89b 	bl	800abb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ea7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ea7c:	e02f      	b.n	800eade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fc f8aa 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea8c:	e027      	b.n	800eade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea8e:	f107 0318 	add.w	r3, r7, #24
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fc f9f6 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea9c:	e01f      	b.n	800eade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea9e:	4b21      	ldr	r3, [pc, #132]	@ (800eb24 <UART_SetConfig+0x904>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f003 0320 	and.w	r3, r3, #32
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d009      	beq.n	800eabe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eaaa:	4b1e      	ldr	r3, [pc, #120]	@ (800eb24 <UART_SetConfig+0x904>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	08db      	lsrs	r3, r3, #3
 800eab0:	f003 0303 	and.w	r3, r3, #3
 800eab4:	4a1d      	ldr	r2, [pc, #116]	@ (800eb2c <UART_SetConfig+0x90c>)
 800eab6:	fa22 f303 	lsr.w	r3, r2, r3
 800eaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eabc:	e00f      	b.n	800eade <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800eabe:	4b1b      	ldr	r3, [pc, #108]	@ (800eb2c <UART_SetConfig+0x90c>)
 800eac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eac2:	e00c      	b.n	800eade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eac4:	4b1a      	ldr	r3, [pc, #104]	@ (800eb30 <UART_SetConfig+0x910>)
 800eac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eac8:	e009      	b.n	800eade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ead0:	e005      	b.n	800eade <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ead2:	2300      	movs	r3, #0
 800ead4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ead6:	2301      	movs	r3, #1
 800ead8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eadc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 81ee 	beq.w	800eec2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaea:	4a12      	ldr	r2, [pc, #72]	@ (800eb34 <UART_SetConfig+0x914>)
 800eaec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaf8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	4613      	mov	r3, r2
 800eb00:	005b      	lsls	r3, r3, #1
 800eb02:	4413      	add	r3, r2
 800eb04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d305      	bcc.n	800eb16 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d910      	bls.n	800eb38 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800eb16:	2301      	movs	r3, #1
 800eb18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eb1c:	e1d1      	b.n	800eec2 <UART_SetConfig+0xca2>
 800eb1e:	bf00      	nop
 800eb20:	40011c00 	.word	0x40011c00
 800eb24:	58024400 	.word	0x58024400
 800eb28:	58000c00 	.word	0x58000c00
 800eb2c:	03d09000 	.word	0x03d09000
 800eb30:	003d0900 	.word	0x003d0900
 800eb34:	08010618 	.word	0x08010618
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	60bb      	str	r3, [r7, #8]
 800eb3e:	60fa      	str	r2, [r7, #12]
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb44:	4ac0      	ldr	r2, [pc, #768]	@ (800ee48 <UART_SetConfig+0xc28>)
 800eb46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	603b      	str	r3, [r7, #0]
 800eb50:	607a      	str	r2, [r7, #4]
 800eb52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb5a:	f7f1 fbd7 	bl	800030c <__aeabi_uldivmod>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	4610      	mov	r0, r2
 800eb64:	4619      	mov	r1, r3
 800eb66:	f04f 0200 	mov.w	r2, #0
 800eb6a:	f04f 0300 	mov.w	r3, #0
 800eb6e:	020b      	lsls	r3, r1, #8
 800eb70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb74:	0202      	lsls	r2, r0, #8
 800eb76:	6979      	ldr	r1, [r7, #20]
 800eb78:	6849      	ldr	r1, [r1, #4]
 800eb7a:	0849      	lsrs	r1, r1, #1
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	460c      	mov	r4, r1
 800eb80:	4605      	mov	r5, r0
 800eb82:	eb12 0804 	adds.w	r8, r2, r4
 800eb86:	eb43 0905 	adc.w	r9, r3, r5
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	469a      	mov	sl, r3
 800eb92:	4693      	mov	fp, r2
 800eb94:	4652      	mov	r2, sl
 800eb96:	465b      	mov	r3, fp
 800eb98:	4640      	mov	r0, r8
 800eb9a:	4649      	mov	r1, r9
 800eb9c:	f7f1 fbb6 	bl	800030c <__aeabi_uldivmod>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4613      	mov	r3, r2
 800eba6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ebae:	d308      	bcc.n	800ebc2 <UART_SetConfig+0x9a2>
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebb6:	d204      	bcs.n	800ebc2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebbe:	60da      	str	r2, [r3, #12]
 800ebc0:	e17f      	b.n	800eec2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ebc8:	e17b      	b.n	800eec2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebd2:	f040 80bd 	bne.w	800ed50 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ebd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ebda:	2b20      	cmp	r3, #32
 800ebdc:	dc48      	bgt.n	800ec70 <UART_SetConfig+0xa50>
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	db7b      	blt.n	800ecda <UART_SetConfig+0xaba>
 800ebe2:	2b20      	cmp	r3, #32
 800ebe4:	d879      	bhi.n	800ecda <UART_SetConfig+0xaba>
 800ebe6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebec <UART_SetConfig+0x9cc>)
 800ebe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebec:	0800ec77 	.word	0x0800ec77
 800ebf0:	0800ec7f 	.word	0x0800ec7f
 800ebf4:	0800ecdb 	.word	0x0800ecdb
 800ebf8:	0800ecdb 	.word	0x0800ecdb
 800ebfc:	0800ec87 	.word	0x0800ec87
 800ec00:	0800ecdb 	.word	0x0800ecdb
 800ec04:	0800ecdb 	.word	0x0800ecdb
 800ec08:	0800ecdb 	.word	0x0800ecdb
 800ec0c:	0800ec97 	.word	0x0800ec97
 800ec10:	0800ecdb 	.word	0x0800ecdb
 800ec14:	0800ecdb 	.word	0x0800ecdb
 800ec18:	0800ecdb 	.word	0x0800ecdb
 800ec1c:	0800ecdb 	.word	0x0800ecdb
 800ec20:	0800ecdb 	.word	0x0800ecdb
 800ec24:	0800ecdb 	.word	0x0800ecdb
 800ec28:	0800ecdb 	.word	0x0800ecdb
 800ec2c:	0800eca7 	.word	0x0800eca7
 800ec30:	0800ecdb 	.word	0x0800ecdb
 800ec34:	0800ecdb 	.word	0x0800ecdb
 800ec38:	0800ecdb 	.word	0x0800ecdb
 800ec3c:	0800ecdb 	.word	0x0800ecdb
 800ec40:	0800ecdb 	.word	0x0800ecdb
 800ec44:	0800ecdb 	.word	0x0800ecdb
 800ec48:	0800ecdb 	.word	0x0800ecdb
 800ec4c:	0800ecdb 	.word	0x0800ecdb
 800ec50:	0800ecdb 	.word	0x0800ecdb
 800ec54:	0800ecdb 	.word	0x0800ecdb
 800ec58:	0800ecdb 	.word	0x0800ecdb
 800ec5c:	0800ecdb 	.word	0x0800ecdb
 800ec60:	0800ecdb 	.word	0x0800ecdb
 800ec64:	0800ecdb 	.word	0x0800ecdb
 800ec68:	0800ecdb 	.word	0x0800ecdb
 800ec6c:	0800eccd 	.word	0x0800eccd
 800ec70:	2b40      	cmp	r3, #64	@ 0x40
 800ec72:	d02e      	beq.n	800ecd2 <UART_SetConfig+0xab2>
 800ec74:	e031      	b.n	800ecda <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec76:	f7fa f8fd 	bl	8008e74 <HAL_RCC_GetPCLK1Freq>
 800ec7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec7c:	e033      	b.n	800ece6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec7e:	f7fa f90f 	bl	8008ea0 <HAL_RCC_GetPCLK2Freq>
 800ec82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec84:	e02f      	b.n	800ece6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fb ffa6 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec94:	e027      	b.n	800ece6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec96:	f107 0318 	add.w	r3, r7, #24
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fc f8f2 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eca4:	e01f      	b.n	800ece6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eca6:	4b69      	ldr	r3, [pc, #420]	@ (800ee4c <UART_SetConfig+0xc2c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f003 0320 	and.w	r3, r3, #32
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d009      	beq.n	800ecc6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ecb2:	4b66      	ldr	r3, [pc, #408]	@ (800ee4c <UART_SetConfig+0xc2c>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	08db      	lsrs	r3, r3, #3
 800ecb8:	f003 0303 	and.w	r3, r3, #3
 800ecbc:	4a64      	ldr	r2, [pc, #400]	@ (800ee50 <UART_SetConfig+0xc30>)
 800ecbe:	fa22 f303 	lsr.w	r3, r2, r3
 800ecc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ecc4:	e00f      	b.n	800ece6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ecc6:	4b62      	ldr	r3, [pc, #392]	@ (800ee50 <UART_SetConfig+0xc30>)
 800ecc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecca:	e00c      	b.n	800ece6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eccc:	4b61      	ldr	r3, [pc, #388]	@ (800ee54 <UART_SetConfig+0xc34>)
 800ecce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecd0:	e009      	b.n	800ece6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ecd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecd8:	e005      	b.n	800ece6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ece4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ece6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 80ea 	beq.w	800eec2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf2:	4a55      	ldr	r2, [pc, #340]	@ (800ee48 <UART_SetConfig+0xc28>)
 800ecf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed00:	005a      	lsls	r2, r3, #1
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	085b      	lsrs	r3, r3, #1
 800ed08:	441a      	add	r2, r3
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed16:	2b0f      	cmp	r3, #15
 800ed18:	d916      	bls.n	800ed48 <UART_SetConfig+0xb28>
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed20:	d212      	bcs.n	800ed48 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ed22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	f023 030f 	bic.w	r3, r3, #15
 800ed2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed2e:	085b      	lsrs	r3, r3, #1
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	f003 0307 	and.w	r3, r3, #7
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ed44:	60da      	str	r2, [r3, #12]
 800ed46:	e0bc      	b.n	800eec2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ed4e:	e0b8      	b.n	800eec2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed54:	2b20      	cmp	r3, #32
 800ed56:	dc4b      	bgt.n	800edf0 <UART_SetConfig+0xbd0>
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f2c0 8087 	blt.w	800ee6c <UART_SetConfig+0xc4c>
 800ed5e:	2b20      	cmp	r3, #32
 800ed60:	f200 8084 	bhi.w	800ee6c <UART_SetConfig+0xc4c>
 800ed64:	a201      	add	r2, pc, #4	@ (adr r2, 800ed6c <UART_SetConfig+0xb4c>)
 800ed66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6a:	bf00      	nop
 800ed6c:	0800edf7 	.word	0x0800edf7
 800ed70:	0800edff 	.word	0x0800edff
 800ed74:	0800ee6d 	.word	0x0800ee6d
 800ed78:	0800ee6d 	.word	0x0800ee6d
 800ed7c:	0800ee07 	.word	0x0800ee07
 800ed80:	0800ee6d 	.word	0x0800ee6d
 800ed84:	0800ee6d 	.word	0x0800ee6d
 800ed88:	0800ee6d 	.word	0x0800ee6d
 800ed8c:	0800ee17 	.word	0x0800ee17
 800ed90:	0800ee6d 	.word	0x0800ee6d
 800ed94:	0800ee6d 	.word	0x0800ee6d
 800ed98:	0800ee6d 	.word	0x0800ee6d
 800ed9c:	0800ee6d 	.word	0x0800ee6d
 800eda0:	0800ee6d 	.word	0x0800ee6d
 800eda4:	0800ee6d 	.word	0x0800ee6d
 800eda8:	0800ee6d 	.word	0x0800ee6d
 800edac:	0800ee27 	.word	0x0800ee27
 800edb0:	0800ee6d 	.word	0x0800ee6d
 800edb4:	0800ee6d 	.word	0x0800ee6d
 800edb8:	0800ee6d 	.word	0x0800ee6d
 800edbc:	0800ee6d 	.word	0x0800ee6d
 800edc0:	0800ee6d 	.word	0x0800ee6d
 800edc4:	0800ee6d 	.word	0x0800ee6d
 800edc8:	0800ee6d 	.word	0x0800ee6d
 800edcc:	0800ee6d 	.word	0x0800ee6d
 800edd0:	0800ee6d 	.word	0x0800ee6d
 800edd4:	0800ee6d 	.word	0x0800ee6d
 800edd8:	0800ee6d 	.word	0x0800ee6d
 800eddc:	0800ee6d 	.word	0x0800ee6d
 800ede0:	0800ee6d 	.word	0x0800ee6d
 800ede4:	0800ee6d 	.word	0x0800ee6d
 800ede8:	0800ee6d 	.word	0x0800ee6d
 800edec:	0800ee5f 	.word	0x0800ee5f
 800edf0:	2b40      	cmp	r3, #64	@ 0x40
 800edf2:	d037      	beq.n	800ee64 <UART_SetConfig+0xc44>
 800edf4:	e03a      	b.n	800ee6c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800edf6:	f7fa f83d 	bl	8008e74 <HAL_RCC_GetPCLK1Freq>
 800edfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800edfc:	e03c      	b.n	800ee78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800edfe:	f7fa f84f 	bl	8008ea0 <HAL_RCC_GetPCLK2Freq>
 800ee02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee04:	e038      	b.n	800ee78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fb fee6 	bl	800abdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee14:	e030      	b.n	800ee78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee16:	f107 0318 	add.w	r3, r7, #24
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fc f832 	bl	800ae84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee24:	e028      	b.n	800ee78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee26:	4b09      	ldr	r3, [pc, #36]	@ (800ee4c <UART_SetConfig+0xc2c>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f003 0320 	and.w	r3, r3, #32
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d012      	beq.n	800ee58 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee32:	4b06      	ldr	r3, [pc, #24]	@ (800ee4c <UART_SetConfig+0xc2c>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	08db      	lsrs	r3, r3, #3
 800ee38:	f003 0303 	and.w	r3, r3, #3
 800ee3c:	4a04      	ldr	r2, [pc, #16]	@ (800ee50 <UART_SetConfig+0xc30>)
 800ee3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ee42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee44:	e018      	b.n	800ee78 <UART_SetConfig+0xc58>
 800ee46:	bf00      	nop
 800ee48:	08010618 	.word	0x08010618
 800ee4c:	58024400 	.word	0x58024400
 800ee50:	03d09000 	.word	0x03d09000
 800ee54:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ee58:	4b24      	ldr	r3, [pc, #144]	@ (800eeec <UART_SetConfig+0xccc>)
 800ee5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee5c:	e00c      	b.n	800ee78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee5e:	4b24      	ldr	r3, [pc, #144]	@ (800eef0 <UART_SetConfig+0xcd0>)
 800ee60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee62:	e009      	b.n	800ee78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee6a:	e005      	b.n	800ee78 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee76:	bf00      	nop
    }

    if (pclk != 0U)
 800ee78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d021      	beq.n	800eec2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee82:	4a1c      	ldr	r2, [pc, #112]	@ (800eef4 <UART_SetConfig+0xcd4>)
 800ee84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	085b      	lsrs	r3, r3, #1
 800ee96:	441a      	add	r2, r3
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eea0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea4:	2b0f      	cmp	r3, #15
 800eea6:	d909      	bls.n	800eebc <UART_SetConfig+0xc9c>
 800eea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eeae:	d205      	bcs.n	800eebc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	60da      	str	r2, [r3, #12]
 800eeba:	e002      	b.n	800eec2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	2201      	movs	r2, #1
 800eec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2201      	movs	r2, #1
 800eece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2200      	movs	r2, #0
 800eed6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	2200      	movs	r2, #0
 800eedc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800eede:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3748      	adds	r7, #72	@ 0x48
 800eee6:	46bd      	mov	sp, r7
 800eee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eeec:	03d09000 	.word	0x03d09000
 800eef0:	003d0900 	.word	0x003d0900
 800eef4:	08010618 	.word	0x08010618

0800eef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef04:	f003 0308 	and.w	r3, r3, #8
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00a      	beq.n	800ef22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00a      	beq.n	800ef44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	430a      	orrs	r2, r1
 800ef42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef48:	f003 0302 	and.w	r3, r3, #2
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00a      	beq.n	800ef66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	430a      	orrs	r2, r1
 800ef64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef6a:	f003 0304 	and.w	r3, r3, #4
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00a      	beq.n	800ef88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	430a      	orrs	r2, r1
 800ef86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef8c:	f003 0310 	and.w	r3, r3, #16
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00a      	beq.n	800efaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	430a      	orrs	r2, r1
 800efa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efae:	f003 0320 	and.w	r3, r3, #32
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00a      	beq.n	800efcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	430a      	orrs	r2, r1
 800efca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d01a      	beq.n	800f00e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	430a      	orrs	r2, r1
 800efec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eff6:	d10a      	bne.n	800f00e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	430a      	orrs	r2, r1
 800f00c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00a      	beq.n	800f030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	430a      	orrs	r2, r1
 800f02e:	605a      	str	r2, [r3, #4]
  }
}
 800f030:	bf00      	nop
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b098      	sub	sp, #96	@ 0x60
 800f040:	af02      	add	r7, sp, #8
 800f042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f04c:	f7f3 fd72 	bl	8002b34 <HAL_GetTick>
 800f050:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f003 0308 	and.w	r3, r3, #8
 800f05c:	2b08      	cmp	r3, #8
 800f05e:	d12f      	bne.n	800f0c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f064:	9300      	str	r3, [sp, #0]
 800f066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f068:	2200      	movs	r2, #0
 800f06a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 f88e 	bl	800f190 <UART_WaitOnFlagUntilTimeout>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d022      	beq.n	800f0c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f082:	e853 3f00 	ldrex	r3, [r3]
 800f086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f08a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f08e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	461a      	mov	r2, r3
 800f096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f098:	647b      	str	r3, [r7, #68]	@ 0x44
 800f09a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f09c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f09e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0a0:	e841 2300 	strex	r3, r2, [r1]
 800f0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1e6      	bne.n	800f07a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2220      	movs	r2, #32
 800f0b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e063      	b.n	800f188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 0304 	and.w	r3, r3, #4
 800f0ca:	2b04      	cmp	r3, #4
 800f0cc:	d149      	bne.n	800f162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f0ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 f857 	bl	800f190 <UART_WaitOnFlagUntilTimeout>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d03c      	beq.n	800f162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f0:	e853 3f00 	ldrex	r3, [r3]
 800f0f4:	623b      	str	r3, [r7, #32]
   return(result);
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	461a      	mov	r2, r3
 800f104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f106:	633b      	str	r3, [r7, #48]	@ 0x30
 800f108:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f10c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f10e:	e841 2300 	strex	r3, r2, [r1]
 800f112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1e6      	bne.n	800f0e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	e853 3f00 	ldrex	r3, [r3]
 800f128:	60fb      	str	r3, [r7, #12]
   return(result);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f023 0301 	bic.w	r3, r3, #1
 800f130:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	3308      	adds	r3, #8
 800f138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f13a:	61fa      	str	r2, [r7, #28]
 800f13c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13e:	69b9      	ldr	r1, [r7, #24]
 800f140:	69fa      	ldr	r2, [r7, #28]
 800f142:	e841 2300 	strex	r3, r2, [r1]
 800f146:	617b      	str	r3, [r7, #20]
   return(result);
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1e5      	bne.n	800f11a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2220      	movs	r2, #32
 800f152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2200      	movs	r2, #0
 800f15a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f15e:	2303      	movs	r3, #3
 800f160:	e012      	b.n	800f188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2220      	movs	r2, #32
 800f166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2220      	movs	r2, #32
 800f16e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2200      	movs	r2, #0
 800f176:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2200      	movs	r2, #0
 800f17c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3758      	adds	r7, #88	@ 0x58
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	603b      	str	r3, [r7, #0]
 800f19c:	4613      	mov	r3, r2
 800f19e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1a0:	e04f      	b.n	800f242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a8:	d04b      	beq.n	800f242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1aa:	f7f3 fcc3 	bl	8002b34 <HAL_GetTick>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	1ad3      	subs	r3, r2, r3
 800f1b4:	69ba      	ldr	r2, [r7, #24]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d302      	bcc.n	800f1c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d101      	bne.n	800f1c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f1c0:	2303      	movs	r3, #3
 800f1c2:	e04e      	b.n	800f262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f003 0304 	and.w	r3, r3, #4
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d037      	beq.n	800f242 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b80      	cmp	r3, #128	@ 0x80
 800f1d6:	d034      	beq.n	800f242 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2b40      	cmp	r3, #64	@ 0x40
 800f1dc:	d031      	beq.n	800f242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	69db      	ldr	r3, [r3, #28]
 800f1e4:	f003 0308 	and.w	r3, r3, #8
 800f1e8:	2b08      	cmp	r3, #8
 800f1ea:	d110      	bne.n	800f20e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2208      	movs	r2, #8
 800f1f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f000 f95b 	bl	800f4b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2208      	movs	r2, #8
 800f1fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2200      	movs	r2, #0
 800f206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e029      	b.n	800f262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	69db      	ldr	r3, [r3, #28]
 800f214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f21c:	d111      	bne.n	800f242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f000 f941 	bl	800f4b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2220      	movs	r2, #32
 800f232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f23e:	2303      	movs	r3, #3
 800f240:	e00f      	b.n	800f262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69da      	ldr	r2, [r3, #28]
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	4013      	ands	r3, r2
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	429a      	cmp	r2, r3
 800f250:	bf0c      	ite	eq
 800f252:	2301      	moveq	r3, #1
 800f254:	2300      	movne	r3, #0
 800f256:	b2db      	uxtb	r3, r3
 800f258:	461a      	mov	r2, r3
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d0a0      	beq.n	800f1a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f260:	2300      	movs	r3, #0
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
	...

0800f26c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b0a3      	sub	sp, #140	@ 0x8c
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	4613      	mov	r3, r2
 800f278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	88fa      	ldrh	r2, [r7, #6]
 800f284:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	88fa      	ldrh	r2, [r7, #6]
 800f28c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2200      	movs	r2, #0
 800f294:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	689b      	ldr	r3, [r3, #8]
 800f29a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f29e:	d10e      	bne.n	800f2be <UART_Start_Receive_IT+0x52>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d105      	bne.n	800f2b4 <UART_Start_Receive_IT+0x48>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f2ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f2b2:	e02d      	b.n	800f310 <UART_Start_Receive_IT+0xa4>
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	22ff      	movs	r2, #255	@ 0xff
 800f2b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f2bc:	e028      	b.n	800f310 <UART_Start_Receive_IT+0xa4>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d10d      	bne.n	800f2e2 <UART_Start_Receive_IT+0x76>
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	691b      	ldr	r3, [r3, #16]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d104      	bne.n	800f2d8 <UART_Start_Receive_IT+0x6c>
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	22ff      	movs	r2, #255	@ 0xff
 800f2d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f2d6:	e01b      	b.n	800f310 <UART_Start_Receive_IT+0xa4>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	227f      	movs	r2, #127	@ 0x7f
 800f2dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f2e0:	e016      	b.n	800f310 <UART_Start_Receive_IT+0xa4>
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2ea:	d10d      	bne.n	800f308 <UART_Start_Receive_IT+0x9c>
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d104      	bne.n	800f2fe <UART_Start_Receive_IT+0x92>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	227f      	movs	r2, #127	@ 0x7f
 800f2f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f2fc:	e008      	b.n	800f310 <UART_Start_Receive_IT+0xa4>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	223f      	movs	r2, #63	@ 0x3f
 800f302:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f306:	e003      	b.n	800f310 <UART_Start_Receive_IT+0xa4>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2200      	movs	r2, #0
 800f314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2222      	movs	r2, #34	@ 0x22
 800f31c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	3308      	adds	r3, #8
 800f326:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f32a:	e853 3f00 	ldrex	r3, [r3]
 800f32e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f332:	f043 0301 	orr.w	r3, r3, #1
 800f336:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	3308      	adds	r3, #8
 800f340:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f344:	673a      	str	r2, [r7, #112]	@ 0x70
 800f346:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f348:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f34a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f34c:	e841 2300 	strex	r3, r2, [r1]
 800f350:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800f352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1e3      	bne.n	800f320 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f35c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f360:	d14f      	bne.n	800f402 <UART_Start_Receive_IT+0x196>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f368:	88fa      	ldrh	r2, [r7, #6]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d349      	bcc.n	800f402 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f376:	d107      	bne.n	800f388 <UART_Start_Receive_IT+0x11c>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d103      	bne.n	800f388 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	4a47      	ldr	r2, [pc, #284]	@ (800f4a0 <UART_Start_Receive_IT+0x234>)
 800f384:	675a      	str	r2, [r3, #116]	@ 0x74
 800f386:	e002      	b.n	800f38e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	4a46      	ldr	r2, [pc, #280]	@ (800f4a4 <UART_Start_Receive_IT+0x238>)
 800f38c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d01a      	beq.n	800f3cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f39c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f39e:	e853 3f00 	ldrex	r3, [r3]
 800f3a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f3aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f3b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f3ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f3be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f3c0:	e841 2300 	strex	r3, r2, [r1]
 800f3c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800f3c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d1e4      	bne.n	800f396 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	3308      	adds	r3, #8
 800f3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d6:	e853 3f00 	ldrex	r3, [r3]
 800f3da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f3e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	3308      	adds	r3, #8
 800f3ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f3ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 800f3ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3f4:	e841 2300 	strex	r3, r2, [r1]
 800f3f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f3fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d1e5      	bne.n	800f3cc <UART_Start_Receive_IT+0x160>
 800f400:	e046      	b.n	800f490 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f40a:	d107      	bne.n	800f41c <UART_Start_Receive_IT+0x1b0>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d103      	bne.n	800f41c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	4a24      	ldr	r2, [pc, #144]	@ (800f4a8 <UART_Start_Receive_IT+0x23c>)
 800f418:	675a      	str	r2, [r3, #116]	@ 0x74
 800f41a:	e002      	b.n	800f422 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	4a23      	ldr	r2, [pc, #140]	@ (800f4ac <UART_Start_Receive_IT+0x240>)
 800f420:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	691b      	ldr	r3, [r3, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d019      	beq.n	800f45e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f432:	e853 3f00 	ldrex	r3, [r3]
 800f436:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800f43e:	677b      	str	r3, [r7, #116]	@ 0x74
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	461a      	mov	r2, r3
 800f446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f448:	637b      	str	r3, [r7, #52]	@ 0x34
 800f44a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f44e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f450:	e841 2300 	strex	r3, r2, [r1]
 800f454:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1e6      	bne.n	800f42a <UART_Start_Receive_IT+0x1be>
 800f45c:	e018      	b.n	800f490 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	e853 3f00 	ldrex	r3, [r3]
 800f46a:	613b      	str	r3, [r7, #16]
   return(result);
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	f043 0320 	orr.w	r3, r3, #32
 800f472:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	461a      	mov	r2, r3
 800f47a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f47c:	623b      	str	r3, [r7, #32]
 800f47e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f480:	69f9      	ldr	r1, [r7, #28]
 800f482:	6a3a      	ldr	r2, [r7, #32]
 800f484:	e841 2300 	strex	r3, r2, [r1]
 800f488:	61bb      	str	r3, [r7, #24]
   return(result);
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d1e6      	bne.n	800f45e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	378c      	adds	r7, #140	@ 0x8c
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	0800fcd1 	.word	0x0800fcd1
 800f4a4:	0800f971 	.word	0x0800f971
 800f4a8:	0800f7b9 	.word	0x0800f7b9
 800f4ac:	0800f601 	.word	0x0800f601

0800f4b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b095      	sub	sp, #84	@ 0x54
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4c0:	e853 3f00 	ldrex	r3, [r3]
 800f4c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f4cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f4dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f4de:	e841 2300 	strex	r3, r2, [r1]
 800f4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1e6      	bne.n	800f4b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f2:	6a3b      	ldr	r3, [r7, #32]
 800f4f4:	e853 3f00 	ldrex	r3, [r3]
 800f4f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f4fa:	69fa      	ldr	r2, [r7, #28]
 800f4fc:	4b1e      	ldr	r3, [pc, #120]	@ (800f578 <UART_EndRxTransfer+0xc8>)
 800f4fe:	4013      	ands	r3, r2
 800f500:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3308      	adds	r3, #8
 800f508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f50a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f50c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f512:	e841 2300 	strex	r3, r2, [r1]
 800f516:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1e5      	bne.n	800f4ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f522:	2b01      	cmp	r3, #1
 800f524:	d118      	bne.n	800f558 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	e853 3f00 	ldrex	r3, [r3]
 800f532:	60bb      	str	r3, [r7, #8]
   return(result);
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f023 0310 	bic.w	r3, r3, #16
 800f53a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	461a      	mov	r2, r3
 800f542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f544:	61bb      	str	r3, [r7, #24]
 800f546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f548:	6979      	ldr	r1, [r7, #20]
 800f54a:	69ba      	ldr	r2, [r7, #24]
 800f54c:	e841 2300 	strex	r3, r2, [r1]
 800f550:	613b      	str	r3, [r7, #16]
   return(result);
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1e6      	bne.n	800f526 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2220      	movs	r2, #32
 800f55c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f56c:	bf00      	nop
 800f56e:	3754      	adds	r7, #84	@ 0x54
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr
 800f578:	effffffe 	.word	0xeffffffe

0800f57c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2200      	movs	r2, #0
 800f58e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f7fe fe36 	bl	800e20c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5a0:	bf00      	nop
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b088      	sub	sp, #32
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	e853 3f00 	ldrex	r3, [r3]
 800f5bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5c4:	61fb      	str	r3, [r7, #28]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	61bb      	str	r3, [r7, #24]
 800f5d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d2:	6979      	ldr	r1, [r7, #20]
 800f5d4:	69ba      	ldr	r2, [r7, #24]
 800f5d6:	e841 2300 	strex	r3, r2, [r1]
 800f5da:	613b      	str	r3, [r7, #16]
   return(result);
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1e6      	bne.n	800f5b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2220      	movs	r2, #32
 800f5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7fe fdf7 	bl	800e1e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5f6:	bf00      	nop
 800f5f8:	3720      	adds	r7, #32
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
	...

0800f600 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b09c      	sub	sp, #112	@ 0x70
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f60e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f618:	2b22      	cmp	r3, #34	@ 0x22
 800f61a:	f040 80be 	bne.w	800f79a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f624:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f628:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f62c:	b2d9      	uxtb	r1, r3
 800f62e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f632:	b2da      	uxtb	r2, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f638:	400a      	ands	r2, r1
 800f63a:	b2d2      	uxtb	r2, r2
 800f63c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f64e:	b29b      	uxth	r3, r3
 800f650:	3b01      	subs	r3, #1
 800f652:	b29a      	uxth	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f660:	b29b      	uxth	r3, r3
 800f662:	2b00      	cmp	r3, #0
 800f664:	f040 80a1 	bne.w	800f7aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f670:	e853 3f00 	ldrex	r3, [r3]
 800f674:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f67c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	461a      	mov	r2, r3
 800f684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f686:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f688:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f68c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f68e:	e841 2300 	strex	r3, r2, [r1]
 800f692:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1e6      	bne.n	800f668 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	3308      	adds	r3, #8
 800f6a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a4:	e853 3f00 	ldrex	r3, [r3]
 800f6a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6ac:	f023 0301 	bic.w	r3, r3, #1
 800f6b0:	667b      	str	r3, [r7, #100]	@ 0x64
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	3308      	adds	r3, #8
 800f6b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f6ba:	647a      	str	r2, [r7, #68]	@ 0x44
 800f6bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6c2:	e841 2300 	strex	r3, r2, [r1]
 800f6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1e5      	bne.n	800f69a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2220      	movs	r2, #32
 800f6d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a33      	ldr	r2, [pc, #204]	@ (800f7b4 <UART_RxISR_8BIT+0x1b4>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d01f      	beq.n	800f72c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d018      	beq.n	800f72c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f702:	e853 3f00 	ldrex	r3, [r3]
 800f706:	623b      	str	r3, [r7, #32]
   return(result);
 800f708:	6a3b      	ldr	r3, [r7, #32]
 800f70a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f70e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	461a      	mov	r2, r3
 800f716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f718:	633b      	str	r3, [r7, #48]	@ 0x30
 800f71a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f720:	e841 2300 	strex	r3, r2, [r1]
 800f724:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1e6      	bne.n	800f6fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f730:	2b01      	cmp	r3, #1
 800f732:	d12e      	bne.n	800f792 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	e853 3f00 	ldrex	r3, [r3]
 800f746:	60fb      	str	r3, [r7, #12]
   return(result);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f023 0310 	bic.w	r3, r3, #16
 800f74e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	461a      	mov	r2, r3
 800f756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f758:	61fb      	str	r3, [r7, #28]
 800f75a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f75c:	69b9      	ldr	r1, [r7, #24]
 800f75e:	69fa      	ldr	r2, [r7, #28]
 800f760:	e841 2300 	strex	r3, r2, [r1]
 800f764:	617b      	str	r3, [r7, #20]
   return(result);
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1e6      	bne.n	800f73a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	69db      	ldr	r3, [r3, #28]
 800f772:	f003 0310 	and.w	r3, r3, #16
 800f776:	2b10      	cmp	r3, #16
 800f778:	d103      	bne.n	800f782 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2210      	movs	r2, #16
 800f780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f788:	4619      	mov	r1, r3
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7f1 fb66 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f790:	e00b      	b.n	800f7aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7fe fd30 	bl	800e1f8 <HAL_UART_RxCpltCallback>
}
 800f798:	e007      	b.n	800f7aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	699a      	ldr	r2, [r3, #24]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f042 0208 	orr.w	r2, r2, #8
 800f7a8:	619a      	str	r2, [r3, #24]
}
 800f7aa:	bf00      	nop
 800f7ac:	3770      	adds	r7, #112	@ 0x70
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	58000c00 	.word	0x58000c00

0800f7b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b09c      	sub	sp, #112	@ 0x70
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f7d0:	2b22      	cmp	r3, #34	@ 0x22
 800f7d2:	f040 80be 	bne.w	800f952 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f7e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800f7ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7fa:	1c9a      	adds	r2, r3, #2
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f806:	b29b      	uxth	r3, r3
 800f808:	3b01      	subs	r3, #1
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f818:	b29b      	uxth	r3, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f040 80a1 	bne.w	800f962 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f828:	e853 3f00 	ldrex	r3, [r3]
 800f82c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f834:	667b      	str	r3, [r7, #100]	@ 0x64
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	461a      	mov	r2, r3
 800f83c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f83e:	657b      	str	r3, [r7, #84]	@ 0x54
 800f840:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f842:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f844:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f846:	e841 2300 	strex	r3, r2, [r1]
 800f84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f84c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1e6      	bne.n	800f820 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	3308      	adds	r3, #8
 800f858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f85c:	e853 3f00 	ldrex	r3, [r3]
 800f860:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f864:	f023 0301 	bic.w	r3, r3, #1
 800f868:	663b      	str	r3, [r7, #96]	@ 0x60
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	3308      	adds	r3, #8
 800f870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f872:	643a      	str	r2, [r7, #64]	@ 0x40
 800f874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f87a:	e841 2300 	strex	r3, r2, [r1]
 800f87e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1e5      	bne.n	800f852 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2220      	movs	r2, #32
 800f88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4a33      	ldr	r2, [pc, #204]	@ (800f96c <UART_RxISR_16BIT+0x1b4>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d01f      	beq.n	800f8e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d018      	beq.n	800f8e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b8:	6a3b      	ldr	r3, [r7, #32]
 800f8ba:	e853 3f00 	ldrex	r3, [r3]
 800f8be:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f8c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f8d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8d8:	e841 2300 	strex	r3, r2, [r1]
 800f8dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d1e6      	bne.n	800f8b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d12e      	bne.n	800f94a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	e853 3f00 	ldrex	r3, [r3]
 800f8fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	f023 0310 	bic.w	r3, r3, #16
 800f906:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	461a      	mov	r2, r3
 800f90e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f910:	61bb      	str	r3, [r7, #24]
 800f912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f914:	6979      	ldr	r1, [r7, #20]
 800f916:	69ba      	ldr	r2, [r7, #24]
 800f918:	e841 2300 	strex	r3, r2, [r1]
 800f91c:	613b      	str	r3, [r7, #16]
   return(result);
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1e6      	bne.n	800f8f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	69db      	ldr	r3, [r3, #28]
 800f92a:	f003 0310 	and.w	r3, r3, #16
 800f92e:	2b10      	cmp	r3, #16
 800f930:	d103      	bne.n	800f93a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2210      	movs	r2, #16
 800f938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f940:	4619      	mov	r1, r3
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f7f1 fa8a 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f948:	e00b      	b.n	800f962 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f7fe fc54 	bl	800e1f8 <HAL_UART_RxCpltCallback>
}
 800f950:	e007      	b.n	800f962 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	699a      	ldr	r2, [r3, #24]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f042 0208 	orr.w	r2, r2, #8
 800f960:	619a      	str	r2, [r3, #24]
}
 800f962:	bf00      	nop
 800f964:	3770      	adds	r7, #112	@ 0x70
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	58000c00 	.word	0x58000c00

0800f970 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b0ac      	sub	sp, #176	@ 0xb0
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f97e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	69db      	ldr	r3, [r3, #28]
 800f988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f9a6:	2b22      	cmp	r3, #34	@ 0x22
 800f9a8:	f040 8180 	bne.w	800fcac <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f9b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9b6:	e123      	b.n	800fc00 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f9c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f9c6:	b2d9      	uxtb	r1, r3
 800f9c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f9cc:	b2da      	uxtb	r2, r3
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9d2:	400a      	ands	r2, r1
 800f9d4:	b2d2      	uxtb	r2, r2
 800f9d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9dc:	1c5a      	adds	r2, r3, #1
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	69db      	ldr	r3, [r3, #28]
 800f9fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f9fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa02:	f003 0307 	and.w	r3, r3, #7
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d053      	beq.n	800fab2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa0e:	f003 0301 	and.w	r3, r3, #1
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d011      	beq.n	800fa3a <UART_RxISR_8BIT_FIFOEN+0xca>
 800fa16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fa1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00b      	beq.n	800fa3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2201      	movs	r2, #1
 800fa28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa30:	f043 0201 	orr.w	r2, r3, #1
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa3e:	f003 0302 	and.w	r3, r3, #2
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d011      	beq.n	800fa6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fa46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa4a:	f003 0301 	and.w	r3, r3, #1
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00b      	beq.n	800fa6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2202      	movs	r2, #2
 800fa58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa60:	f043 0204 	orr.w	r2, r3, #4
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa6e:	f003 0304 	and.w	r3, r3, #4
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d011      	beq.n	800fa9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fa76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa7a:	f003 0301 	and.w	r3, r3, #1
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00b      	beq.n	800fa9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2204      	movs	r2, #4
 800fa88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa90:	f043 0202 	orr.w	r2, r3, #2
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d006      	beq.n	800fab2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f7fe fbb1 	bl	800e20c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fab8:	b29b      	uxth	r3, r3
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f040 80a0 	bne.w	800fc00 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fac8:	e853 3f00 	ldrex	r3, [r3]
 800facc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800face:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	461a      	mov	r2, r3
 800fade:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fae4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800fae8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800faea:	e841 2300 	strex	r3, r2, [r1]
 800faee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800faf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1e4      	bne.n	800fac0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3308      	adds	r3, #8
 800fafc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800fb06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb08:	4b6e      	ldr	r3, [pc, #440]	@ (800fcc4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3308      	adds	r3, #8
 800fb16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb1a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800fb1c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fb20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fb22:	e841 2300 	strex	r3, r2, [r1]
 800fb26:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800fb28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1e3      	bne.n	800faf6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2220      	movs	r2, #32
 800fb32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4a60      	ldr	r2, [pc, #384]	@ (800fcc8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d021      	beq.n	800fb90 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d01a      	beq.n	800fb90 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb62:	e853 3f00 	ldrex	r3, [r3]
 800fb66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fb68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fb6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	461a      	mov	r2, r3
 800fb78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fb7c:	657b      	str	r3, [r7, #84]	@ 0x54
 800fb7e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fb82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fb84:	e841 2300 	strex	r3, r2, [r1]
 800fb88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fb8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1e4      	bne.n	800fb5a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d130      	bne.n	800fbfa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fba6:	e853 3f00 	ldrex	r3, [r3]
 800fbaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbae:	f023 0310 	bic.w	r3, r3, #16
 800fbb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800fbc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fbc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fbc8:	e841 2300 	strex	r3, r2, [r1]
 800fbcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d1e4      	bne.n	800fb9e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	69db      	ldr	r3, [r3, #28]
 800fbda:	f003 0310 	and.w	r3, r3, #16
 800fbde:	2b10      	cmp	r3, #16
 800fbe0:	d103      	bne.n	800fbea <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	2210      	movs	r2, #16
 800fbe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7f1 f932 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
 800fbf8:	e002      	b.n	800fc00 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f7fe fafc 	bl	800e1f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc00:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d006      	beq.n	800fc16 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800fc08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc0c:	f003 0320 	and.w	r3, r3, #32
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f47f aed1 	bne.w	800f9b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fc20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d049      	beq.n	800fcbc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fc2e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d242      	bcs.n	800fcbc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3308      	adds	r3, #8
 800fc3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3e:	6a3b      	ldr	r3, [r7, #32]
 800fc40:	e853 3f00 	ldrex	r3, [r3]
 800fc44:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3308      	adds	r3, #8
 800fc56:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fc5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc62:	e841 2300 	strex	r3, r2, [r1]
 800fc66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1e3      	bne.n	800fc36 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a16      	ldr	r2, [pc, #88]	@ (800fccc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800fc72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	e853 3f00 	ldrex	r3, [r3]
 800fc80:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	f043 0320 	orr.w	r3, r3, #32
 800fc88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	461a      	mov	r2, r3
 800fc92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fc96:	61bb      	str	r3, [r7, #24]
 800fc98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9a:	6979      	ldr	r1, [r7, #20]
 800fc9c:	69ba      	ldr	r2, [r7, #24]
 800fc9e:	e841 2300 	strex	r3, r2, [r1]
 800fca2:	613b      	str	r3, [r7, #16]
   return(result);
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1e4      	bne.n	800fc74 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fcaa:	e007      	b.n	800fcbc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	699a      	ldr	r2, [r3, #24]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f042 0208 	orr.w	r2, r2, #8
 800fcba:	619a      	str	r2, [r3, #24]
}
 800fcbc:	bf00      	nop
 800fcbe:	37b0      	adds	r7, #176	@ 0xb0
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	effffffe 	.word	0xeffffffe
 800fcc8:	58000c00 	.word	0x58000c00
 800fccc:	0800f601 	.word	0x0800f601

0800fcd0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b0ae      	sub	sp, #184	@ 0xb8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fcde:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	69db      	ldr	r3, [r3, #28]
 800fce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	689b      	ldr	r3, [r3, #8]
 800fcfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fd06:	2b22      	cmp	r3, #34	@ 0x22
 800fd08:	f040 8184 	bne.w	8010014 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fd12:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd16:	e127      	b.n	800ff68 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fd2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800fd2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800fd32:	4013      	ands	r3, r2
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fd3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd40:	1c9a      	adds	r2, r3, #2
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	69db      	ldr	r3, [r3, #28]
 800fd5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fd62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fd66:	f003 0307 	and.w	r3, r3, #7
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d053      	beq.n	800fe16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d011      	beq.n	800fd9e <UART_RxISR_16BIT_FIFOEN+0xce>
 800fd7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00b      	beq.n	800fd9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd94:	f043 0201 	orr.w	r2, r3, #1
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fda2:	f003 0302 	and.w	r3, r3, #2
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d011      	beq.n	800fdce <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fdaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00b      	beq.n	800fdce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2202      	movs	r2, #2
 800fdbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdc4:	f043 0204 	orr.w	r2, r3, #4
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fdd2:	f003 0304 	and.w	r3, r3, #4
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d011      	beq.n	800fdfe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fdda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fdde:	f003 0301 	and.w	r3, r3, #1
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d00b      	beq.n	800fdfe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2204      	movs	r2, #4
 800fdec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdf4:	f043 0202 	orr.w	r2, r3, #2
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d006      	beq.n	800fe16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7fe f9ff 	bl	800e20c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	f040 80a2 	bne.w	800ff68 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fe2c:	e853 3f00 	ldrex	r3, [r3]
 800fe30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fe32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fe34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	461a      	mov	r2, r3
 800fe42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fe46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fe4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fe4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fe52:	e841 2300 	strex	r3, r2, [r1]
 800fe56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fe58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1e2      	bne.n	800fe24 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	3308      	adds	r3, #8
 800fe64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fe68:	e853 3f00 	ldrex	r3, [r3]
 800fe6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fe6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fe70:	4b6e      	ldr	r3, [pc, #440]	@ (801002c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800fe72:	4013      	ands	r3, r2
 800fe74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3308      	adds	r3, #8
 800fe7e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800fe82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fe84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fe88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fe8a:	e841 2300 	strex	r3, r2, [r1]
 800fe8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fe90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1e3      	bne.n	800fe5e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2220      	movs	r2, #32
 800fe9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4a60      	ldr	r2, [pc, #384]	@ (8010030 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d021      	beq.n	800fef8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d01a      	beq.n	800fef8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800feca:	e853 3f00 	ldrex	r3, [r3]
 800fece:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fed2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	461a      	mov	r2, r3
 800fee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fee6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800feea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800feec:	e841 2300 	strex	r3, r2, [r1]
 800fef0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1e4      	bne.n	800fec2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d130      	bne.n	800ff62 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff0e:	e853 3f00 	ldrex	r3, [r3]
 800ff12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ff14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff16:	f023 0310 	bic.w	r3, r3, #16
 800ff1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff28:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ff2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff30:	e841 2300 	strex	r3, r2, [r1]
 800ff34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ff36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1e4      	bne.n	800ff06 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	69db      	ldr	r3, [r3, #28]
 800ff42:	f003 0310 	and.w	r3, r3, #16
 800ff46:	2b10      	cmp	r3, #16
 800ff48:	d103      	bne.n	800ff52 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2210      	movs	r2, #16
 800ff50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7f0 ff7e 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
 800ff60:	e002      	b.n	800ff68 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7fe f948 	bl	800e1f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d006      	beq.n	800ff7e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ff70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ff74:	f003 0320 	and.w	r3, r3, #32
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f47f aecd 	bne.w	800fd18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff84:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff88:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d049      	beq.n	8010024 <UART_RxISR_16BIT_FIFOEN+0x354>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ff96:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d242      	bcs.n	8010024 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	3308      	adds	r3, #8
 800ffa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa8:	e853 3f00 	ldrex	r3, [r3]
 800ffac:	623b      	str	r3, [r7, #32]
   return(result);
 800ffae:	6a3b      	ldr	r3, [r7, #32]
 800ffb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ffb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3308      	adds	r3, #8
 800ffbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ffc2:	633a      	str	r2, [r7, #48]	@ 0x30
 800ffc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ffc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffca:	e841 2300 	strex	r3, r2, [r1]
 800ffce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ffd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d1e3      	bne.n	800ff9e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4a16      	ldr	r2, [pc, #88]	@ (8010034 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ffda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	e853 3f00 	ldrex	r3, [r3]
 800ffe8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f043 0320 	orr.w	r3, r3, #32
 800fff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	461a      	mov	r2, r3
 800fffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fffe:	61fb      	str	r3, [r7, #28]
 8010000:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010002:	69b9      	ldr	r1, [r7, #24]
 8010004:	69fa      	ldr	r2, [r7, #28]
 8010006:	e841 2300 	strex	r3, r2, [r1]
 801000a:	617b      	str	r3, [r7, #20]
   return(result);
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1e4      	bne.n	800ffdc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010012:	e007      	b.n	8010024 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	699a      	ldr	r2, [r3, #24]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f042 0208 	orr.w	r2, r2, #8
 8010022:	619a      	str	r2, [r3, #24]
}
 8010024:	bf00      	nop
 8010026:	37b8      	adds	r7, #184	@ 0xb8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	effffffe 	.word	0xeffffffe
 8010030:	58000c00 	.word	0x58000c00
 8010034:	0800f7b9 	.word	0x0800f7b9

08010038 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010068:	bf00      	nop
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010082:	2b01      	cmp	r3, #1
 8010084:	d101      	bne.n	801008a <HAL_UARTEx_DisableFifoMode+0x16>
 8010086:	2302      	movs	r3, #2
 8010088:	e027      	b.n	80100da <HAL_UARTEx_DisableFifoMode+0x66>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2201      	movs	r2, #1
 801008e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2224      	movs	r2, #36	@ 0x24
 8010096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f022 0201 	bic.w	r2, r2, #1
 80100b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80100b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	68fa      	ldr	r2, [r7, #12]
 80100c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2220      	movs	r2, #32
 80100cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2200      	movs	r2, #0
 80100d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3714      	adds	r7, #20
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b084      	sub	sp, #16
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d101      	bne.n	80100fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80100fa:	2302      	movs	r3, #2
 80100fc:	e02d      	b.n	801015a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2201      	movs	r2, #1
 8010102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2224      	movs	r2, #36	@ 0x24
 801010a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f022 0201 	bic.w	r2, r2, #1
 8010124:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	689b      	ldr	r3, [r3, #8]
 801012c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	683a      	ldr	r2, [r7, #0]
 8010136:	430a      	orrs	r2, r1
 8010138:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f8a0 	bl	8010280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2220      	movs	r2, #32
 801014c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3710      	adds	r7, #16
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}

08010162 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010162:	b580      	push	{r7, lr}
 8010164:	b084      	sub	sp, #16
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
 801016a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010172:	2b01      	cmp	r3, #1
 8010174:	d101      	bne.n	801017a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010176:	2302      	movs	r3, #2
 8010178:	e02d      	b.n	80101d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2201      	movs	r2, #1
 801017e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2224      	movs	r2, #36	@ 0x24
 8010186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f022 0201 	bic.w	r2, r2, #1
 80101a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	683a      	ldr	r2, [r7, #0]
 80101b2:	430a      	orrs	r2, r1
 80101b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f862 	bl	8010280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68fa      	ldr	r2, [r7, #12]
 80101c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2220      	movs	r2, #32
 80101c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}

080101de <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101de:	b580      	push	{r7, lr}
 80101e0:	b08c      	sub	sp, #48	@ 0x30
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	60f8      	str	r0, [r7, #12]
 80101e6:	60b9      	str	r1, [r7, #8]
 80101e8:	4613      	mov	r3, r2
 80101ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80101ec:	2300      	movs	r3, #0
 80101ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80101f8:	2b20      	cmp	r3, #32
 80101fa:	d13b      	bne.n	8010274 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d002      	beq.n	8010208 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8010202:	88fb      	ldrh	r3, [r7, #6]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d101      	bne.n	801020c <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	e034      	b.n	8010276 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2201      	movs	r2, #1
 8010210:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8010218:	88fb      	ldrh	r3, [r7, #6]
 801021a:	461a      	mov	r2, r3
 801021c:	68b9      	ldr	r1, [r7, #8]
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f7ff f824 	bl	800f26c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010228:	2b01      	cmp	r3, #1
 801022a:	d11d      	bne.n	8010268 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2210      	movs	r2, #16
 8010232:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	e853 3f00 	ldrex	r3, [r3]
 8010240:	617b      	str	r3, [r7, #20]
   return(result);
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	f043 0310 	orr.w	r3, r3, #16
 8010248:	62bb      	str	r3, [r7, #40]	@ 0x28
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	461a      	mov	r2, r3
 8010250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010252:	627b      	str	r3, [r7, #36]	@ 0x24
 8010254:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010256:	6a39      	ldr	r1, [r7, #32]
 8010258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801025a:	e841 2300 	strex	r3, r2, [r1]
 801025e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1e6      	bne.n	8010234 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8010266:	e002      	b.n	801026e <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8010268:	2301      	movs	r3, #1
 801026a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 801026e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010272:	e000      	b.n	8010276 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8010274:	2302      	movs	r3, #2
  }
}
 8010276:	4618      	mov	r0, r3
 8010278:	3730      	adds	r7, #48	@ 0x30
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
	...

08010280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010280:	b480      	push	{r7}
 8010282:	b085      	sub	sp, #20
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801028c:	2b00      	cmp	r3, #0
 801028e:	d108      	bne.n	80102a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2201      	movs	r2, #1
 8010294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2201      	movs	r2, #1
 801029c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80102a0:	e031      	b.n	8010306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80102a2:	2310      	movs	r3, #16
 80102a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80102a6:	2310      	movs	r3, #16
 80102a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	0e5b      	lsrs	r3, r3, #25
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	f003 0307 	and.w	r3, r3, #7
 80102b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	0f5b      	lsrs	r3, r3, #29
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	f003 0307 	and.w	r3, r3, #7
 80102c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102ca:	7bbb      	ldrb	r3, [r7, #14]
 80102cc:	7b3a      	ldrb	r2, [r7, #12]
 80102ce:	4911      	ldr	r1, [pc, #68]	@ (8010314 <UARTEx_SetNbDataToProcess+0x94>)
 80102d0:	5c8a      	ldrb	r2, [r1, r2]
 80102d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80102d6:	7b3a      	ldrb	r2, [r7, #12]
 80102d8:	490f      	ldr	r1, [pc, #60]	@ (8010318 <UARTEx_SetNbDataToProcess+0x98>)
 80102da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102e8:	7bfb      	ldrb	r3, [r7, #15]
 80102ea:	7b7a      	ldrb	r2, [r7, #13]
 80102ec:	4909      	ldr	r1, [pc, #36]	@ (8010314 <UARTEx_SetNbDataToProcess+0x94>)
 80102ee:	5c8a      	ldrb	r2, [r1, r2]
 80102f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80102f4:	7b7a      	ldrb	r2, [r7, #13]
 80102f6:	4908      	ldr	r1, [pc, #32]	@ (8010318 <UARTEx_SetNbDataToProcess+0x98>)
 80102f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80102fe:	b29a      	uxth	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010306:	bf00      	nop
 8010308:	3714      	adds	r7, #20
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	08010630 	.word	0x08010630
 8010318:	08010638 	.word	0x08010638

0801031c <memset>:
 801031c:	4402      	add	r2, r0
 801031e:	4603      	mov	r3, r0
 8010320:	4293      	cmp	r3, r2
 8010322:	d100      	bne.n	8010326 <memset+0xa>
 8010324:	4770      	bx	lr
 8010326:	f803 1b01 	strb.w	r1, [r3], #1
 801032a:	e7f9      	b.n	8010320 <memset+0x4>

0801032c <__libc_init_array>:
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	4d0d      	ldr	r5, [pc, #52]	@ (8010364 <__libc_init_array+0x38>)
 8010330:	4c0d      	ldr	r4, [pc, #52]	@ (8010368 <__libc_init_array+0x3c>)
 8010332:	1b64      	subs	r4, r4, r5
 8010334:	10a4      	asrs	r4, r4, #2
 8010336:	2600      	movs	r6, #0
 8010338:	42a6      	cmp	r6, r4
 801033a:	d109      	bne.n	8010350 <__libc_init_array+0x24>
 801033c:	4d0b      	ldr	r5, [pc, #44]	@ (801036c <__libc_init_array+0x40>)
 801033e:	4c0c      	ldr	r4, [pc, #48]	@ (8010370 <__libc_init_array+0x44>)
 8010340:	f000 f826 	bl	8010390 <_init>
 8010344:	1b64      	subs	r4, r4, r5
 8010346:	10a4      	asrs	r4, r4, #2
 8010348:	2600      	movs	r6, #0
 801034a:	42a6      	cmp	r6, r4
 801034c:	d105      	bne.n	801035a <__libc_init_array+0x2e>
 801034e:	bd70      	pop	{r4, r5, r6, pc}
 8010350:	f855 3b04 	ldr.w	r3, [r5], #4
 8010354:	4798      	blx	r3
 8010356:	3601      	adds	r6, #1
 8010358:	e7ee      	b.n	8010338 <__libc_init_array+0xc>
 801035a:	f855 3b04 	ldr.w	r3, [r5], #4
 801035e:	4798      	blx	r3
 8010360:	3601      	adds	r6, #1
 8010362:	e7f2      	b.n	801034a <__libc_init_array+0x1e>
 8010364:	08010648 	.word	0x08010648
 8010368:	08010648 	.word	0x08010648
 801036c:	08010648 	.word	0x08010648
 8010370:	0801064c 	.word	0x0801064c

08010374 <memcpy>:
 8010374:	440a      	add	r2, r1
 8010376:	4291      	cmp	r1, r2
 8010378:	f100 33ff 	add.w	r3, r0, #4294967295
 801037c:	d100      	bne.n	8010380 <memcpy+0xc>
 801037e:	4770      	bx	lr
 8010380:	b510      	push	{r4, lr}
 8010382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010386:	f803 4f01 	strb.w	r4, [r3, #1]!
 801038a:	4291      	cmp	r1, r2
 801038c:	d1f9      	bne.n	8010382 <memcpy+0xe>
 801038e:	bd10      	pop	{r4, pc}

08010390 <_init>:
 8010390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010392:	bf00      	nop
 8010394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010396:	bc08      	pop	{r3}
 8010398:	469e      	mov	lr, r3
 801039a:	4770      	bx	lr

0801039c <_fini>:
 801039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039e:	bf00      	nop
 80103a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103a2:	bc08      	pop	{r3}
 80103a4:	469e      	mov	lr, r3
 80103a6:	4770      	bx	lr
