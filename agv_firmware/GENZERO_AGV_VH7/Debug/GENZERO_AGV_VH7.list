
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b14  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08010de0  08010de0  00011de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011078  08011078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011080  08011080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011084  08011084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011088  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000758  24000078  08011100  00013078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240007d0  08011100  000137d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020204  00000000  00000000  000130a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000348b  00000000  00000000  000332aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018f0  00000000  00000000  00036738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001377  00000000  00000000  00038028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003632f  00000000  00000000  0003939f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022944  00000000  00000000  0006f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167521  00000000  00000000  00092012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f9533  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c0c  00000000  00000000  001f9578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  00200184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08010dc8 	.word	0x08010dc8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	08010dc8 	.word	0x08010dc8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f008 fa40 	bl	8008bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00b ff30 	bl	800c5a0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00c fb8a 	bl	800ce60 <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00c f90d 	bl	800c97c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00c fb79 	bl	800ce60 <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f008 fa16 	bl	8008bb0 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f008 fa02 	bl	8008bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00b fef2 	bl	800c5a0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00c fb4c 	bl	800ce60 <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00b fee1 	bl	800c5a0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00c fb3b 	bl	800ce60 <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f008 f9d8 	bl	8008bb0 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 ffe1 	bl	800380c <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f010 faa0 	bl	8010dac <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08010de0 	.word	0x08010de0

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f002 ff93 	bl	800380c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f002 ff87 	bl	800380c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f002 ff7c 	bl	800380c <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 ff60 	bl	800380c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f002 ff4d 	bl	800380c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f002 ff37 	bl	800380c <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f002 fefb 	bl	800380c <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 fedd 	bl	800380c <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fdb0 	bl	800064e <LoRa_gotoMode>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b089      	sub	sp, #36	@ 0x24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e007      	b.n	8000b1e <LoRa_receive+0x28>
		data[i]=0;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf3      	blt.n	8000b0e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd90 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	2112      	movs	r1, #18
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff92 	bl	8000a5a <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02f      	beq.n	8000ba4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	2112      	movs	r1, #18
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffa0 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b4e:	2113      	movs	r1, #19
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff82 	bl	8000a5a <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7c 	bl	8000a5a <LoRa_read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff8e 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b72:	7cba      	ldrb	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00b      	b.n	8000b9c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff ff64 	bl	8000a5a <LoRa_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbef      	blt.n	8000b84 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fd51 	bl	800064e <LoRa_gotoMode>
    return min;
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <LoRa_isvalid>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8096 	beq.w	8000cf8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd3d 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f002 fe19 	bl	800380c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff3c 	bl	8000a5a <LoRa_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f002 fe10 	bl	800380c <HAL_Delay>
			data = read | 0x80;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff47 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f002 fe03 	bl	800380c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe55 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feb0 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febd 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	210c      	movs	r1, #12
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff2b 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fef3 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe68 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c4c:	22ff      	movs	r2, #255	@ 0xff
 8000c4e:	211f      	movs	r1, #31
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1c 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	461a      	mov	r2, r3
 8000c76:	211d      	movs	r1, #29
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff08 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fde8 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2120      	movs	r1, #32
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fefb 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2121      	movs	r1, #33	@ 0x21
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef3 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fed5 	bl	8000a5a <LoRa_read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fee3 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fcbf 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f002 fd98 	bl	800380c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cdc:	2142      	movs	r1, #66	@ 0x42
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff febb 	bl	8000a5a <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d101      	bne.n	8000cf2 <LoRa_init+0x13c>
				return LORA_OK;
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	e004      	b.n	8000cfc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000cf2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000cf6:	e001      	b.n	8000cfc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000cf8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e025      	b.n	8000d64 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	441a      	add	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	b291      	uxth	r1, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3214      	adds	r2, #20
 8000d42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	8811      	ldrh	r1, [r2, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	331c      	adds	r3, #28
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d6      	bls.n	8000d18 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <Line_Sensor_Calculation>:

void Line_Sensor_Calculation(ir_array *ir_struct){
 8000dce:	b480      	push	{r7}
 8000dd0:	b08b      	sub	sp, #44	@ 0x2c
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    uint8_t i, on_line = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t avg = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    uint32_t sum = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    uint16_t value;
    uint8_t on_sensor_total_number = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	76fb      	strb	r3, [r7, #27]

    uint8_t middle_on_line = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	76bb      	strb	r3, [r7, #26]
    uint8_t left_on_line = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	767b      	strb	r3, [r7, #25]
    uint8_t right_on_line = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	763b      	strb	r3, [r7, #24]


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dfa:	e08f      	b.n	8000f1c <Line_Sensor_Calculation+0x14e>
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
 8000dfc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3214      	adds	r2, #20
 8000e04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e08:	827b      	strh	r3, [r7, #18]
        calmin = ir_struct->ir_sen_min_val[i];
 8000e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	331c      	adds	r3, #28
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	823b      	strh	r3, [r7, #16]

        denominator = calmax - calmin;
 8000e1a:	8a7a      	ldrh	r2, [r7, #18]
 8000e1c:	8a3b      	ldrh	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	81fb      	strh	r3, [r7, #14]

        int x = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
        if(denominator != 0){
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d010      	beq.n	8000e4e <Line_Sensor_Calculation+0x80>
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
 8000e2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	8a3b      	ldrh	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e42:	fb03 f202 	mul.w	r2, r3, r2
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
        }
        if(x <0){
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da01      	bge.n	8000e58 <Line_Sensor_Calculation+0x8a>
            x = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
        }
        if(x>1000){
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e5e:	dd02      	ble.n	8000e66 <Line_Sensor_Calculation+0x98>
            x = 1000;
 8000e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e64:	617b      	str	r3, [r7, #20]
        }
        //value = (1000-x);
        value = x;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	81bb      	strh	r3, [r7, #12]
        ir_struct->ir_sen_val_cal[i] = value;
 8000e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	3308      	adds	r3, #8
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	89ba      	ldrh	r2, [r7, #12]
 8000e78:	809a      	strh	r2, [r3, #4]

        // start read line number section
        if(value > 600){
 8000e7a:	89bb      	ldrh	r3, [r7, #12]
 8000e7c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e80:	d902      	bls.n	8000e88 <Line_Sensor_Calculation+0xba>
            on_line = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        if(value > 200){
 8000e88:	89bb      	ldrh	r3, [r7, #12]
 8000e8a:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e8c:	d910      	bls.n	8000eb0 <Line_Sensor_Calculation+0xe2>
            avg += (long)(value)*(i*1000);
 8000e8e:	89bb      	ldrh	r3, [r7, #12]
 8000e90:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e98:	fb01 f202 	mul.w	r2, r1, r2
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	623b      	str	r3, [r7, #32]
            sum += value;
 8000ea8:	89bb      	ldrh	r3, [r7, #12]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4413      	add	r3, r2
 8000eae:	61fb      	str	r3, [r7, #28]
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000eb6:	89ba      	ldrh	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d923      	bls.n	8000f04 <Line_Sensor_Calculation+0x136>
            on_sensor_total_number++;
 8000ebc:	7efb      	ldrb	r3, [r7, #27]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	76fb      	strb	r3, [r7, #27]
            ir_struct->ir_sen_val_cal_trig[i] = 0xff;
 8000ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	22ff      	movs	r2, #255	@ 0xff
 8000ecc:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
            if(i >= 2 && i <= 7){
 8000ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d906      	bls.n	8000ee6 <Line_Sensor_Calculation+0x118>
 8000ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d802      	bhi.n	8000ee6 <Line_Sensor_Calculation+0x118>
                middle_on_line++;
 8000ee0:	7ebb      	ldrb	r3, [r7, #26]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	76bb      	strb	r3, [r7, #26]
            }
            if(i <= 2){
 8000ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d802      	bhi.n	8000ef4 <Line_Sensor_Calculation+0x126>
            	left_on_line++;
 8000eee:	7e7b      	ldrb	r3, [r7, #25]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	767b      	strb	r3, [r7, #25]
            }
            if(i >= 7){
 8000ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ef8:	2b06      	cmp	r3, #6
 8000efa:	d90a      	bls.n	8000f12 <Line_Sensor_Calculation+0x144>
            	right_on_line++;
 8000efc:	7e3b      	ldrb	r3, [r7, #24]
 8000efe:	3301      	adds	r3, #1
 8000f00:	763b      	strb	r3, [r7, #24]
 8000f02:	e006      	b.n	8000f12 <Line_Sensor_Calculation+0x144>
            }
        }
        else{
        	ir_struct->ir_sen_val_cal_trig[i] = 0x00;
 8000f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f16:	3301      	adds	r3, #1
 8000f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f26:	429a      	cmp	r2, r3
 8000f28:	f4ff af68 	bcc.w	8000dfc <Line_Sensor_Calculation+0x2e>
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
 8000f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d120      	bne.n	8000f76 <Line_Sensor_Calculation+0x1a8>
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f44:	fb01 f303 	mul.w	r3, r1, r3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da04      	bge.n	8000f56 <Line_Sensor_Calculation+0x188>
            ir_struct->ir_sen_read_line_val = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8000f54:	e017      	b.n	8000f86 <Line_Sensor_Calculation+0x1b8>
        }
        else{
            ir_struct->ir_sen_read_line_val = (ir_struct->ir_sen_channel_num - 1)*1000;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	0152      	lsls	r2, r2, #5
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8000f74:	e007      	b.n	8000f86 <Line_Sensor_Calculation+0x1b8>
        }
    }
    else{
        ir_struct->ir_sen_read_line_val = avg/sum;
 8000f76:	6a3a      	ldr	r2, [r7, #32]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    }
    ir_struct->ir_sen_read_line_old_val = ir_struct->ir_sen_read_line_val;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	655a      	str	r2, [r3, #84]	@ 0x54
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = left_on_line;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7e7a      	ldrb	r2, [r7, #25]
 8000f98:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = right_on_line;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7e3a      	ldrb	r2, [r7, #24]
 8000fa0:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7eba      	ldrb	r2, [r7, #26]
 8000fa8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7efa      	ldrb	r2, [r7, #27]
 8000fb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
 8000fb4:	bf00      	nop
 8000fb6:	372c      	adds	r7, #44	@ 0x2c
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <PID_control>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PID_control(volatile uint16_t *line_position,
				          uint16_t *motor_orientation){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]

	pid_error = 4500 - *line_position;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f241 1394 	movw	r3, #4500	@ 0x1194
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	4b53      	ldr	r3, [pc, #332]	@ (8001130 <PID_control+0x170>)
 8000fe2:	edc3 7a00 	vstr	s15, [r3]

	P = pid_error;
 8000fe6:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <PID_control+0x170>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a52      	ldr	r2, [pc, #328]	@ (8001134 <PID_control+0x174>)
 8000fec:	6013      	str	r3, [r2, #0]
	//I = error + I;
	I = 0;
 8000fee:	4b52      	ldr	r3, [pc, #328]	@ (8001138 <PID_control+0x178>)
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
	D = pid_error - pid_last_error;
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8001130 <PID_control+0x170>)
 8000ff8:	ed93 7a00 	vldr	s14, [r3]
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800113c <PID_control+0x17c>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001006:	4b4e      	ldr	r3, [pc, #312]	@ (8001140 <PID_control+0x180>)
 8001008:	edc3 7a00 	vstr	s15, [r3]
	pid_last_error = pid_error;
 800100c:	4b48      	ldr	r3, [pc, #288]	@ (8001130 <PID_control+0x170>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a4a      	ldr	r2, [pc, #296]	@ (800113c <PID_control+0x17c>)
 8001012:	6013      	str	r3, [r2, #0]

	pid_motor_speed_change = P*Kp + I*Ki + D*Kd;
 8001014:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <PID_control+0x174>)
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	4b4a      	ldr	r3, [pc, #296]	@ (8001144 <PID_control+0x184>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001024:	4b44      	ldr	r3, [pc, #272]	@ (8001138 <PID_control+0x178>)
 8001026:	edd3 6a00 	vldr	s13, [r3]
 800102a:	4b47      	ldr	r3, [pc, #284]	@ (8001148 <PID_control+0x188>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001038:	4b41      	ldr	r3, [pc, #260]	@ (8001140 <PID_control+0x180>)
 800103a:	edd3 6a00 	vldr	s13, [r3]
 800103e:	4b43      	ldr	r3, [pc, #268]	@ (800114c <PID_control+0x18c>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104c:	4b40      	ldr	r3, [pc, #256]	@ (8001150 <PID_control+0x190>)
 800104e:	edc3 7a00 	vstr	s15, [r3]

	if(*motor_orientation == 0xF11F){
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 800105a:	4293      	cmp	r3, r2
 800105c:	d123      	bne.n	80010a6 <PID_control+0xe6>
		pid_motor_speed_A = pid_motor_base_speed + pid_motor_speed_change;
 800105e:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <PID_control+0x194>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106a:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <PID_control+0x190>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	ee17 3a90 	vmov	r3, s15
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <PID_control+0x198>)
 8001080:	801a      	strh	r2, [r3, #0]
		pid_motor_speed_B = pid_motor_base_speed - pid_motor_speed_change;
 8001082:	4b34      	ldr	r3, [pc, #208]	@ (8001154 <PID_control+0x194>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108e:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <PID_control+0x190>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <PID_control+0x19c>)
 80010a4:	801a      	strh	r2, [r3, #0]
	}
	if(*motor_orientation == 0xF00F){
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d123      	bne.n	80010fa <PID_control+0x13a>
		pid_motor_speed_A = pid_motor_base_speed - pid_motor_speed_change;
 80010b2:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <PID_control+0x194>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <PID_control+0x190>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	ee17 3a90 	vmov	r3, s15
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <PID_control+0x198>)
 80010d4:	801a      	strh	r2, [r3, #0]
		pid_motor_speed_B = pid_motor_base_speed + pid_motor_speed_change;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <PID_control+0x194>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <PID_control+0x190>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f0:	ee17 3a90 	vmov	r3, s15
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <PID_control+0x19c>)
 80010f8:	801a      	strh	r2, [r3, #0]
	}


	if(pid_motor_speed_A > max_rs485_speed){
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <PID_control+0x198>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	2b64      	cmp	r3, #100	@ 0x64
 8001102:	d902      	bls.n	800110a <PID_control+0x14a>
		pid_motor_speed_A = max_rs485_speed;
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <PID_control+0x198>)
 8001106:	2264      	movs	r2, #100	@ 0x64
 8001108:	801a      	strh	r2, [r3, #0]
	}
	if(pid_motor_speed_A < 0){
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <PID_control+0x198>)
 800110c:	881b      	ldrh	r3, [r3, #0]
		pid_motor_speed_A = 0;
	}
	if(pid_motor_speed_B > max_rs485_speed){
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <PID_control+0x19c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	2b64      	cmp	r3, #100	@ 0x64
 8001116:	d902      	bls.n	800111e <PID_control+0x15e>
		pid_motor_speed_B = max_rs485_speed;
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <PID_control+0x19c>)
 800111a:	2264      	movs	r2, #100	@ 0x64
 800111c:	801a      	strh	r2, [r3, #0]
	}
	if(pid_motor_speed_B < 0){
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <PID_control+0x19c>)
 8001120:	881b      	ldrh	r3, [r3, #0]
		pid_motor_speed_B = 0;
	}

}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	24000688 	.word	0x24000688
 8001134:	24000674 	.word	0x24000674
 8001138:	24000678 	.word	0x24000678
 800113c:	24000684 	.word	0x24000684
 8001140:	2400067c 	.word	0x2400067c
 8001144:	24000054 	.word	0x24000054
 8001148:	24000680 	.word	0x24000680
 800114c:	24000058 	.word	0x24000058
 8001150:	2400068c 	.word	0x2400068c
 8001154:	2400005c 	.word	0x2400005c
 8001158:	24000690 	.word	0x24000690
 800115c:	24000692 	.word	0x24000692

08001160 <PID_Forward_Rotation>:
		pid_motor_speed_B = 0;
	}

}

void PID_Forward_Rotation(uint16_t enableA, uint16_t enableB, uint16_t *orientation){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	603a      	str	r2, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	460b      	mov	r3, r1
 800116e:	80bb      	strh	r3, [r7, #4]

	if(*orientation == 0xF11F){
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001178:	4293      	cmp	r3, r2
 800117a:	d10b      	bne.n	8001194 <PID_Forward_Rotation+0x34>
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
//
//		//Left
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);

		rs485_set_speed(&m1_driver, enableB, 0);
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <PID_Forward_Rotation+0x60>)
 8001184:	f001 fcc9 	bl	8002b1a <rs485_set_speed>
		rs485_set_speed(&m2_driver, enableA, 1);
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <PID_Forward_Rotation+0x64>)
 8001190:	f001 fcc3 	bl	8002b1a <rs485_set_speed>
	}

	if(*orientation == 0xF00F){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800119c:	4293      	cmp	r3, r2
 800119e:	d10b      	bne.n	80011b8 <PID_Forward_Rotation+0x58>
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
//
//		//Left
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);

		rs485_set_speed(&m1_driver, enableA, 1);
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <PID_Forward_Rotation+0x60>)
 80011a8:	f001 fcb7 	bl	8002b1a <rs485_set_speed>
		rs485_set_speed(&m2_driver, enableB, 0);
 80011ac:	88bb      	ldrh	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <PID_Forward_Rotation+0x64>)
 80011b4:	f001 fcb1 	bl	8002b1a <rs485_set_speed>

	}



}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	240004f8 	.word	0x240004f8
 80011c4:	24000530 	.word	0x24000530

080011c8 <PID_Motor_Turn_Left>:

void PID_Motor_Turn_Left(uint16_t _speed, uint16_t *orientation){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	80fb      	strh	r3, [r7, #6]
	if(*orientation == 0xF11F){
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80011dc:	4293      	cmp	r3, r2
 80011de:	d10b      	bne.n	80011f8 <PID_Motor_Turn_Left+0x30>
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
//
//		//Left
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);

		rs485_set_speed(&m1_driver, _speed, 0);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	480f      	ldr	r0, [pc, #60]	@ (8001224 <PID_Motor_Turn_Left+0x5c>)
 80011e8:	f001 fc97 	bl	8002b1a <rs485_set_speed>
		rs485_set_speed(&m2_driver, _speed, 0);
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	480d      	ldr	r0, [pc, #52]	@ (8001228 <PID_Motor_Turn_Left+0x60>)
 80011f4:	f001 fc91 	bl	8002b1a <rs485_set_speed>
	}

	if(*orientation == 0xF00F){
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001200:	4293      	cmp	r3, r2
 8001202:	d10b      	bne.n	800121c <PID_Motor_Turn_Left+0x54>
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
//
//		//Left
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);

		rs485_set_speed(&m1_driver, _speed, 0);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	@ (8001224 <PID_Motor_Turn_Left+0x5c>)
 800120c:	f001 fc85 	bl	8002b1a <rs485_set_speed>
		rs485_set_speed(&m2_driver, _speed, 0);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4804      	ldr	r0, [pc, #16]	@ (8001228 <PID_Motor_Turn_Left+0x60>)
 8001218:	f001 fc7f 	bl	8002b1a <rs485_set_speed>

	}
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	240004f8 	.word	0x240004f8
 8001228:	24000530 	.word	0x24000530

0800122c <PID_Motor_Turn_Right>:

void PID_Motor_Turn_Right(uint16_t _speed, uint16_t *orientation){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
	if(*orientation == 0xF11F){
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001240:	4293      	cmp	r3, r2
 8001242:	d10b      	bne.n	800125c <PID_Motor_Turn_Right+0x30>
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
//
//		//Left
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);

		rs485_set_speed(&m1_driver, _speed, 1);
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	480f      	ldr	r0, [pc, #60]	@ (8001288 <PID_Motor_Turn_Right+0x5c>)
 800124c:	f001 fc65 	bl	8002b1a <rs485_set_speed>
		rs485_set_speed(&m2_driver, _speed, 1);
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	@ (800128c <PID_Motor_Turn_Right+0x60>)
 8001258:	f001 fc5f 	bl	8002b1a <rs485_set_speed>
	}

	if(*orientation == 0xF00F){
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001264:	4293      	cmp	r3, r2
 8001266:	d10b      	bne.n	8001280 <PID_Motor_Turn_Right+0x54>
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
//
//		//Left
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);

		rs485_set_speed(&m1_driver, _speed, 1);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	2201      	movs	r2, #1
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	@ (8001288 <PID_Motor_Turn_Right+0x5c>)
 8001270:	f001 fc53 	bl	8002b1a <rs485_set_speed>
		rs485_set_speed(&m2_driver, _speed, 1);
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	2201      	movs	r2, #1
 8001278:	4619      	mov	r1, r3
 800127a:	4804      	ldr	r0, [pc, #16]	@ (800128c <PID_Motor_Turn_Right+0x60>)
 800127c:	f001 fc4d 	bl	8002b1a <rs485_set_speed>

	}

}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	240004f8 	.word	0x240004f8
 800128c:	24000530 	.word	0x24000530

08001290 <PID_Motor_All_Break>:


void PID_Motor_All_Break(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
//	//Left
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);

//	motor_enable_velocity_mode(0x01);
//	motor_enable_velocity_mode(0x02);
	rs485_set_speed(&m1_driver, 0, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2100      	movs	r1, #0
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <PID_Motor_All_Break+0x1c>)
 800129a:	f001 fc3e 	bl	8002b1a <rs485_set_speed>
	rs485_set_speed(&m2_driver, 0, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2100      	movs	r1, #0
 80012a2:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <PID_Motor_All_Break+0x20>)
 80012a4:	f001 fc39 	bl	8002b1a <rs485_set_speed>

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	240004f8 	.word	0x240004f8
 80012b0:	24000530 	.word	0x24000530

080012b4 <AGV_waiting>:

void AGV_waiting(){
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	if(Target_Station == Current_Station){
 80012b8:	4b8c      	ldr	r3, [pc, #560]	@ (80014ec <AGV_waiting+0x238>)
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	4b8c      	ldr	r3, [pc, #560]	@ (80014f0 <AGV_waiting+0x23c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8103 	bne.w	80014cc <AGV_waiting+0x218>
		On_Task = 0xF00F;
 80012c6:	4b8b      	ldr	r3, [pc, #556]	@ (80014f4 <AGV_waiting+0x240>)
 80012c8:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80012cc:	801a      	strh	r2, [r3, #0]
		if(Target_Station != Station){
 80012ce:	4b87      	ldr	r3, [pc, #540]	@ (80014ec <AGV_waiting+0x238>)
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	4b89      	ldr	r3, [pc, #548]	@ (80014f8 <AGV_waiting+0x244>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	f000 80f8 	beq.w	80014cc <AGV_waiting+0x218>
			Target_Station = Station;
 80012dc:	4b86      	ldr	r3, [pc, #536]	@ (80014f8 <AGV_waiting+0x244>)
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	4b82      	ldr	r3, [pc, #520]	@ (80014ec <AGV_waiting+0x238>)
 80012e2:	701a      	strb	r2, [r3, #0]
			if(Current_Station == 0){
 80012e4:	4b82      	ldr	r3, [pc, #520]	@ (80014f0 <AGV_waiting+0x23c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d138      	bne.n	800135e <AGV_waiting+0xaa>
				if(Target_Station == 1){
 80012ec:	4b7f      	ldr	r3, [pc, #508]	@ (80014ec <AGV_waiting+0x238>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10e      	bne.n	8001312 <AGV_waiting+0x5e>
					on_task_decisions[0] = 'L';
 80012f4:	4b81      	ldr	r3, [pc, #516]	@ (80014fc <AGV_waiting+0x248>)
 80012f6:	224c      	movs	r2, #76	@ 0x4c
 80012f8:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 80012fa:	4b80      	ldr	r3, [pc, #512]	@ (80014fc <AGV_waiting+0x248>)
 80012fc:	224c      	movs	r2, #76	@ 0x4c
 80012fe:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 8001300:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <AGV_waiting+0x248>)
 8001302:	2245      	movs	r2, #69	@ 0x45
 8001304:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001306:	4b7d      	ldr	r3, [pc, #500]	@ (80014fc <AGV_waiting+0x248>)
 8001308:	2245      	movs	r2, #69	@ 0x45
 800130a:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 800130c:	4b7b      	ldr	r3, [pc, #492]	@ (80014fc <AGV_waiting+0x248>)
 800130e:	2245      	movs	r2, #69	@ 0x45
 8001310:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 8001312:	4b76      	ldr	r3, [pc, #472]	@ (80014ec <AGV_waiting+0x238>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d10e      	bne.n	8001338 <AGV_waiting+0x84>
					on_task_decisions[0] = 'L';
 800131a:	4b78      	ldr	r3, [pc, #480]	@ (80014fc <AGV_waiting+0x248>)
 800131c:	224c      	movs	r2, #76	@ 0x4c
 800131e:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 8001320:	4b76      	ldr	r3, [pc, #472]	@ (80014fc <AGV_waiting+0x248>)
 8001322:	2246      	movs	r2, #70	@ 0x46
 8001324:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'L';
 8001326:	4b75      	ldr	r3, [pc, #468]	@ (80014fc <AGV_waiting+0x248>)
 8001328:	224c      	movs	r2, #76	@ 0x4c
 800132a:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 800132c:	4b73      	ldr	r3, [pc, #460]	@ (80014fc <AGV_waiting+0x248>)
 800132e:	2245      	movs	r2, #69	@ 0x45
 8001330:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001332:	4b72      	ldr	r3, [pc, #456]	@ (80014fc <AGV_waiting+0x248>)
 8001334:	2245      	movs	r2, #69	@ 0x45
 8001336:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 3){
 8001338:	4b6c      	ldr	r3, [pc, #432]	@ (80014ec <AGV_waiting+0x238>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d10e      	bne.n	800135e <AGV_waiting+0xaa>
					on_task_decisions[0] = 'L';
 8001340:	4b6e      	ldr	r3, [pc, #440]	@ (80014fc <AGV_waiting+0x248>)
 8001342:	224c      	movs	r2, #76	@ 0x4c
 8001344:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 8001346:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <AGV_waiting+0x248>)
 8001348:	2246      	movs	r2, #70	@ 0x46
 800134a:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'F';
 800134c:	4b6b      	ldr	r3, [pc, #428]	@ (80014fc <AGV_waiting+0x248>)
 800134e:	2246      	movs	r2, #70	@ 0x46
 8001350:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'L';
 8001352:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <AGV_waiting+0x248>)
 8001354:	224c      	movs	r2, #76	@ 0x4c
 8001356:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001358:	4b68      	ldr	r3, [pc, #416]	@ (80014fc <AGV_waiting+0x248>)
 800135a:	2245      	movs	r2, #69	@ 0x45
 800135c:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 1){
 800135e:	4b64      	ldr	r3, [pc, #400]	@ (80014f0 <AGV_waiting+0x23c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d138      	bne.n	80013d8 <AGV_waiting+0x124>
				if(Target_Station == 0){
 8001366:	4b61      	ldr	r3, [pc, #388]	@ (80014ec <AGV_waiting+0x238>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10e      	bne.n	800138c <AGV_waiting+0xd8>
					on_task_decisions[0] = 'R';
 800136e:	4b63      	ldr	r3, [pc, #396]	@ (80014fc <AGV_waiting+0x248>)
 8001370:	2252      	movs	r2, #82	@ 0x52
 8001372:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 8001374:	4b61      	ldr	r3, [pc, #388]	@ (80014fc <AGV_waiting+0x248>)
 8001376:	2252      	movs	r2, #82	@ 0x52
 8001378:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 800137a:	4b60      	ldr	r3, [pc, #384]	@ (80014fc <AGV_waiting+0x248>)
 800137c:	2245      	movs	r2, #69	@ 0x45
 800137e:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001380:	4b5e      	ldr	r3, [pc, #376]	@ (80014fc <AGV_waiting+0x248>)
 8001382:	2245      	movs	r2, #69	@ 0x45
 8001384:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001386:	4b5d      	ldr	r3, [pc, #372]	@ (80014fc <AGV_waiting+0x248>)
 8001388:	2245      	movs	r2, #69	@ 0x45
 800138a:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 800138c:	4b57      	ldr	r3, [pc, #348]	@ (80014ec <AGV_waiting+0x238>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d10e      	bne.n	80013b2 <AGV_waiting+0xfe>
					on_task_decisions[0] = 'L';
 8001394:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <AGV_waiting+0x248>)
 8001396:	224c      	movs	r2, #76	@ 0x4c
 8001398:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 800139a:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <AGV_waiting+0x248>)
 800139c:	224c      	movs	r2, #76	@ 0x4c
 800139e:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 80013a0:	4b56      	ldr	r3, [pc, #344]	@ (80014fc <AGV_waiting+0x248>)
 80013a2:	2245      	movs	r2, #69	@ 0x45
 80013a4:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80013a6:	4b55      	ldr	r3, [pc, #340]	@ (80014fc <AGV_waiting+0x248>)
 80013a8:	2245      	movs	r2, #69	@ 0x45
 80013aa:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80013ac:	4b53      	ldr	r3, [pc, #332]	@ (80014fc <AGV_waiting+0x248>)
 80013ae:	2245      	movs	r2, #69	@ 0x45
 80013b0:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 3){
 80013b2:	4b4e      	ldr	r3, [pc, #312]	@ (80014ec <AGV_waiting+0x238>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d10e      	bne.n	80013d8 <AGV_waiting+0x124>
					on_task_decisions[0] = 'L';
 80013ba:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <AGV_waiting+0x248>)
 80013bc:	224c      	movs	r2, #76	@ 0x4c
 80013be:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 80013c0:	4b4e      	ldr	r3, [pc, #312]	@ (80014fc <AGV_waiting+0x248>)
 80013c2:	2246      	movs	r2, #70	@ 0x46
 80013c4:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'L';
 80013c6:	4b4d      	ldr	r3, [pc, #308]	@ (80014fc <AGV_waiting+0x248>)
 80013c8:	224c      	movs	r2, #76	@ 0x4c
 80013ca:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80013cc:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <AGV_waiting+0x248>)
 80013ce:	2245      	movs	r2, #69	@ 0x45
 80013d0:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <AGV_waiting+0x248>)
 80013d4:	2245      	movs	r2, #69	@ 0x45
 80013d6:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 2){
 80013d8:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <AGV_waiting+0x23c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d138      	bne.n	8001452 <AGV_waiting+0x19e>
				if(Target_Station == 0){
 80013e0:	4b42      	ldr	r3, [pc, #264]	@ (80014ec <AGV_waiting+0x238>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10e      	bne.n	8001406 <AGV_waiting+0x152>
					on_task_decisions[0] = 'R';
 80013e8:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <AGV_waiting+0x248>)
 80013ea:	2252      	movs	r2, #82	@ 0x52
 80013ec:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 80013ee:	4b43      	ldr	r3, [pc, #268]	@ (80014fc <AGV_waiting+0x248>)
 80013f0:	2246      	movs	r2, #70	@ 0x46
 80013f2:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'R';
 80013f4:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <AGV_waiting+0x248>)
 80013f6:	2252      	movs	r2, #82	@ 0x52
 80013f8:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80013fa:	4b40      	ldr	r3, [pc, #256]	@ (80014fc <AGV_waiting+0x248>)
 80013fc:	2245      	movs	r2, #69	@ 0x45
 80013fe:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001400:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <AGV_waiting+0x248>)
 8001402:	2245      	movs	r2, #69	@ 0x45
 8001404:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 1){
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <AGV_waiting+0x238>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10e      	bne.n	800142c <AGV_waiting+0x178>
					on_task_decisions[0] = 'R';
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <AGV_waiting+0x248>)
 8001410:	2252      	movs	r2, #82	@ 0x52
 8001412:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 8001414:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <AGV_waiting+0x248>)
 8001416:	2252      	movs	r2, #82	@ 0x52
 8001418:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <AGV_waiting+0x248>)
 800141c:	2245      	movs	r2, #69	@ 0x45
 800141e:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001420:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <AGV_waiting+0x248>)
 8001422:	2245      	movs	r2, #69	@ 0x45
 8001424:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001426:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <AGV_waiting+0x248>)
 8001428:	2245      	movs	r2, #69	@ 0x45
 800142a:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 3){
 800142c:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <AGV_waiting+0x238>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d10e      	bne.n	8001452 <AGV_waiting+0x19e>
					on_task_decisions[0] = 'L';
 8001434:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <AGV_waiting+0x248>)
 8001436:	224c      	movs	r2, #76	@ 0x4c
 8001438:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 800143a:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <AGV_waiting+0x248>)
 800143c:	224c      	movs	r2, #76	@ 0x4c
 800143e:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 8001440:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <AGV_waiting+0x248>)
 8001442:	2245      	movs	r2, #69	@ 0x45
 8001444:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <AGV_waiting+0x248>)
 8001448:	2245      	movs	r2, #69	@ 0x45
 800144a:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <AGV_waiting+0x248>)
 800144e:	2245      	movs	r2, #69	@ 0x45
 8001450:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 3){
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <AGV_waiting+0x23c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d138      	bne.n	80014cc <AGV_waiting+0x218>
				if(Target_Station == 0){
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <AGV_waiting+0x238>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10e      	bne.n	8001480 <AGV_waiting+0x1cc>
					on_task_decisions[0] = 'R';
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <AGV_waiting+0x248>)
 8001464:	2252      	movs	r2, #82	@ 0x52
 8001466:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <AGV_waiting+0x248>)
 800146a:	2246      	movs	r2, #70	@ 0x46
 800146c:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'F';
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <AGV_waiting+0x248>)
 8001470:	2246      	movs	r2, #70	@ 0x46
 8001472:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'R';
 8001474:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <AGV_waiting+0x248>)
 8001476:	2252      	movs	r2, #82	@ 0x52
 8001478:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <AGV_waiting+0x248>)
 800147c:	2245      	movs	r2, #69	@ 0x45
 800147e:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 1){
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <AGV_waiting+0x238>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10e      	bne.n	80014a6 <AGV_waiting+0x1f2>
					on_task_decisions[0] = 'R';
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <AGV_waiting+0x248>)
 800148a:	2252      	movs	r2, #82	@ 0x52
 800148c:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <AGV_waiting+0x248>)
 8001490:	2246      	movs	r2, #70	@ 0x46
 8001492:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'R';
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <AGV_waiting+0x248>)
 8001496:	2252      	movs	r2, #82	@ 0x52
 8001498:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <AGV_waiting+0x248>)
 800149c:	2245      	movs	r2, #69	@ 0x45
 800149e:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <AGV_waiting+0x248>)
 80014a2:	2245      	movs	r2, #69	@ 0x45
 80014a4:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <AGV_waiting+0x238>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d10e      	bne.n	80014cc <AGV_waiting+0x218>
					on_task_decisions[0] = 'R';
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <AGV_waiting+0x248>)
 80014b0:	2252      	movs	r2, #82	@ 0x52
 80014b2:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <AGV_waiting+0x248>)
 80014b6:	2252      	movs	r2, #82	@ 0x52
 80014b8:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <AGV_waiting+0x248>)
 80014bc:	2245      	movs	r2, #69	@ 0x45
 80014be:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <AGV_waiting+0x248>)
 80014c2:	2245      	movs	r2, #69	@ 0x45
 80014c4:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <AGV_waiting+0x248>)
 80014c8:	2245      	movs	r2, #69	@ 0x45
 80014ca:	711a      	strb	r2, [r3, #4]
				}
			}

		}
	}
	if(Target_Station != Current_Station){
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <AGV_waiting+0x238>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <AGV_waiting+0x23c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d003      	beq.n	80014e0 <AGV_waiting+0x22c>
		On_Task = 0xF11F;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <AGV_waiting+0x240>)
 80014da:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80014de:	801a      	strh	r2, [r3, #0]
	}
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	24000697 	.word	0x24000697
 80014f0:	24000696 	.word	0x24000696
 80014f4:	2400005e 	.word	0x2400005e
 80014f8:	24000695 	.word	0x24000695
 80014fc:	24000060 	.word	0x24000060

08001500 <AGV_Turn_Detection_Completion>:

void AGV_Turn_Detection_Completion(volatile uint16_t *sensor_calibrated_values,
								   volatile uint8_t  *sensor_middle_on_line_number,
								   volatile uint8_t  *sensor_total_on_line_number,
								   	   	   	uint8_t  *decision_array,
											uint16_t *orientation){
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
#define first_timer_buffer 600
#define second_timer_buffer 300
#define skip_turn_timer_buffer 200
#define base_speed 50

	uint8_t _turn_decide = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

	if((*sensor_middle_on_line_number >= 3) && (*sensor_middle_on_line_number <= 6)){
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	f240 80d0 	bls.w	80016be <AGV_Turn_Detection_Completion+0x1be>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b06      	cmp	r3, #6
 8001526:	f200 80ca 	bhi.w	80016be <AGV_Turn_Detection_Completion+0x1be>
		if(((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold)) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3310      	adds	r3, #16
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001536:	d906      	bls.n	8001546 <AGV_Turn_Detection_Completion+0x46>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3312      	adds	r3, #18
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001544:	d80e      	bhi.n	8001564 <AGV_Turn_Detection_Completion+0x64>
			((sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold))){
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
		if(((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold)) ||
 800154c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001550:	f240 80b5 	bls.w	80016be <AGV_Turn_Detection_Completion+0x1be>
			((sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold))){
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3302      	adds	r3, #2
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001560:	f240 80ad 	bls.w	80016be <AGV_Turn_Detection_Completion+0x1be>

			HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, SET);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800156a:	4886      	ldr	r0, [pc, #536]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 800156c:	f007 fb20 	bl	8008bb0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001576:	4883      	ldr	r0, [pc, #524]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 8001578:	f007 fb1a 	bl	8008bb0 <HAL_GPIO_WritePin>

			PID_Forward_Rotation(base_speed, base_speed, orientation);
 800157c:	6a3a      	ldr	r2, [r7, #32]
 800157e:	2132      	movs	r1, #50	@ 0x32
 8001580:	2032      	movs	r0, #50	@ 0x32
 8001582:	f7ff fded 	bl	8001160 <PID_Forward_Rotation>
			HAL_Delay(first_timer_buffer);
 8001586:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800158a:	f002 f93f 	bl	800380c <HAL_Delay>
			PID_Motor_All_Break();
 800158e:	f7ff fe7f 	bl	8001290 <PID_Motor_All_Break>

			HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001596:	f002 f939 	bl	800380c <HAL_Delay>

			agv_turn_count += 1;
 800159a:	4b7b      	ldr	r3, [pc, #492]	@ (8001788 <AGV_Turn_Detection_Completion+0x288>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b79      	ldr	r3, [pc, #484]	@ (8001788 <AGV_Turn_Detection_Completion+0x288>)
 80015a4:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 80015a6:	2180      	movs	r1, #128	@ 0x80
 80015a8:	4878      	ldr	r0, [pc, #480]	@ (800178c <AGV_Turn_Detection_Completion+0x28c>)
 80015aa:	f007 fb1a 	bl	8008be2 <HAL_GPIO_TogglePin>

			if(decision_array[agv_turn_count - 1] == 'L'){
 80015ae:	4b76      	ldr	r3, [pc, #472]	@ (8001788 <AGV_Turn_Detection_Completion+0x288>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b4c      	cmp	r3, #76	@ 0x4c
 80015bc:	d110      	bne.n	80015e0 <AGV_Turn_Detection_Completion+0xe0>

				PID_Motor_Turn_Left(base_speed, orientation);
 80015be:	6a39      	ldr	r1, [r7, #32]
 80015c0:	2032      	movs	r0, #50	@ 0x32
 80015c2:	f7ff fe01 	bl	80011c8 <PID_Motor_Turn_Left>
				HAL_Delay(second_timer_buffer);
 80015c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015ca:	f002 f91f 	bl	800380c <HAL_Delay>
				PID_Motor_All_Break();
 80015ce:	f7ff fe5f 	bl	8001290 <PID_Motor_All_Break>

				HAL_Delay(1000);
 80015d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015d6:	f002 f919 	bl	800380c <HAL_Delay>

				_turn_decide = 'L';
 80015da:	234c      	movs	r3, #76	@ 0x4c
 80015dc:	75fb      	strb	r3, [r7, #23]
 80015de:	e036      	b.n	800164e <AGV_Turn_Detection_Completion+0x14e>
			}
			else if(decision_array[agv_turn_count - 1] == 'R'){
 80015e0:	4b69      	ldr	r3, [pc, #420]	@ (8001788 <AGV_Turn_Detection_Completion+0x288>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b52      	cmp	r3, #82	@ 0x52
 80015ee:	d110      	bne.n	8001612 <AGV_Turn_Detection_Completion+0x112>

				PID_Motor_Turn_Right(base_speed, orientation);
 80015f0:	6a39      	ldr	r1, [r7, #32]
 80015f2:	2032      	movs	r0, #50	@ 0x32
 80015f4:	f7ff fe1a 	bl	800122c <PID_Motor_Turn_Right>
				HAL_Delay(second_timer_buffer);
 80015f8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015fc:	f002 f906 	bl	800380c <HAL_Delay>
				PID_Motor_All_Break();
 8001600:	f7ff fe46 	bl	8001290 <PID_Motor_All_Break>

				HAL_Delay(1000);
 8001604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001608:	f002 f900 	bl	800380c <HAL_Delay>

				_turn_decide = 'R';
 800160c:	2352      	movs	r3, #82	@ 0x52
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	e01d      	b.n	800164e <AGV_Turn_Detection_Completion+0x14e>
			}

			else if(decision_array[agv_turn_count - 1] == 'F'){
 8001612:	4b5d      	ldr	r3, [pc, #372]	@ (8001788 <AGV_Turn_Detection_Completion+0x288>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	3b01      	subs	r3, #1
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b46      	cmp	r3, #70	@ 0x46
 8001620:	d115      	bne.n	800164e <AGV_Turn_Detection_Completion+0x14e>

				PID_Forward_Rotation(base_speed, base_speed, orientation);
 8001622:	6a3a      	ldr	r2, [r7, #32]
 8001624:	2132      	movs	r1, #50	@ 0x32
 8001626:	2032      	movs	r0, #50	@ 0x32
 8001628:	f7ff fd9a 	bl	8001160 <PID_Forward_Rotation>
				HAL_Delay(skip_turn_timer_buffer);
 800162c:	20c8      	movs	r0, #200	@ 0xc8
 800162e:	f002 f8ed 	bl	800380c <HAL_Delay>
				_turn_decide = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
				HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800163c:	4851      	ldr	r0, [pc, #324]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 800163e:	f007 fab7 	bl	8008bb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001648:	484e      	ldr	r0, [pc, #312]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 800164a:	f007 fab1 	bl	8008bb0 <HAL_GPIO_WritePin>
			}
			if(decision_array[agv_turn_count - 1] == 'E'){
 800164e:	4b4e      	ldr	r3, [pc, #312]	@ (8001788 <AGV_Turn_Detection_Completion+0x288>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b45      	cmp	r3, #69	@ 0x45
 800165c:	d12f      	bne.n	80016be <AGV_Turn_Detection_Completion+0x1be>


				PID_Motor_All_Break();
 800165e:	f7ff fe17 	bl	8001290 <PID_Motor_All_Break>

				Current_Station = Target_Station;
 8001662:	4b4b      	ldr	r3, [pc, #300]	@ (8001790 <AGV_Turn_Detection_Completion+0x290>)
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <AGV_Turn_Detection_Completion+0x294>)
 8001668:	701a      	strb	r2, [r3, #0]

				On_Task = 0xF00F;
 800166a:	4b4b      	ldr	r3, [pc, #300]	@ (8001798 <AGV_Turn_Detection_Completion+0x298>)
 800166c:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001670:	801a      	strh	r2, [r3, #0]

				if(agv_orientation == 0xF00F){
 8001672:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <AGV_Turn_Detection_Completion+0x29c>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800167a:	4293      	cmp	r3, r2
 800167c:	d104      	bne.n	8001688 <AGV_Turn_Detection_Completion+0x188>
					agv_orientation = 0xF11F;
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <AGV_Turn_Detection_Completion+0x29c>)
 8001680:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	e009      	b.n	800169c <AGV_Turn_Detection_Completion+0x19c>
				}
				else if(agv_orientation == 0xF11F){
 8001688:	4b44      	ldr	r3, [pc, #272]	@ (800179c <AGV_Turn_Detection_Completion+0x29c>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001690:	4293      	cmp	r3, r2
 8001692:	d103      	bne.n	800169c <AGV_Turn_Detection_Completion+0x19c>
					agv_orientation = 0xF00F;
 8001694:	4b41      	ldr	r3, [pc, #260]	@ (800179c <AGV_Turn_Detection_Completion+0x29c>)
 8001696:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800169a:	801a      	strh	r2, [r3, #0]
				}

				_turn_decide = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	75fb      	strb	r3, [r7, #23]
				agv_turn_count = 0;
 80016a0:	4b39      	ldr	r3, [pc, #228]	@ (8001788 <AGV_Turn_Detection_Completion+0x288>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ac:	4835      	ldr	r0, [pc, #212]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 80016ae:	f007 fa7f 	bl	8008bb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b8:	4832      	ldr	r0, [pc, #200]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 80016ba:	f007 fa79 	bl	8008bb0 <HAL_GPIO_WritePin>

		}
	}


	Line_Sensor_Calculation(&front_array);
 80016be:	4838      	ldr	r0, [pc, #224]	@ (80017a0 <AGV_Turn_Detection_Completion+0x2a0>)
 80016c0:	f7ff fb85 	bl	8000dce <Line_Sensor_Calculation>
	Line_Sensor_Calculation(&back_array);
 80016c4:	4837      	ldr	r0, [pc, #220]	@ (80017a4 <AGV_Turn_Detection_Completion+0x2a4>)
 80016c6:	f7ff fb82 	bl	8000dce <Line_Sensor_Calculation>

	if(_turn_decide == 'L'){
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	2b4c      	cmp	r3, #76	@ 0x4c
 80016ce:	d129      	bne.n	8001724 <AGV_Turn_Detection_Completion+0x224>
		while((sensor_calibrated_values[5] < white_detection_thresh_hold) || (sensor_calibrated_values[6] < white_detection_thresh_hold)){
 80016d0:	e009      	b.n	80016e6 <AGV_Turn_Detection_Completion+0x1e6>
			  Line_Sensor_Calculation(&front_array);
 80016d2:	4833      	ldr	r0, [pc, #204]	@ (80017a0 <AGV_Turn_Detection_Completion+0x2a0>)
 80016d4:	f7ff fb7b 	bl	8000dce <Line_Sensor_Calculation>
			  Line_Sensor_Calculation(&back_array);
 80016d8:	4832      	ldr	r0, [pc, #200]	@ (80017a4 <AGV_Turn_Detection_Completion+0x2a4>)
 80016da:	f7ff fb78 	bl	8000dce <Line_Sensor_Calculation>

			PID_Motor_Turn_Left(base_speed, orientation);
 80016de:	6a39      	ldr	r1, [r7, #32]
 80016e0:	2032      	movs	r0, #50	@ 0x32
 80016e2:	f7ff fd71 	bl	80011c8 <PID_Motor_Turn_Left>
		while((sensor_calibrated_values[5] < white_detection_thresh_hold) || (sensor_calibrated_values[6] < white_detection_thresh_hold)){
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	330a      	adds	r3, #10
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016f2:	d3ee      	bcc.n	80016d2 <AGV_Turn_Detection_Completion+0x1d2>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	330c      	adds	r3, #12
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001700:	d3e7      	bcc.n	80016d2 <AGV_Turn_Detection_Completion+0x1d2>
		}
		PID_Motor_All_Break();
 8001702:	f7ff fdc5 	bl	8001290 <PID_Motor_All_Break>
		_turn_decide = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001710:	481c      	ldr	r0, [pc, #112]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 8001712:	f007 fa4d 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800171c:	4819      	ldr	r0, [pc, #100]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 800171e:	f007 fa47 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
		HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
	}


}
 8001722:	e02b      	b.n	800177c <AGV_Turn_Detection_Completion+0x27c>
	else if(_turn_decide == 'R'){
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b52      	cmp	r3, #82	@ 0x52
 8001728:	d128      	bne.n	800177c <AGV_Turn_Detection_Completion+0x27c>
		while((sensor_calibrated_values[6] < white_detection_thresh_hold) || (sensor_calibrated_values[5] < white_detection_thresh_hold)){
 800172a:	e009      	b.n	8001740 <AGV_Turn_Detection_Completion+0x240>
			  Line_Sensor_Calculation(&front_array);
 800172c:	481c      	ldr	r0, [pc, #112]	@ (80017a0 <AGV_Turn_Detection_Completion+0x2a0>)
 800172e:	f7ff fb4e 	bl	8000dce <Line_Sensor_Calculation>
			  Line_Sensor_Calculation(&back_array);
 8001732:	481c      	ldr	r0, [pc, #112]	@ (80017a4 <AGV_Turn_Detection_Completion+0x2a4>)
 8001734:	f7ff fb4b 	bl	8000dce <Line_Sensor_Calculation>
			PID_Motor_Turn_Right(base_speed, orientation);
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	2032      	movs	r0, #50	@ 0x32
 800173c:	f7ff fd76 	bl	800122c <PID_Motor_Turn_Right>
		while((sensor_calibrated_values[6] < white_detection_thresh_hold) || (sensor_calibrated_values[5] < white_detection_thresh_hold)){
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	330c      	adds	r3, #12
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800174c:	d3ee      	bcc.n	800172c <AGV_Turn_Detection_Completion+0x22c>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	330a      	adds	r3, #10
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800175a:	d3e7      	bcc.n	800172c <AGV_Turn_Detection_Completion+0x22c>
		PID_Motor_All_Break();
 800175c:	f7ff fd98 	bl	8001290 <PID_Motor_All_Break>
		_turn_decide = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800176a:	4806      	ldr	r0, [pc, #24]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 800176c:	f007 fa20 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001776:	4803      	ldr	r0, [pc, #12]	@ (8001784 <AGV_Turn_Detection_Completion+0x284>)
 8001778:	f007 fa1a 	bl	8008bb0 <HAL_GPIO_WritePin>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58020c00 	.word	0x58020c00
 8001788:	24000694 	.word	0x24000694
 800178c:	58021800 	.word	0x58021800
 8001790:	24000697 	.word	0x24000697
 8001794:	24000696 	.word	0x24000696
 8001798:	2400005e 	.word	0x2400005e
 800179c:	24000050 	.word	0x24000050
 80017a0:	240005a4 	.word	0x240005a4
 80017a4:	2400060c 	.word	0x2400060c

080017a8 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_GPIO_EXTI_Callback+0x16>
		Station = 1;
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_GPIO_EXTI_Callback+0x74>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d102      	bne.n	80017ca <HAL_GPIO_EXTI_Callback+0x22>
		Station = 2;
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_GPIO_EXTI_Callback+0x74>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d102      	bne.n	80017d6 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 3;
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_GPIO_EXTI_Callback+0x74>)
 80017d2:	2203      	movs	r2, #3
 80017d4:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d102      	bne.n	80017e2 <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 0;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_GPIO_EXTI_Callback+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d103      	bne.n	80017f0 <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 80017e8:	2180      	movs	r1, #128	@ 0x80
 80017ea:	480d      	ldr	r0, [pc, #52]	@ (8001820 <HAL_GPIO_EXTI_Callback+0x78>)
 80017ec:	f007 f9f9 	bl	8008be2 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017f2:	8a9b      	ldrh	r3, [r3, #20]
 80017f4:	88fa      	ldrh	r2, [r7, #6]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d10b      	bne.n	8001812 <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 80017fa:	2280      	movs	r2, #128	@ 0x80
 80017fc:	490a      	ldr	r1, [pc, #40]	@ (8001828 <HAL_GPIO_EXTI_Callback+0x80>)
 80017fe:	4809      	ldr	r0, [pc, #36]	@ (8001824 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001800:	f7ff f979 	bl	8000af6 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8001804:	2140      	movs	r1, #64	@ 0x40
 8001806:	4809      	ldr	r0, [pc, #36]	@ (800182c <HAL_GPIO_EXTI_Callback+0x84>)
 8001808:	f007 f9eb 	bl	8008be2 <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_GPIO_EXTI_Callback+0x88>)
 800180e:	22ff      	movs	r2, #255	@ 0xff
 8001810:	701a      	strb	r2, [r3, #0]

	}
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	24000695 	.word	0x24000695
 8001820:	58021800 	.word	0x58021800
 8001824:	24000698 	.word	0x24000698
 8001828:	24000748 	.word	0x24000748
 800182c:	58020c00 	.word	0x58020c00
 8001830:	240007c8 	.word	0x240007c8

08001834 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;

//	rs485_fail_check = 0;
	if(huart->Instance == USART1){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <HAL_UARTEx_RxEventCallback+0x34>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d102      	bne.n	8001850 <HAL_UARTEx_RxEventCallback+0x1c>
		rs485_UART_receive_handler(&m1_driver);
 800184a:	4808      	ldr	r0, [pc, #32]	@ (800186c <HAL_UARTEx_RxEventCallback+0x38>)
 800184c:	f001 fa2b 	bl	8002ca6 <rs485_UART_receive_handler>
	}
	if(huart->Instance == USART3){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d102      	bne.n	8001860 <HAL_UARTEx_RxEventCallback+0x2c>
		rs485_UART_receive_handler(&m2_driver);
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <HAL_UARTEx_RxEventCallback+0x40>)
 800185c:	f001 fa23 	bl	8002ca6 <rs485_UART_receive_handler>
	}
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40011000 	.word	0x40011000
 800186c:	240004f8 	.word	0x240004f8
 8001870:	40004800 	.word	0x40004800
 8001874:	24000530 	.word	0x24000530

08001878 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d102      	bne.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x18>
    	rs485_connection_lost_handler(&m1_driver);
 800188a:	4808      	ldr	r0, [pc, #32]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 800188c:	f001 fa30 	bl	8002cf0 <rs485_connection_lost_handler>

    }
    if(htim->Instance == TIM4){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d102      	bne.n	80018a0 <HAL_TIM_PeriodElapsedCallback+0x28>
    	rs485_connection_lost_handler(&m2_driver);
 800189a:	4806      	ldr	r0, [pc, #24]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800189c:	f001 fa28 	bl	8002cf0 <rs485_connection_lost_handler>

    }
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40000400 	.word	0x40000400
 80018ac:	240004f8 	.word	0x240004f8
 80018b0:	40000800 	.word	0x40000800
 80018b4:	24000530 	.word	0x24000530

080018b8 <debug_led>:

void debug_led(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	if(agv_orientation == 0xF00F){
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <debug_led+0x9c>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d10c      	bne.n	80018e2 <debug_led+0x2a>
		HAL_GPIO_WritePin(ORIENTATION_LED_GREEN_GPIO_Port, ORIENTATION_LED_GREEN_Pin, SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ce:	4822      	ldr	r0, [pc, #136]	@ (8001958 <debug_led+0xa0>)
 80018d0:	f007 f96e 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORIENTATION_LED_RED_GPIO_Port, ORIENTATION_LED_RED_Pin, RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018da:	481f      	ldr	r0, [pc, #124]	@ (8001958 <debug_led+0xa0>)
 80018dc:	f007 f968 	bl	8008bb0 <HAL_GPIO_WritePin>
 80018e0:	e011      	b.n	8001906 <debug_led+0x4e>
	}
	else if(agv_orientation == 0xF11F){
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <debug_led+0x9c>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10b      	bne.n	8001906 <debug_led+0x4e>
		HAL_GPIO_WritePin(ORIENTATION_LED_GREEN_GPIO_Port, ORIENTATION_LED_GREEN_Pin, RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f4:	4818      	ldr	r0, [pc, #96]	@ (8001958 <debug_led+0xa0>)
 80018f6:	f007 f95b 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORIENTATION_LED_RED_GPIO_Port, ORIENTATION_LED_RED_Pin, SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001900:	4815      	ldr	r0, [pc, #84]	@ (8001958 <debug_led+0xa0>)
 8001902:	f007 f955 	bl	8008bb0 <HAL_GPIO_WritePin>
	}

	if(On_Task == 0xF11F){
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <debug_led+0xa4>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 800190e:	4293      	cmp	r3, r2
 8001910:	d10c      	bne.n	800192c <debug_led+0x74>
		HAL_GPIO_WritePin(ONTASK_LED_GREEN_GPIO_Port, ONTASK_LED_GREEN_Pin, SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001918:	480f      	ldr	r0, [pc, #60]	@ (8001958 <debug_led+0xa0>)
 800191a:	f007 f949 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ONTASK_LED_RED_GPIO_Port, ONTASK_LED_RED_Pin, RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <debug_led+0xa0>)
 8001926:	f007 f943 	bl	8008bb0 <HAL_GPIO_WritePin>
	}
	else if(On_Task == 0xF00F){
		HAL_GPIO_WritePin(ONTASK_LED_GREEN_GPIO_Port, ONTASK_LED_GREEN_Pin, RESET);
		HAL_GPIO_WritePin(ONTASK_LED_RED_GPIO_Port, ONTASK_LED_RED_Pin, SET);
	}
}
 800192a:	e011      	b.n	8001950 <debug_led+0x98>
	else if(On_Task == 0xF00F){
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <debug_led+0xa4>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001934:	4293      	cmp	r3, r2
 8001936:	d10b      	bne.n	8001950 <debug_led+0x98>
		HAL_GPIO_WritePin(ONTASK_LED_GREEN_GPIO_Port, ONTASK_LED_GREEN_Pin, RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <debug_led+0xa0>)
 8001940:	f007 f936 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ONTASK_LED_RED_GPIO_Port, ONTASK_LED_RED_Pin, SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800194a:	4803      	ldr	r0, [pc, #12]	@ (8001958 <debug_led+0xa0>)
 800194c:	f007 f930 	bl	8008bb0 <HAL_GPIO_WritePin>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	24000050 	.word	0x24000050
 8001958:	58020c00 	.word	0x58020c00
 800195c:	2400005e 	.word	0x2400005e

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b094      	sub	sp, #80	@ 0x50
 8001964:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f001 febf 	bl	80036e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f9dd 	bl	8001d28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800196e:	f000 fa4d 	bl	8001e0c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001972:	f000 fec1 	bl	80026f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001976:	f000 fe97 	bl	80026a8 <MX_DMA_Init>
  MX_ADC1_Init();
 800197a:	f000 fa7b 	bl	8001e74 <MX_ADC1_Init>
  MX_ADC3_Init();
 800197e:	f000 fb8b 	bl	8002098 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001982:	f000 fdf9 	bl	8002578 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001986:	f000 fce3 	bl	8002350 <MX_TIM2_Init>
  MX_SPI1_Init();
 800198a:	f000 fc8b 	bl	80022a4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800198e:	f000 fe3f 	bl	8002610 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001992:	f000 fd51 	bl	8002438 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001996:	f000 fd9f 	bl	80024d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  m1_driver.rs485_id = 0x01;
 800199a:	4ba1      	ldr	r3, [pc, #644]	@ (8001c20 <main+0x2c0>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
  m1_driver.rs485_huart = &huart1;
 80019a0:	4b9f      	ldr	r3, [pc, #636]	@ (8001c20 <main+0x2c0>)
 80019a2:	4aa0      	ldr	r2, [pc, #640]	@ (8001c24 <main+0x2c4>)
 80019a4:	615a      	str	r2, [r3, #20]
  m1_driver.rs485_timer = &htim3;
 80019a6:	4b9e      	ldr	r3, [pc, #632]	@ (8001c20 <main+0x2c0>)
 80019a8:	4a9f      	ldr	r2, [pc, #636]	@ (8001c28 <main+0x2c8>)
 80019aa:	619a      	str	r2, [r3, #24]
  m1_driver.rs485_enable_port = RS485_M1_TX_EN_GPIO_Port;
 80019ac:	4b9c      	ldr	r3, [pc, #624]	@ (8001c20 <main+0x2c0>)
 80019ae:	4a9f      	ldr	r2, [pc, #636]	@ (8001c2c <main+0x2cc>)
 80019b0:	605a      	str	r2, [r3, #4]
  m1_driver.rs485_enable_pin = RS485_M1_TX_EN_Pin;
 80019b2:	4b9b      	ldr	r3, [pc, #620]	@ (8001c20 <main+0x2c0>)
 80019b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b8:	811a      	strh	r2, [r3, #8]
  m1_driver.rs485_rx_led_port = RS485_M1_RX_LED_GPIO_Port;
 80019ba:	4b99      	ldr	r3, [pc, #612]	@ (8001c20 <main+0x2c0>)
 80019bc:	4a9c      	ldr	r2, [pc, #624]	@ (8001c30 <main+0x2d0>)
 80019be:	60da      	str	r2, [r3, #12]
  m1_driver.rs485_rx_led_pin = RS485_M1_RX_LED_Pin;
 80019c0:	4b97      	ldr	r3, [pc, #604]	@ (8001c20 <main+0x2c0>)
 80019c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019c6:	821a      	strh	r2, [r3, #16]

  m2_driver.rs485_id = 0x02;
 80019c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001c34 <main+0x2d4>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	701a      	strb	r2, [r3, #0]
  m2_driver.rs485_huart = &huart3;
 80019ce:	4b99      	ldr	r3, [pc, #612]	@ (8001c34 <main+0x2d4>)
 80019d0:	4a99      	ldr	r2, [pc, #612]	@ (8001c38 <main+0x2d8>)
 80019d2:	615a      	str	r2, [r3, #20]
  m2_driver.rs485_timer = &htim4;
 80019d4:	4b97      	ldr	r3, [pc, #604]	@ (8001c34 <main+0x2d4>)
 80019d6:	4a99      	ldr	r2, [pc, #612]	@ (8001c3c <main+0x2dc>)
 80019d8:	619a      	str	r2, [r3, #24]
  m2_driver.rs485_enable_port = RS485_M2_TX_EN_GPIO_Port;
 80019da:	4b96      	ldr	r3, [pc, #600]	@ (8001c34 <main+0x2d4>)
 80019dc:	4a98      	ldr	r2, [pc, #608]	@ (8001c40 <main+0x2e0>)
 80019de:	605a      	str	r2, [r3, #4]
  m2_driver.rs485_enable_pin = RS485_M2_TX_EN_Pin;
 80019e0:	4b94      	ldr	r3, [pc, #592]	@ (8001c34 <main+0x2d4>)
 80019e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019e6:	811a      	strh	r2, [r3, #8]
  m2_driver.rs485_rx_led_port = RS485_M2_RX_LED_GPIO_Port;
 80019e8:	4b92      	ldr	r3, [pc, #584]	@ (8001c34 <main+0x2d4>)
 80019ea:	4a90      	ldr	r2, [pc, #576]	@ (8001c2c <main+0x2cc>)
 80019ec:	60da      	str	r2, [r3, #12]
  m2_driver.rs485_rx_led_pin = RS485_M2_RX_LED_Pin;
 80019ee:	4b91      	ldr	r3, [pc, #580]	@ (8001c34 <main+0x2d4>)
 80019f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019f4:	821a      	strh	r2, [r3, #16]

  rs485_init(&m1_driver);
 80019f6:	488a      	ldr	r0, [pc, #552]	@ (8001c20 <main+0x2c0>)
 80019f8:	f001 f838 	bl	8002a6c <rs485_init>
  rs485_init(&m2_driver);
 80019fc:	488d      	ldr	r0, [pc, #564]	@ (8001c34 <main+0x2d4>)
 80019fe:	f001 f835 	bl	8002a6c <rs485_init>

  rs485_enable_velocity_mode(&m1_driver);
 8001a02:	4887      	ldr	r0, [pc, #540]	@ (8001c20 <main+0x2c0>)
 8001a04:	f001 f8e1 	bl	8002bca <rs485_enable_velocity_mode>
  rs485_enable_velocity_mode(&m2_driver);
 8001a08:	488a      	ldr	r0, [pc, #552]	@ (8001c34 <main+0x2d4>)
 8001a0a:	f001 f8de 	bl	8002bca <rs485_enable_velocity_mode>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);




  myLoRa = newLoRa();
 8001a0e:	4c8d      	ldr	r4, [pc, #564]	@ (8001c44 <main+0x2e4>)
 8001a10:	463b      	mov	r3, r7
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdf2 	bl	80005fc <newLoRa>
 8001a18:	4625      	mov	r5, r4
 8001a1a:	463c      	mov	r4, r7
 8001a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a28:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001a2c:	4b85      	ldr	r3, [pc, #532]	@ (8001c44 <main+0x2e4>)
 8001a2e:	4a86      	ldr	r2, [pc, #536]	@ (8001c48 <main+0x2e8>)
 8001a30:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8001a32:	4b84      	ldr	r3, [pc, #528]	@ (8001c44 <main+0x2e4>)
 8001a34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a38:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001a3a:	4b82      	ldr	r3, [pc, #520]	@ (8001c44 <main+0x2e4>)
 8001a3c:	4a82      	ldr	r2, [pc, #520]	@ (8001c48 <main+0x2e8>)
 8001a3e:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8001a40:	4b80      	ldr	r3, [pc, #512]	@ (8001c44 <main+0x2e4>)
 8001a42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a46:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 8001a48:	4b7e      	ldr	r3, [pc, #504]	@ (8001c44 <main+0x2e4>)
 8001a4a:	4a7f      	ldr	r2, [pc, #508]	@ (8001c48 <main+0x2e8>)
 8001a4c:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c44 <main+0x2e4>)
 8001a50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a54:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001a56:	4b7b      	ldr	r3, [pc, #492]	@ (8001c44 <main+0x2e4>)
 8001a58:	4a7c      	ldr	r2, [pc, #496]	@ (8001c4c <main+0x2ec>)
 8001a5a:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8001a5c:	4b79      	ldr	r3, [pc, #484]	@ (8001c44 <main+0x2e4>)
 8001a5e:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001a62:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001a64:	4b77      	ldr	r3, [pc, #476]	@ (8001c44 <main+0x2e4>)
 8001a66:	2207      	movs	r2, #7
 8001a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001a6c:	4b75      	ldr	r3, [pc, #468]	@ (8001c44 <main+0x2e4>)
 8001a6e:	2207      	movs	r2, #7
 8001a70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001a74:	4b73      	ldr	r3, [pc, #460]	@ (8001c44 <main+0x2e4>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001a7c:	4b71      	ldr	r3, [pc, #452]	@ (8001c44 <main+0x2e4>)
 8001a7e:	22ff      	movs	r2, #255	@ 0xff
 8001a80:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8001a84:	4b6f      	ldr	r3, [pc, #444]	@ (8001c44 <main+0x2e4>)
 8001a86:	2264      	movs	r2, #100	@ 0x64
 8001a88:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	@ (8001c44 <main+0x2e4>)
 8001a8e:	2208      	movs	r2, #8
 8001a90:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001a92:	486c      	ldr	r0, [pc, #432]	@ (8001c44 <main+0x2e4>)
 8001a94:	f7ff f88f 	bl	8000bb6 <LoRa_init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a9c:	d102      	bne.n	8001aa4 <main+0x144>
	  LoRa_stat = 1;
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c50 <main+0x2f0>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8001aa4:	4867      	ldr	r0, [pc, #412]	@ (8001c44 <main+0x2e4>)
 8001aa6:	f7ff f81a 	bl	8000ade <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8001c54 <main+0x2f4>)
 8001aac:	22aa      	movs	r2, #170	@ 0xaa
 8001aae:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8001ab0:	4b68      	ldr	r3, [pc, #416]	@ (8001c54 <main+0x2f4>)
 8001ab2:	22bb      	movs	r2, #187	@ 0xbb
 8001ab4:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 8001ab6:	4b67      	ldr	r3, [pc, #412]	@ (8001c54 <main+0x2f4>)
 8001ab8:	22cc      	movs	r2, #204	@ 0xcc
 8001aba:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 8001abc:	230a      	movs	r3, #10
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4965      	ldr	r1, [pc, #404]	@ (8001c58 <main+0x2f8>)
 8001ac2:	4866      	ldr	r0, [pc, #408]	@ (8001c5c <main+0x2fc>)
 8001ac4:	f002 fbd0 	bl	8004268 <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 8001ac8:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <main+0x300>)
 8001aca:	9307      	str	r3, [sp, #28]
 8001acc:	4b65      	ldr	r3, [pc, #404]	@ (8001c64 <main+0x304>)
 8001ace:	9306      	str	r3, [sp, #24]
 8001ad0:	4b65      	ldr	r3, [pc, #404]	@ (8001c68 <main+0x308>)
 8001ad2:	9305      	str	r3, [sp, #20]
 8001ad4:	4b65      	ldr	r3, [pc, #404]	@ (8001c6c <main+0x30c>)
 8001ad6:	9304      	str	r3, [sp, #16]
 8001ad8:	4b65      	ldr	r3, [pc, #404]	@ (8001c70 <main+0x310>)
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	4b65      	ldr	r3, [pc, #404]	@ (8001c74 <main+0x314>)
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	4b65      	ldr	r3, [pc, #404]	@ (8001c78 <main+0x318>)
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <main+0x31c>)
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <main+0x320>)
 8001aea:	4a66      	ldr	r2, [pc, #408]	@ (8001c84 <main+0x324>)
 8001aec:	4966      	ldr	r1, [pc, #408]	@ (8001c88 <main+0x328>)
 8001aee:	485a      	ldr	r0, [pc, #360]	@ (8001c58 <main+0x2f8>)
 8001af0:	f7ff f908 	bl	8000d04 <ir_array_init>
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 8001af4:	230a      	movs	r3, #10
 8001af6:	461a      	mov	r2, r3
 8001af8:	4964      	ldr	r1, [pc, #400]	@ (8001c8c <main+0x32c>)
 8001afa:	4865      	ldr	r0, [pc, #404]	@ (8001c90 <main+0x330>)
 8001afc:	f002 fbb4 	bl	8004268 <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 8001b00:	4b64      	ldr	r3, [pc, #400]	@ (8001c94 <main+0x334>)
 8001b02:	9307      	str	r3, [sp, #28]
 8001b04:	4b64      	ldr	r3, [pc, #400]	@ (8001c98 <main+0x338>)
 8001b06:	9306      	str	r3, [sp, #24]
 8001b08:	4b64      	ldr	r3, [pc, #400]	@ (8001c9c <main+0x33c>)
 8001b0a:	9305      	str	r3, [sp, #20]
 8001b0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ca0 <main+0x340>)
 8001b0e:	9304      	str	r3, [sp, #16]
 8001b10:	4b64      	ldr	r3, [pc, #400]	@ (8001ca4 <main+0x344>)
 8001b12:	9303      	str	r3, [sp, #12]
 8001b14:	4b64      	ldr	r3, [pc, #400]	@ (8001ca8 <main+0x348>)
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <main+0x34c>)
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	4b64      	ldr	r3, [pc, #400]	@ (8001cb0 <main+0x350>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	4b64      	ldr	r3, [pc, #400]	@ (8001cb4 <main+0x354>)
 8001b22:	4a65      	ldr	r2, [pc, #404]	@ (8001cb8 <main+0x358>)
 8001b24:	4965      	ldr	r1, [pc, #404]	@ (8001cbc <main+0x35c>)
 8001b26:	4859      	ldr	r0, [pc, #356]	@ (8001c8c <main+0x32c>)
 8001b28:	f7ff f8ec 	bl	8000d04 <ir_array_init>
                &line_sensor_back_on_line_middle_number,
                &line_sensor_back_on_line_left_number,
                &line_sensor_back_on_line_right_number,
                &line_sensor_back_threshold);

  Line_Sensor_Calculation(&front_array);
 8001b2c:	484a      	ldr	r0, [pc, #296]	@ (8001c58 <main+0x2f8>)
 8001b2e:	f7ff f94e 	bl	8000dce <Line_Sensor_Calculation>
  Line_Sensor_Calculation(&back_array);
 8001b32:	4856      	ldr	r0, [pc, #344]	@ (8001c8c <main+0x32c>)
 8001b34:	f7ff f94b 	bl	8000dce <Line_Sensor_Calculation>

  if((back_array.ir_sen_on_line_total_num >= 9) &&(front_array.ir_sen_on_line_total_num >= 1)){
 8001b38:	4b54      	ldr	r3, [pc, #336]	@ (8001c8c <main+0x32c>)
 8001b3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d909      	bls.n	8001b58 <main+0x1f8>
 8001b44:	4b44      	ldr	r3, [pc, #272]	@ (8001c58 <main+0x2f8>)
 8001b46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <main+0x1f8>
	  agv_orientation = 0xF00F;
 8001b50:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc0 <main+0x360>)
 8001b52:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001b56:	801a      	strh	r2, [r3, #0]
  }
  if((front_array.ir_sen_on_line_total_num >= 9) && (back_array.ir_sen_on_line_total_num >= 1)){
 8001b58:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <main+0x2f8>)
 8001b5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d909      	bls.n	8001b78 <main+0x218>
 8001b64:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <main+0x32c>)
 8001b66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <main+0x218>
	  agv_orientation = 0xF11F;
 8001b70:	4b53      	ldr	r3, [pc, #332]	@ (8001cc0 <main+0x360>)
 8001b72:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001b76:	801a      	strh	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(TURN_LED_GREEN_GPIO_Port, TURN_LED_GREEN_Pin, RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b7e:	482c      	ldr	r0, [pc, #176]	@ (8001c30 <main+0x2d0>)
 8001b80:	f007 f816 	bl	8008bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TURN_LED_RED_GPIO_Port, TURN_LED_RED_Pin, SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b8a:	4829      	ldr	r0, [pc, #164]	@ (8001c30 <main+0x2d0>)
 8001b8c:	f007 f810 	bl	8008bb0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  debug_led();
 8001b90:	f7ff fe92 	bl	80018b8 <debug_led>
//			  HAL_GPIO_TogglePin(LORA_TX_LED_GPIO_Port, LORA_TX_LED_Pin);
//		  }
//		  lora_receive_toggle = 0;
//	  }
//
	  Line_Sensor_Calculation(&front_array);
 8001b94:	4830      	ldr	r0, [pc, #192]	@ (8001c58 <main+0x2f8>)
 8001b96:	f7ff f91a 	bl	8000dce <Line_Sensor_Calculation>
	  Line_Sensor_Calculation(&back_array);
 8001b9a:	483c      	ldr	r0, [pc, #240]	@ (8001c8c <main+0x32c>)
 8001b9c:	f7ff f917 	bl	8000dce <Line_Sensor_Calculation>
	  //PID_Motor_All_Break();
	  //HAL_Delay(2000);



	  	  if(On_Task == 0xF11F){
 8001ba0:	4b48      	ldr	r3, [pc, #288]	@ (8001cc4 <main+0x364>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	f040 80ab 	bne.w	8001d04 <main+0x3a4>
	 		  if(agv_orientation == 0xF00F){
 8001bae:	4b44      	ldr	r3, [pc, #272]	@ (8001cc0 <main+0x360>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d118      	bne.n	8001bec <main+0x28c>

	 			  Line_Sensor_Calculation(&front_array);
 8001bba:	4827      	ldr	r0, [pc, #156]	@ (8001c58 <main+0x2f8>)
 8001bbc:	f7ff f907 	bl	8000dce <Line_Sensor_Calculation>

				  AGV_Turn_Detection_Completion(front_array.ir_sen_val_cal,
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc0 <main+0x360>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <main+0x368>)
 8001bc6:	4a41      	ldr	r2, [pc, #260]	@ (8001ccc <main+0x36c>)
 8001bc8:	4941      	ldr	r1, [pc, #260]	@ (8001cd0 <main+0x370>)
 8001bca:	4842      	ldr	r0, [pc, #264]	@ (8001cd4 <main+0x374>)
 8001bcc:	f7ff fc98 	bl	8001500 <AGV_Turn_Detection_Completion>
											   &front_array.ir_sen_on_line_mid_num,
											   &front_array.ir_sen_on_line_total_num,
												on_task_decisions,
											   &agv_orientation);

				  PID_control(&front_array.ir_sen_read_line_val, &agv_orientation);
 8001bd0:	493b      	ldr	r1, [pc, #236]	@ (8001cc0 <main+0x360>)
 8001bd2:	4841      	ldr	r0, [pc, #260]	@ (8001cd8 <main+0x378>)
 8001bd4:	f7ff f9f4 	bl	8000fc0 <PID_control>

				  PID_Forward_Rotation(pid_motor_speed_A, pid_motor_speed_B, &agv_orientation);
 8001bd8:	4b40      	ldr	r3, [pc, #256]	@ (8001cdc <main+0x37c>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4a40      	ldr	r2, [pc, #256]	@ (8001ce0 <main+0x380>)
 8001be0:	8812      	ldrh	r2, [r2, #0]
 8001be2:	b291      	uxth	r1, r2
 8001be4:	4a36      	ldr	r2, [pc, #216]	@ (8001cc0 <main+0x360>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff faba 	bl	8001160 <PID_Forward_Rotation>


	  		  }
	  		  if(agv_orientation == 0xF11F){
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <main+0x360>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	f040 8085 	bne.w	8001d04 <main+0x3a4>

	  			  Line_Sensor_Calculation(&back_array);
 8001bfa:	4824      	ldr	r0, [pc, #144]	@ (8001c8c <main+0x32c>)
 8001bfc:	f7ff f8e7 	bl	8000dce <Line_Sensor_Calculation>

				  AGV_Turn_Detection_Completion(back_array.ir_sen_val_cal,
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <main+0x360>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <main+0x368>)
 8001c06:	4a37      	ldr	r2, [pc, #220]	@ (8001ce4 <main+0x384>)
 8001c08:	4937      	ldr	r1, [pc, #220]	@ (8001ce8 <main+0x388>)
 8001c0a:	4838      	ldr	r0, [pc, #224]	@ (8001cec <main+0x38c>)
 8001c0c:	f7ff fc78 	bl	8001500 <AGV_Turn_Detection_Completion>
											   &back_array.ir_sen_on_line_mid_num,
											   &back_array.ir_sen_on_line_total_num,
												on_task_decisions,
											   &agv_orientation);

				  PID_control(&back_array.ir_sen_read_line_val, &agv_orientation);
 8001c10:	492b      	ldr	r1, [pc, #172]	@ (8001cc0 <main+0x360>)
 8001c12:	4837      	ldr	r0, [pc, #220]	@ (8001cf0 <main+0x390>)
 8001c14:	f7ff f9d4 	bl	8000fc0 <PID_control>

				  PID_Forward_Rotation(pid_motor_speed_A, pid_motor_speed_B, &agv_orientation);
 8001c18:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <main+0x37c>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	e06a      	b.n	8001cf4 <main+0x394>
 8001c1e:	bf00      	nop
 8001c20:	240004f8 	.word	0x240004f8
 8001c24:	240003d0 	.word	0x240003d0
 8001c28:	24000338 	.word	0x24000338
 8001c2c:	58020400 	.word	0x58020400
 8001c30:	58020c00 	.word	0x58020c00
 8001c34:	24000530 	.word	0x24000530
 8001c38:	24000464 	.word	0x24000464
 8001c3c:	24000384 	.word	0x24000384
 8001c40:	58021000 	.word	0x58021000
 8001c44:	24000698 	.word	0x24000698
 8001c48:	58021800 	.word	0x58021800
 8001c4c:	24000264 	.word	0x24000264
 8001c50:	240006c4 	.word	0x240006c4
 8001c54:	240006c8 	.word	0x240006c8
 8001c58:	240005a4 	.word	0x240005a4
 8001c5c:	24000094 	.word	0x24000094
 8001c60:	08010e32 	.word	0x08010e32
 8001c64:	2400059a 	.word	0x2400059a
 8001c68:	24000598 	.word	0x24000598
 8001c6c:	24000599 	.word	0x24000599
 8001c70:	2400059b 	.word	0x2400059b
 8001c74:	24000568 	.word	0x24000568
 8001c78:	240005a0 	.word	0x240005a0
 8001c7c:	08010e30 	.word	0x08010e30
 8001c80:	24000014 	.word	0x24000014
 8001c84:	24000000 	.word	0x24000000
 8001c88:	24000570 	.word	0x24000570
 8001c8c:	2400060c 	.word	0x2400060c
 8001c90:	24000104 	.word	0x24000104
 8001c94:	08010e34 	.word	0x08010e34
 8001c98:	2400059e 	.word	0x2400059e
 8001c9c:	2400059c 	.word	0x2400059c
 8001ca0:	2400059d 	.word	0x2400059d
 8001ca4:	2400059f 	.word	0x2400059f
 8001ca8:	2400056c 	.word	0x2400056c
 8001cac:	240005a2 	.word	0x240005a2
 8001cb0:	08010e31 	.word	0x08010e31
 8001cb4:	2400003c 	.word	0x2400003c
 8001cb8:	24000028 	.word	0x24000028
 8001cbc:	24000584 	.word	0x24000584
 8001cc0:	24000050 	.word	0x24000050
 8001cc4:	2400005e 	.word	0x2400005e
 8001cc8:	24000060 	.word	0x24000060
 8001ccc:	240005fc 	.word	0x240005fc
 8001cd0:	240005fd 	.word	0x240005fd
 8001cd4:	240005b8 	.word	0x240005b8
 8001cd8:	240005f6 	.word	0x240005f6
 8001cdc:	24000690 	.word	0x24000690
 8001ce0:	24000692 	.word	0x24000692
 8001ce4:	24000664 	.word	0x24000664
 8001ce8:	24000665 	.word	0x24000665
 8001cec:	24000620 	.word	0x24000620
 8001cf0:	2400065e 	.word	0x2400065e
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <main+0x3bc>)
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	b291      	uxth	r1, r2
 8001cfc:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <main+0x3c0>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fa2e 	bl	8001160 <PID_Forward_Rotation>

	  		  }

	  	  }
	  	  if(On_Task == 0xF00F){
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <main+0x3c4>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	f47f af3f 	bne.w	8001b90 <main+0x230>
	  		  AGV_waiting();
 8001d12:	f7ff facf 	bl	80012b4 <AGV_waiting>
	  		  PID_Motor_All_Break();
 8001d16:	f7ff fabb 	bl	8001290 <PID_Motor_All_Break>
	  debug_led();
 8001d1a:	e739      	b.n	8001b90 <main+0x230>
 8001d1c:	24000692 	.word	0x24000692
 8001d20:	24000050 	.word	0x24000050
 8001d24:	2400005e 	.word	0x2400005e

08001d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b09c      	sub	sp, #112	@ 0x70
 8001d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d32:	224c      	movs	r2, #76	@ 0x4c
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00f f80c 	bl	8010d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2220      	movs	r2, #32
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00f f806 	bl	8010d54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f006 ff7f 	bl	8008c4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <SystemClock_Config+0xe0>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	4a2c      	ldr	r2, [pc, #176]	@ (8001e08 <SystemClock_Config+0xe0>)
 8001d58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d5c:	6193      	str	r3, [r2, #24]
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <SystemClock_Config+0xe0>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d6a:	bf00      	nop
 8001d6c:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <SystemClock_Config+0xe0>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d78:	d1f8      	bne.n	8001d6c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001d88:	2340      	movs	r3, #64	@ 0x40
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d90:	2302      	movs	r3, #2
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001d98:	232c      	movs	r3, #44	@ 0x2c
 8001d9a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001da0:	2303      	movs	r3, #3
 8001da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001da4:	2302      	movs	r3, #2
 8001da6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001da8:	230c      	movs	r3, #12
 8001daa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db8:	4618      	mov	r0, r3
 8001dba:	f006 ff81 	bl	8008cc0 <HAL_RCC_OscConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001dc4:	f000 fe16 	bl	80029f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc8:	233f      	movs	r3, #63	@ 0x3f
 8001dca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001dd8:	2340      	movs	r3, #64	@ 0x40
 8001dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ddc:	2340      	movs	r3, #64	@ 0x40
 8001dde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001de4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001de6:	2340      	movs	r3, #64	@ 0x40
 8001de8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2103      	movs	r1, #3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f007 fb40 	bl	8009474 <HAL_RCC_ClockConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001dfa:	f000 fdfb 	bl	80029f4 <Error_Handler>
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3770      	adds	r7, #112	@ 0x70
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	58024800 	.word	0x58024800

08001e0c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0ae      	sub	sp, #184	@ 0xb8
 8001e10:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e12:	463b      	mov	r3, r7
 8001e14:	22b8      	movs	r2, #184	@ 0xb8
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00e ff9b 	bl	8010d54 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8001e1e:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <PeriphCommonClock_Config+0x64>)
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001e3c:	23c0      	movs	r3, #192	@ 0xc0
 8001e3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001e44:	f640 3386 	movw	r3, #2950	@ 0xb86
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e54:	463b      	mov	r3, r7
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fe98 	bl	8009b8c <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001e62:	f000 fdc7 	bl	80029f4 <Error_Handler>
  }
}
 8001e66:	bf00      	nop
 8001e68:	37b8      	adds	r7, #184	@ 0xb8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	80080000 	.word	0x80080000

08001e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	@ 0x30
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2224      	movs	r2, #36	@ 0x24
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00e ff61 	bl	8010d54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e92:	4b75      	ldr	r3, [pc, #468]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001e94:	4a75      	ldr	r2, [pc, #468]	@ (800206c <MX_ADC1_Init+0x1f8>)
 8001e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e98:	4b73      	ldr	r3, [pc, #460]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e9e:	4b72      	ldr	r3, [pc, #456]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ea4:	4b70      	ldr	r3, [pc, #448]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ebe:	220a      	movs	r2, #10
 8001ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ec2:	4b69      	ldr	r3, [pc, #420]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eca:	4b67      	ldr	r3, [pc, #412]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed0:	4b65      	ldr	r3, [pc, #404]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001ed6:	4b64      	ldr	r3, [pc, #400]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ed8:	2203      	movs	r2, #3
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001edc:	4b62      	ldr	r3, [pc, #392]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ede:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ee4:	4b60      	ldr	r3, [pc, #384]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001eea:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ef8:	485b      	ldr	r0, [pc, #364]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001efa:	f001 ffad 	bl	8003e58 <HAL_ADC_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001f04:	f000 fd76 	bl	80029f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f10:	4619      	mov	r1, r3
 8001f12:	4855      	ldr	r0, [pc, #340]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001f14:	f003 fc7a 	bl	800580c <HAL_ADCEx_MultiModeConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001f1e:	f000 fd69 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f22:	4b53      	ldr	r3, [pc, #332]	@ (8002070 <MX_ADC1_Init+0x1fc>)
 8001f24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f26:	2306      	movs	r3, #6
 8001f28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f2e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001f32:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f34:	2304      	movs	r3, #4
 8001f36:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	4619      	mov	r1, r3
 8001f46:	4848      	ldr	r0, [pc, #288]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001f48:	f002 fccc 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001f52:	f000 fd4f 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f56:	4b47      	ldr	r3, [pc, #284]	@ (8002074 <MX_ADC1_Init+0x200>)
 8001f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4619      	mov	r1, r3
 8001f62:	4841      	ldr	r0, [pc, #260]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001f64:	f002 fcbe 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001f6e:	f000 fd41 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f72:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <MX_ADC1_Init+0x204>)
 8001f74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f76:	2312      	movs	r3, #18
 8001f78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	483a      	ldr	r0, [pc, #232]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001f80:	f002 fcb0 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001f8a:	f000 fd33 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <MX_ADC1_Init+0x208>)
 8001f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001f92:	2318      	movs	r3, #24
 8001f94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f96:	463b      	mov	r3, r7
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4833      	ldr	r0, [pc, #204]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001f9c:	f002 fca2 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001fa6:	f000 fd25 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001faa:	4b35      	ldr	r3, [pc, #212]	@ (8002080 <MX_ADC1_Init+0x20c>)
 8001fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	482b      	ldr	r0, [pc, #172]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001fba:	f002 fc93 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001fc4:	f000 fd16 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002084 <MX_ADC1_Init+0x210>)
 8001fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001fcc:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001fd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4824      	ldr	r0, [pc, #144]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001fd8:	f002 fc84 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8001fe2:	f000 fd07 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001fe6:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <MX_ADC1_Init+0x214>)
 8001fe8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001fea:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481c      	ldr	r0, [pc, #112]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8001ff6:	f002 fc75 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8002000:	f000 fcf8 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002004:	4b21      	ldr	r3, [pc, #132]	@ (800208c <MX_ADC1_Init+0x218>)
 8002006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002008:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800200c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	4619      	mov	r1, r3
 8002012:	4815      	ldr	r0, [pc, #84]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8002014:	f002 fc66 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800201e:	f000 fce9 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002022:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <MX_ADC1_Init+0x21c>)
 8002024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002026:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800202a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4619      	mov	r1, r3
 8002030:	480d      	ldr	r0, [pc, #52]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8002032:	f002 fc57 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 800203c:	f000 fcda 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_ADC1_Init+0x220>)
 8002042:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002048:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204a:	463b      	mov	r3, r7
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	@ (8002068 <MX_ADC1_Init+0x1f4>)
 8002050:	f002 fc48 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 800205a:	f000 fccb 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	@ 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	24000094 	.word	0x24000094
 800206c:	40022000 	.word	0x40022000
 8002070:	2e300800 	.word	0x2e300800
 8002074:	2a000400 	.word	0x2a000400
 8002078:	25b00200 	.word	0x25b00200
 800207c:	21800100 	.word	0x21800100
 8002080:	1d500080 	.word	0x1d500080
 8002084:	19200040 	.word	0x19200040
 8002088:	14f00020 	.word	0x14f00020
 800208c:	10c00010 	.word	0x10c00010
 8002090:	0c900008 	.word	0x0c900008
 8002094:	08600004 	.word	0x08600004

08002098 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2224      	movs	r2, #36	@ 0x24
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f00e fe55 	bl	8010d54 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80020aa:	4b73      	ldr	r3, [pc, #460]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020ac:	4a73      	ldr	r2, [pc, #460]	@ (800227c <MX_ADC3_Init+0x1e4>)
 80020ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020b0:	4b71      	ldr	r3, [pc, #452]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80020b6:	4b70      	ldr	r3, [pc, #448]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020b8:	2208      	movs	r2, #8
 80020ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80020bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020ca:	2204      	movs	r2, #4
 80020cc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80020ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80020d4:	4b68      	ldr	r3, [pc, #416]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 80020da:	4b67      	ldr	r3, [pc, #412]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020dc:	220a      	movs	r2, #10
 80020de:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80020e0:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020e8:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020ee:	4b62      	ldr	r3, [pc, #392]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80020f4:	4b60      	ldr	r3, [pc, #384]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80020fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002102:	4b5d      	ldr	r3, [pc, #372]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002104:	2203      	movs	r2, #3
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002108:	4b5b      	ldr	r3, [pc, #364]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 800210a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800210e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002110:	4b59      	ldr	r3, [pc, #356]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002116:	4b58      	ldr	r3, [pc, #352]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800211e:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002120:	2200      	movs	r2, #0
 8002122:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002124:	4854      	ldr	r0, [pc, #336]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002126:	f001 fe97 	bl	8003e58 <HAL_ADC_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8002130:	f000 fc60 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002134:	4b52      	ldr	r3, [pc, #328]	@ (8002280 <MX_ADC3_Init+0x1e8>)
 8002136:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002138:	2306      	movs	r3, #6
 800213a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 800213c:	2305      	movs	r3, #5
 800213e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002140:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002144:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002146:	2304      	movs	r3, #4
 8002148:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4848      	ldr	r0, [pc, #288]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002158:	f002 fbc4 	bl	80048e4 <HAL_ADC_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8002162:	f000 fc47 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002166:	4b47      	ldr	r3, [pc, #284]	@ (8002284 <MX_ADC3_Init+0x1ec>)
 8002168:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800216a:	230c      	movs	r3, #12
 800216c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4841      	ldr	r0, [pc, #260]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002174:	f002 fbb6 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800217e:	f000 fc39 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002182:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <MX_ADC3_Init+0x1f0>)
 8002184:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002186:	2312      	movs	r3, #18
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	483a      	ldr	r0, [pc, #232]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002190:	f002 fba8 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800219a:	f000 fc2b 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <MX_ADC3_Init+0x1f4>)
 80021a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80021a2:	2318      	movs	r3, #24
 80021a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4833      	ldr	r0, [pc, #204]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80021ac:	f002 fb9a 	bl	80048e4 <HAL_ADC_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 80021b6:	f000 fc1d 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80021ba:	4b35      	ldr	r3, [pc, #212]	@ (8002290 <MX_ADC3_Init+0x1f8>)
 80021bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80021be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	482b      	ldr	r0, [pc, #172]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80021ca:	f002 fb8b 	bl	80048e4 <HAL_ADC_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 80021d4:	f000 fc0e 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80021d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <MX_ADC3_Init+0x1fc>)
 80021da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80021dc:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80021e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4824      	ldr	r0, [pc, #144]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 80021e8:	f002 fb7c 	bl	80048e4 <HAL_ADC_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 80021f2:	f000 fbff 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021f6:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <MX_ADC3_Init+0x200>)
 80021f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80021fa:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80021fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	4619      	mov	r1, r3
 8002204:	481c      	ldr	r0, [pc, #112]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002206:	f002 fb6d 	bl	80048e4 <HAL_ADC_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 8002210:	f000 fbf0 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002214:	4b21      	ldr	r3, [pc, #132]	@ (800229c <MX_ADC3_Init+0x204>)
 8002216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002218:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800221c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4815      	ldr	r0, [pc, #84]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002224:	f002 fb5e 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 800222e:	f000 fbe1 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <MX_ADC3_Init+0x208>)
 8002234:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002236:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800223a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	480d      	ldr	r0, [pc, #52]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002242:	f002 fb4f 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 800224c:	f000 fbd2 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002250:	2301      	movs	r3, #1
 8002252:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	@ (8002278 <MX_ADC3_Init+0x1e0>)
 8002260:	f002 fb40 	bl	80048e4 <HAL_ADC_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 800226a:	f000 fbc3 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	@ 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	24000104 	.word	0x24000104
 800227c:	58026000 	.word	0x58026000
 8002280:	25b00200 	.word	0x25b00200
 8002284:	21800100 	.word	0x21800100
 8002288:	1d500080 	.word	0x1d500080
 800228c:	19200040 	.word	0x19200040
 8002290:	14f00020 	.word	0x14f00020
 8002294:	10c00010 	.word	0x10c00010
 8002298:	0c900008 	.word	0x0c900008
 800229c:	08600004 	.word	0x08600004
 80022a0:	04300002 	.word	0x04300002

080022a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022a8:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022aa:	4a28      	ldr	r2, [pc, #160]	@ (800234c <MX_SPI1_Init+0xa8>)
 80022ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ae:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022b6:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022bc:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022be:	2207      	movs	r2, #7
 80022c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c2:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022d8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80022dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e4:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80022f0:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <MX_SPI1_Init+0xa4>)
 80022f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <MX_SPI1_Init+0xa4>)
 8002300:	2200      	movs	r2, #0
 8002302:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002304:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <MX_SPI1_Init+0xa4>)
 8002306:	2200      	movs	r2, #0
 8002308:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800230a:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <MX_SPI1_Init+0xa4>)
 800230c:	2200      	movs	r2, #0
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002310:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <MX_SPI1_Init+0xa4>)
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <MX_SPI1_Init+0xa4>)
 8002318:	2200      	movs	r2, #0
 800231a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800231c:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <MX_SPI1_Init+0xa4>)
 800231e:	2200      	movs	r2, #0
 8002320:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <MX_SPI1_Init+0xa4>)
 8002324:	2200      	movs	r2, #0
 8002326:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <MX_SPI1_Init+0xa4>)
 800232a:	2200      	movs	r2, #0
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <MX_SPI1_Init+0xa4>)
 8002330:	2200      	movs	r2, #0
 8002332:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	@ (8002348 <MX_SPI1_Init+0xa4>)
 8002336:	f00a f80f 	bl	800c358 <HAL_SPI_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002340:	f000 fb58 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	24000264 	.word	0x24000264
 800234c:	40013000 	.word	0x40013000

08002350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	615a      	str	r2, [r3, #20]
 8002372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002374:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <MX_TIM2_Init+0xe4>)
 8002376:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800237a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1360;
 800237c:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <MX_TIM2_Init+0xe4>)
 800237e:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8002382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b2b      	ldr	r3, [pc, #172]	@ (8002434 <MX_TIM2_Init+0xe4>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800238a:	4b2a      	ldr	r3, [pc, #168]	@ (8002434 <MX_TIM2_Init+0xe4>)
 800238c:	2264      	movs	r2, #100	@ 0x64
 800238e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002390:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <MX_TIM2_Init+0xe4>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002396:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <MX_TIM2_Init+0xe4>)
 8002398:	2280      	movs	r2, #128	@ 0x80
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800239c:	4825      	ldr	r0, [pc, #148]	@ (8002434 <MX_TIM2_Init+0xe4>)
 800239e:	f00a ff33 	bl	800d208 <HAL_TIM_PWM_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80023a8:	f000 fb24 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	481e      	ldr	r0, [pc, #120]	@ (8002434 <MX_TIM2_Init+0xe4>)
 80023bc:	f00b fedc 	bl	800e178 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80023c6:	f000 fb15 	bl	80029f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ca:	2360      	movs	r3, #96	@ 0x60
 80023cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023da:	463b      	mov	r3, r7
 80023dc:	2200      	movs	r2, #0
 80023de:	4619      	mov	r1, r3
 80023e0:	4814      	ldr	r0, [pc, #80]	@ (8002434 <MX_TIM2_Init+0xe4>)
 80023e2:	f00b f86f 	bl	800d4c4 <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80023ec:	f000 fb02 	bl	80029f4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <MX_TIM2_Init+0xe4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <MX_TIM2_Init+0xe4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0208 	bic.w	r2, r2, #8
 80023fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	2204      	movs	r2, #4
 8002404:	4619      	mov	r1, r3
 8002406:	480b      	ldr	r0, [pc, #44]	@ (8002434 <MX_TIM2_Init+0xe4>)
 8002408:	f00b f85c 	bl	800d4c4 <HAL_TIM_PWM_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002412:	f000 faef 	bl	80029f4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8002416:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <MX_TIM2_Init+0xe4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <MX_TIM2_Init+0xe4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002424:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002426:	4803      	ldr	r0, [pc, #12]	@ (8002434 <MX_TIM2_Init+0xe4>)
 8002428:	f000 ff0e 	bl	8003248 <HAL_TIM_MspPostInit>

}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	@ 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	240002ec 	.word	0x240002ec

08002438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <MX_TIM3_Init+0x98>)
 8002458:	4a1e      	ldr	r2, [pc, #120]	@ (80024d4 <MX_TIM3_Init+0x9c>)
 800245a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 800245c:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <MX_TIM3_Init+0x98>)
 800245e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002462:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <MX_TIM3_Init+0x98>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 55000-1;
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <MX_TIM3_Init+0x98>)
 800246c:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8002470:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002472:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <MX_TIM3_Init+0x98>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002478:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <MX_TIM3_Init+0x98>)
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800247e:	4814      	ldr	r0, [pc, #80]	@ (80024d0 <MX_TIM3_Init+0x98>)
 8002480:	f00a fde5 	bl	800d04e <HAL_TIM_Base_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800248a:	f000 fab3 	bl	80029f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002492:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	4619      	mov	r1, r3
 800249a:	480d      	ldr	r0, [pc, #52]	@ (80024d0 <MX_TIM3_Init+0x98>)
 800249c:	f00b f926 	bl	800d6ec <HAL_TIM_ConfigClockSource>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80024a6:	f000 faa5 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4806      	ldr	r0, [pc, #24]	@ (80024d0 <MX_TIM3_Init+0x98>)
 80024b8:	f00b fe5e 	bl	800e178 <HAL_TIMEx_MasterConfigSynchronization>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80024c2:	f000 fa97 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	24000338 	.word	0x24000338
 80024d4:	40000400 	.word	0x40000400

080024d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <MX_TIM4_Init+0x98>)
 80024f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002574 <MX_TIM4_Init+0x9c>)
 80024fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <MX_TIM4_Init+0x98>)
 80024fe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002502:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <MX_TIM4_Init+0x98>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55000-1;
 800250a:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <MX_TIM4_Init+0x98>)
 800250c:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8002510:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <MX_TIM4_Init+0x98>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002518:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <MX_TIM4_Init+0x98>)
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800251e:	4814      	ldr	r0, [pc, #80]	@ (8002570 <MX_TIM4_Init+0x98>)
 8002520:	f00a fd95 	bl	800d04e <HAL_TIM_Base_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800252a:	f000 fa63 	bl	80029f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002532:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	4619      	mov	r1, r3
 800253a:	480d      	ldr	r0, [pc, #52]	@ (8002570 <MX_TIM4_Init+0x98>)
 800253c:	f00b f8d6 	bl	800d6ec <HAL_TIM_ConfigClockSource>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002546:	f000 fa55 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	@ (8002570 <MX_TIM4_Init+0x98>)
 8002558:	f00b fe0e 	bl	800e178 <HAL_TIMEx_MasterConfigSynchronization>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002562:	f000 fa47 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000384 	.word	0x24000384
 8002574:	40000800 	.word	0x40000800

08002578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800257c:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 800257e:	4a23      	ldr	r2, [pc, #140]	@ (800260c <MX_USART1_UART_Init+0x94>)
 8002580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002582:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002596:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ba:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025c0:	4811      	ldr	r0, [pc, #68]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025c2:	f00b fe93 	bl	800e2ec <HAL_UART_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80025cc:	f000 fa12 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d0:	2100      	movs	r1, #0
 80025d2:	480d      	ldr	r0, [pc, #52]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025d4:	f00e faa3 	bl	8010b1e <HAL_UARTEx_SetTxFifoThreshold>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025de:	f000 fa09 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e2:	2100      	movs	r1, #0
 80025e4:	4808      	ldr	r0, [pc, #32]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025e6:	f00e fad8 	bl	8010b9a <HAL_UARTEx_SetRxFifoThreshold>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025f0:	f000 fa00 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025f6:	f00e fa59 	bl	8010aac <HAL_UARTEx_DisableFifoMode>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002600:	f000 f9f8 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	240003d0 	.word	0x240003d0
 800260c:	40011000 	.word	0x40011000

08002610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <MX_USART3_UART_Init+0x94>)
 8002618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800261c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002634:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 8002636:	220c      	movs	r2, #12
 8002638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002646:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002652:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002658:	4811      	ldr	r0, [pc, #68]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800265a:	f00b fe47 	bl	800e2ec <HAL_UART_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002664:	f000 f9c6 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002668:	2100      	movs	r1, #0
 800266a:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800266c:	f00e fa57 	bl	8010b1e <HAL_UARTEx_SetTxFifoThreshold>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002676:	f000 f9bd 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800267a:	2100      	movs	r1, #0
 800267c:	4808      	ldr	r0, [pc, #32]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800267e:	f00e fa8c 	bl	8010b9a <HAL_UARTEx_SetRxFifoThreshold>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002688:	f000 f9b4 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800268c:	4804      	ldr	r0, [pc, #16]	@ (80026a0 <MX_USART3_UART_Init+0x90>)
 800268e:	f00e fa0d 	bl	8010aac <HAL_UARTEx_DisableFifoMode>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002698:	f000 f9ac 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	24000464 	.word	0x24000464
 80026a4:	40004800 	.word	0x40004800

080026a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <MX_DMA_Init+0x4c>)
 80026b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80026b4:	4a0f      	ldr	r2, [pc, #60]	@ (80026f4 <MX_DMA_Init+0x4c>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <MX_DMA_Init+0x4c>)
 80026c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	200b      	movs	r0, #11
 80026d2:	f003 fa58 	bl	8005b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026d6:	200b      	movs	r0, #11
 80026d8:	f003 fa6f 	bl	8005bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	200c      	movs	r0, #12
 80026e2:	f003 fa50 	bl	8005b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026e6:	200c      	movs	r0, #12
 80026e8:	f003 fa67 	bl	8005bba <HAL_NVIC_EnableIRQ>

}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	58024400 	.word	0x58024400

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	@ 0x38
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270e:	4bb2      	ldr	r3, [pc, #712]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002714:	4ab0      	ldr	r2, [pc, #704]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002716:	f043 0310 	orr.w	r3, r3, #16
 800271a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800271e:	4bae      	ldr	r3, [pc, #696]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272c:	4baa      	ldr	r3, [pc, #680]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 800272e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002732:	4aa9      	ldr	r2, [pc, #676]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800273c:	4ba6      	ldr	r3, [pc, #664]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800274a:	4ba3      	ldr	r3, [pc, #652]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 800274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002750:	4aa1      	ldr	r2, [pc, #644]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002752:	f043 0320 	orr.w	r3, r3, #32
 8002756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800275a:	4b9f      	ldr	r3, [pc, #636]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002768:	4b9b      	ldr	r3, [pc, #620]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 800276a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800276e:	4a9a      	ldr	r2, [pc, #616]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002778:	4b97      	ldr	r3, [pc, #604]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 800277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b94      	ldr	r3, [pc, #592]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278c:	4a92      	ldr	r2, [pc, #584]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002796:	4b90      	ldr	r3, [pc, #576]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 8002798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a4:	4b8c      	ldr	r3, [pc, #560]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027aa:	4a8b      	ldr	r2, [pc, #556]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027b4:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	4b85      	ldr	r3, [pc, #532]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c8:	4a83      	ldr	r2, [pc, #524]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027d2:	4b81      	ldr	r3, [pc, #516]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e0:	4b7d      	ldr	r3, [pc, #500]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e6:	4a7c      	ldr	r2, [pc, #496]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f0:	4b79      	ldr	r3, [pc, #484]	@ (80029d8 <MX_GPIO_Init+0x2e0>)
 80027f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80027fe:	2200      	movs	r2, #0
 8002800:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002804:	4875      	ldr	r0, [pc, #468]	@ (80029dc <MX_GPIO_Init+0x2e4>)
 8002806:	f006 f9d3 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	213c      	movs	r1, #60	@ 0x3c
 800280e:	4874      	ldr	r0, [pc, #464]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002810:	f006 f9ce 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|RS485_M2_TX_EN_Pin, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 800281a:	4872      	ldr	r0, [pc, #456]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 800281c:	f006 f9c8 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_M2_RX_LED_Pin|RS485_M1_TX_EN_Pin, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002826:	4870      	ldr	r0, [pc, #448]	@ (80029e8 <MX_GPIO_Init+0x2f0>)
 8002828:	f006 f9c2 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS485_M1_RX_LED_Pin|TURN_LED_RED_Pin|TURN_LED_GREEN_Pin|ORIENTATION_LED_RED_Pin
 800282c:	2200      	movs	r2, #0
 800282e:	f44f 415f 	mov.w	r1, #57088	@ 0xdf00
 8002832:	486e      	ldr	r0, [pc, #440]	@ (80029ec <MX_GPIO_Init+0x2f4>)
 8002834:	f006 f9bc 	bl	8008bb0 <HAL_GPIO_WritePin>
                          |ORIENTATION_LED_GREEN_Pin|ONTASK_LED_RED_Pin|ONTASK_LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8002838:	2200      	movs	r2, #0
 800283a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800283e:	486c      	ldr	r0, [pc, #432]	@ (80029f0 <MX_GPIO_Init+0x2f8>)
 8002840:	f006 f9b6 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8002844:	2201      	movs	r2, #1
 8002846:	2140      	movs	r1, #64	@ 0x40
 8002848:	4868      	ldr	r0, [pc, #416]	@ (80029ec <MX_GPIO_Init+0x2f4>)
 800284a:	f006 f9b1 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 800284e:	2201      	movs	r2, #1
 8002850:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002854:	4866      	ldr	r0, [pc, #408]	@ (80029f0 <MX_GPIO_Init+0x2f8>)
 8002856:	f006 f9ab 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 800285a:	231f      	movs	r3, #31
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800285e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286c:	4619      	mov	r1, r3
 800286e:	485d      	ldr	r0, [pc, #372]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 8002870:	f005 fff6 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288a:	4619      	mov	r1, r3
 800288c:	4853      	ldr	r0, [pc, #332]	@ (80029dc <MX_GPIO_Init+0x2e4>)
 800288e:	f005 ffe7 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8002892:	233c      	movs	r3, #60	@ 0x3c
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	484d      	ldr	r0, [pc, #308]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80028aa:	f005 ffd9 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80028ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028b8:	2302      	movs	r3, #2
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028bc:	2302      	movs	r3, #2
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	4847      	ldr	r0, [pc, #284]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 80028c8:	f005 ffca 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M2_TX_EN_Pin;
 80028cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	2301      	movs	r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028da:	2302      	movs	r3, #2
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_TX_EN_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	483f      	ldr	r0, [pc, #252]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 80028e6:	f005 ffbb 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M2_RX_LED_Pin;
 80028ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f0:	2301      	movs	r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_RX_LED_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002900:	4619      	mov	r1, r3
 8002902:	4839      	ldr	r0, [pc, #228]	@ (80029e8 <MX_GPIO_Init+0x2f0>)
 8002904:	f005 ffac 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M1_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M1_TX_EN_Pin;
 8002908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002916:	2302      	movs	r3, #2
 8002918:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M1_TX_EN_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291e:	4619      	mov	r1, r3
 8002920:	4831      	ldr	r0, [pc, #196]	@ (80029e8 <MX_GPIO_Init+0x2f0>)
 8002922:	f005 ff9d 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_M1_RX_LED_Pin TURN_LED_RED_Pin TURN_LED_GREEN_Pin ORIENTATION_LED_RED_Pin
                           ORIENTATION_LED_GREEN_Pin ONTASK_LED_RED_Pin ONTASK_LED_GREEN_Pin LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M1_RX_LED_Pin|TURN_LED_RED_Pin|TURN_LED_GREEN_Pin|ORIENTATION_LED_RED_Pin
 8002926:	f64d 7340 	movw	r3, #57152	@ 0xdf40
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ORIENTATION_LED_GREEN_Pin|ONTASK_LED_RED_Pin|ONTASK_LED_GREEN_Pin|LORA_RX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292c:	2301      	movs	r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800293c:	4619      	mov	r1, r3
 800293e:	482b      	ldr	r0, [pc, #172]	@ (80029ec <MX_GPIO_Init+0x2f4>)
 8002940:	f005 ff8e 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8002944:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295a:	4619      	mov	r1, r3
 800295c:	4824      	ldr	r0, [pc, #144]	@ (80029f0 <MX_GPIO_Init+0x2f8>)
 800295e:	f005 ff7f 	bl	8008860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8002962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002968:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800296c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002976:	4619      	mov	r1, r3
 8002978:	481d      	ldr	r0, [pc, #116]	@ (80029f0 <MX_GPIO_Init+0x2f8>)
 800297a:	f005 ff71 	bl	8008860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	2006      	movs	r0, #6
 8002984:	f003 f8ff 	bl	8005b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002988:	2006      	movs	r0, #6
 800298a:	f003 f916 	bl	8005bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2007      	movs	r0, #7
 8002994:	f003 f8f7 	bl	8005b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002998:	2007      	movs	r0, #7
 800299a:	f003 f90e 	bl	8005bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2008      	movs	r0, #8
 80029a4:	f003 f8ef 	bl	8005b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029a8:	2008      	movs	r0, #8
 80029aa:	f003 f906 	bl	8005bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2009      	movs	r0, #9
 80029b4:	f003 f8e7 	bl	8005b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80029b8:	2009      	movs	r0, #9
 80029ba:	f003 f8fe 	bl	8005bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	2028      	movs	r0, #40	@ 0x28
 80029c4:	f003 f8df 	bl	8005b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029c8:	2028      	movs	r0, #40	@ 0x28
 80029ca:	f003 f8f6 	bl	8005bba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029ce:	bf00      	nop
 80029d0:	3738      	adds	r7, #56	@ 0x38
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58020800 	.word	0x58020800
 80029e0:	58020000 	.word	0x58020000
 80029e4:	58021000 	.word	0x58021000
 80029e8:	58020400 	.word	0x58020400
 80029ec:	58020c00 	.word	0x58020c00
 80029f0:	58021800 	.word	0x58021800

080029f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f8:	b672      	cpsid	i
}
 80029fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <Error_Handler+0x8>

08002a00 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8002a0c:	23ff      	movs	r3, #255	@ 0xff
 8002a0e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8002a10:	23ff      	movs	r3, #255	@ 0xff
 8002a12:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8002a14:	e013      	b.n	8002a3e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	4053      	eors	r3, r2
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8002a26:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <crc16+0x64>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	4053      	eors	r3, r2
 8002a32:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8002a34:	4a0c      	ldr	r2, [pc, #48]	@ (8002a68 <crc16+0x68>)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4413      	add	r3, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	807a      	strh	r2, [r7, #2]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e6      	bne.n	8002a16 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	b21b      	sxth	r3, r3
 8002a56:	b29b      	uxth	r3, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	08010e38 	.word	0x08010e38
 8002a68:	08010f38 	.word	0x08010f38

08002a6c <rs485_init>:
 */


#include "rs485_driver.h"

void rs485_init(rs485_driver *driver){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(driver->rs485_timer);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f00a fb3f 	bl	800d0fc <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6958      	ldr	r0, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	331c      	adds	r3, #28
 8002a86:	2210      	movs	r2, #16
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f00e f8c4 	bl	8010c16 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <rs485_send_data>:

void rs485_send_data(rs485_driver *driver, uint8_t *data){
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
	if(driver->rs485_isbusy == 0){
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11b      	bne.n	8002ae4 <rs485_send_data+0x4e>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6858      	ldr	r0, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	891b      	ldrh	r3, [r3, #8]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f006 f87a 	bl	8008bb0 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(driver->rs485_huart, data, 8, 500);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6958      	ldr	r0, [r3, #20]
 8002ac0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	f00b fc60 	bl	800e38c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6858      	ldr	r0, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	891b      	ldrh	r3, [r3, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f006 f86a 	bl	8008bb0 <HAL_GPIO_WritePin>
		driver->rs485_isbusy = 255;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	22ff      	movs	r2, #255	@ 0xff
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	driver->rs485_last_connectivity = driver->rs485_connectivity;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	HAL_GPIO_WritePin(driver->rs485_rx_led_port, driver->rs485_rx_led_pin, GPIO_PIN_RESET);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68d8      	ldr	r0, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8a1b      	ldrh	r3, [r3, #16]
 8002afa:	2200      	movs	r2, #0
 8002afc:	4619      	mov	r1, r3
 8002afe:	f006 f857 	bl	8008bb0 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6958      	ldr	r0, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	331c      	adds	r3, #28
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f00e f882 	bl	8010c16 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <rs485_set_speed>:

void rs485_set_speed(rs485_driver *driver, uint16_t speed, uint8_t dir){
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	807b      	strh	r3, [r7, #2]
 8002b26:	4613      	mov	r3, r2
 8002b28:	707b      	strb	r3, [r7, #1]
	driver->rs485_TxData[0] = driver->rs485_id;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	driver->rs485_TxData[1] = 0x06;  // Function code
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2206      	movs	r2, #6
 8002b38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//address 203A -> Target Speed
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	driver->rs485_TxData[3] = 0x3A;  // Low  8 bit register address
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	223a      	movs	r2, #58	@ 0x3a
 8002b48:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	// Set Speed and Direction
	if(dir == 0){
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <rs485_set_speed+0x50>
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8002b60:	887b      	ldrh	r3, [r7, #2]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
	if(dir == 1){
 8002b6a:	787b      	ldrb	r3, [r7, #1]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10e      	bne.n	8002b8e <rs485_set_speed+0x74>
		speed = (~speed) + 1;
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	425b      	negs	r3, r3
 8002b74:	807b      	strh	r3, [r7, #2]
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	}
	uint16_t crc = crc16(driver->rs485_TxData, 6);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	332c      	adds	r3, #44	@ 0x2c
 8002b92:	2106      	movs	r1, #6
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff33 	bl	8002a00 <crc16>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8002b9e:	89fb      	ldrh	r3, [r7, #14]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8002ba8:	89fb      	ldrh	r3, [r7, #14]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	rs485_send_data(driver, driver->rs485_TxData);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	332c      	adds	r3, #44	@ 0x2c
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff6a 	bl	8002a96 <rs485_send_data>

}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <rs485_enable_velocity_mode>:

void rs485_enable_velocity_mode(rs485_driver *driver){
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]

	driver->rs485_TxData[0] = driver->rs485_id;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	driver->rs485_TxData[1] = 0x06;  // Function code
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2206      	movs	r2, #6
 8002be0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//address 2032 -> Operating Mode
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	driver->rs485_TxData[3] = 0x32;  // Low  8 bit register address
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2232      	movs	r2, #50	@ 0x32
 8002bf0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	//data 0x03 -> Set Velocity Mode
	driver->rs485_TxData[4] = 0x00;  // High 8 bit register data
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->rs485_TxData[5] = 0x03;  // Low  8 bit register data
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	uint16_t crc = crc16(driver->rs485_TxData, 6);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	332c      	adds	r3, #44	@ 0x2c
 8002c08:	2106      	movs	r1, #6
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fef8 	bl	8002a00 <crc16>
 8002c10:	4603      	mov	r3, r0
 8002c12:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	rs485_send_data(driver, driver->rs485_TxData);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	332c      	adds	r3, #44	@ 0x2c
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff2f 	bl	8002a96 <rs485_send_data>


	driver->rs485_TxData[0] = driver->rs485_id;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	driver->rs485_TxData[1] = 0x06;  // Function code
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2206      	movs	r2, #6
 8002c46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	//address 2031 -> Control Word
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	driver->rs485_TxData[3] = 0x31;  // Low  8 bit register address
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2231      	movs	r2, #49	@ 0x31
 8002c56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	//data 0x08 -> Enable Motor
	driver->rs485_TxData[4] = 0x00;  // High 8 bit register data
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->rs485_TxData[5] = 0x08;  // Low  8 bit register data
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2208      	movs	r2, #8
 8002c66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	crc = crc16(driver->rs485_TxData, 6);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	332c      	adds	r3, #44	@ 0x2c
 8002c6e:	2106      	movs	r1, #6
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fec5 	bl	8002a00 <crc16>
 8002c76:	4603      	mov	r3, r0
 8002c78:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8002c84:	89fb      	ldrh	r3, [r7, #14]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	rs485_send_data(driver, driver->rs485_TxData);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	332c      	adds	r3, #44	@ 0x2c
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fefc 	bl	8002a96 <rs485_send_data>
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <rs485_UART_receive_handler>:

void rs485_UART_receive_handler(rs485_driver *driver){
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
	driver->rs485_isbusy = 0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	driver->rs485_timer->Instance->CNT = 0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->rs485_connectivity = 255;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	22ff      	movs	r2, #255	@ 0xff
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_rx_led_port, driver->rs485_rx_led_pin, GPIO_PIN_SET);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68d8      	ldr	r0, [r3, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8a1b      	ldrh	r3, [r3, #16]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f005 ff6c 	bl	8008bb0 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6958      	ldr	r0, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	331c      	adds	r3, #28
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f00d ff97 	bl	8010c16 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <rs485_connection_lost_handler>:

void rs485_connection_lost_handler(rs485_driver *driver){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	driver->rs485_connectivity= 0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6858      	ldr	r0, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	891b      	ldrh	r3, [r3, #8]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f005 ff50 	bl	8008bb0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(driver->rs485_huart, driver->rs485_TxData, 8, 500);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6958      	ldr	r0, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002d1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d1e:	2208      	movs	r2, #8
 8002d20:	f00b fb34 	bl	800e38c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6858      	ldr	r0, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	891b      	ldrh	r3, [r3, #8]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f005 ff3e 	bl	8008bb0 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6958      	ldr	r0, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	331c      	adds	r3, #28
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f00d ff69 	bl	8010c16 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <HAL_MspInit+0x30>)
 8002d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d58:	4a08      	ldr	r2, [pc, #32]	@ (8002d7c <HAL_MspInit+0x30>)
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d62:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_MspInit+0x30>)
 8002d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	58024400 	.word	0x58024400

08002d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b090      	sub	sp, #64	@ 0x40
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4aa0      	ldr	r2, [pc, #640]	@ (8003020 <HAL_ADC_MspInit+0x2a0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	f040 80b6 	bne.w	8002f10 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002da4:	4b9f      	ldr	r3, [pc, #636]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002daa:	4a9e      	ldr	r2, [pc, #632]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002dac:	f043 0320 	orr.w	r3, r3, #32
 8002db0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002db4:	4b9b      	ldr	r3, [pc, #620]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc2:	4b98      	ldr	r3, [pc, #608]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc8:	4a96      	ldr	r2, [pc, #600]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002dca:	f043 0304 	orr.w	r3, r3, #4
 8002dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd2:	4b94      	ldr	r3, [pc, #592]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de0:	4b90      	ldr	r3, [pc, #576]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de6:	4a8f      	ldr	r2, [pc, #572]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df0:	4b8c      	ldr	r3, [pc, #560]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4b89      	ldr	r3, [pc, #548]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e04:	4a87      	ldr	r2, [pc, #540]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e0e:	4b85      	ldr	r3, [pc, #532]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1c:	4b81      	ldr	r3, [pc, #516]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e22:	4a80      	ldr	r2, [pc, #512]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002e24:	f043 0320 	orr.w	r3, r3, #32
 8002e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2c:	4b7d      	ldr	r3, [pc, #500]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002e3a:	2333      	movs	r3, #51	@ 0x33
 8002e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4876      	ldr	r0, [pc, #472]	@ (8003028 <HAL_ADC_MspInit+0x2a8>)
 8002e4e:	f005 fd07 	bl	8008860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e52:	23c0      	movs	r3, #192	@ 0xc0
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e56:	2303      	movs	r3, #3
 8002e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e62:	4619      	mov	r1, r3
 8002e64:	4871      	ldr	r0, [pc, #452]	@ (800302c <HAL_ADC_MspInit+0x2ac>)
 8002e66:	f005 fcfb 	bl	8008860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	486c      	ldr	r0, [pc, #432]	@ (8003030 <HAL_ADC_MspInit+0x2b0>)
 8002e7e:	f005 fcef 	bl	8008860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	4867      	ldr	r0, [pc, #412]	@ (8003034 <HAL_ADC_MspInit+0x2b4>)
 8002e98:	f005 fce2 	bl	8008860 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002e9c:	4b66      	ldr	r3, [pc, #408]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002e9e:	4a67      	ldr	r2, [pc, #412]	@ (800303c <HAL_ADC_MspInit+0x2bc>)
 8002ea0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ea2:	4b65      	ldr	r3, [pc, #404]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ea4:	2209      	movs	r2, #9
 8002ea6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea8:	4b63      	ldr	r3, [pc, #396]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eae:	4b62      	ldr	r3, [pc, #392]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eb4:	4b60      	ldr	r3, [pc, #384]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ec2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ec4:	4b5c      	ldr	r3, [pc, #368]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ec6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ed2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002ed4:	4b58      	ldr	r3, [pc, #352]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ed6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002edc:	4b56      	ldr	r3, [pc, #344]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ee2:	4855      	ldr	r0, [pc, #340]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ee4:	f002 fe84 	bl	8005bf0 <HAL_DMA_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 8002eee:	f7ff fd81 	bl	80029f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002ef6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8003038 <HAL_ADC_MspInit+0x2b8>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	2012      	movs	r0, #18
 8002f04:	f002 fe3f 	bl	8005b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f08:	2012      	movs	r0, #18
 8002f0a:	f002 fe56 	bl	8005bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f0e:	e083      	b.n	8003018 <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a4a      	ldr	r2, [pc, #296]	@ (8003040 <HAL_ADC_MspInit+0x2c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d17e      	bne.n	8003018 <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f1a:	4b42      	ldr	r3, [pc, #264]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f20:	4a40      	ldr	r2, [pc, #256]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f38:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f3e:	4a39      	ldr	r2, [pc, #228]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f40:	f043 0320 	orr.w	r3, r3, #32
 8002f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f48:	4b36      	ldr	r3, [pc, #216]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f56:	4b33      	ldr	r3, [pc, #204]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f5c:	4a31      	ldr	r2, [pc, #196]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f66:	4b2f      	ldr	r3, [pc, #188]	@ (8003024 <HAL_ADC_MspInit+0x2a4>)
 8002f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002f74:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f86:	4619      	mov	r1, r3
 8002f88:	482a      	ldr	r0, [pc, #168]	@ (8003034 <HAL_ADC_MspInit+0x2b4>)
 8002f8a:	f005 fc69 	bl	8008860 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002f8e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002f92:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002f96:	f000 fc5d 	bl	8003854 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002f9a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002f9e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002fa2:	f000 fc57 	bl	8003854 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002fa6:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fa8:	4a27      	ldr	r2, [pc, #156]	@ (8003048 <HAL_ADC_MspInit+0x2c8>)
 8002faa:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002fac:	4b25      	ldr	r3, [pc, #148]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fae:	2273      	movs	r2, #115	@ 0x73
 8002fb0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb8:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fc4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fcc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fce:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fd4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fdc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fe0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fe4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002fec:	4815      	ldr	r0, [pc, #84]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8002fee:	f002 fdff 	bl	8005bf0 <HAL_DMA_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8002ff8:	f7ff fcfc 	bl	80029f4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a11      	ldr	r2, [pc, #68]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8003000:	659a      	str	r2, [r3, #88]	@ 0x58
 8003002:	4a10      	ldr	r2, [pc, #64]	@ (8003044 <HAL_ADC_MspInit+0x2c4>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	207f      	movs	r0, #127	@ 0x7f
 800300e:	f002 fdba 	bl	8005b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003012:	207f      	movs	r0, #127	@ 0x7f
 8003014:	f002 fdd1 	bl	8005bba <HAL_NVIC_EnableIRQ>
}
 8003018:	bf00      	nop
 800301a:	3740      	adds	r7, #64	@ 0x40
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40022000 	.word	0x40022000
 8003024:	58024400 	.word	0x58024400
 8003028:	58020800 	.word	0x58020800
 800302c:	58020000 	.word	0x58020000
 8003030:	58020400 	.word	0x58020400
 8003034:	58021400 	.word	0x58021400
 8003038:	24000174 	.word	0x24000174
 800303c:	40020010 	.word	0x40020010
 8003040:	58026000 	.word	0x58026000
 8003044:	240001ec 	.word	0x240001ec
 8003048:	40020028 	.word	0x40020028

0800304c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b0ba      	sub	sp, #232	@ 0xe8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003064:	f107 0318 	add.w	r3, r7, #24
 8003068:	22b8      	movs	r2, #184	@ 0xb8
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f00d fe71 	bl	8010d54 <memset>
  if(hspi->Instance==SPI1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a39      	ldr	r2, [pc, #228]	@ (800315c <HAL_SPI_MspInit+0x110>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d16a      	bne.n	8003152 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800307c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003088:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800308c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308e:	f107 0318 	add.w	r3, r7, #24
 8003092:	4618      	mov	r0, r3
 8003094:	f006 fd7a 	bl	8009b8c <HAL_RCCEx_PeriphCLKConfig>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800309e:	f7ff fca9 	bl	80029f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c0:	4b27      	ldr	r3, [pc, #156]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030c6:	4a26      	ldr	r2, [pc, #152]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030d0:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030de:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003160 <HAL_SPI_MspInit+0x114>)
 80030f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003114:	2305      	movs	r3, #5
 8003116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800311a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800311e:	4619      	mov	r1, r3
 8003120:	4810      	ldr	r0, [pc, #64]	@ (8003164 <HAL_SPI_MspInit+0x118>)
 8003122:	f005 fb9d 	bl	8008860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003126:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800312a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003140:	2305      	movs	r3, #5
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003146:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800314a:	4619      	mov	r1, r3
 800314c:	4806      	ldr	r0, [pc, #24]	@ (8003168 <HAL_SPI_MspInit+0x11c>)
 800314e:	f005 fb87 	bl	8008860 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003152:	bf00      	nop
 8003154:	37e8      	adds	r7, #232	@ 0xe8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40013000 	.word	0x40013000
 8003160:	58024400 	.word	0x58024400
 8003164:	58020c00 	.word	0x58020c00
 8003168:	58021800 	.word	0x58021800

0800316c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317c:	d116      	bne.n	80031ac <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <HAL_TIM_PWM_MspInit+0x48>)
 8003180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003184:	4a0b      	ldr	r2, [pc, #44]	@ (80031b4 <HAL_TIM_PWM_MspInit+0x48>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800318e:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <HAL_TIM_PWM_MspInit+0x48>)
 8003190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	201c      	movs	r0, #28
 80031a2:	f002 fcf0 	bl	8005b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031a6:	201c      	movs	r0, #28
 80031a8:	f002 fd07 	bl	8005bba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58024400 	.word	0x58024400

080031b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <HAL_TIM_Base_MspInit+0x84>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d117      	bne.n	80031fa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <HAL_TIM_Base_MspInit+0x88>)
 80031cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003240 <HAL_TIM_Base_MspInit+0x88>)
 80031d2:	f043 0302 	orr.w	r3, r3, #2
 80031d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_TIM_Base_MspInit+0x88>)
 80031dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	2100      	movs	r1, #0
 80031ec:	201d      	movs	r0, #29
 80031ee:	f002 fcca 	bl	8005b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031f2:	201d      	movs	r0, #29
 80031f4:	f002 fce1 	bl	8005bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031f8:	e01b      	b.n	8003232 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a11      	ldr	r2, [pc, #68]	@ (8003244 <HAL_TIM_Base_MspInit+0x8c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d116      	bne.n	8003232 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003204:	4b0e      	ldr	r3, [pc, #56]	@ (8003240 <HAL_TIM_Base_MspInit+0x88>)
 8003206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800320a:	4a0d      	ldr	r2, [pc, #52]	@ (8003240 <HAL_TIM_Base_MspInit+0x88>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_TIM_Base_MspInit+0x88>)
 8003216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2100      	movs	r1, #0
 8003226:	201e      	movs	r0, #30
 8003228:	f002 fcad 	bl	8005b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800322c:	201e      	movs	r0, #30
 800322e:	f002 fcc4 	bl	8005bba <HAL_NVIC_EnableIRQ>
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40000400 	.word	0x40000400
 8003240:	58024400 	.word	0x58024400
 8003244:	40000800 	.word	0x40000800

08003248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003268:	d11e      	bne.n	80032a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_TIM_MspPostInit+0x68>)
 800326c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003270:	4a0f      	ldr	r2, [pc, #60]	@ (80032b0 <HAL_TIM_MspPostInit+0x68>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <HAL_TIM_MspPostInit+0x68>)
 800327c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003288:	2303      	movs	r3, #3
 800328a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003298:	2301      	movs	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	4619      	mov	r1, r3
 80032a2:	4804      	ldr	r0, [pc, #16]	@ (80032b4 <HAL_TIM_MspPostInit+0x6c>)
 80032a4:	f005 fadc 	bl	8008860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80032a8:	bf00      	nop
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	58024400 	.word	0x58024400
 80032b4:	58020000 	.word	0x58020000

080032b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b0ba      	sub	sp, #232	@ 0xe8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032d0:	f107 0318 	add.w	r3, r7, #24
 80032d4:	22b8      	movs	r2, #184	@ 0xb8
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f00d fd3b 	bl	8010d54 <memset>
  if(huart->Instance==USART1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a55      	ldr	r2, [pc, #340]	@ (8003438 <HAL_UART_MspInit+0x180>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d14f      	bne.n	8003388 <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032e8:	f04f 0201 	mov.w	r2, #1
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032fa:	f107 0318 	add.w	r3, r7, #24
 80032fe:	4618      	mov	r0, r3
 8003300:	f006 fc44 	bl	8009b8c <HAL_RCCEx_PeriphCLKConfig>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800330a:	f7ff fb73 	bl	80029f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800330e:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <HAL_UART_MspInit+0x184>)
 8003310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003314:	4a49      	ldr	r2, [pc, #292]	@ (800343c <HAL_UART_MspInit+0x184>)
 8003316:	f043 0310 	orr.w	r3, r3, #16
 800331a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_UART_MspInit+0x184>)
 8003320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332c:	4b43      	ldr	r3, [pc, #268]	@ (800343c <HAL_UART_MspInit+0x184>)
 800332e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003332:	4a42      	ldr	r2, [pc, #264]	@ (800343c <HAL_UART_MspInit+0x184>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800333c:	4b3f      	ldr	r3, [pc, #252]	@ (800343c <HAL_UART_MspInit+0x184>)
 800333e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800334a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800334e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335e:	2303      	movs	r3, #3
 8003360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003364:	2304      	movs	r3, #4
 8003366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800336e:	4619      	mov	r1, r3
 8003370:	4833      	ldr	r0, [pc, #204]	@ (8003440 <HAL_UART_MspInit+0x188>)
 8003372:	f005 fa75 	bl	8008860 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2100      	movs	r1, #0
 800337a:	2025      	movs	r0, #37	@ 0x25
 800337c:	f002 fc03 	bl	8005b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003380:	2025      	movs	r0, #37	@ 0x25
 8003382:	f002 fc1a 	bl	8005bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003386:	e053      	b.n	8003430 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2d      	ldr	r2, [pc, #180]	@ (8003444 <HAL_UART_MspInit+0x18c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d14e      	bne.n	8003430 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003392:	f04f 0202 	mov.w	r2, #2
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033a4:	f107 0318 	add.w	r3, r7, #24
 80033a8:	4618      	mov	r0, r3
 80033aa:	f006 fbef 	bl	8009b8c <HAL_RCCEx_PeriphCLKConfig>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_UART_MspInit+0x100>
      Error_Handler();
 80033b4:	f7ff fb1e 	bl	80029f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033b8:	4b20      	ldr	r3, [pc, #128]	@ (800343c <HAL_UART_MspInit+0x184>)
 80033ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033be:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <HAL_UART_MspInit+0x184>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033c8:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <HAL_UART_MspInit+0x184>)
 80033ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_UART_MspInit+0x184>)
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033dc:	4a17      	ldr	r2, [pc, #92]	@ (800343c <HAL_UART_MspInit+0x184>)
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <HAL_UART_MspInit+0x184>)
 80033e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800340e:	2307      	movs	r3, #7
 8003410:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003414:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003418:	4619      	mov	r1, r3
 800341a:	4809      	ldr	r0, [pc, #36]	@ (8003440 <HAL_UART_MspInit+0x188>)
 800341c:	f005 fa20 	bl	8008860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003420:	2200      	movs	r2, #0
 8003422:	2100      	movs	r1, #0
 8003424:	2027      	movs	r0, #39	@ 0x27
 8003426:	f002 fbae 	bl	8005b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800342a:	2027      	movs	r0, #39	@ 0x27
 800342c:	f002 fbc5 	bl	8005bba <HAL_NVIC_EnableIRQ>
}
 8003430:	bf00      	nop
 8003432:	37e8      	adds	r7, #232	@ 0xe8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40011000 	.word	0x40011000
 800343c:	58024400 	.word	0x58024400
 8003440:	58020400 	.word	0x58020400
 8003444:	40004800 	.word	0x40004800

08003448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <NMI_Handler+0x4>

08003450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <HardFault_Handler+0x4>

08003458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <MemManage_Handler+0x4>

08003460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <BusFault_Handler+0x4>

08003468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <UsageFault_Handler+0x4>

08003470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800349e:	f000 f995 	bl	80037cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f005 fbb3 	bl	8008c16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80034b8:	2002      	movs	r0, #2
 80034ba:	f005 fbac 	bl	8008c16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80034c6:	2004      	movs	r0, #4
 80034c8:	f005 fba5 	bl	8008c16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80034d4:	2008      	movs	r0, #8
 80034d6:	f005 fb9e 	bl	8008c16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034e4:	4802      	ldr	r0, [pc, #8]	@ (80034f0 <DMA1_Stream0_IRQHandler+0x10>)
 80034e6:	f003 fea9 	bl	800723c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	24000174 	.word	0x24000174

080034f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80034f8:	4802      	ldr	r0, [pc, #8]	@ (8003504 <DMA1_Stream1_IRQHandler+0x10>)
 80034fa:	f003 fe9f 	bl	800723c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	240001ec 	.word	0x240001ec

08003508 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800350c:	4802      	ldr	r0, [pc, #8]	@ (8003518 <ADC_IRQHandler+0x10>)
 800350e:	f000 ff87 	bl	8004420 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	24000094 	.word	0x24000094

0800351c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003520:	4802      	ldr	r0, [pc, #8]	@ (800352c <TIM2_IRQHandler+0x10>)
 8003522:	f009 fec8 	bl	800d2b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	240002ec 	.word	0x240002ec

08003530 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003534:	4802      	ldr	r0, [pc, #8]	@ (8003540 <TIM3_IRQHandler+0x10>)
 8003536:	f009 febe 	bl	800d2b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	24000338 	.word	0x24000338

08003544 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003548:	4802      	ldr	r0, [pc, #8]	@ (8003554 <TIM4_IRQHandler+0x10>)
 800354a:	f009 feb4 	bl	800d2b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	24000384 	.word	0x24000384

08003558 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800355c:	4802      	ldr	r0, [pc, #8]	@ (8003568 <USART1_IRQHandler+0x10>)
 800355e:	f00a ffa3 	bl	800e4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	240003d0 	.word	0x240003d0

0800356c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003570:	4802      	ldr	r0, [pc, #8]	@ (800357c <USART3_IRQHandler+0x10>)
 8003572:	f00a ff99 	bl	800e4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	24000464 	.word	0x24000464

08003580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8003584:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003588:	f005 fb45 	bl	8008c16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}

08003590 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003594:	4802      	ldr	r0, [pc, #8]	@ (80035a0 <ADC3_IRQHandler+0x10>)
 8003596:	f000 ff43 	bl	8004420 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	24000104 	.word	0x24000104

080035a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035a8:	4b32      	ldr	r3, [pc, #200]	@ (8003674 <SystemInit+0xd0>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	4a31      	ldr	r2, [pc, #196]	@ (8003674 <SystemInit+0xd0>)
 80035b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003678 <SystemInit+0xd4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	2b06      	cmp	r3, #6
 80035c2:	d807      	bhi.n	80035d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003678 <SystemInit+0xd4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 030f 	bic.w	r3, r3, #15
 80035cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003678 <SystemInit+0xd4>)
 80035ce:	f043 0307 	orr.w	r3, r3, #7
 80035d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80035d4:	4b29      	ldr	r3, [pc, #164]	@ (800367c <SystemInit+0xd8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a28      	ldr	r2, [pc, #160]	@ (800367c <SystemInit+0xd8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035e0:	4b26      	ldr	r3, [pc, #152]	@ (800367c <SystemInit+0xd8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80035e6:	4b25      	ldr	r3, [pc, #148]	@ (800367c <SystemInit+0xd8>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4924      	ldr	r1, [pc, #144]	@ (800367c <SystemInit+0xd8>)
 80035ec:	4b24      	ldr	r3, [pc, #144]	@ (8003680 <SystemInit+0xdc>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035f2:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <SystemInit+0xd4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <SystemInit+0xd4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 030f 	bic.w	r3, r3, #15
 8003606:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <SystemInit+0xd4>)
 8003608:	f043 0307 	orr.w	r3, r3, #7
 800360c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800360e:	4b1b      	ldr	r3, [pc, #108]	@ (800367c <SystemInit+0xd8>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003614:	4b19      	ldr	r3, [pc, #100]	@ (800367c <SystemInit+0xd8>)
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800361a:	4b18      	ldr	r3, [pc, #96]	@ (800367c <SystemInit+0xd8>)
 800361c:	2200      	movs	r2, #0
 800361e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003620:	4b16      	ldr	r3, [pc, #88]	@ (800367c <SystemInit+0xd8>)
 8003622:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <SystemInit+0xe0>)
 8003624:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <SystemInit+0xd8>)
 8003628:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <SystemInit+0xe4>)
 800362a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800362c:	4b13      	ldr	r3, [pc, #76]	@ (800367c <SystemInit+0xd8>)
 800362e:	4a17      	ldr	r2, [pc, #92]	@ (800368c <SystemInit+0xe8>)
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003632:	4b12      	ldr	r3, [pc, #72]	@ (800367c <SystemInit+0xd8>)
 8003634:	2200      	movs	r2, #0
 8003636:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <SystemInit+0xd8>)
 800363a:	4a14      	ldr	r2, [pc, #80]	@ (800368c <SystemInit+0xe8>)
 800363c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800363e:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <SystemInit+0xd8>)
 8003640:	2200      	movs	r2, #0
 8003642:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <SystemInit+0xd8>)
 8003646:	4a11      	ldr	r2, [pc, #68]	@ (800368c <SystemInit+0xe8>)
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <SystemInit+0xd8>)
 800364c:	2200      	movs	r2, #0
 800364e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003650:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <SystemInit+0xd8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a09      	ldr	r2, [pc, #36]	@ (800367c <SystemInit+0xd8>)
 8003656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800365c:	4b07      	ldr	r3, [pc, #28]	@ (800367c <SystemInit+0xd8>)
 800365e:	2200      	movs	r2, #0
 8003660:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003662:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <SystemInit+0xec>)
 8003664:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003668:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00
 8003678:	52002000 	.word	0x52002000
 800367c:	58024400 	.word	0x58024400
 8003680:	eaf6ed7f 	.word	0xeaf6ed7f
 8003684:	02020200 	.word	0x02020200
 8003688:	01ff0000 	.word	0x01ff0000
 800368c:	01010280 	.word	0x01010280
 8003690:	52004000 	.word	0x52004000

08003694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003694:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003698:	f7ff ff84 	bl	80035a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800369c:	480c      	ldr	r0, [pc, #48]	@ (80036d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800369e:	490d      	ldr	r1, [pc, #52]	@ (80036d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036a0:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a4:	e002      	b.n	80036ac <LoopCopyDataInit>

080036a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036aa:	3304      	adds	r3, #4

080036ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b0:	d3f9      	bcc.n	80036a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036b2:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036b4:	4c0a      	ldr	r4, [pc, #40]	@ (80036e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b8:	e001      	b.n	80036be <LoopFillZerobss>

080036ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036bc:	3204      	adds	r2, #4

080036be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c0:	d3fb      	bcc.n	80036ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036c2:	f00d fb4f 	bl	8010d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036c6:	f7fe f94b 	bl	8001960 <main>
  bx  lr
 80036ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036cc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80036d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80036d4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80036d8:	08011088 	.word	0x08011088
  ldr r2, =_sbss
 80036dc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80036e0:	240007d0 	.word	0x240007d0

080036e4 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e4:	e7fe      	b.n	80036e4 <BDMA_Channel0_IRQHandler>
	...

080036e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ee:	2003      	movs	r0, #3
 80036f0:	f002 fa3e 	bl	8005b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036f4:	f006 f874 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b15      	ldr	r3, [pc, #84]	@ (8003750 <HAL_Init+0x68>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	4913      	ldr	r1, [pc, #76]	@ (8003754 <HAL_Init+0x6c>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003712:	4b0f      	ldr	r3, [pc, #60]	@ (8003750 <HAL_Init+0x68>)
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	4a0e      	ldr	r2, [pc, #56]	@ (8003754 <HAL_Init+0x6c>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	4a0b      	ldr	r2, [pc, #44]	@ (8003758 <HAL_Init+0x70>)
 800372a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800372c:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <HAL_Init+0x74>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003732:	200f      	movs	r0, #15
 8003734:	f000 f814 	bl	8003760 <HAL_InitTick>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e002      	b.n	8003748 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003742:	f7ff fb03 	bl	8002d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	58024400 	.word	0x58024400
 8003754:	08011038 	.word	0x08011038
 8003758:	2400006c 	.word	0x2400006c
 800375c:	24000068 	.word	0x24000068

08003760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_InitTick+0x60>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e021      	b.n	80037b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003774:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <HAL_InitTick+0x64>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_InitTick+0x60>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003782:	fbb3 f3f1 	udiv	r3, r3, r1
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fa23 	bl	8005bd6 <HAL_SYSTICK_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00e      	b.n	80037b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d80a      	bhi.n	80037b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a0:	2200      	movs	r2, #0
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f002 f9ed 	bl	8005b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ac:	4a06      	ldr	r2, [pc, #24]	@ (80037c8 <HAL_InitTick+0x68>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	24000074 	.word	0x24000074
 80037c4:	24000068 	.word	0x24000068
 80037c8:	24000070 	.word	0x24000070

080037cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_IncTick+0x20>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_IncTick+0x24>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <HAL_IncTick+0x24>)
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	24000074 	.word	0x24000074
 80037f0:	240007cc 	.word	0x240007cc

080037f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return uwTick;
 80037f8:	4b03      	ldr	r3, [pc, #12]	@ (8003808 <HAL_GetTick+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	240007cc 	.word	0x240007cc

0800380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff ffee 	bl	80037f4 <HAL_GetTick>
 8003818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d005      	beq.n	8003832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <HAL_Delay+0x44>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003832:	bf00      	nop
 8003834:	f7ff ffde 	bl	80037f4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d8f7      	bhi.n	8003834 <HAL_Delay+0x28>
  {
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	24000074 	.word	0x24000074

08003854 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800385e:	4b07      	ldr	r3, [pc, #28]	@ (800387c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	4904      	ldr	r1, [pc, #16]	@ (800387c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	58000400 	.word	0x58000400

08003880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3360      	adds	r3, #96	@ 0x60
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a10      	ldr	r2, [pc, #64]	@ (8003948 <LL_ADC_SetOffset+0x60>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10b      	bne.n	8003924 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003922:	e00b      	b.n	800393c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	430b      	orrs	r3, r1
 8003936:	431a      	orrs	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	58026000 	.word	0x58026000

0800394c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3360      	adds	r3, #96	@ 0x60
 800395a:	461a      	mov	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	611a      	str	r2, [r3, #16]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a0c      	ldr	r2, [pc, #48]	@ (80039ec <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3360      	adds	r3, #96	@ 0x60
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	601a      	str	r2, [r3, #0]
  }
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	58026000 	.word	0x58026000

080039f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003a30 <LL_ADC_SetOffsetSaturation+0x40>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10e      	bne.n	8003a22 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3360      	adds	r3, #96	@ 0x60
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	58026000 	.word	0x58026000

08003a34 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <LL_ADC_SetOffsetSign+0x40>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10e      	bne.n	8003a66 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3360      	adds	r3, #96	@ 0x60
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	58026000 	.word	0x58026000

08003a78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3360      	adds	r3, #96	@ 0x60
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <LL_ADC_SetOffsetState+0x50>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003aaa:	e007      	b.n	8003abc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	58026000 	.word	0x58026000

08003acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3330      	adds	r3, #48	@ 0x30
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	4413      	add	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	211f      	movs	r1, #31
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	f003 011f 	and.w	r1, r3, #31
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f023 0203 	bic.w	r2, r3, #3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60da      	str	r2, [r3, #12]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d107      	bne.n	8003bb2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60da      	str	r2, [r3, #12]
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	58026000 	.word	0x58026000

08003bc4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	0e5b      	lsrs	r3, r3, #25
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	4413      	add	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0d1b      	lsrs	r3, r3, #20
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2107      	movs	r1, #7
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	401a      	ands	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	0d1b      	lsrs	r3, r3, #20
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d115      	bne.n	8003c80 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c60:	43db      	mvns	r3, r3
 8003c62:	401a      	ands	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0318 	and.w	r3, r3, #24
 8003c6a:	4914      	ldr	r1, [pc, #80]	@ (8003cbc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003c6c:	40d9      	lsrs	r1, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	400b      	ands	r3, r1
 8003c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003c7e:	e014      	b.n	8003caa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	401a      	ands	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0318 	and.w	r3, r3, #24
 8003c96:	4909      	ldr	r1, [pc, #36]	@ (8003cbc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003c98:	40d9      	lsrs	r1, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	400b      	ands	r3, r1
 8003c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	58026000 	.word	0x58026000
 8003cbc:	000fffff 	.word	0x000fffff

08003cc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6093      	str	r3, [r2, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	5fffffc0 	.word	0x5fffffc0

08003d1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d30:	d101      	bne.n	8003d36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	6fffffc0 	.word	0x6fffffc0

08003d6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d80:	d101      	bne.n	8003d86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <LL_ADC_Enable+0x24>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	7fffffc0 	.word	0x7fffffc0

08003dbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <LL_ADC_IsEnabled+0x18>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <LL_ADC_IsEnabled+0x1a>
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <LL_ADC_REG_StartConversion+0x24>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	7fffffc0 	.word	0x7fffffc0

08003e0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d101      	bne.n	8003e24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d101      	bne.n	8003e4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b089      	sub	sp, #36	@ 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e1ee      	b.n	8004250 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fe ff7d 	bl	8002d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff3f 	bl	8003d1c <LL_ADC_IsDeepPowerDownEnabled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff25 	bl	8003cf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff5a 	bl	8003d6c <LL_ADC_IsInternalRegulatorEnabled>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d114      	bne.n	8003ee8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff3e 	bl	8003d44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8004104 <HAL_ADC_Init+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	4a8e      	ldr	r2, [pc, #568]	@ (8004108 <HAL_ADC_Init+0x2b0>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eda:	e002      	b.n	8003ee2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f9      	bne.n	8003edc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff3d 	bl	8003d6c <LL_ADC_IsInternalRegulatorEnabled>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efc:	f043 0210 	orr.w	r2, r3, #16
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff77 	bl	8003e0c <LL_ADC_REG_IsConversionOngoing>
 8003f1e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 8188 	bne.w	800423e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 8184 	bne.w	800423e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ff36 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d136      	bne.n	8003fc4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6c      	ldr	r2, [pc, #432]	@ (800410c <HAL_ADC_Init+0x2b4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_ADC_Init+0x112>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6a      	ldr	r2, [pc, #424]	@ (8004110 <HAL_ADC_Init+0x2b8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10e      	bne.n	8003f88 <HAL_ADC_Init+0x130>
 8003f6a:	4868      	ldr	r0, [pc, #416]	@ (800410c <HAL_ADC_Init+0x2b4>)
 8003f6c:	f7ff ff26 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f70:	4604      	mov	r4, r0
 8003f72:	4867      	ldr	r0, [pc, #412]	@ (8004110 <HAL_ADC_Init+0x2b8>)
 8003f74:	f7ff ff22 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4323      	orrs	r3, r4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e008      	b.n	8003f9a <HAL_ADC_Init+0x142>
 8003f88:	4862      	ldr	r0, [pc, #392]	@ (8004114 <HAL_ADC_Init+0x2bc>)
 8003f8a:	f7ff ff17 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d012      	beq.n	8003fc4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800410c <HAL_ADC_Init+0x2b4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_ADC_Init+0x15a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a58      	ldr	r2, [pc, #352]	@ (8004110 <HAL_ADC_Init+0x2b8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_Init+0x15e>
 8003fb2:	4a59      	ldr	r2, [pc, #356]	@ (8004118 <HAL_ADC_Init+0x2c0>)
 8003fb4:	e000      	b.n	8003fb8 <HAL_ADC_Init+0x160>
 8003fb6:	4a59      	ldr	r2, [pc, #356]	@ (800411c <HAL_ADC_Init+0x2c4>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7ff fc5e 	bl	8003880 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	@ (8004114 <HAL_ADC_Init+0x2bc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d129      	bne.n	8004022 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7e5b      	ldrb	r3, [r3, #25]
 8003fd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fd8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003fde:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d013      	beq.n	8004010 <HAL_ADC_Init+0x1b8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d00d      	beq.n	800400c <HAL_ADC_Init+0x1b4>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b1c      	cmp	r3, #28
 8003ff6:	d007      	beq.n	8004008 <HAL_ADC_Init+0x1b0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b18      	cmp	r3, #24
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_Init+0x1ac>
 8004000:	2318      	movs	r3, #24
 8004002:	e006      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 8004004:	2300      	movs	r3, #0
 8004006:	e004      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 8004008:	2310      	movs	r3, #16
 800400a:	e002      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 800400c:	2308      	movs	r3, #8
 800400e:	e000      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 8004010:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004012:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	e00e      	b.n	8004040 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7e5b      	ldrb	r3, [r3, #25]
 8004026:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800402c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004032:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d106      	bne.n	8004058 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	3b01      	subs	r3, #1
 8004050:	045b      	lsls	r3, r3, #17
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <HAL_ADC_Init+0x2bc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d115      	bne.n	80040aa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	4b26      	ldr	r3, [pc, #152]	@ (8004120 <HAL_ADC_Init+0x2c8>)
 8004086:	4013      	ands	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	430b      	orrs	r3, r1
 8004090:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	611a      	str	r2, [r3, #16]
 80040a8:	e009      	b.n	80040be <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004124 <HAL_ADC_Init+0x2cc>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	69b9      	ldr	r1, [r7, #24]
 80040ba:	430b      	orrs	r3, r1
 80040bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fea2 	bl	8003e0c <LL_ADC_REG_IsConversionOngoing>
 80040c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff feaf 	bl	8003e32 <LL_ADC_INJ_IsConversionOngoing>
 80040d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 808e 	bne.w	80041fa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 808a 	bne.w	80041fa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004114 <HAL_ADC_Init+0x2bc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d11b      	bne.n	8004128 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7e1b      	ldrb	r3, [r3, #24]
 80040f4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040fc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	e018      	b.n	8004136 <HAL_ADC_Init+0x2de>
 8004104:	24000068 	.word	0x24000068
 8004108:	053e2d63 	.word	0x053e2d63
 800410c:	40022000 	.word	0x40022000
 8004110:	40022100 	.word	0x40022100
 8004114:	58026000 	.word	0x58026000
 8004118:	40022300 	.word	0x40022300
 800411c:	58026300 	.word	0x58026300
 8004120:	fff04007 	.word	0xfff04007
 8004124:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7e1b      	ldrb	r3, [r3, #24]
 800412c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	4b46      	ldr	r3, [pc, #280]	@ (8004258 <HAL_ADC_Init+0x400>)
 800413e:	4013      	ands	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	430b      	orrs	r3, r1
 8004148:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004150:	2b01      	cmp	r3, #1
 8004152:	d137      	bne.n	80041c4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3f      	ldr	r2, [pc, #252]	@ (800425c <HAL_ADC_Init+0x404>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d116      	bne.n	8004192 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	4b3d      	ldr	r3, [pc, #244]	@ (8004260 <HAL_ADC_Init+0x408>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004176:	4311      	orrs	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004182:	430a      	orrs	r2, r1
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	611a      	str	r2, [r3, #16]
 8004190:	e020      	b.n	80041d4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	4b32      	ldr	r3, [pc, #200]	@ (8004264 <HAL_ADC_Init+0x40c>)
 800419a:	4013      	ands	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041a0:	3a01      	subs	r2, #1
 80041a2:	0411      	lsls	r1, r2, #16
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80041a8:	4311      	orrs	r1, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041ae:	4311      	orrs	r1, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80041b4:	430a      	orrs	r2, r1
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	e007      	b.n	80041d4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1b      	ldr	r2, [pc, #108]	@ (800425c <HAL_ADC_Init+0x404>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d002      	beq.n	80041fa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 f9c3 	bl	8005580 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10c      	bne.n	800421c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	f023 010f 	bic.w	r1, r3, #15
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
 800421a:	e007      	b.n	800422c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 020f 	bic.w	r2, r2, #15
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004230:	f023 0303 	bic.w	r3, r3, #3
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	@ 0x60
 800423c:	e007      	b.n	800424e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004242:	f043 0210 	orr.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800424e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3724      	adds	r7, #36	@ 0x24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}
 8004258:	ffffbffc 	.word	0xffffbffc
 800425c:	58026000 	.word	0x58026000
 8004260:	fc00f81f 	.word	0xfc00f81f
 8004264:	fc00f81e 	.word	0xfc00f81e

08004268 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a60      	ldr	r2, [pc, #384]	@ (80043fc <HAL_ADC_Start_DMA+0x194>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_ADC_Start_DMA+0x20>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a5f      	ldr	r2, [pc, #380]	@ (8004400 <HAL_ADC_Start_DMA+0x198>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_ADC_Start_DMA+0x24>
 8004288:	4b5e      	ldr	r3, [pc, #376]	@ (8004404 <HAL_ADC_Start_DMA+0x19c>)
 800428a:	e000      	b.n	800428e <HAL_ADC_Start_DMA+0x26>
 800428c:	4b5e      	ldr	r3, [pc, #376]	@ (8004408 <HAL_ADC_Start_DMA+0x1a0>)
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fd16 	bl	8003cc0 <LL_ADC_GetMultimode>
 8004294:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fdb6 	bl	8003e0c <LL_ADC_REG_IsConversionOngoing>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 80a2 	bne.w	80043ec <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_Start_DMA+0x4e>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e09d      	b.n	80043f2 <HAL_ADC_Start_DMA+0x18a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d006      	beq.n	80042d2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d003      	beq.n	80042d2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b09      	cmp	r3, #9
 80042ce:	f040 8086 	bne.w	80043de <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f001 f836 	bl	8005344 <ADC_Enable>
 80042d8:	4603      	mov	r3, r0
 80042da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d178      	bne.n	80043d4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042e6:	4b49      	ldr	r3, [pc, #292]	@ (800440c <HAL_ADC_Start_DMA+0x1a4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a42      	ldr	r2, [pc, #264]	@ (8004400 <HAL_ADC_Start_DMA+0x198>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d002      	beq.n	8004302 <HAL_ADC_Start_DMA+0x9a>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	e000      	b.n	8004304 <HAL_ADC_Start_DMA+0x9c>
 8004302:	4b3e      	ldr	r3, [pc, #248]	@ (80043fc <HAL_ADC_Start_DMA+0x194>)
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	4293      	cmp	r3, r2
 800430a:	d002      	beq.n	8004312 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d105      	bne.n	800431e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004316:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800432e:	f023 0206 	bic.w	r2, r3, #6
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	665a      	str	r2, [r3, #100]	@ 0x64
 8004336:	e002      	b.n	800433e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	4a33      	ldr	r2, [pc, #204]	@ (8004410 <HAL_ADC_Start_DMA+0x1a8>)
 8004344:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434a:	4a32      	ldr	r2, [pc, #200]	@ (8004414 <HAL_ADC_Start_DMA+0x1ac>)
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	4a31      	ldr	r2, [pc, #196]	@ (8004418 <HAL_ADC_Start_DMA+0x1b0>)
 8004354:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	221c      	movs	r2, #28
 800435c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0210 	orr.w	r2, r2, #16
 8004374:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a28      	ldr	r2, [pc, #160]	@ (800441c <HAL_ADC_Start_DMA+0x1b4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10f      	bne.n	80043a0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7ff fbfe 	bl	8003b90 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fbe9 	bl	8003b70 <LL_ADC_EnableDMAReq>
 800439e:	e007      	b.n	80043b0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7ff fbcd 	bl	8003b4a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3340      	adds	r3, #64	@ 0x40
 80043ba:	4619      	mov	r1, r3
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f001 ff6e 	bl	80062a0 <HAL_DMA_Start_IT>
 80043c4:	4603      	mov	r3, r0
 80043c6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fd09 	bl	8003de4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80043d2:	e00d      	b.n	80043f0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80043dc:	e008      	b.n	80043f0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80043ea:	e001      	b.n	80043f0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
 80043ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40022000 	.word	0x40022000
 8004400:	40022100 	.word	0x40022100
 8004404:	40022300 	.word	0x40022300
 8004408:	58026300 	.word	0x58026300
 800440c:	fffff0fe 	.word	0xfffff0fe
 8004410:	08005459 	.word	0x08005459
 8004414:	08005531 	.word	0x08005531
 8004418:	0800554d 	.word	0x0800554d
 800441c:	58026000 	.word	0x58026000

08004420 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	@ 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004428:	2300      	movs	r3, #0
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a87      	ldr	r2, [pc, #540]	@ (8004660 <HAL_ADC_IRQHandler+0x240>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_ADC_IRQHandler+0x30>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a86      	ldr	r2, [pc, #536]	@ (8004664 <HAL_ADC_IRQHandler+0x244>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_ADC_IRQHandler+0x34>
 8004450:	4b85      	ldr	r3, [pc, #532]	@ (8004668 <HAL_ADC_IRQHandler+0x248>)
 8004452:	e000      	b.n	8004456 <HAL_ADC_IRQHandler+0x36>
 8004454:	4b85      	ldr	r3, [pc, #532]	@ (800466c <HAL_ADC_IRQHandler+0x24c>)
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fc32 	bl	8003cc0 <LL_ADC_GetMultimode>
 800445c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <HAL_ADC_IRQHandler+0x78>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d012      	beq.n	8004498 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d105      	bne.n	800448a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f001 f9b4 	bl	80057f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2202      	movs	r2, #2
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <HAL_ADC_IRQHandler+0x8c>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8083 	beq.w	80045be <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d07d      	beq.n	80045be <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff faf4 	bl	8003acc <LL_ADC_REG_IsTriggerSourceSWStart>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d062      	beq.n	80045b0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004664 <HAL_ADC_IRQHandler+0x244>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d002      	beq.n	80044fa <HAL_ADC_IRQHandler+0xda>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	e000      	b.n	80044fc <HAL_ADC_IRQHandler+0xdc>
 80044fa:	4b59      	ldr	r3, [pc, #356]	@ (8004660 <HAL_ADC_IRQHandler+0x240>)
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4293      	cmp	r3, r2
 8004502:	d008      	beq.n	8004516 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d002      	beq.n	8004516 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b09      	cmp	r3, #9
 8004514:	d104      	bne.n	8004520 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	e00c      	b.n	800453a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a4f      	ldr	r2, [pc, #316]	@ (8004664 <HAL_ADC_IRQHandler+0x244>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d002      	beq.n	8004530 <HAL_ADC_IRQHandler+0x110>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	e000      	b.n	8004532 <HAL_ADC_IRQHandler+0x112>
 8004530:	4b4b      	ldr	r3, [pc, #300]	@ (8004660 <HAL_ADC_IRQHandler+0x240>)
 8004532:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d135      	bne.n	80045b0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d12e      	bne.n	80045b0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fc58 	bl	8003e0c <LL_ADC_REG_IsConversionOngoing>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11a      	bne.n	8004598 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 020c 	bic.w	r2, r2, #12
 8004570:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004576:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d112      	bne.n	80045b0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	661a      	str	r2, [r3, #96]	@ 0x60
 8004596:	e00b      	b.n	80045b0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f96f 	bl	8004894 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	220c      	movs	r2, #12
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <HAL_ADC_IRQHandler+0x1b2>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a0 	beq.w	800471e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 809a 	beq.w	800471e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fadc 	bl	8003bc4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800460c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fa5a 	bl	8003acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004618:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a11      	ldr	r2, [pc, #68]	@ (8004664 <HAL_ADC_IRQHandler+0x244>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d002      	beq.n	800462a <HAL_ADC_IRQHandler+0x20a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	e000      	b.n	800462c <HAL_ADC_IRQHandler+0x20c>
 800462a:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <HAL_ADC_IRQHandler+0x240>)
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	4293      	cmp	r3, r2
 8004632:	d008      	beq.n	8004646 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d002      	beq.n	8004646 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b07      	cmp	r3, #7
 8004644:	d104      	bne.n	8004650 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	e014      	b.n	800467a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a03      	ldr	r2, [pc, #12]	@ (8004664 <HAL_ADC_IRQHandler+0x244>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00a      	beq.n	8004670 <HAL_ADC_IRQHandler+0x250>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	e008      	b.n	8004672 <HAL_ADC_IRQHandler+0x252>
 8004660:	40022000 	.word	0x40022000
 8004664:	40022100 	.word	0x40022100
 8004668:	40022300 	.word	0x40022300
 800466c:	58026300 	.word	0x58026300
 8004670:	4b84      	ldr	r3, [pc, #528]	@ (8004884 <HAL_ADC_IRQHandler+0x464>)
 8004672:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d047      	beq.n	8004710 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <HAL_ADC_IRQHandler+0x27a>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03f      	beq.n	8004710 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d13a      	bne.n	8004710 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b40      	cmp	r3, #64	@ 0x40
 80046a6:	d133      	bne.n	8004710 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d12e      	bne.n	8004710 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fbbb 	bl	8003e32 <LL_ADC_INJ_IsConversionOngoing>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d11a      	bne.n	80046f8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046d0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d112      	bne.n	8004710 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80046f6:	e00b      	b.n	8004710 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 f849 	bl	80057a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2260      	movs	r2, #96	@ 0x60
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d011      	beq.n	800474c <HAL_ADC_IRQHandler+0x32c>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004736:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8bc 	bl	80048bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2280      	movs	r2, #128	@ 0x80
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d012      	beq.n	800477c <HAL_ADC_IRQHandler+0x35c>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004764:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f001 f82f 	bl	80057d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800477a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004782:	2b00      	cmp	r3, #0
 8004784:	d012      	beq.n	80047ac <HAL_ADC_IRQHandler+0x38c>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004794:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f821 	bl	80057e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d043      	beq.n	800483e <HAL_ADC_IRQHandler+0x41e>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d03e      	beq.n	800483e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80047c8:	2301      	movs	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80047cc:	e021      	b.n	8004812 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <HAL_ADC_IRQHandler+0x464>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_ADC_IRQHandler+0x3c8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a29      	ldr	r2, [pc, #164]	@ (8004888 <HAL_ADC_IRQHandler+0x468>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_ADC_IRQHandler+0x3cc>
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <HAL_ADC_IRQHandler+0x46c>)
 80047ea:	e000      	b.n	80047ee <HAL_ADC_IRQHandler+0x3ce>
 80047ec:	4b28      	ldr	r3, [pc, #160]	@ (8004890 <HAL_ADC_IRQHandler+0x470>)
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fa74 	bl	8003cdc <LL_ADC_GetMultiDMATransfer>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80047fa:	2301      	movs	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fe:	e008      	b.n	8004812 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800480e:	2301      	movs	r3, #1
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10e      	bne.n	8004836 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004828:	f043 0202 	orr.w	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f84d 	bl	80048d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2210      	movs	r2, #16
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004844:	2b00      	cmp	r3, #0
 8004846:	d018      	beq.n	800487a <HAL_ADC_IRQHandler+0x45a>
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484e:	2b00      	cmp	r3, #0
 8004850:	d013      	beq.n	800487a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004872:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 ffa1 	bl	80057bc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800487a:	bf00      	nop
 800487c:	3728      	adds	r7, #40	@ 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40022000 	.word	0x40022000
 8004888:	40022100 	.word	0x40022100
 800488c:	40022300 	.word	0x40022300
 8004890:	58026300 	.word	0x58026300

08004894 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b0b9      	sub	sp, #228	@ 0xe4
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048fe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4aab      	ldr	r2, [pc, #684]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004906:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d102      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x34>
 8004912:	2302      	movs	r3, #2
 8004914:	f000 bcfe 	b.w	8005314 <HAL_ADC_ConfigChannel+0xa30>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fa71 	bl	8003e0c <LL_ADC_REG_IsConversionOngoing>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 84e2 	bne.w	80052f6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db38      	blt.n	80049ac <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a9e      	ldr	r2, [pc, #632]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d033      	beq.n	80049ac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x7e>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2201      	movs	r2, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	e01d      	b.n	800499e <HAL_ADC_ConfigChannel+0xba>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800497a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800497e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004986:	2320      	movs	r3, #32
 8004988:	e004      	b.n	8004994 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800498a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2201      	movs	r2, #1
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	69d1      	ldr	r1, [r2, #28]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f7ff f89a 	bl	8003af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fa22 	bl	8003e0c <LL_ADC_REG_IsConversionOngoing>
 80049c8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fa2e 	bl	8003e32 <LL_ADC_INJ_IsConversionOngoing>
 80049d6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 8270 	bne.w	8004ec4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 826b 	bne.w	8004ec4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f7ff f8f5 	bl	8003bea <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6c      	ldr	r2, [pc, #432]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10d      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	08db      	lsrs	r3, r3, #3
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a24:	e032      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a26:	4b65      	ldr	r3, [pc, #404]	@ (8004bbc <HAL_ADC_ConfigChannel+0x2d8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a32:	d10b      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x168>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	e01d      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x1a4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x18e>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	e00a      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x1a4>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d048      	beq.n	8004b26 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6919      	ldr	r1, [r3, #16]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aa4:	f7fe ff20 	bl	80038e8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a42      	ldr	r2, [pc, #264]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d119      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6919      	ldr	r1, [r3, #16]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7fe ffb8 	bl	8003a34 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6919      	ldr	r1, [r3, #16]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d102      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x1f8>
 8004ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ada:	e000      	b.n	8004ade <HAL_ADC_ConfigChannel+0x1fa>
 8004adc:	2300      	movs	r3, #0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7fe ff86 	bl	80039f0 <LL_ADC_SetOffsetSaturation>
 8004ae4:	e1ee      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6919      	ldr	r1, [r3, #16]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d102      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x21a>
 8004af8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004afc:	e000      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x21c>
 8004afe:	2300      	movs	r3, #0
 8004b00:	461a      	mov	r2, r3
 8004b02:	f7fe ff53 	bl	80039ac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	7e1b      	ldrb	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d102      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x238>
 8004b16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b1a:	e000      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x23a>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fe ff2a 	bl	8003978 <LL_ADC_SetDataRightShift>
 8004b24:	e1ce      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a23      	ldr	r2, [pc, #140]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	f040 8181 	bne.w	8004e34 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe ff07 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x27a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fefc 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004b54:	4603      	mov	r3, r0
 8004b56:	0e9b      	lsrs	r3, r3, #26
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	e01e      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x2b8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fe fef1 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b74:	fa93 f3a3 	rbit	r3, r3
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004b84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	e004      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10b      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x2dc>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	0e9b      	lsrs	r3, r3, #26
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	e01e      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x30e>
 8004bb4:	47ff0000 	.word	0x47ff0000
 8004bb8:	58026000 	.word	0x58026000
 8004bbc:	5c001000 	.word	0x5c001000
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004be4:	2320      	movs	r3, #32
 8004be6:	e004      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d106      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe ff3a 	bl	8003a78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2101      	movs	r1, #1
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fe9e 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x34c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2101      	movs	r1, #1
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe fe93 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004c26:	4603      	mov	r3, r0
 8004c28:	0e9b      	lsrs	r3, r3, #26
 8004c2a:	f003 021f 	and.w	r2, r3, #31
 8004c2e:	e01e      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x38a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fe88 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004c5e:	2320      	movs	r3, #32
 8004c60:	e004      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004c62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c66:	fab3 f383 	clz	r3, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x3a2>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	0e9b      	lsrs	r3, r3, #26
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	e018      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x3d4>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004c9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004caa:	2320      	movs	r3, #32
 8004cac:	e004      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004cae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d106      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe fed7 	bl	8003a78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2102      	movs	r1, #2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fe3b 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x412>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fe30 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004cec:	4603      	mov	r3, r0
 8004cee:	0e9b      	lsrs	r3, r3, #26
 8004cf0:	f003 021f 	and.w	r2, r3, #31
 8004cf4:	e01e      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x450>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fe25 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004d24:	2320      	movs	r3, #32
 8004d26:	e004      	b.n	8004d32 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x468>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0e9b      	lsrs	r3, r3, #26
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	e014      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x492>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d54:	fa93 f3a3 	rbit	r3, r3
 8004d58:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004d68:	2320      	movs	r3, #32
 8004d6a:	e004      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d70:	fab3 f383 	clz	r3, r3
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d106      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2102      	movs	r1, #2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fe78 	bl	8003a78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2103      	movs	r1, #3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fddc 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x4d0>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2103      	movs	r1, #3
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe fdd1 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004daa:	4603      	mov	r3, r0
 8004dac:	0e9b      	lsrs	r3, r3, #26
 8004dae:	f003 021f 	and.w	r2, r3, #31
 8004db2:	e017      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x500>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2103      	movs	r1, #3
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fdc6 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004dd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e003      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d105      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x518>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0e9b      	lsrs	r3, r3, #26
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	e011      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x53c>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004e0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004e0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004e14:	2320      	movs	r3, #32
 8004e16:	e003      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d14f      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2103      	movs	r1, #3
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe fe23 	bl	8003a78 <LL_ADC_SetOffsetState>
 8004e32:	e047      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	069b      	lsls	r3, r3, #26
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d107      	bne.n	8004e58 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004e56:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	069b      	lsls	r3, r3, #26
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d107      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004e7a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	069b      	lsls	r3, r3, #26
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d107      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004e9e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	069b      	lsls	r3, r3, #26
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d107      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe ff77 	bl	8003dbc <LL_ADC_IsEnabled>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f040 8219 	bne.w	8005308 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fe feac 	bl	8003c40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4aa1      	ldr	r2, [pc, #644]	@ (8005174 <HAL_ADC_ConfigChannel+0x890>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	f040 812e 	bne.w	8005150 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x638>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	0e9b      	lsrs	r3, r3, #26
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	bf94      	ite	ls
 8004f14:	2301      	movls	r3, #1
 8004f16:	2300      	movhi	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e019      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x66c>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f24:	fa93 f3a3 	rbit	r3, r3
 8004f28:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004f34:	2320      	movs	r3, #32
 8004f36:	e003      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f3a:	fab3 f383 	clz	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	3301      	adds	r3, #1
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2b09      	cmp	r3, #9
 8004f48:	bf94      	ite	ls
 8004f4a:	2301      	movls	r3, #1
 8004f4c:	2300      	movhi	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d079      	beq.n	8005048 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x68c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	0e9b      	lsrs	r3, r3, #26
 8004f66:	3301      	adds	r3, #1
 8004f68:	069b      	lsls	r3, r3, #26
 8004f6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f6e:	e015      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x6b8>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f80:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004f88:	2320      	movs	r3, #32
 8004f8a:	e003      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	3301      	adds	r3, #1
 8004f96:	069b      	lsls	r3, r3, #26
 8004f98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x6d8>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0e9b      	lsrs	r3, r3, #26
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	e017      	b.n	8004fec <HAL_ADC_ConfigChannel+0x708>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fcc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	e003      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x72e>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0e9b      	lsrs	r3, r3, #26
 8005002:	3301      	adds	r3, #1
 8005004:	f003 021f 	and.w	r2, r3, #31
 8005008:	4613      	mov	r3, r2
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	4413      	add	r3, r2
 800500e:	051b      	lsls	r3, r3, #20
 8005010:	e018      	b.n	8005044 <HAL_ADC_ConfigChannel+0x760>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800502a:	2320      	movs	r3, #32
 800502c:	e003      	b.n	8005036 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3301      	adds	r3, #1
 8005038:	f003 021f 	and.w	r2, r3, #31
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005044:	430b      	orrs	r3, r1
 8005046:	e07e      	b.n	8005146 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x780>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	0e9b      	lsrs	r3, r3, #26
 800505a:	3301      	adds	r3, #1
 800505c:	069b      	lsls	r3, r3, #26
 800505e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005062:	e015      	b.n	8005090 <HAL_ADC_ConfigChannel+0x7ac>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800507c:	2320      	movs	r3, #32
 800507e:	e003      	b.n	8005088 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005082:	fab3 f383 	clz	r3, r3
 8005086:	b2db      	uxtb	r3, r3
 8005088:	3301      	adds	r3, #1
 800508a:	069b      	lsls	r3, r3, #26
 800508c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x7cc>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	0e9b      	lsrs	r3, r3, #26
 80050a2:	3301      	adds	r3, #1
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	e017      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x7fc>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	fa93 f3a3 	rbit	r3, r3
 80050bc:	61bb      	str	r3, [r7, #24]
  return result;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80050c8:	2320      	movs	r3, #32
 80050ca:	e003      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	3301      	adds	r3, #1
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2101      	movs	r1, #1
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	ea42 0103 	orr.w	r1, r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10d      	bne.n	800510c <HAL_ADC_ConfigChannel+0x828>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	0e9b      	lsrs	r3, r3, #26
 80050f6:	3301      	adds	r3, #1
 80050f8:	f003 021f 	and.w	r2, r3, #31
 80050fc:	4613      	mov	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	4413      	add	r3, r2
 8005102:	3b1e      	subs	r3, #30
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800510a:	e01b      	b.n	8005144 <HAL_ADC_ConfigChannel+0x860>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	fa93 f3a3 	rbit	r3, r3
 8005118:	60fb      	str	r3, [r7, #12]
  return result;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	e003      	b.n	8005130 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3301      	adds	r3, #1
 8005132:	f003 021f 	and.w	r2, r3, #31
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	3b1e      	subs	r3, #30
 800513e:	051b      	lsls	r3, r3, #20
 8005140:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005144:	430b      	orrs	r3, r1
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	6892      	ldr	r2, [r2, #8]
 800514a:	4619      	mov	r1, r3
 800514c:	f7fe fd4d 	bl	8003bea <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f280 80d7 	bge.w	8005308 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a06      	ldr	r2, [pc, #24]	@ (8005178 <HAL_ADC_ConfigChannel+0x894>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_ADC_ConfigChannel+0x88a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a04      	ldr	r2, [pc, #16]	@ (800517c <HAL_ADC_ConfigChannel+0x898>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10a      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x8a0>
 800516e:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <HAL_ADC_ConfigChannel+0x89c>)
 8005170:	e009      	b.n	8005186 <HAL_ADC_ConfigChannel+0x8a2>
 8005172:	bf00      	nop
 8005174:	47ff0000 	.word	0x47ff0000
 8005178:	40022000 	.word	0x40022000
 800517c:	40022100 	.word	0x40022100
 8005180:	40022300 	.word	0x40022300
 8005184:	4b65      	ldr	r3, [pc, #404]	@ (800531c <HAL_ADC_ConfigChannel+0xa38>)
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe fba0 	bl	80038cc <LL_ADC_GetCommonPathInternalCh>
 800518c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a62      	ldr	r2, [pc, #392]	@ (8005320 <HAL_ADC_ConfigChannel+0xa3c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_ADC_ConfigChannel+0x8c0>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a61      	ldr	r2, [pc, #388]	@ (8005324 <HAL_ADC_ConfigChannel+0xa40>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10e      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x8de>
 80051a4:	485e      	ldr	r0, [pc, #376]	@ (8005320 <HAL_ADC_ConfigChannel+0xa3c>)
 80051a6:	f7fe fe09 	bl	8003dbc <LL_ADC_IsEnabled>
 80051aa:	4604      	mov	r4, r0
 80051ac:	485d      	ldr	r0, [pc, #372]	@ (8005324 <HAL_ADC_ConfigChannel+0xa40>)
 80051ae:	f7fe fe05 	bl	8003dbc <LL_ADC_IsEnabled>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4323      	orrs	r3, r4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	e008      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x8f0>
 80051c2:	4859      	ldr	r0, [pc, #356]	@ (8005328 <HAL_ADC_ConfigChannel+0xa44>)
 80051c4:	f7fe fdfa 	bl	8003dbc <LL_ADC_IsEnabled>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bf0c      	ite	eq
 80051ce:	2301      	moveq	r3, #1
 80051d0:	2300      	movne	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8084 	beq.w	80052e2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a53      	ldr	r2, [pc, #332]	@ (800532c <HAL_ADC_ConfigChannel+0xa48>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d132      	bne.n	800524a <HAL_ADC_ConfigChannel+0x966>
 80051e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d12c      	bne.n	800524a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a4c      	ldr	r2, [pc, #304]	@ (8005328 <HAL_ADC_ConfigChannel+0xa44>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	f040 8086 	bne.w	8005308 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a47      	ldr	r2, [pc, #284]	@ (8005320 <HAL_ADC_ConfigChannel+0xa3c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_ADC_ConfigChannel+0x92c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a46      	ldr	r2, [pc, #280]	@ (8005324 <HAL_ADC_ConfigChannel+0xa40>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d101      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x930>
 8005210:	4a47      	ldr	r2, [pc, #284]	@ (8005330 <HAL_ADC_ConfigChannel+0xa4c>)
 8005212:	e000      	b.n	8005216 <HAL_ADC_ConfigChannel+0x932>
 8005214:	4a41      	ldr	r2, [pc, #260]	@ (800531c <HAL_ADC_ConfigChannel+0xa38>)
 8005216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800521a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fe fb40 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005226:	4b43      	ldr	r3, [pc, #268]	@ (8005334 <HAL_ADC_ConfigChannel+0xa50>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	4a42      	ldr	r2, [pc, #264]	@ (8005338 <HAL_ADC_ConfigChannel+0xa54>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	3301      	adds	r3, #1
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800523a:	e002      	b.n	8005242 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	3b01      	subs	r3, #1
 8005240:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f9      	bne.n	800523c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005248:	e05e      	b.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3b      	ldr	r2, [pc, #236]	@ (800533c <HAL_ADC_ConfigChannel+0xa58>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d120      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x9b2>
 8005254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d11a      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a30      	ldr	r2, [pc, #192]	@ (8005328 <HAL_ADC_ConfigChannel+0xa44>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d14e      	bne.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <HAL_ADC_ConfigChannel+0xa3c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_ADC_ConfigChannel+0x99a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a2a      	ldr	r2, [pc, #168]	@ (8005324 <HAL_ADC_ConfigChannel+0xa40>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x99e>
 800527e:	4a2c      	ldr	r2, [pc, #176]	@ (8005330 <HAL_ADC_ConfigChannel+0xa4c>)
 8005280:	e000      	b.n	8005284 <HAL_ADC_ConfigChannel+0x9a0>
 8005282:	4a26      	ldr	r2, [pc, #152]	@ (800531c <HAL_ADC_ConfigChannel+0xa38>)
 8005284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005288:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f7fe fb09 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005294:	e038      	b.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a29      	ldr	r2, [pc, #164]	@ (8005340 <HAL_ADC_ConfigChannel+0xa5c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d133      	bne.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
 80052a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d12d      	bne.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <HAL_ADC_ConfigChannel+0xa44>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d128      	bne.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <HAL_ADC_ConfigChannel+0xa3c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_ADC_ConfigChannel+0x9e6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a17      	ldr	r2, [pc, #92]	@ (8005324 <HAL_ADC_ConfigChannel+0xa40>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x9ea>
 80052ca:	4a19      	ldr	r2, [pc, #100]	@ (8005330 <HAL_ADC_ConfigChannel+0xa4c>)
 80052cc:	e000      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x9ec>
 80052ce:	4a13      	ldr	r2, [pc, #76]	@ (800531c <HAL_ADC_ConfigChannel+0xa38>)
 80052d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fe fae3 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
 80052e0:	e012      	b.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80052f4:	e008      	b.n	8005308 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fa:	f043 0220 	orr.w	r2, r3, #32
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005310:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005314:	4618      	mov	r0, r3
 8005316:	37e4      	adds	r7, #228	@ 0xe4
 8005318:	46bd      	mov	sp, r7
 800531a:	bd90      	pop	{r4, r7, pc}
 800531c:	58026300 	.word	0x58026300
 8005320:	40022000 	.word	0x40022000
 8005324:	40022100 	.word	0x40022100
 8005328:	58026000 	.word	0x58026000
 800532c:	c7520000 	.word	0xc7520000
 8005330:	40022300 	.word	0x40022300
 8005334:	24000068 	.word	0x24000068
 8005338:	053e2d63 	.word	0x053e2d63
 800533c:	c3210000 	.word	0xc3210000
 8005340:	cb840000 	.word	0xcb840000

08005344 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe fd33 	bl	8003dbc <LL_ADC_IsEnabled>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d16e      	bne.n	800543a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	4b38      	ldr	r3, [pc, #224]	@ (8005444 <ADC_Enable+0x100>)
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536e:	f043 0210 	orr.w	r2, r3, #16
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800537a:	f043 0201 	orr.w	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e05a      	b.n	800543c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fd02 	bl	8003d94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005390:	f7fe fa30 	bl	80037f4 <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2b      	ldr	r2, [pc, #172]	@ (8005448 <ADC_Enable+0x104>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <ADC_Enable+0x66>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a29      	ldr	r2, [pc, #164]	@ (800544c <ADC_Enable+0x108>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d101      	bne.n	80053ae <ADC_Enable+0x6a>
 80053aa:	4b29      	ldr	r3, [pc, #164]	@ (8005450 <ADC_Enable+0x10c>)
 80053ac:	e000      	b.n	80053b0 <ADC_Enable+0x6c>
 80053ae:	4b29      	ldr	r3, [pc, #164]	@ (8005454 <ADC_Enable+0x110>)
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe fc85 	bl	8003cc0 <LL_ADC_GetMultimode>
 80053b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a23      	ldr	r2, [pc, #140]	@ (800544c <ADC_Enable+0x108>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d002      	beq.n	80053c8 <ADC_Enable+0x84>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	e000      	b.n	80053ca <ADC_Enable+0x86>
 80053c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005448 <ADC_Enable+0x104>)
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02c      	beq.n	800542c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d130      	bne.n	800543a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053d8:	e028      	b.n	800542c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe fcec 	bl	8003dbc <LL_ADC_IsEnabled>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fcd0 	bl	8003d94 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053f4:	f7fe f9fe 	bl	80037f4 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d914      	bls.n	800542c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d00d      	beq.n	800542c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e007      	b.n	800543c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d1cf      	bne.n	80053da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	8000003f 	.word	0x8000003f
 8005448:	40022000 	.word	0x40022000
 800544c:	40022100 	.word	0x40022100
 8005450:	40022300 	.word	0x40022300
 8005454:	58026300 	.word	0x58026300

08005458 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800546e:	2b00      	cmp	r3, #0
 8005470:	d14b      	bne.n	800550a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005476:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d021      	beq.n	80054d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7fe fb1b 	bl	8003acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d12b      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11f      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c6:	f043 0201 	orr.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80054ce:	e018      	b.n	8005502 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d111      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fa:	f043 0201 	orr.w	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff f9c6 	bl	8004894 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005508:	e00e      	b.n	8005528 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff f9da 	bl	80048d0 <HAL_ADC_ErrorCallback>
}
 800551c:	e004      	b.n	8005528 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff f9b2 	bl	80048a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800555e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800556a:	f043 0204 	orr.w	r2, r3, #4
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff f9ac 	bl	80048d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a6c      	ldr	r2, [pc, #432]	@ (8005740 <ADC_ConfigureBoostMode+0x1c0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <ADC_ConfigureBoostMode+0x1c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a6b      	ldr	r2, [pc, #428]	@ (8005744 <ADC_ConfigureBoostMode+0x1c4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d109      	bne.n	80055b0 <ADC_ConfigureBoostMode+0x30>
 800559c:	4b6a      	ldr	r3, [pc, #424]	@ (8005748 <ADC_ConfigureBoostMode+0x1c8>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e008      	b.n	80055c2 <ADC_ConfigureBoostMode+0x42>
 80055b0:	4b66      	ldr	r3, [pc, #408]	@ (800574c <ADC_ConfigureBoostMode+0x1cc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf14      	ite	ne
 80055bc:	2301      	movne	r3, #1
 80055be:	2300      	moveq	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01c      	beq.n	8005600 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80055c6:	f004 fa85 	bl	8009ad4 <HAL_RCC_GetHCLKFreq>
 80055ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055d4:	d010      	beq.n	80055f8 <ADC_ConfigureBoostMode+0x78>
 80055d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055da:	d873      	bhi.n	80056c4 <ADC_ConfigureBoostMode+0x144>
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d002      	beq.n	80055e8 <ADC_ConfigureBoostMode+0x68>
 80055e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055e6:	d16d      	bne.n	80056c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	60fb      	str	r3, [r7, #12]
        break;
 80055f6:	e068      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	60fb      	str	r3, [r7, #12]
        break;
 80055fe:	e064      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005600:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	f005 fc60 	bl	800aecc <HAL_RCCEx_GetPeriphCLKFreq>
 800560c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005616:	d051      	beq.n	80056bc <ADC_ConfigureBoostMode+0x13c>
 8005618:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800561c:	d854      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 800561e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005622:	d047      	beq.n	80056b4 <ADC_ConfigureBoostMode+0x134>
 8005624:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005628:	d84e      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 800562a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800562e:	d03d      	beq.n	80056ac <ADC_ConfigureBoostMode+0x12c>
 8005630:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005634:	d848      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 8005636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800563a:	d033      	beq.n	80056a4 <ADC_ConfigureBoostMode+0x124>
 800563c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005640:	d842      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 8005642:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005646:	d029      	beq.n	800569c <ADC_ConfigureBoostMode+0x11c>
 8005648:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800564c:	d83c      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 800564e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005652:	d01a      	beq.n	800568a <ADC_ConfigureBoostMode+0x10a>
 8005654:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005658:	d836      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 800565a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800565e:	d014      	beq.n	800568a <ADC_ConfigureBoostMode+0x10a>
 8005660:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005664:	d830      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566a:	d00e      	beq.n	800568a <ADC_ConfigureBoostMode+0x10a>
 800566c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005670:	d82a      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 8005672:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005676:	d008      	beq.n	800568a <ADC_ConfigureBoostMode+0x10a>
 8005678:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800567c:	d824      	bhi.n	80056c8 <ADC_ConfigureBoostMode+0x148>
 800567e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005682:	d002      	beq.n	800568a <ADC_ConfigureBoostMode+0x10a>
 8005684:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005688:	d11e      	bne.n	80056c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	0c9b      	lsrs	r3, r3, #18
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	fbb2 f3f3 	udiv	r3, r2, r3
 8005698:	60fb      	str	r3, [r7, #12]
        break;
 800569a:	e016      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	60fb      	str	r3, [r7, #12]
        break;
 80056a2:	e012      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	60fb      	str	r3, [r7, #12]
        break;
 80056aa:	e00e      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	099b      	lsrs	r3, r3, #6
 80056b0:	60fb      	str	r3, [r7, #12]
        break;
 80056b2:	e00a      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	09db      	lsrs	r3, r3, #7
 80056b8:	60fb      	str	r3, [r7, #12]
        break;
 80056ba:	e006      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	60fb      	str	r3, [r7, #12]
        break;
 80056c2:	e002      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80056c8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005750 <ADC_ConfigureBoostMode+0x1d0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d808      	bhi.n	80056ea <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80056e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80056e8:	e025      	b.n	8005736 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <ADC_ConfigureBoostMode+0x1d4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d80a      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	e016      	b.n	8005736 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a13      	ldr	r2, [pc, #76]	@ (8005758 <ADC_ConfigureBoostMode+0x1d8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d80a      	bhi.n	8005726 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005722:	609a      	str	r2, [r3, #8]
}
 8005724:	e007      	b.n	8005736 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005734:	609a      	str	r2, [r3, #8]
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40022000 	.word	0x40022000
 8005744:	40022100 	.word	0x40022100
 8005748:	40022300 	.word	0x40022300
 800574c:	58026300 	.word	0x58026300
 8005750:	005f5e10 	.word	0x005f5e10
 8005754:	00bebc20 	.word	0x00bebc20
 8005758:	017d7840 	.word	0x017d7840

0800575c <LL_ADC_IsEnabled>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <LL_ADC_IsEnabled+0x18>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <LL_ADC_IsEnabled+0x1a>
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <LL_ADC_REG_IsConversionOngoing>:
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d101      	bne.n	800579a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b0a3      	sub	sp, #140	@ 0x8c
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005826:	2302      	movs	r3, #2
 8005828:	e0c1      	b.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005832:	2300      	movs	r3, #0
 8005834:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005836:	2300      	movs	r3, #0
 8005838:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5e      	ldr	r2, [pc, #376]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d102      	bne.n	800584a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005844:	4b5d      	ldr	r3, [pc, #372]	@ (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e001      	b.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0a0      	b.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff ff87 	bl	8005782 <LL_ADC_REG_IsConversionOngoing>
 8005874:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff80 	bl	8005782 <LL_ADC_REG_IsConversionOngoing>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 8081 	bne.w	800598c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800588a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800588e:	2b00      	cmp	r3, #0
 8005890:	d17c      	bne.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a48      	ldr	r2, [pc, #288]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a46      	ldr	r2, [pc, #280]	@ (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80058a6:	4b46      	ldr	r3, [pc, #280]	@ (80059c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058a8:	e000      	b.n	80058ac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80058aa:	4b46      	ldr	r3, [pc, #280]	@ (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80058ac:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d039      	beq.n	800592a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80058b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3a      	ldr	r2, [pc, #232]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a39      	ldr	r2, [pc, #228]	@ (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d10e      	bne.n	80058fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80058dc:	4836      	ldr	r0, [pc, #216]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80058de:	f7ff ff3d 	bl	800575c <LL_ADC_IsEnabled>
 80058e2:	4604      	mov	r4, r0
 80058e4:	4835      	ldr	r0, [pc, #212]	@ (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80058e6:	f7ff ff39 	bl	800575c <LL_ADC_IsEnabled>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4323      	orrs	r3, r4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	e008      	b.n	800590c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80058fa:	4833      	ldr	r0, [pc, #204]	@ (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80058fc:	f7ff ff2e 	bl	800575c <LL_ADC_IsEnabled>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf0c      	ite	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	2300      	movne	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d047      	beq.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005910:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	4b2d      	ldr	r3, [pc, #180]	@ (80059cc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005916:	4013      	ands	r3, r2
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	6811      	ldr	r1, [r2, #0]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	6892      	ldr	r2, [r2, #8]
 8005920:	430a      	orrs	r2, r1
 8005922:	431a      	orrs	r2, r3
 8005924:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005926:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005928:	e03a      	b.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800592a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005934:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1f      	ldr	r2, [pc, #124]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d10e      	bne.n	8005968 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800594a:	481b      	ldr	r0, [pc, #108]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800594c:	f7ff ff06 	bl	800575c <LL_ADC_IsEnabled>
 8005950:	4604      	mov	r4, r0
 8005952:	481a      	ldr	r0, [pc, #104]	@ (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005954:	f7ff ff02 	bl	800575c <LL_ADC_IsEnabled>
 8005958:	4603      	mov	r3, r0
 800595a:	4323      	orrs	r3, r4
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	e008      	b.n	800597a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005968:	4817      	ldr	r0, [pc, #92]	@ (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800596a:	f7ff fef7 	bl	800575c <LL_ADC_IsEnabled>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d010      	beq.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800597e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005984:	4013      	ands	r3, r2
 8005986:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005988:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800598a:	e009      	b.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005990:	f043 0220 	orr.w	r2, r3, #32
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800599e:	e000      	b.n	80059a2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80059aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	378c      	adds	r7, #140	@ 0x8c
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40022000 	.word	0x40022000
 80059bc:	40022100 	.word	0x40022100
 80059c0:	40022300 	.word	0x40022300
 80059c4:	58026300 	.word	0x58026300
 80059c8:	58026000 	.word	0x58026000
 80059cc:	fffff0e0 	.word	0xfffff0e0

080059d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <__NVIC_SetPriorityGrouping+0x40>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059ec:	4013      	ands	r3, r2
 80059ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80059f8:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <__NVIC_SetPriorityGrouping+0x44>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059fe:	4a04      	ldr	r2, [pc, #16]	@ (8005a10 <__NVIC_SetPriorityGrouping+0x40>)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	60d3      	str	r3, [r2, #12]
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	e000ed00 	.word	0xe000ed00
 8005a14:	05fa0000 	.word	0x05fa0000

08005a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a1c:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <__NVIC_GetPriorityGrouping+0x18>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	f003 0307 	and.w	r3, r3, #7
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	e000ed00 	.word	0xe000ed00

08005a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	db0b      	blt.n	8005a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	f003 021f 	and.w	r2, r3, #31
 8005a4c:	4907      	ldr	r1, [pc, #28]	@ (8005a6c <__NVIC_EnableIRQ+0x38>)
 8005a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	2001      	movs	r0, #1
 8005a56:	fa00 f202 	lsl.w	r2, r0, r2
 8005a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	e000e100 	.word	0xe000e100

08005a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	6039      	str	r1, [r7, #0]
 8005a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	db0a      	blt.n	8005a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	490c      	ldr	r1, [pc, #48]	@ (8005abc <__NVIC_SetPriority+0x4c>)
 8005a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a8e:	0112      	lsls	r2, r2, #4
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	440b      	add	r3, r1
 8005a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a98:	e00a      	b.n	8005ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4908      	ldr	r1, [pc, #32]	@ (8005ac0 <__NVIC_SetPriority+0x50>)
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	3b04      	subs	r3, #4
 8005aa8:	0112      	lsls	r2, r2, #4
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	440b      	add	r3, r1
 8005aae:	761a      	strb	r2, [r3, #24]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	e000e100 	.word	0xe000e100
 8005ac0:	e000ed00 	.word	0xe000ed00

08005ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f1c3 0307 	rsb	r3, r3, #7
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	bf28      	it	cs
 8005ae2:	2304      	movcs	r3, #4
 8005ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	2b06      	cmp	r3, #6
 8005aec:	d902      	bls.n	8005af4 <NVIC_EncodePriority+0x30>
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	3b03      	subs	r3, #3
 8005af2:	e000      	b.n	8005af6 <NVIC_EncodePriority+0x32>
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43da      	mvns	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	401a      	ands	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	fa01 f303 	lsl.w	r3, r1, r3
 8005b16:	43d9      	mvns	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b1c:	4313      	orrs	r3, r2
         );
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3724      	adds	r7, #36	@ 0x24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b3c:	d301      	bcc.n	8005b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e00f      	b.n	8005b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b42:	4a0a      	ldr	r2, [pc, #40]	@ (8005b6c <SysTick_Config+0x40>)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b4a:	210f      	movs	r1, #15
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	f7ff ff8e 	bl	8005a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b54:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <SysTick_Config+0x40>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b5a:	4b04      	ldr	r3, [pc, #16]	@ (8005b6c <SysTick_Config+0x40>)
 8005b5c:	2207      	movs	r2, #7
 8005b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	e000e010 	.word	0xe000e010

08005b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff ff29 	bl	80059d0 <__NVIC_SetPriorityGrouping>
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b086      	sub	sp, #24
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b94:	f7ff ff40 	bl	8005a18 <__NVIC_GetPriorityGrouping>
 8005b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	6978      	ldr	r0, [r7, #20]
 8005ba0:	f7ff ff90 	bl	8005ac4 <NVIC_EncodePriority>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff ff5f 	bl	8005a70 <__NVIC_SetPriority>
}
 8005bb2:	bf00      	nop
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff ff33 	bl	8005a34 <__NVIC_EnableIRQ>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ffa4 	bl	8005b2c <SysTick_Config>
 8005be4:	4603      	mov	r3, r0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005bf8:	f7fd fdfc 	bl	80037f4 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e312      	b.n	800622e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a66      	ldr	r2, [pc, #408]	@ (8005da8 <HAL_DMA_Init+0x1b8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d04a      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a65      	ldr	r2, [pc, #404]	@ (8005dac <HAL_DMA_Init+0x1bc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d045      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a63      	ldr	r2, [pc, #396]	@ (8005db0 <HAL_DMA_Init+0x1c0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d040      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a62      	ldr	r2, [pc, #392]	@ (8005db4 <HAL_DMA_Init+0x1c4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d03b      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a60      	ldr	r2, [pc, #384]	@ (8005db8 <HAL_DMA_Init+0x1c8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d036      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a5f      	ldr	r2, [pc, #380]	@ (8005dbc <HAL_DMA_Init+0x1cc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d031      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a5d      	ldr	r2, [pc, #372]	@ (8005dc0 <HAL_DMA_Init+0x1d0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d02c      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a5c      	ldr	r2, [pc, #368]	@ (8005dc4 <HAL_DMA_Init+0x1d4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d027      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a5a      	ldr	r2, [pc, #360]	@ (8005dc8 <HAL_DMA_Init+0x1d8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d022      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a59      	ldr	r2, [pc, #356]	@ (8005dcc <HAL_DMA_Init+0x1dc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d01d      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a57      	ldr	r2, [pc, #348]	@ (8005dd0 <HAL_DMA_Init+0x1e0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d018      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a56      	ldr	r2, [pc, #344]	@ (8005dd4 <HAL_DMA_Init+0x1e4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a54      	ldr	r2, [pc, #336]	@ (8005dd8 <HAL_DMA_Init+0x1e8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00e      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a53      	ldr	r2, [pc, #332]	@ (8005ddc <HAL_DMA_Init+0x1ec>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a51      	ldr	r2, [pc, #324]	@ (8005de0 <HAL_DMA_Init+0x1f0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_DMA_Init+0xb8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a50      	ldr	r2, [pc, #320]	@ (8005de4 <HAL_DMA_Init+0x1f4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d101      	bne.n	8005cac <HAL_DMA_Init+0xbc>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_DMA_Init+0xbe>
 8005cac:	2300      	movs	r3, #0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 813c 	beq.w	8005f2c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a37      	ldr	r2, [pc, #220]	@ (8005da8 <HAL_DMA_Init+0x1b8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d04a      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a36      	ldr	r2, [pc, #216]	@ (8005dac <HAL_DMA_Init+0x1bc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d045      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a34      	ldr	r2, [pc, #208]	@ (8005db0 <HAL_DMA_Init+0x1c0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d040      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a33      	ldr	r2, [pc, #204]	@ (8005db4 <HAL_DMA_Init+0x1c4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d03b      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a31      	ldr	r2, [pc, #196]	@ (8005db8 <HAL_DMA_Init+0x1c8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d036      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a30      	ldr	r2, [pc, #192]	@ (8005dbc <HAL_DMA_Init+0x1cc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d031      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc0 <HAL_DMA_Init+0x1d0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d02c      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc4 <HAL_DMA_Init+0x1d4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d027      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc8 <HAL_DMA_Init+0x1d8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d022      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2a      	ldr	r2, [pc, #168]	@ (8005dcc <HAL_DMA_Init+0x1dc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d01d      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a28      	ldr	r2, [pc, #160]	@ (8005dd0 <HAL_DMA_Init+0x1e0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d018      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a27      	ldr	r2, [pc, #156]	@ (8005dd4 <HAL_DMA_Init+0x1e4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d013      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a25      	ldr	r2, [pc, #148]	@ (8005dd8 <HAL_DMA_Init+0x1e8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00e      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a24      	ldr	r2, [pc, #144]	@ (8005ddc <HAL_DMA_Init+0x1ec>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d009      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a22      	ldr	r2, [pc, #136]	@ (8005de0 <HAL_DMA_Init+0x1f0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_DMA_Init+0x174>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a21      	ldr	r2, [pc, #132]	@ (8005de4 <HAL_DMA_Init+0x1f4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d108      	bne.n	8005d76 <HAL_DMA_Init+0x186>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e007      	b.n	8005d86 <HAL_DMA_Init+0x196>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d86:	e02f      	b.n	8005de8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d88:	f7fd fd34 	bl	80037f4 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d928      	bls.n	8005de8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e242      	b.n	800622e <HAL_DMA_Init+0x63e>
 8005da8:	40020010 	.word	0x40020010
 8005dac:	40020028 	.word	0x40020028
 8005db0:	40020040 	.word	0x40020040
 8005db4:	40020058 	.word	0x40020058
 8005db8:	40020070 	.word	0x40020070
 8005dbc:	40020088 	.word	0x40020088
 8005dc0:	400200a0 	.word	0x400200a0
 8005dc4:	400200b8 	.word	0x400200b8
 8005dc8:	40020410 	.word	0x40020410
 8005dcc:	40020428 	.word	0x40020428
 8005dd0:	40020440 	.word	0x40020440
 8005dd4:	40020458 	.word	0x40020458
 8005dd8:	40020470 	.word	0x40020470
 8005ddc:	40020488 	.word	0x40020488
 8005de0:	400204a0 	.word	0x400204a0
 8005de4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1c8      	bne.n	8005d88 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4b83      	ldr	r3, [pc, #524]	@ (8006010 <HAL_DMA_Init+0x420>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e26:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d107      	bne.n	8005e4c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	4313      	orrs	r3, r2
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b28      	cmp	r3, #40	@ 0x28
 8005e52:	d903      	bls.n	8005e5c <HAL_DMA_Init+0x26c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e5a:	d91f      	bls.n	8005e9c <HAL_DMA_Init+0x2ac>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e62:	d903      	bls.n	8005e6c <HAL_DMA_Init+0x27c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b42      	cmp	r3, #66	@ 0x42
 8005e6a:	d917      	bls.n	8005e9c <HAL_DMA_Init+0x2ac>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b46      	cmp	r3, #70	@ 0x46
 8005e72:	d903      	bls.n	8005e7c <HAL_DMA_Init+0x28c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b48      	cmp	r3, #72	@ 0x48
 8005e7a:	d90f      	bls.n	8005e9c <HAL_DMA_Init+0x2ac>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b4e      	cmp	r3, #78	@ 0x4e
 8005e82:	d903      	bls.n	8005e8c <HAL_DMA_Init+0x29c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b52      	cmp	r3, #82	@ 0x52
 8005e8a:	d907      	bls.n	8005e9c <HAL_DMA_Init+0x2ac>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b73      	cmp	r3, #115	@ 0x73
 8005e92:	d905      	bls.n	8005ea0 <HAL_DMA_Init+0x2b0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b77      	cmp	r3, #119	@ 0x77
 8005e9a:	d801      	bhi.n	8005ea0 <HAL_DMA_Init+0x2b0>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <HAL_DMA_Init+0x2b2>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 0307 	bic.w	r3, r3, #7
 8005ec4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d117      	bne.n	8005f08 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f002 fb2e 	bl	800854c <DMA_CheckFifoParam>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2240      	movs	r2, #64	@ 0x40
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e192      	b.n	800622e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f002 fa69 	bl	80083e8 <DMA_CalcBaseAndBitshift>
 8005f16:	4603      	mov	r3, r0
 8005f18:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	223f      	movs	r2, #63	@ 0x3f
 8005f24:	409a      	lsls	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	609a      	str	r2, [r3, #8]
 8005f2a:	e0c8      	b.n	80060be <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a38      	ldr	r2, [pc, #224]	@ (8006014 <HAL_DMA_Init+0x424>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_DMA_Init+0x38c>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a37      	ldr	r2, [pc, #220]	@ (8006018 <HAL_DMA_Init+0x428>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d01d      	beq.n	8005f7c <HAL_DMA_Init+0x38c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a35      	ldr	r2, [pc, #212]	@ (800601c <HAL_DMA_Init+0x42c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_DMA_Init+0x38c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a34      	ldr	r2, [pc, #208]	@ (8006020 <HAL_DMA_Init+0x430>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_DMA_Init+0x38c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a32      	ldr	r2, [pc, #200]	@ (8006024 <HAL_DMA_Init+0x434>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_DMA_Init+0x38c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a31      	ldr	r2, [pc, #196]	@ (8006028 <HAL_DMA_Init+0x438>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_DMA_Init+0x38c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800602c <HAL_DMA_Init+0x43c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_DMA_Init+0x38c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2e      	ldr	r2, [pc, #184]	@ (8006030 <HAL_DMA_Init+0x440>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d101      	bne.n	8005f80 <HAL_DMA_Init+0x390>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <HAL_DMA_Init+0x392>
 8005f80:	2300      	movs	r3, #0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8092 	beq.w	80060ac <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a21      	ldr	r2, [pc, #132]	@ (8006014 <HAL_DMA_Init+0x424>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d021      	beq.n	8005fd6 <HAL_DMA_Init+0x3e6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a20      	ldr	r2, [pc, #128]	@ (8006018 <HAL_DMA_Init+0x428>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d01c      	beq.n	8005fd6 <HAL_DMA_Init+0x3e6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800601c <HAL_DMA_Init+0x42c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d017      	beq.n	8005fd6 <HAL_DMA_Init+0x3e6>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	@ (8006020 <HAL_DMA_Init+0x430>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d012      	beq.n	8005fd6 <HAL_DMA_Init+0x3e6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8006024 <HAL_DMA_Init+0x434>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00d      	beq.n	8005fd6 <HAL_DMA_Init+0x3e6>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8006028 <HAL_DMA_Init+0x438>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d008      	beq.n	8005fd6 <HAL_DMA_Init+0x3e6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a18      	ldr	r2, [pc, #96]	@ (800602c <HAL_DMA_Init+0x43c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <HAL_DMA_Init+0x3e6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a17      	ldr	r2, [pc, #92]	@ (8006030 <HAL_DMA_Init+0x440>)
 8005fd4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <HAL_DMA_Init+0x444>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b40      	cmp	r3, #64	@ 0x40
 8005ffc:	d01c      	beq.n	8006038 <HAL_DMA_Init+0x448>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b80      	cmp	r3, #128	@ 0x80
 8006004:	d102      	bne.n	800600c <HAL_DMA_Init+0x41c>
 8006006:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800600a:	e016      	b.n	800603a <HAL_DMA_Init+0x44a>
 800600c:	2300      	movs	r3, #0
 800600e:	e014      	b.n	800603a <HAL_DMA_Init+0x44a>
 8006010:	fe10803f 	.word	0xfe10803f
 8006014:	58025408 	.word	0x58025408
 8006018:	5802541c 	.word	0x5802541c
 800601c:	58025430 	.word	0x58025430
 8006020:	58025444 	.word	0x58025444
 8006024:	58025458 	.word	0x58025458
 8006028:	5802546c 	.word	0x5802546c
 800602c:	58025480 	.word	0x58025480
 8006030:	58025494 	.word	0x58025494
 8006034:	fffe000f 	.word	0xfffe000f
 8006038:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68d2      	ldr	r2, [r2, #12]
 800603e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006048:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006050:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006058:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006060:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006068:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	4b6e      	ldr	r3, [pc, #440]	@ (8006238 <HAL_DMA_Init+0x648>)
 8006080:	4413      	add	r3, r2
 8006082:	4a6e      	ldr	r2, [pc, #440]	@ (800623c <HAL_DMA_Init+0x64c>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	091b      	lsrs	r3, r3, #4
 800608a:	009a      	lsls	r2, r3, #2
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f002 f9a9 	bl	80083e8 <DMA_CalcBaseAndBitshift>
 8006096:	4603      	mov	r3, r0
 8006098:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	2201      	movs	r2, #1
 80060a4:	409a      	lsls	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	e008      	b.n	80060be <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2240      	movs	r2, #64	@ 0x40
 80060b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2203      	movs	r2, #3
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0b7      	b.n	800622e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5f      	ldr	r2, [pc, #380]	@ (8006240 <HAL_DMA_Init+0x650>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d072      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006244 <HAL_DMA_Init+0x654>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d06d      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a5c      	ldr	r2, [pc, #368]	@ (8006248 <HAL_DMA_Init+0x658>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d068      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a5a      	ldr	r2, [pc, #360]	@ (800624c <HAL_DMA_Init+0x65c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d063      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a59      	ldr	r2, [pc, #356]	@ (8006250 <HAL_DMA_Init+0x660>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d05e      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a57      	ldr	r2, [pc, #348]	@ (8006254 <HAL_DMA_Init+0x664>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d059      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a56      	ldr	r2, [pc, #344]	@ (8006258 <HAL_DMA_Init+0x668>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d054      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a54      	ldr	r2, [pc, #336]	@ (800625c <HAL_DMA_Init+0x66c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d04f      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a53      	ldr	r2, [pc, #332]	@ (8006260 <HAL_DMA_Init+0x670>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a51      	ldr	r2, [pc, #324]	@ (8006264 <HAL_DMA_Init+0x674>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a50      	ldr	r2, [pc, #320]	@ (8006268 <HAL_DMA_Init+0x678>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a4e      	ldr	r2, [pc, #312]	@ (800626c <HAL_DMA_Init+0x67c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a4d      	ldr	r2, [pc, #308]	@ (8006270 <HAL_DMA_Init+0x680>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a4b      	ldr	r2, [pc, #300]	@ (8006274 <HAL_DMA_Init+0x684>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4a      	ldr	r2, [pc, #296]	@ (8006278 <HAL_DMA_Init+0x688>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a48      	ldr	r2, [pc, #288]	@ (800627c <HAL_DMA_Init+0x68c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a47      	ldr	r2, [pc, #284]	@ (8006280 <HAL_DMA_Init+0x690>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a45      	ldr	r2, [pc, #276]	@ (8006284 <HAL_DMA_Init+0x694>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a44      	ldr	r2, [pc, #272]	@ (8006288 <HAL_DMA_Init+0x698>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a42      	ldr	r2, [pc, #264]	@ (800628c <HAL_DMA_Init+0x69c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a41      	ldr	r2, [pc, #260]	@ (8006290 <HAL_DMA_Init+0x6a0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a3f      	ldr	r2, [pc, #252]	@ (8006294 <HAL_DMA_Init+0x6a4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a3e      	ldr	r2, [pc, #248]	@ (8006298 <HAL_DMA_Init+0x6a8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMA_Init+0x5be>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a3c      	ldr	r2, [pc, #240]	@ (800629c <HAL_DMA_Init+0x6ac>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d101      	bne.n	80061b2 <HAL_DMA_Init+0x5c2>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <HAL_DMA_Init+0x5c4>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d032      	beq.n	800621e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f002 fa43 	bl	8008644 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b80      	cmp	r3, #128	@ 0x80
 80061c4:	d102      	bne.n	80061cc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80061e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d010      	beq.n	800620c <HAL_DMA_Init+0x61c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d80c      	bhi.n	800620c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f002 fac0 	bl	8008778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	e008      	b.n	800621e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	a7fdabf8 	.word	0xa7fdabf8
 800623c:	cccccccd 	.word	0xcccccccd
 8006240:	40020010 	.word	0x40020010
 8006244:	40020028 	.word	0x40020028
 8006248:	40020040 	.word	0x40020040
 800624c:	40020058 	.word	0x40020058
 8006250:	40020070 	.word	0x40020070
 8006254:	40020088 	.word	0x40020088
 8006258:	400200a0 	.word	0x400200a0
 800625c:	400200b8 	.word	0x400200b8
 8006260:	40020410 	.word	0x40020410
 8006264:	40020428 	.word	0x40020428
 8006268:	40020440 	.word	0x40020440
 800626c:	40020458 	.word	0x40020458
 8006270:	40020470 	.word	0x40020470
 8006274:	40020488 	.word	0x40020488
 8006278:	400204a0 	.word	0x400204a0
 800627c:	400204b8 	.word	0x400204b8
 8006280:	58025408 	.word	0x58025408
 8006284:	5802541c 	.word	0x5802541c
 8006288:	58025430 	.word	0x58025430
 800628c:	58025444 	.word	0x58025444
 8006290:	58025458 	.word	0x58025458
 8006294:	5802546c 	.word	0x5802546c
 8006298:	58025480 	.word	0x58025480
 800629c:	58025494 	.word	0x58025494

080062a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e226      	b.n	800670a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_DMA_Start_IT+0x2a>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e21f      	b.n	800670a <HAL_DMA_Start_IT+0x46a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	f040 820a 	bne.w	80066f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a68      	ldr	r2, [pc, #416]	@ (8006494 <HAL_DMA_Start_IT+0x1f4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d04a      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a66      	ldr	r2, [pc, #408]	@ (8006498 <HAL_DMA_Start_IT+0x1f8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d045      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a65      	ldr	r2, [pc, #404]	@ (800649c <HAL_DMA_Start_IT+0x1fc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d040      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a63      	ldr	r2, [pc, #396]	@ (80064a0 <HAL_DMA_Start_IT+0x200>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d03b      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a62      	ldr	r2, [pc, #392]	@ (80064a4 <HAL_DMA_Start_IT+0x204>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d036      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a60      	ldr	r2, [pc, #384]	@ (80064a8 <HAL_DMA_Start_IT+0x208>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d031      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a5f      	ldr	r2, [pc, #380]	@ (80064ac <HAL_DMA_Start_IT+0x20c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d02c      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a5d      	ldr	r2, [pc, #372]	@ (80064b0 <HAL_DMA_Start_IT+0x210>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d027      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a5c      	ldr	r2, [pc, #368]	@ (80064b4 <HAL_DMA_Start_IT+0x214>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d022      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5a      	ldr	r2, [pc, #360]	@ (80064b8 <HAL_DMA_Start_IT+0x218>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01d      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a59      	ldr	r2, [pc, #356]	@ (80064bc <HAL_DMA_Start_IT+0x21c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a57      	ldr	r2, [pc, #348]	@ (80064c0 <HAL_DMA_Start_IT+0x220>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a56      	ldr	r2, [pc, #344]	@ (80064c4 <HAL_DMA_Start_IT+0x224>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a54      	ldr	r2, [pc, #336]	@ (80064c8 <HAL_DMA_Start_IT+0x228>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a53      	ldr	r2, [pc, #332]	@ (80064cc <HAL_DMA_Start_IT+0x22c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_DMA_Start_IT+0xee>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a51      	ldr	r2, [pc, #324]	@ (80064d0 <HAL_DMA_Start_IT+0x230>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d108      	bne.n	80063a0 <HAL_DMA_Start_IT+0x100>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e007      	b.n	80063b0 <HAL_DMA_Start_IT+0x110>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f001 fe6a 	bl	8008090 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a34      	ldr	r2, [pc, #208]	@ (8006494 <HAL_DMA_Start_IT+0x1f4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d04a      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a33      	ldr	r2, [pc, #204]	@ (8006498 <HAL_DMA_Start_IT+0x1f8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d045      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a31      	ldr	r2, [pc, #196]	@ (800649c <HAL_DMA_Start_IT+0x1fc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d040      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a30      	ldr	r2, [pc, #192]	@ (80064a0 <HAL_DMA_Start_IT+0x200>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d03b      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a2e      	ldr	r2, [pc, #184]	@ (80064a4 <HAL_DMA_Start_IT+0x204>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d036      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2d      	ldr	r2, [pc, #180]	@ (80064a8 <HAL_DMA_Start_IT+0x208>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d031      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2b      	ldr	r2, [pc, #172]	@ (80064ac <HAL_DMA_Start_IT+0x20c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d02c      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2a      	ldr	r2, [pc, #168]	@ (80064b0 <HAL_DMA_Start_IT+0x210>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d027      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a28      	ldr	r2, [pc, #160]	@ (80064b4 <HAL_DMA_Start_IT+0x214>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a27      	ldr	r2, [pc, #156]	@ (80064b8 <HAL_DMA_Start_IT+0x218>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d01d      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a25      	ldr	r2, [pc, #148]	@ (80064bc <HAL_DMA_Start_IT+0x21c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a24      	ldr	r2, [pc, #144]	@ (80064c0 <HAL_DMA_Start_IT+0x220>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a22      	ldr	r2, [pc, #136]	@ (80064c4 <HAL_DMA_Start_IT+0x224>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a21      	ldr	r2, [pc, #132]	@ (80064c8 <HAL_DMA_Start_IT+0x228>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1f      	ldr	r2, [pc, #124]	@ (80064cc <HAL_DMA_Start_IT+0x22c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_DMA_Start_IT+0x1bc>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1e      	ldr	r2, [pc, #120]	@ (80064d0 <HAL_DMA_Start_IT+0x230>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d101      	bne.n	8006460 <HAL_DMA_Start_IT+0x1c0>
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <HAL_DMA_Start_IT+0x1c2>
 8006460:	2300      	movs	r3, #0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d036      	beq.n	80064d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f023 021e 	bic.w	r2, r3, #30
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0216 	orr.w	r2, r2, #22
 8006478:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d03e      	beq.n	8006500 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0208 	orr.w	r2, r2, #8
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e035      	b.n	8006500 <HAL_DMA_Start_IT+0x260>
 8006494:	40020010 	.word	0x40020010
 8006498:	40020028 	.word	0x40020028
 800649c:	40020040 	.word	0x40020040
 80064a0:	40020058 	.word	0x40020058
 80064a4:	40020070 	.word	0x40020070
 80064a8:	40020088 	.word	0x40020088
 80064ac:	400200a0 	.word	0x400200a0
 80064b0:	400200b8 	.word	0x400200b8
 80064b4:	40020410 	.word	0x40020410
 80064b8:	40020428 	.word	0x40020428
 80064bc:	40020440 	.word	0x40020440
 80064c0:	40020458 	.word	0x40020458
 80064c4:	40020470 	.word	0x40020470
 80064c8:	40020488 	.word	0x40020488
 80064cc:	400204a0 	.word	0x400204a0
 80064d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 020e 	bic.w	r2, r3, #14
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 020a 	orr.w	r2, r2, #10
 80064e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0204 	orr.w	r2, r2, #4
 80064fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a83      	ldr	r2, [pc, #524]	@ (8006714 <HAL_DMA_Start_IT+0x474>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d072      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a82      	ldr	r2, [pc, #520]	@ (8006718 <HAL_DMA_Start_IT+0x478>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d06d      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a80      	ldr	r2, [pc, #512]	@ (800671c <HAL_DMA_Start_IT+0x47c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d068      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7f      	ldr	r2, [pc, #508]	@ (8006720 <HAL_DMA_Start_IT+0x480>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d063      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a7d      	ldr	r2, [pc, #500]	@ (8006724 <HAL_DMA_Start_IT+0x484>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d05e      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a7c      	ldr	r2, [pc, #496]	@ (8006728 <HAL_DMA_Start_IT+0x488>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d059      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a7a      	ldr	r2, [pc, #488]	@ (800672c <HAL_DMA_Start_IT+0x48c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d054      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a79      	ldr	r2, [pc, #484]	@ (8006730 <HAL_DMA_Start_IT+0x490>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d04f      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a77      	ldr	r2, [pc, #476]	@ (8006734 <HAL_DMA_Start_IT+0x494>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d04a      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a76      	ldr	r2, [pc, #472]	@ (8006738 <HAL_DMA_Start_IT+0x498>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d045      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a74      	ldr	r2, [pc, #464]	@ (800673c <HAL_DMA_Start_IT+0x49c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d040      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a73      	ldr	r2, [pc, #460]	@ (8006740 <HAL_DMA_Start_IT+0x4a0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d03b      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a71      	ldr	r2, [pc, #452]	@ (8006744 <HAL_DMA_Start_IT+0x4a4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d036      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a70      	ldr	r2, [pc, #448]	@ (8006748 <HAL_DMA_Start_IT+0x4a8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d031      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a6e      	ldr	r2, [pc, #440]	@ (800674c <HAL_DMA_Start_IT+0x4ac>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d02c      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6d      	ldr	r2, [pc, #436]	@ (8006750 <HAL_DMA_Start_IT+0x4b0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d027      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006754 <HAL_DMA_Start_IT+0x4b4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a6a      	ldr	r2, [pc, #424]	@ (8006758 <HAL_DMA_Start_IT+0x4b8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01d      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a68      	ldr	r2, [pc, #416]	@ (800675c <HAL_DMA_Start_IT+0x4bc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a67      	ldr	r2, [pc, #412]	@ (8006760 <HAL_DMA_Start_IT+0x4c0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a65      	ldr	r2, [pc, #404]	@ (8006764 <HAL_DMA_Start_IT+0x4c4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a64      	ldr	r2, [pc, #400]	@ (8006768 <HAL_DMA_Start_IT+0x4c8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a62      	ldr	r2, [pc, #392]	@ (800676c <HAL_DMA_Start_IT+0x4cc>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_DMA_Start_IT+0x350>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a61      	ldr	r2, [pc, #388]	@ (8006770 <HAL_DMA_Start_IT+0x4d0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <HAL_DMA_Start_IT+0x354>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <HAL_DMA_Start_IT+0x356>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01a      	beq.n	8006630 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006616:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800662a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800662e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a37      	ldr	r2, [pc, #220]	@ (8006714 <HAL_DMA_Start_IT+0x474>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d04a      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a36      	ldr	r2, [pc, #216]	@ (8006718 <HAL_DMA_Start_IT+0x478>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d045      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a34      	ldr	r2, [pc, #208]	@ (800671c <HAL_DMA_Start_IT+0x47c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d040      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a33      	ldr	r2, [pc, #204]	@ (8006720 <HAL_DMA_Start_IT+0x480>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d03b      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a31      	ldr	r2, [pc, #196]	@ (8006724 <HAL_DMA_Start_IT+0x484>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d036      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a30      	ldr	r2, [pc, #192]	@ (8006728 <HAL_DMA_Start_IT+0x488>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d031      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2e      	ldr	r2, [pc, #184]	@ (800672c <HAL_DMA_Start_IT+0x48c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d02c      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2d      	ldr	r2, [pc, #180]	@ (8006730 <HAL_DMA_Start_IT+0x490>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d027      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2b      	ldr	r2, [pc, #172]	@ (8006734 <HAL_DMA_Start_IT+0x494>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d022      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <HAL_DMA_Start_IT+0x498>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d01d      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a28      	ldr	r2, [pc, #160]	@ (800673c <HAL_DMA_Start_IT+0x49c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d018      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a27      	ldr	r2, [pc, #156]	@ (8006740 <HAL_DMA_Start_IT+0x4a0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a25      	ldr	r2, [pc, #148]	@ (8006744 <HAL_DMA_Start_IT+0x4a4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00e      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <HAL_DMA_Start_IT+0x4a8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d009      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a22      	ldr	r2, [pc, #136]	@ (800674c <HAL_DMA_Start_IT+0x4ac>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d004      	beq.n	80066d0 <HAL_DMA_Start_IT+0x430>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a21      	ldr	r2, [pc, #132]	@ (8006750 <HAL_DMA_Start_IT+0x4b0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d108      	bne.n	80066e2 <HAL_DMA_Start_IT+0x442>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e012      	b.n	8006708 <HAL_DMA_Start_IT+0x468>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e009      	b.n	8006708 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006708:	7dfb      	ldrb	r3, [r7, #23]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40020010 	.word	0x40020010
 8006718:	40020028 	.word	0x40020028
 800671c:	40020040 	.word	0x40020040
 8006720:	40020058 	.word	0x40020058
 8006724:	40020070 	.word	0x40020070
 8006728:	40020088 	.word	0x40020088
 800672c:	400200a0 	.word	0x400200a0
 8006730:	400200b8 	.word	0x400200b8
 8006734:	40020410 	.word	0x40020410
 8006738:	40020428 	.word	0x40020428
 800673c:	40020440 	.word	0x40020440
 8006740:	40020458 	.word	0x40020458
 8006744:	40020470 	.word	0x40020470
 8006748:	40020488 	.word	0x40020488
 800674c:	400204a0 	.word	0x400204a0
 8006750:	400204b8 	.word	0x400204b8
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494

08006774 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800677c:	f7fd f83a 	bl	80037f4 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e2dc      	b.n	8006d46 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d008      	beq.n	80067aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2280      	movs	r2, #128	@ 0x80
 800679c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e2cd      	b.n	8006d46 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a76      	ldr	r2, [pc, #472]	@ (8006988 <HAL_DMA_Abort+0x214>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d04a      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a74      	ldr	r2, [pc, #464]	@ (800698c <HAL_DMA_Abort+0x218>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d045      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a73      	ldr	r2, [pc, #460]	@ (8006990 <HAL_DMA_Abort+0x21c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d040      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a71      	ldr	r2, [pc, #452]	@ (8006994 <HAL_DMA_Abort+0x220>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d03b      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a70      	ldr	r2, [pc, #448]	@ (8006998 <HAL_DMA_Abort+0x224>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d036      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a6e      	ldr	r2, [pc, #440]	@ (800699c <HAL_DMA_Abort+0x228>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d031      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6d      	ldr	r2, [pc, #436]	@ (80069a0 <HAL_DMA_Abort+0x22c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d02c      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a6b      	ldr	r2, [pc, #428]	@ (80069a4 <HAL_DMA_Abort+0x230>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d027      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a6a      	ldr	r2, [pc, #424]	@ (80069a8 <HAL_DMA_Abort+0x234>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a68      	ldr	r2, [pc, #416]	@ (80069ac <HAL_DMA_Abort+0x238>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a67      	ldr	r2, [pc, #412]	@ (80069b0 <HAL_DMA_Abort+0x23c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d018      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a65      	ldr	r2, [pc, #404]	@ (80069b4 <HAL_DMA_Abort+0x240>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a64      	ldr	r2, [pc, #400]	@ (80069b8 <HAL_DMA_Abort+0x244>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a62      	ldr	r2, [pc, #392]	@ (80069bc <HAL_DMA_Abort+0x248>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a61      	ldr	r2, [pc, #388]	@ (80069c0 <HAL_DMA_Abort+0x24c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <HAL_DMA_Abort+0xd6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a5f      	ldr	r2, [pc, #380]	@ (80069c4 <HAL_DMA_Abort+0x250>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <HAL_DMA_Abort+0xda>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <HAL_DMA_Abort+0xdc>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d013      	beq.n	800687c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 021e 	bic.w	r2, r2, #30
 8006862:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006872:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	e00a      	b.n	8006892 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 020e 	bic.w	r2, r2, #14
 800688a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a3c      	ldr	r2, [pc, #240]	@ (8006988 <HAL_DMA_Abort+0x214>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d072      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a3a      	ldr	r2, [pc, #232]	@ (800698c <HAL_DMA_Abort+0x218>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d06d      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a39      	ldr	r2, [pc, #228]	@ (8006990 <HAL_DMA_Abort+0x21c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d068      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a37      	ldr	r2, [pc, #220]	@ (8006994 <HAL_DMA_Abort+0x220>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d063      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a36      	ldr	r2, [pc, #216]	@ (8006998 <HAL_DMA_Abort+0x224>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d05e      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a34      	ldr	r2, [pc, #208]	@ (800699c <HAL_DMA_Abort+0x228>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d059      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a33      	ldr	r2, [pc, #204]	@ (80069a0 <HAL_DMA_Abort+0x22c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d054      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a31      	ldr	r2, [pc, #196]	@ (80069a4 <HAL_DMA_Abort+0x230>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d04f      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a30      	ldr	r2, [pc, #192]	@ (80069a8 <HAL_DMA_Abort+0x234>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d04a      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a2e      	ldr	r2, [pc, #184]	@ (80069ac <HAL_DMA_Abort+0x238>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d045      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2d      	ldr	r2, [pc, #180]	@ (80069b0 <HAL_DMA_Abort+0x23c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d040      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2b      	ldr	r2, [pc, #172]	@ (80069b4 <HAL_DMA_Abort+0x240>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d03b      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2a      	ldr	r2, [pc, #168]	@ (80069b8 <HAL_DMA_Abort+0x244>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d036      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a28      	ldr	r2, [pc, #160]	@ (80069bc <HAL_DMA_Abort+0x248>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d031      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a27      	ldr	r2, [pc, #156]	@ (80069c0 <HAL_DMA_Abort+0x24c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d02c      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a25      	ldr	r2, [pc, #148]	@ (80069c4 <HAL_DMA_Abort+0x250>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d027      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a24      	ldr	r2, [pc, #144]	@ (80069c8 <HAL_DMA_Abort+0x254>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d022      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a22      	ldr	r2, [pc, #136]	@ (80069cc <HAL_DMA_Abort+0x258>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01d      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a21      	ldr	r2, [pc, #132]	@ (80069d0 <HAL_DMA_Abort+0x25c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d018      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a1f      	ldr	r2, [pc, #124]	@ (80069d4 <HAL_DMA_Abort+0x260>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1e      	ldr	r2, [pc, #120]	@ (80069d8 <HAL_DMA_Abort+0x264>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00e      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1c      	ldr	r2, [pc, #112]	@ (80069dc <HAL_DMA_Abort+0x268>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1b      	ldr	r2, [pc, #108]	@ (80069e0 <HAL_DMA_Abort+0x26c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_DMA_Abort+0x20e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a19      	ldr	r2, [pc, #100]	@ (80069e4 <HAL_DMA_Abort+0x270>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d132      	bne.n	80069e8 <HAL_DMA_Abort+0x274>
 8006982:	2301      	movs	r3, #1
 8006984:	e031      	b.n	80069ea <HAL_DMA_Abort+0x276>
 8006986:	bf00      	nop
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
 80069c8:	58025408 	.word	0x58025408
 80069cc:	5802541c 	.word	0x5802541c
 80069d0:	58025430 	.word	0x58025430
 80069d4:	58025444 	.word	0x58025444
 80069d8:	58025458 	.word	0x58025458
 80069dc:	5802546c 	.word	0x5802546c
 80069e0:	58025480 	.word	0x58025480
 80069e4:	58025494 	.word	0x58025494
 80069e8:	2300      	movs	r3, #0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a6d      	ldr	r2, [pc, #436]	@ (8006bb8 <HAL_DMA_Abort+0x444>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d04a      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8006bbc <HAL_DMA_Abort+0x448>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d045      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a6a      	ldr	r2, [pc, #424]	@ (8006bc0 <HAL_DMA_Abort+0x44c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d040      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a68      	ldr	r2, [pc, #416]	@ (8006bc4 <HAL_DMA_Abort+0x450>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d03b      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a67      	ldr	r2, [pc, #412]	@ (8006bc8 <HAL_DMA_Abort+0x454>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d036      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a65      	ldr	r2, [pc, #404]	@ (8006bcc <HAL_DMA_Abort+0x458>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d031      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a64      	ldr	r2, [pc, #400]	@ (8006bd0 <HAL_DMA_Abort+0x45c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d02c      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a62      	ldr	r2, [pc, #392]	@ (8006bd4 <HAL_DMA_Abort+0x460>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d027      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a61      	ldr	r2, [pc, #388]	@ (8006bd8 <HAL_DMA_Abort+0x464>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d022      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a5f      	ldr	r2, [pc, #380]	@ (8006bdc <HAL_DMA_Abort+0x468>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01d      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a5e      	ldr	r2, [pc, #376]	@ (8006be0 <HAL_DMA_Abort+0x46c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d018      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5c      	ldr	r2, [pc, #368]	@ (8006be4 <HAL_DMA_Abort+0x470>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8006be8 <HAL_DMA_Abort+0x474>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a59      	ldr	r2, [pc, #356]	@ (8006bec <HAL_DMA_Abort+0x478>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a58      	ldr	r2, [pc, #352]	@ (8006bf0 <HAL_DMA_Abort+0x47c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_DMA_Abort+0x32a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a56      	ldr	r2, [pc, #344]	@ (8006bf4 <HAL_DMA_Abort+0x480>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d108      	bne.n	8006ab0 <HAL_DMA_Abort+0x33c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e007      	b.n	8006ac0 <HAL_DMA_Abort+0x34c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ac0:	e013      	b.n	8006aea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ac2:	f7fc fe97 	bl	80037f4 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b05      	cmp	r3, #5
 8006ace:	d90c      	bls.n	8006aea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e12d      	b.n	8006d46 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a2f      	ldr	r2, [pc, #188]	@ (8006bb8 <HAL_DMA_Abort+0x444>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d04a      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a2d      	ldr	r2, [pc, #180]	@ (8006bbc <HAL_DMA_Abort+0x448>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d045      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8006bc0 <HAL_DMA_Abort+0x44c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d040      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc4 <HAL_DMA_Abort+0x450>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d03b      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a29      	ldr	r2, [pc, #164]	@ (8006bc8 <HAL_DMA_Abort+0x454>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d036      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a27      	ldr	r2, [pc, #156]	@ (8006bcc <HAL_DMA_Abort+0x458>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d031      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a26      	ldr	r2, [pc, #152]	@ (8006bd0 <HAL_DMA_Abort+0x45c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d02c      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a24      	ldr	r2, [pc, #144]	@ (8006bd4 <HAL_DMA_Abort+0x460>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d027      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a23      	ldr	r2, [pc, #140]	@ (8006bd8 <HAL_DMA_Abort+0x464>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d022      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a21      	ldr	r2, [pc, #132]	@ (8006bdc <HAL_DMA_Abort+0x468>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d01d      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a20      	ldr	r2, [pc, #128]	@ (8006be0 <HAL_DMA_Abort+0x46c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1e      	ldr	r2, [pc, #120]	@ (8006be4 <HAL_DMA_Abort+0x470>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1d      	ldr	r2, [pc, #116]	@ (8006be8 <HAL_DMA_Abort+0x474>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bec <HAL_DMA_Abort+0x478>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf0 <HAL_DMA_Abort+0x47c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_DMA_Abort+0x422>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a18      	ldr	r2, [pc, #96]	@ (8006bf4 <HAL_DMA_Abort+0x480>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <HAL_DMA_Abort+0x426>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <HAL_DMA_Abort+0x428>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d02b      	beq.n	8006bf8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	223f      	movs	r2, #63	@ 0x3f
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	609a      	str	r2, [r3, #8]
 8006bb6:	e02a      	b.n	8006c0e <HAL_DMA_Abort+0x49a>
 8006bb8:	40020010 	.word	0x40020010
 8006bbc:	40020028 	.word	0x40020028
 8006bc0:	40020040 	.word	0x40020040
 8006bc4:	40020058 	.word	0x40020058
 8006bc8:	40020070 	.word	0x40020070
 8006bcc:	40020088 	.word	0x40020088
 8006bd0:	400200a0 	.word	0x400200a0
 8006bd4:	400200b8 	.word	0x400200b8
 8006bd8:	40020410 	.word	0x40020410
 8006bdc:	40020428 	.word	0x40020428
 8006be0:	40020440 	.word	0x40020440
 8006be4:	40020458 	.word	0x40020458
 8006be8:	40020470 	.word	0x40020470
 8006bec:	40020488 	.word	0x40020488
 8006bf0:	400204a0 	.word	0x400204a0
 8006bf4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bfc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2201      	movs	r2, #1
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a4f      	ldr	r2, [pc, #316]	@ (8006d50 <HAL_DMA_Abort+0x5dc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d072      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a4d      	ldr	r2, [pc, #308]	@ (8006d54 <HAL_DMA_Abort+0x5e0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d06d      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a4c      	ldr	r2, [pc, #304]	@ (8006d58 <HAL_DMA_Abort+0x5e4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d068      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a4a      	ldr	r2, [pc, #296]	@ (8006d5c <HAL_DMA_Abort+0x5e8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d063      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a49      	ldr	r2, [pc, #292]	@ (8006d60 <HAL_DMA_Abort+0x5ec>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d05e      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a47      	ldr	r2, [pc, #284]	@ (8006d64 <HAL_DMA_Abort+0x5f0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d059      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a46      	ldr	r2, [pc, #280]	@ (8006d68 <HAL_DMA_Abort+0x5f4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d054      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a44      	ldr	r2, [pc, #272]	@ (8006d6c <HAL_DMA_Abort+0x5f8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d04f      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a43      	ldr	r2, [pc, #268]	@ (8006d70 <HAL_DMA_Abort+0x5fc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d04a      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a41      	ldr	r2, [pc, #260]	@ (8006d74 <HAL_DMA_Abort+0x600>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d045      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a40      	ldr	r2, [pc, #256]	@ (8006d78 <HAL_DMA_Abort+0x604>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d040      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a3e      	ldr	r2, [pc, #248]	@ (8006d7c <HAL_DMA_Abort+0x608>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d03b      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8006d80 <HAL_DMA_Abort+0x60c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d036      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a3b      	ldr	r2, [pc, #236]	@ (8006d84 <HAL_DMA_Abort+0x610>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d031      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8006d88 <HAL_DMA_Abort+0x614>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d02c      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a38      	ldr	r2, [pc, #224]	@ (8006d8c <HAL_DMA_Abort+0x618>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d027      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a37      	ldr	r2, [pc, #220]	@ (8006d90 <HAL_DMA_Abort+0x61c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a35      	ldr	r2, [pc, #212]	@ (8006d94 <HAL_DMA_Abort+0x620>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01d      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a34      	ldr	r2, [pc, #208]	@ (8006d98 <HAL_DMA_Abort+0x624>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a32      	ldr	r2, [pc, #200]	@ (8006d9c <HAL_DMA_Abort+0x628>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a31      	ldr	r2, [pc, #196]	@ (8006da0 <HAL_DMA_Abort+0x62c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8006da4 <HAL_DMA_Abort+0x630>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a2e      	ldr	r2, [pc, #184]	@ (8006da8 <HAL_DMA_Abort+0x634>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_DMA_Abort+0x58a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8006dac <HAL_DMA_Abort+0x638>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d101      	bne.n	8006d02 <HAL_DMA_Abort+0x58e>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <HAL_DMA_Abort+0x590>
 8006d02:	2300      	movs	r3, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d015      	beq.n	8006d34 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d10:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00c      	beq.n	8006d34 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d28:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d32:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40020010 	.word	0x40020010
 8006d54:	40020028 	.word	0x40020028
 8006d58:	40020040 	.word	0x40020040
 8006d5c:	40020058 	.word	0x40020058
 8006d60:	40020070 	.word	0x40020070
 8006d64:	40020088 	.word	0x40020088
 8006d68:	400200a0 	.word	0x400200a0
 8006d6c:	400200b8 	.word	0x400200b8
 8006d70:	40020410 	.word	0x40020410
 8006d74:	40020428 	.word	0x40020428
 8006d78:	40020440 	.word	0x40020440
 8006d7c:	40020458 	.word	0x40020458
 8006d80:	40020470 	.word	0x40020470
 8006d84:	40020488 	.word	0x40020488
 8006d88:	400204a0 	.word	0x400204a0
 8006d8c:	400204b8 	.word	0x400204b8
 8006d90:	58025408 	.word	0x58025408
 8006d94:	5802541c 	.word	0x5802541c
 8006d98:	58025430 	.word	0x58025430
 8006d9c:	58025444 	.word	0x58025444
 8006da0:	58025458 	.word	0x58025458
 8006da4:	5802546c 	.word	0x5802546c
 8006da8:	58025480 	.word	0x58025480
 8006dac:	58025494 	.word	0x58025494

08006db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e237      	b.n	8007232 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d004      	beq.n	8006dd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2280      	movs	r2, #128	@ 0x80
 8006dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e22c      	b.n	8007232 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8006f50 <HAL_DMA_Abort_IT+0x1a0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d04a      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a5b      	ldr	r2, [pc, #364]	@ (8006f54 <HAL_DMA_Abort_IT+0x1a4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d045      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a59      	ldr	r2, [pc, #356]	@ (8006f58 <HAL_DMA_Abort_IT+0x1a8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d040      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a58      	ldr	r2, [pc, #352]	@ (8006f5c <HAL_DMA_Abort_IT+0x1ac>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d03b      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a56      	ldr	r2, [pc, #344]	@ (8006f60 <HAL_DMA_Abort_IT+0x1b0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d036      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a55      	ldr	r2, [pc, #340]	@ (8006f64 <HAL_DMA_Abort_IT+0x1b4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d031      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a53      	ldr	r2, [pc, #332]	@ (8006f68 <HAL_DMA_Abort_IT+0x1b8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d02c      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a52      	ldr	r2, [pc, #328]	@ (8006f6c <HAL_DMA_Abort_IT+0x1bc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d027      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a50      	ldr	r2, [pc, #320]	@ (8006f70 <HAL_DMA_Abort_IT+0x1c0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d022      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a4f      	ldr	r2, [pc, #316]	@ (8006f74 <HAL_DMA_Abort_IT+0x1c4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d01d      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a4d      	ldr	r2, [pc, #308]	@ (8006f78 <HAL_DMA_Abort_IT+0x1c8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d018      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8006f7c <HAL_DMA_Abort_IT+0x1cc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d013      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a4a      	ldr	r2, [pc, #296]	@ (8006f80 <HAL_DMA_Abort_IT+0x1d0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00e      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a49      	ldr	r2, [pc, #292]	@ (8006f84 <HAL_DMA_Abort_IT+0x1d4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a47      	ldr	r2, [pc, #284]	@ (8006f88 <HAL_DMA_Abort_IT+0x1d8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xc8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a46      	ldr	r2, [pc, #280]	@ (8006f8c <HAL_DMA_Abort_IT+0x1dc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <HAL_DMA_Abort_IT+0xcc>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_DMA_Abort_IT+0xce>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8086 	beq.w	8006f90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2204      	movs	r2, #4
 8006e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2f      	ldr	r2, [pc, #188]	@ (8006f50 <HAL_DMA_Abort_IT+0x1a0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d04a      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f54 <HAL_DMA_Abort_IT+0x1a4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d045      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f58 <HAL_DMA_Abort_IT+0x1a8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d040      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2b      	ldr	r2, [pc, #172]	@ (8006f5c <HAL_DMA_Abort_IT+0x1ac>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d03b      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a29      	ldr	r2, [pc, #164]	@ (8006f60 <HAL_DMA_Abort_IT+0x1b0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d036      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a28      	ldr	r2, [pc, #160]	@ (8006f64 <HAL_DMA_Abort_IT+0x1b4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d031      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	@ (8006f68 <HAL_DMA_Abort_IT+0x1b8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d02c      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a25      	ldr	r2, [pc, #148]	@ (8006f6c <HAL_DMA_Abort_IT+0x1bc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d027      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a23      	ldr	r2, [pc, #140]	@ (8006f70 <HAL_DMA_Abort_IT+0x1c0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d022      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a22      	ldr	r2, [pc, #136]	@ (8006f74 <HAL_DMA_Abort_IT+0x1c4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d01d      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a20      	ldr	r2, [pc, #128]	@ (8006f78 <HAL_DMA_Abort_IT+0x1c8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d018      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1f      	ldr	r2, [pc, #124]	@ (8006f7c <HAL_DMA_Abort_IT+0x1cc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d013      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1d      	ldr	r2, [pc, #116]	@ (8006f80 <HAL_DMA_Abort_IT+0x1d0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00e      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1c      	ldr	r2, [pc, #112]	@ (8006f84 <HAL_DMA_Abort_IT+0x1d4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d009      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8006f88 <HAL_DMA_Abort_IT+0x1d8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d004      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x17c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a19      	ldr	r2, [pc, #100]	@ (8006f8c <HAL_DMA_Abort_IT+0x1dc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d108      	bne.n	8006f3e <HAL_DMA_Abort_IT+0x18e>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	e178      	b.n	8007230 <HAL_DMA_Abort_IT+0x480>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0201 	bic.w	r2, r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e16f      	b.n	8007230 <HAL_DMA_Abort_IT+0x480>
 8006f50:	40020010 	.word	0x40020010
 8006f54:	40020028 	.word	0x40020028
 8006f58:	40020040 	.word	0x40020040
 8006f5c:	40020058 	.word	0x40020058
 8006f60:	40020070 	.word	0x40020070
 8006f64:	40020088 	.word	0x40020088
 8006f68:	400200a0 	.word	0x400200a0
 8006f6c:	400200b8 	.word	0x400200b8
 8006f70:	40020410 	.word	0x40020410
 8006f74:	40020428 	.word	0x40020428
 8006f78:	40020440 	.word	0x40020440
 8006f7c:	40020458 	.word	0x40020458
 8006f80:	40020470 	.word	0x40020470
 8006f84:	40020488 	.word	0x40020488
 8006f88:	400204a0 	.word	0x400204a0
 8006f8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 020e 	bic.w	r2, r2, #14
 8006f9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8007158 <HAL_DMA_Abort_IT+0x3a8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d04a      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a6b      	ldr	r2, [pc, #428]	@ (800715c <HAL_DMA_Abort_IT+0x3ac>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d045      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a69      	ldr	r2, [pc, #420]	@ (8007160 <HAL_DMA_Abort_IT+0x3b0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d040      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a68      	ldr	r2, [pc, #416]	@ (8007164 <HAL_DMA_Abort_IT+0x3b4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d03b      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a66      	ldr	r2, [pc, #408]	@ (8007168 <HAL_DMA_Abort_IT+0x3b8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d036      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a65      	ldr	r2, [pc, #404]	@ (800716c <HAL_DMA_Abort_IT+0x3bc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d031      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a63      	ldr	r2, [pc, #396]	@ (8007170 <HAL_DMA_Abort_IT+0x3c0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d02c      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a62      	ldr	r2, [pc, #392]	@ (8007174 <HAL_DMA_Abort_IT+0x3c4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d027      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a60      	ldr	r2, [pc, #384]	@ (8007178 <HAL_DMA_Abort_IT+0x3c8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d022      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a5f      	ldr	r2, [pc, #380]	@ (800717c <HAL_DMA_Abort_IT+0x3cc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d01d      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5d      	ldr	r2, [pc, #372]	@ (8007180 <HAL_DMA_Abort_IT+0x3d0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d018      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a5c      	ldr	r2, [pc, #368]	@ (8007184 <HAL_DMA_Abort_IT+0x3d4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d013      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5a      	ldr	r2, [pc, #360]	@ (8007188 <HAL_DMA_Abort_IT+0x3d8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00e      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a59      	ldr	r2, [pc, #356]	@ (800718c <HAL_DMA_Abort_IT+0x3dc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d009      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a57      	ldr	r2, [pc, #348]	@ (8007190 <HAL_DMA_Abort_IT+0x3e0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_DMA_Abort_IT+0x290>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a56      	ldr	r2, [pc, #344]	@ (8007194 <HAL_DMA_Abort_IT+0x3e4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d108      	bne.n	8007052 <HAL_DMA_Abort_IT+0x2a2>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	e007      	b.n	8007062 <HAL_DMA_Abort_IT+0x2b2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0201 	bic.w	r2, r2, #1
 8007060:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a3c      	ldr	r2, [pc, #240]	@ (8007158 <HAL_DMA_Abort_IT+0x3a8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d072      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a3a      	ldr	r2, [pc, #232]	@ (800715c <HAL_DMA_Abort_IT+0x3ac>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d06d      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a39      	ldr	r2, [pc, #228]	@ (8007160 <HAL_DMA_Abort_IT+0x3b0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d068      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a37      	ldr	r2, [pc, #220]	@ (8007164 <HAL_DMA_Abort_IT+0x3b4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d063      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a36      	ldr	r2, [pc, #216]	@ (8007168 <HAL_DMA_Abort_IT+0x3b8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d05e      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a34      	ldr	r2, [pc, #208]	@ (800716c <HAL_DMA_Abort_IT+0x3bc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d059      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a33      	ldr	r2, [pc, #204]	@ (8007170 <HAL_DMA_Abort_IT+0x3c0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d054      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a31      	ldr	r2, [pc, #196]	@ (8007174 <HAL_DMA_Abort_IT+0x3c4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d04f      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a30      	ldr	r2, [pc, #192]	@ (8007178 <HAL_DMA_Abort_IT+0x3c8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d04a      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2e      	ldr	r2, [pc, #184]	@ (800717c <HAL_DMA_Abort_IT+0x3cc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d045      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007180 <HAL_DMA_Abort_IT+0x3d0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d040      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007184 <HAL_DMA_Abort_IT+0x3d4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d03b      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a2a      	ldr	r2, [pc, #168]	@ (8007188 <HAL_DMA_Abort_IT+0x3d8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d036      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a28      	ldr	r2, [pc, #160]	@ (800718c <HAL_DMA_Abort_IT+0x3dc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d031      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a27      	ldr	r2, [pc, #156]	@ (8007190 <HAL_DMA_Abort_IT+0x3e0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d02c      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a25      	ldr	r2, [pc, #148]	@ (8007194 <HAL_DMA_Abort_IT+0x3e4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d027      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a24      	ldr	r2, [pc, #144]	@ (8007198 <HAL_DMA_Abort_IT+0x3e8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d022      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a22      	ldr	r2, [pc, #136]	@ (800719c <HAL_DMA_Abort_IT+0x3ec>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01d      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a21      	ldr	r2, [pc, #132]	@ (80071a0 <HAL_DMA_Abort_IT+0x3f0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1f      	ldr	r2, [pc, #124]	@ (80071a4 <HAL_DMA_Abort_IT+0x3f4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1e      	ldr	r2, [pc, #120]	@ (80071a8 <HAL_DMA_Abort_IT+0x3f8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1c      	ldr	r2, [pc, #112]	@ (80071ac <HAL_DMA_Abort_IT+0x3fc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1b      	ldr	r2, [pc, #108]	@ (80071b0 <HAL_DMA_Abort_IT+0x400>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_DMA_Abort_IT+0x3a2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a19      	ldr	r2, [pc, #100]	@ (80071b4 <HAL_DMA_Abort_IT+0x404>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d132      	bne.n	80071b8 <HAL_DMA_Abort_IT+0x408>
 8007152:	2301      	movs	r3, #1
 8007154:	e031      	b.n	80071ba <HAL_DMA_Abort_IT+0x40a>
 8007156:	bf00      	nop
 8007158:	40020010 	.word	0x40020010
 800715c:	40020028 	.word	0x40020028
 8007160:	40020040 	.word	0x40020040
 8007164:	40020058 	.word	0x40020058
 8007168:	40020070 	.word	0x40020070
 800716c:	40020088 	.word	0x40020088
 8007170:	400200a0 	.word	0x400200a0
 8007174:	400200b8 	.word	0x400200b8
 8007178:	40020410 	.word	0x40020410
 800717c:	40020428 	.word	0x40020428
 8007180:	40020440 	.word	0x40020440
 8007184:	40020458 	.word	0x40020458
 8007188:	40020470 	.word	0x40020470
 800718c:	40020488 	.word	0x40020488
 8007190:	400204a0 	.word	0x400204a0
 8007194:	400204b8 	.word	0x400204b8
 8007198:	58025408 	.word	0x58025408
 800719c:	5802541c 	.word	0x5802541c
 80071a0:	58025430 	.word	0x58025430
 80071a4:	58025444 	.word	0x58025444
 80071a8:	58025458 	.word	0x58025458
 80071ac:	5802546c 	.word	0x5802546c
 80071b0:	58025480 	.word	0x58025480
 80071b4:	58025494 	.word	0x58025494
 80071b8:	2300      	movs	r3, #0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d028      	beq.n	8007210 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	2201      	movs	r2, #1
 80071de:	409a      	lsls	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00c      	beq.n	8007210 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007204:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800720e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop

0800723c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	@ 0x28
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007248:	4b67      	ldr	r3, [pc, #412]	@ (80073e8 <HAL_DMA_IRQHandler+0x1ac>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a67      	ldr	r2, [pc, #412]	@ (80073ec <HAL_DMA_IRQHandler+0x1b0>)
 800724e:	fba2 2303 	umull	r2, r3, r2, r3
 8007252:	0a9b      	lsrs	r3, r3, #10
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007260:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a5f      	ldr	r2, [pc, #380]	@ (80073f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d04a      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a5d      	ldr	r2, [pc, #372]	@ (80073f4 <HAL_DMA_IRQHandler+0x1b8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d045      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a5c      	ldr	r2, [pc, #368]	@ (80073f8 <HAL_DMA_IRQHandler+0x1bc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d040      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a5a      	ldr	r2, [pc, #360]	@ (80073fc <HAL_DMA_IRQHandler+0x1c0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d03b      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a59      	ldr	r2, [pc, #356]	@ (8007400 <HAL_DMA_IRQHandler+0x1c4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d036      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a57      	ldr	r2, [pc, #348]	@ (8007404 <HAL_DMA_IRQHandler+0x1c8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d031      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a56      	ldr	r2, [pc, #344]	@ (8007408 <HAL_DMA_IRQHandler+0x1cc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d02c      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a54      	ldr	r2, [pc, #336]	@ (800740c <HAL_DMA_IRQHandler+0x1d0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d027      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a53      	ldr	r2, [pc, #332]	@ (8007410 <HAL_DMA_IRQHandler+0x1d4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a51      	ldr	r2, [pc, #324]	@ (8007414 <HAL_DMA_IRQHandler+0x1d8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a50      	ldr	r2, [pc, #320]	@ (8007418 <HAL_DMA_IRQHandler+0x1dc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d018      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a4e      	ldr	r2, [pc, #312]	@ (800741c <HAL_DMA_IRQHandler+0x1e0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d013      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a4d      	ldr	r2, [pc, #308]	@ (8007420 <HAL_DMA_IRQHandler+0x1e4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00e      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007424 <HAL_DMA_IRQHandler+0x1e8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d009      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007428 <HAL_DMA_IRQHandler+0x1ec>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <HAL_DMA_IRQHandler+0xd2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a48      	ldr	r2, [pc, #288]	@ (800742c <HAL_DMA_IRQHandler+0x1f0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d101      	bne.n	8007312 <HAL_DMA_IRQHandler+0xd6>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <HAL_DMA_IRQHandler+0xd8>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 842b 	beq.w	8007b70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2208      	movs	r2, #8
 8007324:	409a      	lsls	r2, r3
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	4013      	ands	r3, r2
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80a2 	beq.w	8007474 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2e      	ldr	r2, [pc, #184]	@ (80073f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d04a      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a2d      	ldr	r2, [pc, #180]	@ (80073f4 <HAL_DMA_IRQHandler+0x1b8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d045      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2b      	ldr	r2, [pc, #172]	@ (80073f8 <HAL_DMA_IRQHandler+0x1bc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d040      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2a      	ldr	r2, [pc, #168]	@ (80073fc <HAL_DMA_IRQHandler+0x1c0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d03b      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a28      	ldr	r2, [pc, #160]	@ (8007400 <HAL_DMA_IRQHandler+0x1c4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d036      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a27      	ldr	r2, [pc, #156]	@ (8007404 <HAL_DMA_IRQHandler+0x1c8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d031      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a25      	ldr	r2, [pc, #148]	@ (8007408 <HAL_DMA_IRQHandler+0x1cc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d02c      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a24      	ldr	r2, [pc, #144]	@ (800740c <HAL_DMA_IRQHandler+0x1d0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d027      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a22      	ldr	r2, [pc, #136]	@ (8007410 <HAL_DMA_IRQHandler+0x1d4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d022      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a21      	ldr	r2, [pc, #132]	@ (8007414 <HAL_DMA_IRQHandler+0x1d8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d01d      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a1f      	ldr	r2, [pc, #124]	@ (8007418 <HAL_DMA_IRQHandler+0x1dc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d018      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1e      	ldr	r2, [pc, #120]	@ (800741c <HAL_DMA_IRQHandler+0x1e0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007420 <HAL_DMA_IRQHandler+0x1e4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007424 <HAL_DMA_IRQHandler+0x1e8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d009      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <HAL_DMA_IRQHandler+0x1ec>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x194>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a18      	ldr	r2, [pc, #96]	@ (800742c <HAL_DMA_IRQHandler+0x1f0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d12f      	bne.n	8007430 <HAL_DMA_IRQHandler+0x1f4>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bf14      	ite	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	2300      	moveq	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	e02e      	b.n	8007444 <HAL_DMA_IRQHandler+0x208>
 80073e6:	bf00      	nop
 80073e8:	24000068 	.word	0x24000068
 80073ec:	1b4e81b5 	.word	0x1b4e81b5
 80073f0:	40020010 	.word	0x40020010
 80073f4:	40020028 	.word	0x40020028
 80073f8:	40020040 	.word	0x40020040
 80073fc:	40020058 	.word	0x40020058
 8007400:	40020070 	.word	0x40020070
 8007404:	40020088 	.word	0x40020088
 8007408:	400200a0 	.word	0x400200a0
 800740c:	400200b8 	.word	0x400200b8
 8007410:	40020410 	.word	0x40020410
 8007414:	40020428 	.word	0x40020428
 8007418:	40020440 	.word	0x40020440
 800741c:	40020458 	.word	0x40020458
 8007420:	40020470 	.word	0x40020470
 8007424:	40020488 	.word	0x40020488
 8007428:	400204a0 	.word	0x400204a0
 800742c:	400204b8 	.word	0x400204b8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf14      	ite	ne
 800743e:	2301      	movne	r3, #1
 8007440:	2300      	moveq	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d015      	beq.n	8007474 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0204 	bic.w	r2, r2, #4
 8007456:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2208      	movs	r2, #8
 8007462:	409a      	lsls	r2, r3
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746c:	f043 0201 	orr.w	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	fa22 f303 	lsr.w	r3, r2, r3
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d06e      	beq.n	8007568 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a69      	ldr	r2, [pc, #420]	@ (8007634 <HAL_DMA_IRQHandler+0x3f8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d04a      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a67      	ldr	r2, [pc, #412]	@ (8007638 <HAL_DMA_IRQHandler+0x3fc>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d045      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a66      	ldr	r2, [pc, #408]	@ (800763c <HAL_DMA_IRQHandler+0x400>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d040      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a64      	ldr	r2, [pc, #400]	@ (8007640 <HAL_DMA_IRQHandler+0x404>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d03b      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a63      	ldr	r2, [pc, #396]	@ (8007644 <HAL_DMA_IRQHandler+0x408>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d036      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a61      	ldr	r2, [pc, #388]	@ (8007648 <HAL_DMA_IRQHandler+0x40c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d031      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a60      	ldr	r2, [pc, #384]	@ (800764c <HAL_DMA_IRQHandler+0x410>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d02c      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007650 <HAL_DMA_IRQHandler+0x414>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d027      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a5d      	ldr	r2, [pc, #372]	@ (8007654 <HAL_DMA_IRQHandler+0x418>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d022      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007658 <HAL_DMA_IRQHandler+0x41c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01d      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a5a      	ldr	r2, [pc, #360]	@ (800765c <HAL_DMA_IRQHandler+0x420>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d018      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a58      	ldr	r2, [pc, #352]	@ (8007660 <HAL_DMA_IRQHandler+0x424>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a57      	ldr	r2, [pc, #348]	@ (8007664 <HAL_DMA_IRQHandler+0x428>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00e      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a55      	ldr	r2, [pc, #340]	@ (8007668 <HAL_DMA_IRQHandler+0x42c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d009      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a54      	ldr	r2, [pc, #336]	@ (800766c <HAL_DMA_IRQHandler+0x430>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <HAL_DMA_IRQHandler+0x2ee>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a52      	ldr	r2, [pc, #328]	@ (8007670 <HAL_DMA_IRQHandler+0x434>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d10a      	bne.n	8007540 <HAL_DMA_IRQHandler+0x304>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	bf14      	ite	ne
 8007538:	2301      	movne	r3, #1
 800753a:	2300      	moveq	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	e003      	b.n	8007548 <HAL_DMA_IRQHandler+0x30c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2300      	movs	r3, #0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00d      	beq.n	8007568 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007550:	f003 031f 	and.w	r3, r3, #31
 8007554:	2201      	movs	r2, #1
 8007556:	409a      	lsls	r2, r3
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007560:	f043 0202 	orr.w	r2, r3, #2
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2204      	movs	r2, #4
 8007572:	409a      	lsls	r2, r3
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 808f 	beq.w	800769c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2c      	ldr	r2, [pc, #176]	@ (8007634 <HAL_DMA_IRQHandler+0x3f8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d04a      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2a      	ldr	r2, [pc, #168]	@ (8007638 <HAL_DMA_IRQHandler+0x3fc>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d045      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a29      	ldr	r2, [pc, #164]	@ (800763c <HAL_DMA_IRQHandler+0x400>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d040      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a27      	ldr	r2, [pc, #156]	@ (8007640 <HAL_DMA_IRQHandler+0x404>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d03b      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a26      	ldr	r2, [pc, #152]	@ (8007644 <HAL_DMA_IRQHandler+0x408>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d036      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a24      	ldr	r2, [pc, #144]	@ (8007648 <HAL_DMA_IRQHandler+0x40c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d031      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a23      	ldr	r2, [pc, #140]	@ (800764c <HAL_DMA_IRQHandler+0x410>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d02c      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a21      	ldr	r2, [pc, #132]	@ (8007650 <HAL_DMA_IRQHandler+0x414>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d027      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a20      	ldr	r2, [pc, #128]	@ (8007654 <HAL_DMA_IRQHandler+0x418>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d022      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007658 <HAL_DMA_IRQHandler+0x41c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01d      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1d      	ldr	r2, [pc, #116]	@ (800765c <HAL_DMA_IRQHandler+0x420>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d018      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007660 <HAL_DMA_IRQHandler+0x424>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d013      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007664 <HAL_DMA_IRQHandler+0x428>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00e      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a18      	ldr	r2, [pc, #96]	@ (8007668 <HAL_DMA_IRQHandler+0x42c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d009      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a17      	ldr	r2, [pc, #92]	@ (800766c <HAL_DMA_IRQHandler+0x430>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d004      	beq.n	800761e <HAL_DMA_IRQHandler+0x3e2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a15      	ldr	r2, [pc, #84]	@ (8007670 <HAL_DMA_IRQHandler+0x434>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d12a      	bne.n	8007674 <HAL_DMA_IRQHandler+0x438>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf14      	ite	ne
 800762c:	2301      	movne	r3, #1
 800762e:	2300      	moveq	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	e023      	b.n	800767c <HAL_DMA_IRQHandler+0x440>
 8007634:	40020010 	.word	0x40020010
 8007638:	40020028 	.word	0x40020028
 800763c:	40020040 	.word	0x40020040
 8007640:	40020058 	.word	0x40020058
 8007644:	40020070 	.word	0x40020070
 8007648:	40020088 	.word	0x40020088
 800764c:	400200a0 	.word	0x400200a0
 8007650:	400200b8 	.word	0x400200b8
 8007654:	40020410 	.word	0x40020410
 8007658:	40020428 	.word	0x40020428
 800765c:	40020440 	.word	0x40020440
 8007660:	40020458 	.word	0x40020458
 8007664:	40020470 	.word	0x40020470
 8007668:	40020488 	.word	0x40020488
 800766c:	400204a0 	.word	0x400204a0
 8007670:	400204b8 	.word	0x400204b8
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007684:	f003 031f 	and.w	r3, r3, #31
 8007688:	2204      	movs	r2, #4
 800768a:	409a      	lsls	r2, r3
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007694:	f043 0204 	orr.w	r2, r3, #4
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2210      	movs	r2, #16
 80076a6:	409a      	lsls	r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80a6 	beq.w	80077fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a85      	ldr	r2, [pc, #532]	@ (80078cc <HAL_DMA_IRQHandler+0x690>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d04a      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a83      	ldr	r2, [pc, #524]	@ (80078d0 <HAL_DMA_IRQHandler+0x694>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d045      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a82      	ldr	r2, [pc, #520]	@ (80078d4 <HAL_DMA_IRQHandler+0x698>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d040      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a80      	ldr	r2, [pc, #512]	@ (80078d8 <HAL_DMA_IRQHandler+0x69c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d03b      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a7f      	ldr	r2, [pc, #508]	@ (80078dc <HAL_DMA_IRQHandler+0x6a0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d036      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a7d      	ldr	r2, [pc, #500]	@ (80078e0 <HAL_DMA_IRQHandler+0x6a4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d031      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a7c      	ldr	r2, [pc, #496]	@ (80078e4 <HAL_DMA_IRQHandler+0x6a8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d02c      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a7a      	ldr	r2, [pc, #488]	@ (80078e8 <HAL_DMA_IRQHandler+0x6ac>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d027      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a79      	ldr	r2, [pc, #484]	@ (80078ec <HAL_DMA_IRQHandler+0x6b0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d022      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a77      	ldr	r2, [pc, #476]	@ (80078f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01d      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a76      	ldr	r2, [pc, #472]	@ (80078f4 <HAL_DMA_IRQHandler+0x6b8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d018      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a74      	ldr	r2, [pc, #464]	@ (80078f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a73      	ldr	r2, [pc, #460]	@ (80078fc <HAL_DMA_IRQHandler+0x6c0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00e      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a71      	ldr	r2, [pc, #452]	@ (8007900 <HAL_DMA_IRQHandler+0x6c4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d009      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a70      	ldr	r2, [pc, #448]	@ (8007904 <HAL_DMA_IRQHandler+0x6c8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d004      	beq.n	8007752 <HAL_DMA_IRQHandler+0x516>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a6e      	ldr	r2, [pc, #440]	@ (8007908 <HAL_DMA_IRQHandler+0x6cc>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d10a      	bne.n	8007768 <HAL_DMA_IRQHandler+0x52c>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf14      	ite	ne
 8007760:	2301      	movne	r3, #1
 8007762:	2300      	moveq	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	e009      	b.n	800777c <HAL_DMA_IRQHandler+0x540>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0304 	and.w	r3, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf14      	ite	ne
 8007776:	2301      	movne	r3, #1
 8007778:	2300      	moveq	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d03e      	beq.n	80077fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	2210      	movs	r2, #16
 800778a:	409a      	lsls	r2, r3
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d018      	beq.n	80077d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d108      	bne.n	80077be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d024      	beq.n	80077fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
 80077bc:	e01f      	b.n	80077fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d01b      	beq.n	80077fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
 80077ce:	e016      	b.n	80077fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0208 	bic.w	r2, r2, #8
 80077ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2220      	movs	r2, #32
 8007808:	409a      	lsls	r2, r3
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	4013      	ands	r3, r2
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8110 	beq.w	8007a34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a2c      	ldr	r2, [pc, #176]	@ (80078cc <HAL_DMA_IRQHandler+0x690>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d04a      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2b      	ldr	r2, [pc, #172]	@ (80078d0 <HAL_DMA_IRQHandler+0x694>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d045      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a29      	ldr	r2, [pc, #164]	@ (80078d4 <HAL_DMA_IRQHandler+0x698>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d040      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a28      	ldr	r2, [pc, #160]	@ (80078d8 <HAL_DMA_IRQHandler+0x69c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d03b      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a26      	ldr	r2, [pc, #152]	@ (80078dc <HAL_DMA_IRQHandler+0x6a0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d036      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a25      	ldr	r2, [pc, #148]	@ (80078e0 <HAL_DMA_IRQHandler+0x6a4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d031      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a23      	ldr	r2, [pc, #140]	@ (80078e4 <HAL_DMA_IRQHandler+0x6a8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d02c      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a22      	ldr	r2, [pc, #136]	@ (80078e8 <HAL_DMA_IRQHandler+0x6ac>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d027      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a20      	ldr	r2, [pc, #128]	@ (80078ec <HAL_DMA_IRQHandler+0x6b0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d022      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1f      	ldr	r2, [pc, #124]	@ (80078f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d01d      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1d      	ldr	r2, [pc, #116]	@ (80078f4 <HAL_DMA_IRQHandler+0x6b8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d018      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1c      	ldr	r2, [pc, #112]	@ (80078f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d013      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1a      	ldr	r2, [pc, #104]	@ (80078fc <HAL_DMA_IRQHandler+0x6c0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00e      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a19      	ldr	r2, [pc, #100]	@ (8007900 <HAL_DMA_IRQHandler+0x6c4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d009      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a17      	ldr	r2, [pc, #92]	@ (8007904 <HAL_DMA_IRQHandler+0x6c8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x678>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a16      	ldr	r2, [pc, #88]	@ (8007908 <HAL_DMA_IRQHandler+0x6cc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d12b      	bne.n	800790c <HAL_DMA_IRQHandler+0x6d0>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	e02a      	b.n	8007920 <HAL_DMA_IRQHandler+0x6e4>
 80078ca:	bf00      	nop
 80078cc:	40020010 	.word	0x40020010
 80078d0:	40020028 	.word	0x40020028
 80078d4:	40020040 	.word	0x40020040
 80078d8:	40020058 	.word	0x40020058
 80078dc:	40020070 	.word	0x40020070
 80078e0:	40020088 	.word	0x40020088
 80078e4:	400200a0 	.word	0x400200a0
 80078e8:	400200b8 	.word	0x400200b8
 80078ec:	40020410 	.word	0x40020410
 80078f0:	40020428 	.word	0x40020428
 80078f4:	40020440 	.word	0x40020440
 80078f8:	40020458 	.word	0x40020458
 80078fc:	40020470 	.word	0x40020470
 8007900:	40020488 	.word	0x40020488
 8007904:	400204a0 	.word	0x400204a0
 8007908:	400204b8 	.word	0x400204b8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf14      	ite	ne
 800791a:	2301      	movne	r3, #1
 800791c:	2300      	moveq	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8087 	beq.w	8007a34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	2220      	movs	r2, #32
 8007930:	409a      	lsls	r2, r3
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b04      	cmp	r3, #4
 8007940:	d139      	bne.n	80079b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0216 	bic.w	r2, r2, #22
 8007950:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007960:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <HAL_DMA_IRQHandler+0x736>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0208 	bic.w	r2, r2, #8
 8007980:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	223f      	movs	r2, #63	@ 0x3f
 800798c:	409a      	lsls	r2, r3
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 834a 	beq.w	8008040 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
          }
          return;
 80079b4:	e344      	b.n	8008040 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d018      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d108      	bne.n	80079e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d02c      	beq.n	8007a34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	e027      	b.n	8007a34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d023      	beq.n	8007a34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
 80079f4:	e01e      	b.n	8007a34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10f      	bne.n	8007a24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0210 	bic.w	r2, r2, #16
 8007a12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8306 	beq.w	800804a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8088 	beq.w	8007b5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a7a      	ldr	r2, [pc, #488]	@ (8007c44 <HAL_DMA_IRQHandler+0xa08>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d04a      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a79      	ldr	r2, [pc, #484]	@ (8007c48 <HAL_DMA_IRQHandler+0xa0c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d045      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a77      	ldr	r2, [pc, #476]	@ (8007c4c <HAL_DMA_IRQHandler+0xa10>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d040      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a76      	ldr	r2, [pc, #472]	@ (8007c50 <HAL_DMA_IRQHandler+0xa14>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d03b      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a74      	ldr	r2, [pc, #464]	@ (8007c54 <HAL_DMA_IRQHandler+0xa18>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d036      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a73      	ldr	r2, [pc, #460]	@ (8007c58 <HAL_DMA_IRQHandler+0xa1c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d031      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a71      	ldr	r2, [pc, #452]	@ (8007c5c <HAL_DMA_IRQHandler+0xa20>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d02c      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a70      	ldr	r2, [pc, #448]	@ (8007c60 <HAL_DMA_IRQHandler+0xa24>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d027      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8007c64 <HAL_DMA_IRQHandler+0xa28>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d022      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a6d      	ldr	r2, [pc, #436]	@ (8007c68 <HAL_DMA_IRQHandler+0xa2c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d01d      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a6b      	ldr	r2, [pc, #428]	@ (8007c6c <HAL_DMA_IRQHandler+0xa30>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d018      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a6a      	ldr	r2, [pc, #424]	@ (8007c70 <HAL_DMA_IRQHandler+0xa34>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d013      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a68      	ldr	r2, [pc, #416]	@ (8007c74 <HAL_DMA_IRQHandler+0xa38>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00e      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a67      	ldr	r2, [pc, #412]	@ (8007c78 <HAL_DMA_IRQHandler+0xa3c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d009      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a65      	ldr	r2, [pc, #404]	@ (8007c7c <HAL_DMA_IRQHandler+0xa40>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x8b8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a64      	ldr	r2, [pc, #400]	@ (8007c80 <HAL_DMA_IRQHandler+0xa44>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d108      	bne.n	8007b06 <HAL_DMA_IRQHandler+0x8ca>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	e007      	b.n	8007b16 <HAL_DMA_IRQHandler+0x8da>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0201 	bic.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d307      	bcc.n	8007b32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f2      	bne.n	8007b16 <HAL_DMA_IRQHandler+0x8da>
 8007b30:	e000      	b.n	8007b34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007b32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2203      	movs	r2, #3
 8007b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007b4a:	e003      	b.n	8007b54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8272 	beq.w	800804a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
 8007b6e:	e26c      	b.n	800804a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a43      	ldr	r2, [pc, #268]	@ (8007c84 <HAL_DMA_IRQHandler+0xa48>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d022      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x984>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a42      	ldr	r2, [pc, #264]	@ (8007c88 <HAL_DMA_IRQHandler+0xa4c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d01d      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x984>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a40      	ldr	r2, [pc, #256]	@ (8007c8c <HAL_DMA_IRQHandler+0xa50>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d018      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x984>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a3f      	ldr	r2, [pc, #252]	@ (8007c90 <HAL_DMA_IRQHandler+0xa54>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d013      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x984>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a3d      	ldr	r2, [pc, #244]	@ (8007c94 <HAL_DMA_IRQHandler+0xa58>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00e      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x984>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8007c98 <HAL_DMA_IRQHandler+0xa5c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x984>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8007c9c <HAL_DMA_IRQHandler+0xa60>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x984>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a39      	ldr	r2, [pc, #228]	@ (8007ca0 <HAL_DMA_IRQHandler+0xa64>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d101      	bne.n	8007bc4 <HAL_DMA_IRQHandler+0x988>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <HAL_DMA_IRQHandler+0x98a>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 823f 	beq.w	800804a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	2204      	movs	r2, #4
 8007bde:	409a      	lsls	r2, r3
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80cd 	beq.w	8007d84 <HAL_DMA_IRQHandler+0xb48>
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 80c7 	beq.w	8007d84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2204      	movs	r2, #4
 8007c00:	409a      	lsls	r2, r3
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d049      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8210 	beq.w	8008044 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c2c:	e20a      	b.n	8008044 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8206 	beq.w	8008044 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c40:	e200      	b.n	8008044 <HAL_DMA_IRQHandler+0xe08>
 8007c42:	bf00      	nop
 8007c44:	40020010 	.word	0x40020010
 8007c48:	40020028 	.word	0x40020028
 8007c4c:	40020040 	.word	0x40020040
 8007c50:	40020058 	.word	0x40020058
 8007c54:	40020070 	.word	0x40020070
 8007c58:	40020088 	.word	0x40020088
 8007c5c:	400200a0 	.word	0x400200a0
 8007c60:	400200b8 	.word	0x400200b8
 8007c64:	40020410 	.word	0x40020410
 8007c68:	40020428 	.word	0x40020428
 8007c6c:	40020440 	.word	0x40020440
 8007c70:	40020458 	.word	0x40020458
 8007c74:	40020470 	.word	0x40020470
 8007c78:	40020488 	.word	0x40020488
 8007c7c:	400204a0 	.word	0x400204a0
 8007c80:	400204b8 	.word	0x400204b8
 8007c84:	58025408 	.word	0x58025408
 8007c88:	5802541c 	.word	0x5802541c
 8007c8c:	58025430 	.word	0x58025430
 8007c90:	58025444 	.word	0x58025444
 8007c94:	58025458 	.word	0x58025458
 8007c98:	5802546c 	.word	0x5802546c
 8007c9c:	58025480 	.word	0x58025480
 8007ca0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d160      	bne.n	8007d70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a7f      	ldr	r2, [pc, #508]	@ (8007eb0 <HAL_DMA_IRQHandler+0xc74>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d04a      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a7d      	ldr	r2, [pc, #500]	@ (8007eb4 <HAL_DMA_IRQHandler+0xc78>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d045      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a7c      	ldr	r2, [pc, #496]	@ (8007eb8 <HAL_DMA_IRQHandler+0xc7c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d040      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a7a      	ldr	r2, [pc, #488]	@ (8007ebc <HAL_DMA_IRQHandler+0xc80>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d03b      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a79      	ldr	r2, [pc, #484]	@ (8007ec0 <HAL_DMA_IRQHandler+0xc84>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d036      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a77      	ldr	r2, [pc, #476]	@ (8007ec4 <HAL_DMA_IRQHandler+0xc88>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d031      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a76      	ldr	r2, [pc, #472]	@ (8007ec8 <HAL_DMA_IRQHandler+0xc8c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d02c      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a74      	ldr	r2, [pc, #464]	@ (8007ecc <HAL_DMA_IRQHandler+0xc90>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d027      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a73      	ldr	r2, [pc, #460]	@ (8007ed0 <HAL_DMA_IRQHandler+0xc94>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d022      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a71      	ldr	r2, [pc, #452]	@ (8007ed4 <HAL_DMA_IRQHandler+0xc98>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01d      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a70      	ldr	r2, [pc, #448]	@ (8007ed8 <HAL_DMA_IRQHandler+0xc9c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d018      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a6e      	ldr	r2, [pc, #440]	@ (8007edc <HAL_DMA_IRQHandler+0xca0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a6d      	ldr	r2, [pc, #436]	@ (8007ee0 <HAL_DMA_IRQHandler+0xca4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a6b      	ldr	r2, [pc, #428]	@ (8007ee4 <HAL_DMA_IRQHandler+0xca8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8007ee8 <HAL_DMA_IRQHandler+0xcac>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xb12>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a68      	ldr	r2, [pc, #416]	@ (8007eec <HAL_DMA_IRQHandler+0xcb0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d108      	bne.n	8007d60 <HAL_DMA_IRQHandler+0xb24>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0208 	bic.w	r2, r2, #8
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e007      	b.n	8007d70 <HAL_DMA_IRQHandler+0xb34>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0204 	bic.w	r2, r2, #4
 8007d6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8165 	beq.w	8008044 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d82:	e15f      	b.n	8008044 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	4013      	ands	r3, r2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80c5 	beq.w	8007f24 <HAL_DMA_IRQHandler+0xce8>
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80bf 	beq.w	8007f24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	2202      	movs	r2, #2
 8007db0:	409a      	lsls	r2, r3
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d018      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d109      	bne.n	8007dde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 813a 	beq.w	8008048 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ddc:	e134      	b.n	8008048 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 8130 	beq.w	8008048 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007df0:	e12a      	b.n	8008048 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f040 8089 	bne.w	8007f10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a2b      	ldr	r2, [pc, #172]	@ (8007eb0 <HAL_DMA_IRQHandler+0xc74>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d04a      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a29      	ldr	r2, [pc, #164]	@ (8007eb4 <HAL_DMA_IRQHandler+0xc78>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d045      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a28      	ldr	r2, [pc, #160]	@ (8007eb8 <HAL_DMA_IRQHandler+0xc7c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d040      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a26      	ldr	r2, [pc, #152]	@ (8007ebc <HAL_DMA_IRQHandler+0xc80>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d03b      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a25      	ldr	r2, [pc, #148]	@ (8007ec0 <HAL_DMA_IRQHandler+0xc84>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d036      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a23      	ldr	r2, [pc, #140]	@ (8007ec4 <HAL_DMA_IRQHandler+0xc88>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d031      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a22      	ldr	r2, [pc, #136]	@ (8007ec8 <HAL_DMA_IRQHandler+0xc8c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d02c      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a20      	ldr	r2, [pc, #128]	@ (8007ecc <HAL_DMA_IRQHandler+0xc90>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d027      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed0 <HAL_DMA_IRQHandler+0xc94>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d022      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ed4 <HAL_DMA_IRQHandler+0xc98>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01d      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed8 <HAL_DMA_IRQHandler+0xc9c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d018      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1a      	ldr	r2, [pc, #104]	@ (8007edc <HAL_DMA_IRQHandler+0xca0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d013      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a19      	ldr	r2, [pc, #100]	@ (8007ee0 <HAL_DMA_IRQHandler+0xca4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00e      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a17      	ldr	r2, [pc, #92]	@ (8007ee4 <HAL_DMA_IRQHandler+0xca8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d009      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ee8 <HAL_DMA_IRQHandler+0xcac>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d004      	beq.n	8007e9e <HAL_DMA_IRQHandler+0xc62>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a14      	ldr	r2, [pc, #80]	@ (8007eec <HAL_DMA_IRQHandler+0xcb0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d128      	bne.n	8007ef0 <HAL_DMA_IRQHandler+0xcb4>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0214 	bic.w	r2, r2, #20
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e027      	b.n	8007f00 <HAL_DMA_IRQHandler+0xcc4>
 8007eb0:	40020010 	.word	0x40020010
 8007eb4:	40020028 	.word	0x40020028
 8007eb8:	40020040 	.word	0x40020040
 8007ebc:	40020058 	.word	0x40020058
 8007ec0:	40020070 	.word	0x40020070
 8007ec4:	40020088 	.word	0x40020088
 8007ec8:	400200a0 	.word	0x400200a0
 8007ecc:	400200b8 	.word	0x400200b8
 8007ed0:	40020410 	.word	0x40020410
 8007ed4:	40020428 	.word	0x40020428
 8007ed8:	40020440 	.word	0x40020440
 8007edc:	40020458 	.word	0x40020458
 8007ee0:	40020470 	.word	0x40020470
 8007ee4:	40020488 	.word	0x40020488
 8007ee8:	400204a0 	.word	0x400204a0
 8007eec:	400204b8 	.word	0x400204b8
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 020a 	bic.w	r2, r2, #10
 8007efe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8097 	beq.w	8008048 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f22:	e091      	b.n	8008048 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f28:	f003 031f 	and.w	r3, r3, #31
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8088 	beq.w	800804a <HAL_DMA_IRQHandler+0xe0e>
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8082 	beq.w	800804a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a41      	ldr	r2, [pc, #260]	@ (8008050 <HAL_DMA_IRQHandler+0xe14>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d04a      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a3f      	ldr	r2, [pc, #252]	@ (8008054 <HAL_DMA_IRQHandler+0xe18>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d045      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a3e      	ldr	r2, [pc, #248]	@ (8008058 <HAL_DMA_IRQHandler+0xe1c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d040      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a3c      	ldr	r2, [pc, #240]	@ (800805c <HAL_DMA_IRQHandler+0xe20>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d03b      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a3b      	ldr	r2, [pc, #236]	@ (8008060 <HAL_DMA_IRQHandler+0xe24>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d036      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a39      	ldr	r2, [pc, #228]	@ (8008064 <HAL_DMA_IRQHandler+0xe28>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d031      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a38      	ldr	r2, [pc, #224]	@ (8008068 <HAL_DMA_IRQHandler+0xe2c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d02c      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a36      	ldr	r2, [pc, #216]	@ (800806c <HAL_DMA_IRQHandler+0xe30>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d027      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a35      	ldr	r2, [pc, #212]	@ (8008070 <HAL_DMA_IRQHandler+0xe34>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d022      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a33      	ldr	r2, [pc, #204]	@ (8008074 <HAL_DMA_IRQHandler+0xe38>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d01d      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a32      	ldr	r2, [pc, #200]	@ (8008078 <HAL_DMA_IRQHandler+0xe3c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d018      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a30      	ldr	r2, [pc, #192]	@ (800807c <HAL_DMA_IRQHandler+0xe40>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8008080 <HAL_DMA_IRQHandler+0xe44>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8008084 <HAL_DMA_IRQHandler+0xe48>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d009      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8008088 <HAL_DMA_IRQHandler+0xe4c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d004      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xdaa>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800808c <HAL_DMA_IRQHandler+0xe50>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d108      	bne.n	8007ff8 <HAL_DMA_IRQHandler+0xdbc>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 021c 	bic.w	r2, r2, #28
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	e007      	b.n	8008008 <HAL_DMA_IRQHandler+0xdcc>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 020e 	bic.w	r2, r2, #14
 8008006:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	2201      	movs	r2, #1
 8008012:	409a      	lsls	r2, r3
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
 800803e:	e004      	b.n	800804a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008040:	bf00      	nop
 8008042:	e002      	b.n	800804a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008044:	bf00      	nop
 8008046:	e000      	b.n	800804a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008048:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800804a:	3728      	adds	r7, #40	@ 0x28
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40020010 	.word	0x40020010
 8008054:	40020028 	.word	0x40020028
 8008058:	40020040 	.word	0x40020040
 800805c:	40020058 	.word	0x40020058
 8008060:	40020070 	.word	0x40020070
 8008064:	40020088 	.word	0x40020088
 8008068:	400200a0 	.word	0x400200a0
 800806c:	400200b8 	.word	0x400200b8
 8008070:	40020410 	.word	0x40020410
 8008074:	40020428 	.word	0x40020428
 8008078:	40020440 	.word	0x40020440
 800807c:	40020458 	.word	0x40020458
 8008080:	40020470 	.word	0x40020470
 8008084:	40020488 	.word	0x40020488
 8008088:	400204a0 	.word	0x400204a0
 800808c:	400204b8 	.word	0x400204b8

08008090 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a7f      	ldr	r2, [pc, #508]	@ (80082ac <DMA_SetConfig+0x21c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d072      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a7d      	ldr	r2, [pc, #500]	@ (80082b0 <DMA_SetConfig+0x220>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d06d      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a7c      	ldr	r2, [pc, #496]	@ (80082b4 <DMA_SetConfig+0x224>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d068      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a7a      	ldr	r2, [pc, #488]	@ (80082b8 <DMA_SetConfig+0x228>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d063      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a79      	ldr	r2, [pc, #484]	@ (80082bc <DMA_SetConfig+0x22c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d05e      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a77      	ldr	r2, [pc, #476]	@ (80082c0 <DMA_SetConfig+0x230>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d059      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a76      	ldr	r2, [pc, #472]	@ (80082c4 <DMA_SetConfig+0x234>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d054      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a74      	ldr	r2, [pc, #464]	@ (80082c8 <DMA_SetConfig+0x238>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d04f      	beq.n	800819a <DMA_SetConfig+0x10a>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a73      	ldr	r2, [pc, #460]	@ (80082cc <DMA_SetConfig+0x23c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d04a      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a71      	ldr	r2, [pc, #452]	@ (80082d0 <DMA_SetConfig+0x240>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d045      	beq.n	800819a <DMA_SetConfig+0x10a>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a70      	ldr	r2, [pc, #448]	@ (80082d4 <DMA_SetConfig+0x244>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d040      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a6e      	ldr	r2, [pc, #440]	@ (80082d8 <DMA_SetConfig+0x248>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d03b      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a6d      	ldr	r2, [pc, #436]	@ (80082dc <DMA_SetConfig+0x24c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d036      	beq.n	800819a <DMA_SetConfig+0x10a>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a6b      	ldr	r2, [pc, #428]	@ (80082e0 <DMA_SetConfig+0x250>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d031      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a6a      	ldr	r2, [pc, #424]	@ (80082e4 <DMA_SetConfig+0x254>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d02c      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a68      	ldr	r2, [pc, #416]	@ (80082e8 <DMA_SetConfig+0x258>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d027      	beq.n	800819a <DMA_SetConfig+0x10a>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a67      	ldr	r2, [pc, #412]	@ (80082ec <DMA_SetConfig+0x25c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d022      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a65      	ldr	r2, [pc, #404]	@ (80082f0 <DMA_SetConfig+0x260>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d01d      	beq.n	800819a <DMA_SetConfig+0x10a>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a64      	ldr	r2, [pc, #400]	@ (80082f4 <DMA_SetConfig+0x264>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d018      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a62      	ldr	r2, [pc, #392]	@ (80082f8 <DMA_SetConfig+0x268>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d013      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a61      	ldr	r2, [pc, #388]	@ (80082fc <DMA_SetConfig+0x26c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00e      	beq.n	800819a <DMA_SetConfig+0x10a>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a5f      	ldr	r2, [pc, #380]	@ (8008300 <DMA_SetConfig+0x270>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d009      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a5e      	ldr	r2, [pc, #376]	@ (8008304 <DMA_SetConfig+0x274>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <DMA_SetConfig+0x10a>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a5c      	ldr	r2, [pc, #368]	@ (8008308 <DMA_SetConfig+0x278>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d101      	bne.n	800819e <DMA_SetConfig+0x10e>
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <DMA_SetConfig+0x110>
 800819e:	2300      	movs	r3, #0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00d      	beq.n	80081c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80081ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80081be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a39      	ldr	r2, [pc, #228]	@ (80082ac <DMA_SetConfig+0x21c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d04a      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a38      	ldr	r2, [pc, #224]	@ (80082b0 <DMA_SetConfig+0x220>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d045      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a36      	ldr	r2, [pc, #216]	@ (80082b4 <DMA_SetConfig+0x224>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d040      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a35      	ldr	r2, [pc, #212]	@ (80082b8 <DMA_SetConfig+0x228>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d03b      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a33      	ldr	r2, [pc, #204]	@ (80082bc <DMA_SetConfig+0x22c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d036      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a32      	ldr	r2, [pc, #200]	@ (80082c0 <DMA_SetConfig+0x230>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d031      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a30      	ldr	r2, [pc, #192]	@ (80082c4 <DMA_SetConfig+0x234>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d02c      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a2f      	ldr	r2, [pc, #188]	@ (80082c8 <DMA_SetConfig+0x238>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d027      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a2d      	ldr	r2, [pc, #180]	@ (80082cc <DMA_SetConfig+0x23c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d022      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a2c      	ldr	r2, [pc, #176]	@ (80082d0 <DMA_SetConfig+0x240>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d01d      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a2a      	ldr	r2, [pc, #168]	@ (80082d4 <DMA_SetConfig+0x244>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a29      	ldr	r2, [pc, #164]	@ (80082d8 <DMA_SetConfig+0x248>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d013      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a27      	ldr	r2, [pc, #156]	@ (80082dc <DMA_SetConfig+0x24c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00e      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a26      	ldr	r2, [pc, #152]	@ (80082e0 <DMA_SetConfig+0x250>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a24      	ldr	r2, [pc, #144]	@ (80082e4 <DMA_SetConfig+0x254>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <DMA_SetConfig+0x1d0>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a23      	ldr	r2, [pc, #140]	@ (80082e8 <DMA_SetConfig+0x258>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d101      	bne.n	8008264 <DMA_SetConfig+0x1d4>
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <DMA_SetConfig+0x1d6>
 8008264:	2300      	movs	r3, #0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d059      	beq.n	800831e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	223f      	movs	r2, #63	@ 0x3f
 8008274:	409a      	lsls	r2, r3
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008288:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b40      	cmp	r3, #64	@ 0x40
 8008298:	d138      	bne.n	800830c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082aa:	e086      	b.n	80083ba <DMA_SetConfig+0x32a>
 80082ac:	40020010 	.word	0x40020010
 80082b0:	40020028 	.word	0x40020028
 80082b4:	40020040 	.word	0x40020040
 80082b8:	40020058 	.word	0x40020058
 80082bc:	40020070 	.word	0x40020070
 80082c0:	40020088 	.word	0x40020088
 80082c4:	400200a0 	.word	0x400200a0
 80082c8:	400200b8 	.word	0x400200b8
 80082cc:	40020410 	.word	0x40020410
 80082d0:	40020428 	.word	0x40020428
 80082d4:	40020440 	.word	0x40020440
 80082d8:	40020458 	.word	0x40020458
 80082dc:	40020470 	.word	0x40020470
 80082e0:	40020488 	.word	0x40020488
 80082e4:	400204a0 	.word	0x400204a0
 80082e8:	400204b8 	.word	0x400204b8
 80082ec:	58025408 	.word	0x58025408
 80082f0:	5802541c 	.word	0x5802541c
 80082f4:	58025430 	.word	0x58025430
 80082f8:	58025444 	.word	0x58025444
 80082fc:	58025458 	.word	0x58025458
 8008300:	5802546c 	.word	0x5802546c
 8008304:	58025480 	.word	0x58025480
 8008308:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	60da      	str	r2, [r3, #12]
}
 800831c:	e04d      	b.n	80083ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a29      	ldr	r2, [pc, #164]	@ (80083c8 <DMA_SetConfig+0x338>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d022      	beq.n	800836e <DMA_SetConfig+0x2de>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a27      	ldr	r2, [pc, #156]	@ (80083cc <DMA_SetConfig+0x33c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d01d      	beq.n	800836e <DMA_SetConfig+0x2de>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a26      	ldr	r2, [pc, #152]	@ (80083d0 <DMA_SetConfig+0x340>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d018      	beq.n	800836e <DMA_SetConfig+0x2de>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a24      	ldr	r2, [pc, #144]	@ (80083d4 <DMA_SetConfig+0x344>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <DMA_SetConfig+0x2de>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a23      	ldr	r2, [pc, #140]	@ (80083d8 <DMA_SetConfig+0x348>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00e      	beq.n	800836e <DMA_SetConfig+0x2de>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a21      	ldr	r2, [pc, #132]	@ (80083dc <DMA_SetConfig+0x34c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d009      	beq.n	800836e <DMA_SetConfig+0x2de>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a20      	ldr	r2, [pc, #128]	@ (80083e0 <DMA_SetConfig+0x350>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d004      	beq.n	800836e <DMA_SetConfig+0x2de>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a1e      	ldr	r2, [pc, #120]	@ (80083e4 <DMA_SetConfig+0x354>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d101      	bne.n	8008372 <DMA_SetConfig+0x2e2>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <DMA_SetConfig+0x2e4>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d020      	beq.n	80083ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800837c:	f003 031f 	and.w	r3, r3, #31
 8008380:	2201      	movs	r2, #1
 8008382:	409a      	lsls	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b40      	cmp	r3, #64	@ 0x40
 8008396:	d108      	bne.n	80083aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	60da      	str	r2, [r3, #12]
}
 80083a8:	e007      	b.n	80083ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	60da      	str	r2, [r3, #12]
}
 80083ba:	bf00      	nop
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	58025408 	.word	0x58025408
 80083cc:	5802541c 	.word	0x5802541c
 80083d0:	58025430 	.word	0x58025430
 80083d4:	58025444 	.word	0x58025444
 80083d8:	58025458 	.word	0x58025458
 80083dc:	5802546c 	.word	0x5802546c
 80083e0:	58025480 	.word	0x58025480
 80083e4:	58025494 	.word	0x58025494

080083e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a42      	ldr	r2, [pc, #264]	@ (8008500 <DMA_CalcBaseAndBitshift+0x118>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d04a      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a41      	ldr	r2, [pc, #260]	@ (8008504 <DMA_CalcBaseAndBitshift+0x11c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d045      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a3f      	ldr	r2, [pc, #252]	@ (8008508 <DMA_CalcBaseAndBitshift+0x120>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d040      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a3e      	ldr	r2, [pc, #248]	@ (800850c <DMA_CalcBaseAndBitshift+0x124>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d03b      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a3c      	ldr	r2, [pc, #240]	@ (8008510 <DMA_CalcBaseAndBitshift+0x128>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d036      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a3b      	ldr	r2, [pc, #236]	@ (8008514 <DMA_CalcBaseAndBitshift+0x12c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d031      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a39      	ldr	r2, [pc, #228]	@ (8008518 <DMA_CalcBaseAndBitshift+0x130>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d02c      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a38      	ldr	r2, [pc, #224]	@ (800851c <DMA_CalcBaseAndBitshift+0x134>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d027      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a36      	ldr	r2, [pc, #216]	@ (8008520 <DMA_CalcBaseAndBitshift+0x138>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d022      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a35      	ldr	r2, [pc, #212]	@ (8008524 <DMA_CalcBaseAndBitshift+0x13c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d01d      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a33      	ldr	r2, [pc, #204]	@ (8008528 <DMA_CalcBaseAndBitshift+0x140>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d018      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a32      	ldr	r2, [pc, #200]	@ (800852c <DMA_CalcBaseAndBitshift+0x144>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d013      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a30      	ldr	r2, [pc, #192]	@ (8008530 <DMA_CalcBaseAndBitshift+0x148>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00e      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a2f      	ldr	r2, [pc, #188]	@ (8008534 <DMA_CalcBaseAndBitshift+0x14c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d009      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2d      	ldr	r2, [pc, #180]	@ (8008538 <DMA_CalcBaseAndBitshift+0x150>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d004      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xa8>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a2c      	ldr	r2, [pc, #176]	@ (800853c <DMA_CalcBaseAndBitshift+0x154>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d101      	bne.n	8008494 <DMA_CalcBaseAndBitshift+0xac>
 8008490:	2301      	movs	r3, #1
 8008492:	e000      	b.n	8008496 <DMA_CalcBaseAndBitshift+0xae>
 8008494:	2300      	movs	r3, #0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d024      	beq.n	80084e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	3b10      	subs	r3, #16
 80084a2:	4a27      	ldr	r2, [pc, #156]	@ (8008540 <DMA_CalcBaseAndBitshift+0x158>)
 80084a4:	fba2 2303 	umull	r2, r3, r2, r3
 80084a8:	091b      	lsrs	r3, r3, #4
 80084aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	4a24      	ldr	r2, [pc, #144]	@ (8008544 <DMA_CalcBaseAndBitshift+0x15c>)
 80084b4:	5cd3      	ldrb	r3, [r2, r3]
 80084b6:	461a      	mov	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d908      	bls.n	80084d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008548 <DMA_CalcBaseAndBitshift+0x160>)
 80084ca:	4013      	ands	r3, r2
 80084cc:	1d1a      	adds	r2, r3, #4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80084d2:	e00d      	b.n	80084f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	4b1b      	ldr	r3, [pc, #108]	@ (8008548 <DMA_CalcBaseAndBitshift+0x160>)
 80084dc:	4013      	ands	r3, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80084e2:	e005      	b.n	80084f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	40020010 	.word	0x40020010
 8008504:	40020028 	.word	0x40020028
 8008508:	40020040 	.word	0x40020040
 800850c:	40020058 	.word	0x40020058
 8008510:	40020070 	.word	0x40020070
 8008514:	40020088 	.word	0x40020088
 8008518:	400200a0 	.word	0x400200a0
 800851c:	400200b8 	.word	0x400200b8
 8008520:	40020410 	.word	0x40020410
 8008524:	40020428 	.word	0x40020428
 8008528:	40020440 	.word	0x40020440
 800852c:	40020458 	.word	0x40020458
 8008530:	40020470 	.word	0x40020470
 8008534:	40020488 	.word	0x40020488
 8008538:	400204a0 	.word	0x400204a0
 800853c:	400204b8 	.word	0x400204b8
 8008540:	aaaaaaab 	.word	0xaaaaaaab
 8008544:	08011048 	.word	0x08011048
 8008548:	fffffc00 	.word	0xfffffc00

0800854c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d120      	bne.n	80085a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008564:	2b03      	cmp	r3, #3
 8008566:	d858      	bhi.n	800861a <DMA_CheckFifoParam+0xce>
 8008568:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <DMA_CheckFifoParam+0x24>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	08008581 	.word	0x08008581
 8008574:	08008593 	.word	0x08008593
 8008578:	08008581 	.word	0x08008581
 800857c:	0800861b 	.word	0x0800861b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d048      	beq.n	800861e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008590:	e045      	b.n	800861e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800859a:	d142      	bne.n	8008622 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085a0:	e03f      	b.n	8008622 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085aa:	d123      	bne.n	80085f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d838      	bhi.n	8008626 <DMA_CheckFifoParam+0xda>
 80085b4:	a201      	add	r2, pc, #4	@ (adr r2, 80085bc <DMA_CheckFifoParam+0x70>)
 80085b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ba:	bf00      	nop
 80085bc:	080085cd 	.word	0x080085cd
 80085c0:	080085d3 	.word	0x080085d3
 80085c4:	080085cd 	.word	0x080085cd
 80085c8:	080085e5 	.word	0x080085e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
        break;
 80085d0:	e030      	b.n	8008634 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d025      	beq.n	800862a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085e2:	e022      	b.n	800862a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80085ec:	d11f      	bne.n	800862e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085f2:	e01c      	b.n	800862e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d902      	bls.n	8008602 <DMA_CheckFifoParam+0xb6>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d003      	beq.n	8008608 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008600:	e018      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	73fb      	strb	r3, [r7, #15]
        break;
 8008606:	e015      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00e      	beq.n	8008632 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]
    break;
 8008618:	e00b      	b.n	8008632 <DMA_CheckFifoParam+0xe6>
        break;
 800861a:	bf00      	nop
 800861c:	e00a      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
        break;
 800861e:	bf00      	nop
 8008620:	e008      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
        break;
 8008622:	bf00      	nop
 8008624:	e006      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
        break;
 8008626:	bf00      	nop
 8008628:	e004      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
        break;
 800862a:	bf00      	nop
 800862c:	e002      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
        break;
 800862e:	bf00      	nop
 8008630:	e000      	b.n	8008634 <DMA_CheckFifoParam+0xe8>
    break;
 8008632:	bf00      	nop
    }
  }

  return status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop

08008644 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a38      	ldr	r2, [pc, #224]	@ (8008738 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d022      	beq.n	80086a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a36      	ldr	r2, [pc, #216]	@ (800873c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d01d      	beq.n	80086a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a35      	ldr	r2, [pc, #212]	@ (8008740 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d018      	beq.n	80086a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a33      	ldr	r2, [pc, #204]	@ (8008744 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d013      	beq.n	80086a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a32      	ldr	r2, [pc, #200]	@ (8008748 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00e      	beq.n	80086a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a30      	ldr	r2, [pc, #192]	@ (800874c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d009      	beq.n	80086a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a2f      	ldr	r2, [pc, #188]	@ (8008750 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d004      	beq.n	80086a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a2d      	ldr	r2, [pc, #180]	@ (8008754 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d101      	bne.n	80086a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01a      	beq.n	80086e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	3b08      	subs	r3, #8
 80086b4:	4a28      	ldr	r2, [pc, #160]	@ (8008758 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	091b      	lsrs	r3, r3, #4
 80086bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4b26      	ldr	r3, [pc, #152]	@ (800875c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a24      	ldr	r2, [pc, #144]	@ (8008760 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80086d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f003 031f 	and.w	r3, r3, #31
 80086d8:	2201      	movs	r2, #1
 80086da:	409a      	lsls	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80086e0:	e024      	b.n	800872c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	3b10      	subs	r3, #16
 80086ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008764 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80086ec:	fba2 2303 	umull	r2, r3, r2, r3
 80086f0:	091b      	lsrs	r3, r3, #4
 80086f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008768 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d806      	bhi.n	800870a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4a1b      	ldr	r2, [pc, #108]	@ (800876c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d902      	bls.n	800870a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3308      	adds	r3, #8
 8008708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4b18      	ldr	r3, [pc, #96]	@ (8008770 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	461a      	mov	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a16      	ldr	r2, [pc, #88]	@ (8008774 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800871c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2201      	movs	r2, #1
 8008726:	409a      	lsls	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800872c:	bf00      	nop
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	58025408 	.word	0x58025408
 800873c:	5802541c 	.word	0x5802541c
 8008740:	58025430 	.word	0x58025430
 8008744:	58025444 	.word	0x58025444
 8008748:	58025458 	.word	0x58025458
 800874c:	5802546c 	.word	0x5802546c
 8008750:	58025480 	.word	0x58025480
 8008754:	58025494 	.word	0x58025494
 8008758:	cccccccd 	.word	0xcccccccd
 800875c:	16009600 	.word	0x16009600
 8008760:	58025880 	.word	0x58025880
 8008764:	aaaaaaab 	.word	0xaaaaaaab
 8008768:	400204b8 	.word	0x400204b8
 800876c:	4002040f 	.word	0x4002040f
 8008770:	10008200 	.word	0x10008200
 8008774:	40020880 	.word	0x40020880

08008778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d04a      	beq.n	8008824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b08      	cmp	r3, #8
 8008792:	d847      	bhi.n	8008824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a25      	ldr	r2, [pc, #148]	@ (8008830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d022      	beq.n	80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a24      	ldr	r2, [pc, #144]	@ (8008834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d01d      	beq.n	80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a22      	ldr	r2, [pc, #136]	@ (8008838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d018      	beq.n	80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a21      	ldr	r2, [pc, #132]	@ (800883c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d013      	beq.n	80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00e      	beq.n	80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d009      	beq.n	80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d004      	beq.n	80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1b      	ldr	r2, [pc, #108]	@ (800884c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d101      	bne.n	80087e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80087e4:	2301      	movs	r3, #1
 80087e6:	e000      	b.n	80087ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80087e8:	2300      	movs	r3, #0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4b17      	ldr	r3, [pc, #92]	@ (8008850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a15      	ldr	r2, [pc, #84]	@ (8008854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008800:	671a      	str	r2, [r3, #112]	@ 0x70
 8008802:	e009      	b.n	8008818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4b14      	ldr	r3, [pc, #80]	@ (8008858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a11      	ldr	r2, [pc, #68]	@ (800885c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008816:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3b01      	subs	r3, #1
 800881c:	2201      	movs	r2, #1
 800881e:	409a      	lsls	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008824:	bf00      	nop
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	58025408 	.word	0x58025408
 8008834:	5802541c 	.word	0x5802541c
 8008838:	58025430 	.word	0x58025430
 800883c:	58025444 	.word	0x58025444
 8008840:	58025458 	.word	0x58025458
 8008844:	5802546c 	.word	0x5802546c
 8008848:	58025480 	.word	0x58025480
 800884c:	58025494 	.word	0x58025494
 8008850:	1600963f 	.word	0x1600963f
 8008854:	58025940 	.word	0x58025940
 8008858:	1000823f 	.word	0x1000823f
 800885c:	40020940 	.word	0x40020940

08008860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008860:	b480      	push	{r7}
 8008862:	b089      	sub	sp, #36	@ 0x24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800886e:	4b86      	ldr	r3, [pc, #536]	@ (8008a88 <HAL_GPIO_Init+0x228>)
 8008870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008872:	e18c      	b.n	8008b8e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	2101      	movs	r1, #1
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	fa01 f303 	lsl.w	r3, r1, r3
 8008880:	4013      	ands	r3, r2
 8008882:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 817e 	beq.w	8008b88 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	2b01      	cmp	r3, #1
 8008896:	d005      	beq.n	80088a4 <HAL_GPIO_Init+0x44>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d130      	bne.n	8008906 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	2203      	movs	r2, #3
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	43db      	mvns	r3, r3
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	4013      	ands	r3, r2
 80088ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80088da:	2201      	movs	r2, #1
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	43db      	mvns	r3, r3
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4013      	ands	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	091b      	lsrs	r3, r3, #4
 80088f0:	f003 0201 	and.w	r2, r3, #1
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b03      	cmp	r3, #3
 8008910:	d017      	beq.n	8008942 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	2203      	movs	r2, #3
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	43db      	mvns	r3, r3
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	4013      	ands	r3, r2
 8008928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	4313      	orrs	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d123      	bne.n	8008996 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	08da      	lsrs	r2, r3, #3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3208      	adds	r2, #8
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	220f      	movs	r2, #15
 8008966:	fa02 f303 	lsl.w	r3, r2, r3
 800896a:	43db      	mvns	r3, r3
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	4013      	ands	r3, r2
 8008970:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	691a      	ldr	r2, [r3, #16]
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	4313      	orrs	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	08da      	lsrs	r2, r3, #3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3208      	adds	r2, #8
 8008990:	69b9      	ldr	r1, [r7, #24]
 8008992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	2203      	movs	r2, #3
 80089a2:	fa02 f303 	lsl.w	r3, r2, r3
 80089a6:	43db      	mvns	r3, r3
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	4013      	ands	r3, r2
 80089ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f003 0203 	and.w	r2, r3, #3
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	fa02 f303 	lsl.w	r3, r2, r3
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80d8 	beq.w	8008b88 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089d8:	4b2c      	ldr	r3, [pc, #176]	@ (8008a8c <HAL_GPIO_Init+0x22c>)
 80089da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089de:	4a2b      	ldr	r2, [pc, #172]	@ (8008a8c <HAL_GPIO_Init+0x22c>)
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80089e8:	4b28      	ldr	r3, [pc, #160]	@ (8008a8c <HAL_GPIO_Init+0x22c>)
 80089ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089f6:	4a26      	ldr	r2, [pc, #152]	@ (8008a90 <HAL_GPIO_Init+0x230>)
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	089b      	lsrs	r3, r3, #2
 80089fc:	3302      	adds	r3, #2
 80089fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	220f      	movs	r2, #15
 8008a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a12:	43db      	mvns	r3, r3
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	4013      	ands	r3, r2
 8008a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a94 <HAL_GPIO_Init+0x234>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d04a      	beq.n	8008ab8 <HAL_GPIO_Init+0x258>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a1c      	ldr	r2, [pc, #112]	@ (8008a98 <HAL_GPIO_Init+0x238>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d02b      	beq.n	8008a82 <HAL_GPIO_Init+0x222>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008a9c <HAL_GPIO_Init+0x23c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d025      	beq.n	8008a7e <HAL_GPIO_Init+0x21e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a1a      	ldr	r2, [pc, #104]	@ (8008aa0 <HAL_GPIO_Init+0x240>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01f      	beq.n	8008a7a <HAL_GPIO_Init+0x21a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a19      	ldr	r2, [pc, #100]	@ (8008aa4 <HAL_GPIO_Init+0x244>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d019      	beq.n	8008a76 <HAL_GPIO_Init+0x216>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a18      	ldr	r2, [pc, #96]	@ (8008aa8 <HAL_GPIO_Init+0x248>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d013      	beq.n	8008a72 <HAL_GPIO_Init+0x212>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a17      	ldr	r2, [pc, #92]	@ (8008aac <HAL_GPIO_Init+0x24c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00d      	beq.n	8008a6e <HAL_GPIO_Init+0x20e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a16      	ldr	r2, [pc, #88]	@ (8008ab0 <HAL_GPIO_Init+0x250>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d007      	beq.n	8008a6a <HAL_GPIO_Init+0x20a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a15      	ldr	r2, [pc, #84]	@ (8008ab4 <HAL_GPIO_Init+0x254>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d101      	bne.n	8008a66 <HAL_GPIO_Init+0x206>
 8008a62:	2309      	movs	r3, #9
 8008a64:	e029      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a66:	230a      	movs	r3, #10
 8008a68:	e027      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a6a:	2307      	movs	r3, #7
 8008a6c:	e025      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a6e:	2306      	movs	r3, #6
 8008a70:	e023      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a72:	2305      	movs	r3, #5
 8008a74:	e021      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a76:	2304      	movs	r3, #4
 8008a78:	e01f      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e01d      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e01b      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e019      	b.n	8008aba <HAL_GPIO_Init+0x25a>
 8008a86:	bf00      	nop
 8008a88:	58000080 	.word	0x58000080
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	58000400 	.word	0x58000400
 8008a94:	58020000 	.word	0x58020000
 8008a98:	58020400 	.word	0x58020400
 8008a9c:	58020800 	.word	0x58020800
 8008aa0:	58020c00 	.word	0x58020c00
 8008aa4:	58021000 	.word	0x58021000
 8008aa8:	58021400 	.word	0x58021400
 8008aac:	58021800 	.word	0x58021800
 8008ab0:	58021c00 	.word	0x58021c00
 8008ab4:	58022400 	.word	0x58022400
 8008ab8:	2300      	movs	r3, #0
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	f002 0203 	and.w	r2, r2, #3
 8008ac0:	0092      	lsls	r2, r2, #2
 8008ac2:	4093      	lsls	r3, r2
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008aca:	4938      	ldr	r1, [pc, #224]	@ (8008bac <HAL_GPIO_Init+0x34c>)
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	089b      	lsrs	r3, r3, #2
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	43db      	mvns	r3, r3
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008afe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	43db      	mvns	r3, r3
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	4013      	ands	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	4013      	ands	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	43db      	mvns	r3, r3
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f47f ae6b 	bne.w	8008874 <HAL_GPIO_Init+0x14>
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	3724      	adds	r7, #36	@ 0x24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	58000400 	.word	0x58000400

08008bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bc0:	787b      	ldrb	r3, [r7, #1]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bc6:	887a      	ldrh	r2, [r7, #2]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008bcc:	e003      	b.n	8008bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	041a      	lsls	r2, r3, #16
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	619a      	str	r2, [r3, #24]
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008bf4:	887a      	ldrh	r2, [r7, #2]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	041a      	lsls	r2, r3, #16
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	43d9      	mvns	r1, r3
 8008c00:	887b      	ldrh	r3, [r7, #2]
 8008c02:	400b      	ands	r3, r1
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	619a      	str	r2, [r3, #24]
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c24:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c28:	88fb      	ldrh	r3, [r7, #6]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7f8 fdb3 	bl	80017a8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c54:	4b19      	ldr	r3, [pc, #100]	@ (8008cbc <HAL_PWREx_ConfigSupply+0x70>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d00a      	beq.n	8008c76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c60:	4b16      	ldr	r3, [pc, #88]	@ (8008cbc <HAL_PWREx_ConfigSupply+0x70>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d001      	beq.n	8008c72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e01f      	b.n	8008cb2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e01d      	b.n	8008cb2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c76:	4b11      	ldr	r3, [pc, #68]	@ (8008cbc <HAL_PWREx_ConfigSupply+0x70>)
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f023 0207 	bic.w	r2, r3, #7
 8008c7e:	490f      	ldr	r1, [pc, #60]	@ (8008cbc <HAL_PWREx_ConfigSupply+0x70>)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c86:	f7fa fdb5 	bl	80037f4 <HAL_GetTick>
 8008c8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c8c:	e009      	b.n	8008ca2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c8e:	f7fa fdb1 	bl	80037f4 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c9c:	d901      	bls.n	8008ca2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e007      	b.n	8008cb2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ca2:	4b06      	ldr	r3, [pc, #24]	@ (8008cbc <HAL_PWREx_ConfigSupply+0x70>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cae:	d1ee      	bne.n	8008c8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	58024800 	.word	0x58024800

08008cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08c      	sub	sp, #48	@ 0x30
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e3c8      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8087 	beq.w	8008dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ce0:	4b88      	ldr	r3, [pc, #544]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cea:	4b86      	ldr	r3, [pc, #536]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d007      	beq.n	8008d06 <HAL_RCC_OscConfig+0x46>
 8008cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf8:	2b18      	cmp	r3, #24
 8008cfa:	d110      	bne.n	8008d1e <HAL_RCC_OscConfig+0x5e>
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d10b      	bne.n	8008d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d06:	4b7f      	ldr	r3, [pc, #508]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d06c      	beq.n	8008dec <HAL_RCC_OscConfig+0x12c>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d168      	bne.n	8008dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e3a2      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d26:	d106      	bne.n	8008d36 <HAL_RCC_OscConfig+0x76>
 8008d28:	4b76      	ldr	r3, [pc, #472]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a75      	ldr	r2, [pc, #468]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	e02e      	b.n	8008d94 <HAL_RCC_OscConfig+0xd4>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10c      	bne.n	8008d58 <HAL_RCC_OscConfig+0x98>
 8008d3e:	4b71      	ldr	r3, [pc, #452]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a70      	ldr	r2, [pc, #448]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a6d      	ldr	r2, [pc, #436]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	e01d      	b.n	8008d94 <HAL_RCC_OscConfig+0xd4>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d60:	d10c      	bne.n	8008d7c <HAL_RCC_OscConfig+0xbc>
 8008d62:	4b68      	ldr	r3, [pc, #416]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a67      	ldr	r2, [pc, #412]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	4b65      	ldr	r3, [pc, #404]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a64      	ldr	r2, [pc, #400]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	e00b      	b.n	8008d94 <HAL_RCC_OscConfig+0xd4>
 8008d7c:	4b61      	ldr	r3, [pc, #388]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a60      	ldr	r2, [pc, #384]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	4b5e      	ldr	r3, [pc, #376]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d013      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9c:	f7fa fd2a 	bl	80037f4 <HAL_GetTick>
 8008da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008da4:	f7fa fd26 	bl	80037f4 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b64      	cmp	r3, #100	@ 0x64
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e356      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008db6:	4b53      	ldr	r3, [pc, #332]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0f0      	beq.n	8008da4 <HAL_RCC_OscConfig+0xe4>
 8008dc2:	e014      	b.n	8008dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc4:	f7fa fd16 	bl	80037f4 <HAL_GetTick>
 8008dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dca:	e008      	b.n	8008dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dcc:	f7fa fd12 	bl	80037f4 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b64      	cmp	r3, #100	@ 0x64
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e342      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dde:	4b49      	ldr	r3, [pc, #292]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f0      	bne.n	8008dcc <HAL_RCC_OscConfig+0x10c>
 8008dea:	e000      	b.n	8008dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 808c 	beq.w	8008f14 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dfc:	4b41      	ldr	r3, [pc, #260]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e06:	4b3f      	ldr	r3, [pc, #252]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <HAL_RCC_OscConfig+0x162>
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	2b18      	cmp	r3, #24
 8008e16:	d137      	bne.n	8008e88 <HAL_RCC_OscConfig+0x1c8>
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d132      	bne.n	8008e88 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e22:	4b38      	ldr	r3, [pc, #224]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d005      	beq.n	8008e3a <HAL_RCC_OscConfig+0x17a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e314      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e3a:	4b32      	ldr	r3, [pc, #200]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f023 0219 	bic.w	r2, r3, #25
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	492f      	ldr	r1, [pc, #188]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4c:	f7fa fcd2 	bl	80037f4 <HAL_GetTick>
 8008e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e54:	f7fa fcce 	bl	80037f4 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e2fe      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e66:	4b27      	ldr	r3, [pc, #156]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f0      	beq.n	8008e54 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e72:	4b24      	ldr	r3, [pc, #144]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	061b      	lsls	r3, r3, #24
 8008e80:	4920      	ldr	r1, [pc, #128]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e86:	e045      	b.n	8008f14 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d026      	beq.n	8008ede <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e90:	4b1c      	ldr	r3, [pc, #112]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f023 0219 	bic.w	r2, r3, #25
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	4919      	ldr	r1, [pc, #100]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea2:	f7fa fca7 	bl	80037f4 <HAL_GetTick>
 8008ea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eaa:	f7fa fca3 	bl	80037f4 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e2d3      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ebc:	4b11      	ldr	r3, [pc, #68]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	061b      	lsls	r3, r3, #24
 8008ed6:	490b      	ldr	r1, [pc, #44]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	604b      	str	r3, [r1, #4]
 8008edc:	e01a      	b.n	8008f14 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ede:	4b09      	ldr	r3, [pc, #36]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a08      	ldr	r2, [pc, #32]	@ (8008f04 <HAL_RCC_OscConfig+0x244>)
 8008ee4:	f023 0301 	bic.w	r3, r3, #1
 8008ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eea:	f7fa fc83 	bl	80037f4 <HAL_GetTick>
 8008eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ef0:	e00a      	b.n	8008f08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ef2:	f7fa fc7f 	bl	80037f4 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d903      	bls.n	8008f08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e2af      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
 8008f04:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f08:	4b96      	ldr	r3, [pc, #600]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1ee      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0310 	and.w	r3, r3, #16
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d06a      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f20:	4b90      	ldr	r3, [pc, #576]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f28:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f2a:	4b8e      	ldr	r3, [pc, #568]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2b08      	cmp	r3, #8
 8008f34:	d007      	beq.n	8008f46 <HAL_RCC_OscConfig+0x286>
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b18      	cmp	r3, #24
 8008f3a:	d11b      	bne.n	8008f74 <HAL_RCC_OscConfig+0x2b4>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d116      	bne.n	8008f74 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f46:	4b87      	ldr	r3, [pc, #540]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <HAL_RCC_OscConfig+0x29e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	2b80      	cmp	r3, #128	@ 0x80
 8008f58:	d001      	beq.n	8008f5e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e282      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f5e:	4b81      	ldr	r3, [pc, #516]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	061b      	lsls	r3, r3, #24
 8008f6c:	497d      	ldr	r1, [pc, #500]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f72:	e040      	b.n	8008ff6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d023      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f7c:	4b79      	ldr	r3, [pc, #484]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a78      	ldr	r2, [pc, #480]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7fa fc34 	bl	80037f4 <HAL_GetTick>
 8008f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f90:	f7fa fc30 	bl	80037f4 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e260      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fa2:	4b70      	ldr	r3, [pc, #448]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0f0      	beq.n	8008f90 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fae:	4b6d      	ldr	r3, [pc, #436]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	061b      	lsls	r3, r3, #24
 8008fbc:	4969      	ldr	r1, [pc, #420]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60cb      	str	r3, [r1, #12]
 8008fc2:	e018      	b.n	8008ff6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008fc4:	4b67      	ldr	r3, [pc, #412]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a66      	ldr	r2, [pc, #408]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd0:	f7fa fc10 	bl	80037f4 <HAL_GetTick>
 8008fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fd6:	e008      	b.n	8008fea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008fd8:	f7fa fc0c 	bl	80037f4 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e23c      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fea:	4b5e      	ldr	r3, [pc, #376]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f0      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d036      	beq.n	8009070 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d019      	beq.n	800903e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800900a:	4b56      	ldr	r3, [pc, #344]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 800900c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800900e:	4a55      	ldr	r2, [pc, #340]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009010:	f043 0301 	orr.w	r3, r3, #1
 8009014:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009016:	f7fa fbed 	bl	80037f4 <HAL_GetTick>
 800901a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800901c:	e008      	b.n	8009030 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800901e:	f7fa fbe9 	bl	80037f4 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e219      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009030:	4b4c      	ldr	r3, [pc, #304]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009034:	f003 0302 	and.w	r3, r3, #2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d0f0      	beq.n	800901e <HAL_RCC_OscConfig+0x35e>
 800903c:	e018      	b.n	8009070 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800903e:	4b49      	ldr	r3, [pc, #292]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009042:	4a48      	ldr	r2, [pc, #288]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009044:	f023 0301 	bic.w	r3, r3, #1
 8009048:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800904a:	f7fa fbd3 	bl	80037f4 <HAL_GetTick>
 800904e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009050:	e008      	b.n	8009064 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009052:	f7fa fbcf 	bl	80037f4 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	2b02      	cmp	r3, #2
 800905e:	d901      	bls.n	8009064 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e1ff      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009064:	4b3f      	ldr	r3, [pc, #252]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1f0      	bne.n	8009052 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d036      	beq.n	80090ea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d019      	beq.n	80090b8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009084:	4b37      	ldr	r3, [pc, #220]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a36      	ldr	r2, [pc, #216]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 800908a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800908e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009090:	f7fa fbb0 	bl	80037f4 <HAL_GetTick>
 8009094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009098:	f7fa fbac 	bl	80037f4 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e1dc      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090aa:	4b2e      	ldr	r3, [pc, #184]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f0      	beq.n	8009098 <HAL_RCC_OscConfig+0x3d8>
 80090b6:	e018      	b.n	80090ea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80090b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a29      	ldr	r2, [pc, #164]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 80090be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090c4:	f7fa fb96 	bl	80037f4 <HAL_GetTick>
 80090c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090ca:	e008      	b.n	80090de <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090cc:	f7fa fb92 	bl	80037f4 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e1c2      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090de:	4b21      	ldr	r3, [pc, #132]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f0      	bne.n	80090cc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8086 	beq.w	8009204 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009168 <HAL_RCC_OscConfig+0x4a8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009168 <HAL_RCC_OscConfig+0x4a8>)
 80090fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009104:	f7fa fb76 	bl	80037f4 <HAL_GetTick>
 8009108:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800910a:	e008      	b.n	800911e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800910c:	f7fa fb72 	bl	80037f4 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b64      	cmp	r3, #100	@ 0x64
 8009118:	d901      	bls.n	800911e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e1a2      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800911e:	4b12      	ldr	r3, [pc, #72]	@ (8009168 <HAL_RCC_OscConfig+0x4a8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0f0      	beq.n	800910c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d106      	bne.n	8009140 <HAL_RCC_OscConfig+0x480>
 8009132:	4b0c      	ldr	r3, [pc, #48]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009136:	4a0b      	ldr	r2, [pc, #44]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	6713      	str	r3, [r2, #112]	@ 0x70
 800913e:	e032      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e6>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d111      	bne.n	800916c <HAL_RCC_OscConfig+0x4ac>
 8009148:	4b06      	ldr	r3, [pc, #24]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 800914a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800914c:	4a05      	ldr	r2, [pc, #20]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 800914e:	f023 0301 	bic.w	r3, r3, #1
 8009152:	6713      	str	r3, [r2, #112]	@ 0x70
 8009154:	4b03      	ldr	r3, [pc, #12]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009158:	4a02      	ldr	r2, [pc, #8]	@ (8009164 <HAL_RCC_OscConfig+0x4a4>)
 800915a:	f023 0304 	bic.w	r3, r3, #4
 800915e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009160:	e021      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e6>
 8009162:	bf00      	nop
 8009164:	58024400 	.word	0x58024400
 8009168:	58024800 	.word	0x58024800
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	2b05      	cmp	r3, #5
 8009172:	d10c      	bne.n	800918e <HAL_RCC_OscConfig+0x4ce>
 8009174:	4b83      	ldr	r3, [pc, #524]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009178:	4a82      	ldr	r2, [pc, #520]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800917a:	f043 0304 	orr.w	r3, r3, #4
 800917e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009180:	4b80      	ldr	r3, [pc, #512]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009184:	4a7f      	ldr	r2, [pc, #508]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009186:	f043 0301 	orr.w	r3, r3, #1
 800918a:	6713      	str	r3, [r2, #112]	@ 0x70
 800918c:	e00b      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e6>
 800918e:	4b7d      	ldr	r3, [pc, #500]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009192:	4a7c      	ldr	r2, [pc, #496]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	6713      	str	r3, [r2, #112]	@ 0x70
 800919a:	4b7a      	ldr	r3, [pc, #488]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800919c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800919e:	4a79      	ldr	r2, [pc, #484]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80091a0:	f023 0304 	bic.w	r3, r3, #4
 80091a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d015      	beq.n	80091da <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ae:	f7fa fb21 	bl	80037f4 <HAL_GetTick>
 80091b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091b4:	e00a      	b.n	80091cc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091b6:	f7fa fb1d 	bl	80037f4 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d901      	bls.n	80091cc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e14b      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091cc:	4b6d      	ldr	r3, [pc, #436]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80091ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0ee      	beq.n	80091b6 <HAL_RCC_OscConfig+0x4f6>
 80091d8:	e014      	b.n	8009204 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091da:	f7fa fb0b 	bl	80037f4 <HAL_GetTick>
 80091de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091e0:	e00a      	b.n	80091f8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091e2:	f7fa fb07 	bl	80037f4 <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e135      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091f8:	4b62      	ldr	r3, [pc, #392]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80091fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1ee      	bne.n	80091e2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 812a 	beq.w	8009462 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800920e:	4b5d      	ldr	r3, [pc, #372]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009216:	2b18      	cmp	r3, #24
 8009218:	f000 80ba 	beq.w	8009390 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009220:	2b02      	cmp	r3, #2
 8009222:	f040 8095 	bne.w	8009350 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009226:	4b57      	ldr	r3, [pc, #348]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a56      	ldr	r2, [pc, #344]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800922c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009232:	f7fa fadf 	bl	80037f4 <HAL_GetTick>
 8009236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009238:	e008      	b.n	800924c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800923a:	f7fa fadb 	bl	80037f4 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b02      	cmp	r3, #2
 8009246:	d901      	bls.n	800924c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e10b      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800924c:	4b4d      	ldr	r3, [pc, #308]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f0      	bne.n	800923a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009258:	4b4a      	ldr	r3, [pc, #296]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800925a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800925c:	4b4a      	ldr	r3, [pc, #296]	@ (8009388 <HAL_RCC_OscConfig+0x6c8>)
 800925e:	4013      	ands	r3, r2
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009268:	0112      	lsls	r2, r2, #4
 800926a:	430a      	orrs	r2, r1
 800926c:	4945      	ldr	r1, [pc, #276]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800926e:	4313      	orrs	r3, r2
 8009270:	628b      	str	r3, [r1, #40]	@ 0x28
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009276:	3b01      	subs	r3, #1
 8009278:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009280:	3b01      	subs	r3, #1
 8009282:	025b      	lsls	r3, r3, #9
 8009284:	b29b      	uxth	r3, r3
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928c:	3b01      	subs	r3, #1
 800928e:	041b      	lsls	r3, r3, #16
 8009290:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009294:	431a      	orrs	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929a:	3b01      	subs	r3, #1
 800929c:	061b      	lsls	r3, r3, #24
 800929e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092a2:	4938      	ldr	r1, [pc, #224]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80092a8:	4b36      	ldr	r3, [pc, #216]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ac:	4a35      	ldr	r2, [pc, #212]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092ae:	f023 0301 	bic.w	r3, r3, #1
 80092b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092b4:	4b33      	ldr	r3, [pc, #204]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092b8:	4b34      	ldr	r3, [pc, #208]	@ (800938c <HAL_RCC_OscConfig+0x6cc>)
 80092ba:	4013      	ands	r3, r2
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80092c0:	00d2      	lsls	r2, r2, #3
 80092c2:	4930      	ldr	r1, [pc, #192]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80092c8:	4b2e      	ldr	r3, [pc, #184]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	f023 020c 	bic.w	r2, r3, #12
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d4:	492b      	ldr	r1, [pc, #172]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092da:	4b2a      	ldr	r3, [pc, #168]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092de:	f023 0202 	bic.w	r2, r3, #2
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e6:	4927      	ldr	r1, [pc, #156]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092ec:	4b25      	ldr	r3, [pc, #148]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f0:	4a24      	ldr	r2, [pc, #144]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f8:	4b22      	ldr	r3, [pc, #136]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fc:	4a21      	ldr	r2, [pc, #132]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 80092fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009304:	4b1f      	ldr	r3, [pc, #124]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	4a1e      	ldr	r2, [pc, #120]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800930a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800930e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009310:	4b1c      	ldr	r3, [pc, #112]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009314:	4a1b      	ldr	r2, [pc, #108]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800931c:	4b19      	ldr	r3, [pc, #100]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a18      	ldr	r2, [pc, #96]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009328:	f7fa fa64 	bl	80037f4 <HAL_GetTick>
 800932c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009330:	f7fa fa60 	bl	80037f4 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e090      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009342:	4b10      	ldr	r3, [pc, #64]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0f0      	beq.n	8009330 <HAL_RCC_OscConfig+0x670>
 800934e:	e088      	b.n	8009462 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009350:	4b0c      	ldr	r3, [pc, #48]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a0b      	ldr	r2, [pc, #44]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800935a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935c:	f7fa fa4a 	bl	80037f4 <HAL_GetTick>
 8009360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009362:	e008      	b.n	8009376 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009364:	f7fa fa46 	bl	80037f4 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d901      	bls.n	8009376 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e076      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009376:	4b03      	ldr	r3, [pc, #12]	@ (8009384 <HAL_RCC_OscConfig+0x6c4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1f0      	bne.n	8009364 <HAL_RCC_OscConfig+0x6a4>
 8009382:	e06e      	b.n	8009462 <HAL_RCC_OscConfig+0x7a2>
 8009384:	58024400 	.word	0x58024400
 8009388:	fffffc0c 	.word	0xfffffc0c
 800938c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009390:	4b36      	ldr	r3, [pc, #216]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 8009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009394:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009396:	4b35      	ldr	r3, [pc, #212]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 8009398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d031      	beq.n	8009408 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f003 0203 	and.w	r2, r3, #3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d12a      	bne.n	8009408 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	091b      	lsrs	r3, r3, #4
 80093b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093be:	429a      	cmp	r2, r3
 80093c0:	d122      	bne.n	8009408 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d11a      	bne.n	8009408 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	0a5b      	lsrs	r3, r3, #9
 80093d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d111      	bne.n	8009408 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	0c1b      	lsrs	r3, r3, #16
 80093e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d108      	bne.n	8009408 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	0e1b      	lsrs	r3, r3, #24
 80093fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009402:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009404:	429a      	cmp	r2, r3
 8009406:	d001      	beq.n	800940c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e02b      	b.n	8009464 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800940c:	4b17      	ldr	r3, [pc, #92]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 800940e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009410:	08db      	lsrs	r3, r3, #3
 8009412:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009416:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	429a      	cmp	r2, r3
 8009420:	d01f      	beq.n	8009462 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009422:	4b12      	ldr	r3, [pc, #72]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 8009424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009426:	4a11      	ldr	r2, [pc, #68]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800942e:	f7fa f9e1 	bl	80037f4 <HAL_GetTick>
 8009432:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009434:	bf00      	nop
 8009436:	f7fa f9dd 	bl	80037f4 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	4293      	cmp	r3, r2
 8009440:	d0f9      	beq.n	8009436 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009442:	4b0a      	ldr	r3, [pc, #40]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 8009444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009446:	4b0a      	ldr	r3, [pc, #40]	@ (8009470 <HAL_RCC_OscConfig+0x7b0>)
 8009448:	4013      	ands	r3, r2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800944e:	00d2      	lsls	r2, r2, #3
 8009450:	4906      	ldr	r1, [pc, #24]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 8009452:	4313      	orrs	r3, r2
 8009454:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009456:	4b05      	ldr	r3, [pc, #20]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	4a04      	ldr	r2, [pc, #16]	@ (800946c <HAL_RCC_OscConfig+0x7ac>)
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3730      	adds	r7, #48	@ 0x30
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	58024400 	.word	0x58024400
 8009470:	ffff0007 	.word	0xffff0007

08009474 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e19c      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009488:	4b8a      	ldr	r3, [pc, #552]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 030f 	and.w	r3, r3, #15
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d910      	bls.n	80094b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009496:	4b87      	ldr	r3, [pc, #540]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f023 020f 	bic.w	r2, r3, #15
 800949e:	4985      	ldr	r1, [pc, #532]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094a6:	4b83      	ldr	r3, [pc, #524]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 030f 	and.w	r3, r3, #15
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d001      	beq.n	80094b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e184      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d010      	beq.n	80094e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	4b7b      	ldr	r3, [pc, #492]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d908      	bls.n	80094e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094d4:	4b78      	ldr	r3, [pc, #480]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	4975      	ldr	r1, [pc, #468]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0308 	and.w	r3, r3, #8
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d010      	beq.n	8009514 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	695a      	ldr	r2, [r3, #20]
 80094f6:	4b70      	ldr	r3, [pc, #448]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094fe:	429a      	cmp	r2, r3
 8009500:	d908      	bls.n	8009514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009502:	4b6d      	ldr	r3, [pc, #436]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	496a      	ldr	r1, [pc, #424]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009510:	4313      	orrs	r3, r2
 8009512:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0310 	and.w	r3, r3, #16
 800951c:	2b00      	cmp	r3, #0
 800951e:	d010      	beq.n	8009542 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	4b64      	ldr	r3, [pc, #400]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800952c:	429a      	cmp	r2, r3
 800952e:	d908      	bls.n	8009542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009530:	4b61      	ldr	r3, [pc, #388]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	495e      	ldr	r1, [pc, #376]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 800953e:	4313      	orrs	r3, r2
 8009540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d010      	beq.n	8009570 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69da      	ldr	r2, [r3, #28]
 8009552:	4b59      	ldr	r3, [pc, #356]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800955a:	429a      	cmp	r2, r3
 800955c:	d908      	bls.n	8009570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800955e:	4b56      	ldr	r3, [pc, #344]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	4953      	ldr	r1, [pc, #332]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 800956c:	4313      	orrs	r3, r2
 800956e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d010      	beq.n	800959e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	4b4d      	ldr	r3, [pc, #308]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	429a      	cmp	r2, r3
 800958a:	d908      	bls.n	800959e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800958c:	4b4a      	ldr	r3, [pc, #296]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f023 020f 	bic.w	r2, r3, #15
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4947      	ldr	r1, [pc, #284]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 800959a:	4313      	orrs	r3, r2
 800959c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d055      	beq.n	8009656 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80095aa:	4b43      	ldr	r3, [pc, #268]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	4940      	ldr	r1, [pc, #256]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d107      	bne.n	80095d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095c4:	4b3c      	ldr	r3, [pc, #240]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d121      	bne.n	8009614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0f6      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d107      	bne.n	80095ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095dc:	4b36      	ldr	r3, [pc, #216]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d115      	bne.n	8009614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e0ea      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d107      	bne.n	8009604 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095f4:	4b30      	ldr	r3, [pc, #192]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e0de      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009604:	4b2c      	ldr	r3, [pc, #176]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0304 	and.w	r3, r3, #4
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e0d6      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009614:	4b28      	ldr	r3, [pc, #160]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f023 0207 	bic.w	r2, r3, #7
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4925      	ldr	r1, [pc, #148]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009622:	4313      	orrs	r3, r2
 8009624:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009626:	f7fa f8e5 	bl	80037f4 <HAL_GetTick>
 800962a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800962c:	e00a      	b.n	8009644 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800962e:	f7fa f8e1 	bl	80037f4 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800963c:	4293      	cmp	r3, r2
 800963e:	d901      	bls.n	8009644 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e0be      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009644:	4b1c      	ldr	r3, [pc, #112]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	429a      	cmp	r2, r3
 8009654:	d1eb      	bne.n	800962e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0302 	and.w	r3, r3, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d010      	beq.n	8009684 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	4b14      	ldr	r3, [pc, #80]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	f003 030f 	and.w	r3, r3, #15
 800966e:	429a      	cmp	r2, r3
 8009670:	d208      	bcs.n	8009684 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009672:	4b11      	ldr	r3, [pc, #68]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	f023 020f 	bic.w	r2, r3, #15
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	490e      	ldr	r1, [pc, #56]	@ (80096b8 <HAL_RCC_ClockConfig+0x244>)
 8009680:	4313      	orrs	r3, r2
 8009682:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009684:	4b0b      	ldr	r3, [pc, #44]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	429a      	cmp	r2, r3
 8009690:	d214      	bcs.n	80096bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009692:	4b08      	ldr	r3, [pc, #32]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f023 020f 	bic.w	r2, r3, #15
 800969a:	4906      	ldr	r1, [pc, #24]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	4313      	orrs	r3, r2
 80096a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096a2:	4b04      	ldr	r3, [pc, #16]	@ (80096b4 <HAL_RCC_ClockConfig+0x240>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d005      	beq.n	80096bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e086      	b.n	80097c2 <HAL_RCC_ClockConfig+0x34e>
 80096b4:	52002000 	.word	0x52002000
 80096b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d010      	beq.n	80096ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691a      	ldr	r2, [r3, #16]
 80096cc:	4b3f      	ldr	r3, [pc, #252]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d208      	bcs.n	80096ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096d8:	4b3c      	ldr	r3, [pc, #240]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	4939      	ldr	r1, [pc, #228]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d010      	beq.n	8009718 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	4b34      	ldr	r3, [pc, #208]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009702:	429a      	cmp	r2, r3
 8009704:	d208      	bcs.n	8009718 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009706:	4b31      	ldr	r3, [pc, #196]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	492e      	ldr	r1, [pc, #184]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009714:	4313      	orrs	r3, r2
 8009716:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	2b00      	cmp	r3, #0
 8009722:	d010      	beq.n	8009746 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	699a      	ldr	r2, [r3, #24]
 8009728:	4b28      	ldr	r3, [pc, #160]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009730:	429a      	cmp	r2, r3
 8009732:	d208      	bcs.n	8009746 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009734:	4b25      	ldr	r3, [pc, #148]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	4922      	ldr	r1, [pc, #136]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009742:	4313      	orrs	r3, r2
 8009744:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d010      	beq.n	8009774 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69da      	ldr	r2, [r3, #28]
 8009756:	4b1d      	ldr	r3, [pc, #116]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800975e:	429a      	cmp	r2, r3
 8009760:	d208      	bcs.n	8009774 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009762:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	4917      	ldr	r1, [pc, #92]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009770:	4313      	orrs	r3, r2
 8009772:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009774:	f000 f834 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 8009778:	4602      	mov	r2, r0
 800977a:	4b14      	ldr	r3, [pc, #80]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	4912      	ldr	r1, [pc, #72]	@ (80097d0 <HAL_RCC_ClockConfig+0x35c>)
 8009786:	5ccb      	ldrb	r3, [r1, r3]
 8009788:	f003 031f 	and.w	r3, r3, #31
 800978c:	fa22 f303 	lsr.w	r3, r2, r3
 8009790:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009792:	4b0e      	ldr	r3, [pc, #56]	@ (80097cc <HAL_RCC_ClockConfig+0x358>)
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	4a0d      	ldr	r2, [pc, #52]	@ (80097d0 <HAL_RCC_ClockConfig+0x35c>)
 800979c:	5cd3      	ldrb	r3, [r2, r3]
 800979e:	f003 031f 	and.w	r3, r3, #31
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	fa22 f303 	lsr.w	r3, r2, r3
 80097a8:	4a0a      	ldr	r2, [pc, #40]	@ (80097d4 <HAL_RCC_ClockConfig+0x360>)
 80097aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097ac:	4a0a      	ldr	r2, [pc, #40]	@ (80097d8 <HAL_RCC_ClockConfig+0x364>)
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80097b2:	4b0a      	ldr	r3, [pc, #40]	@ (80097dc <HAL_RCC_ClockConfig+0x368>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f9 ffd2 	bl	8003760 <HAL_InitTick>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	58024400 	.word	0x58024400
 80097d0:	08011038 	.word	0x08011038
 80097d4:	2400006c 	.word	0x2400006c
 80097d8:	24000068 	.word	0x24000068
 80097dc:	24000070 	.word	0x24000070

080097e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b089      	sub	sp, #36	@ 0x24
 80097e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097e6:	4bb3      	ldr	r3, [pc, #716]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097ee:	2b18      	cmp	r3, #24
 80097f0:	f200 8155 	bhi.w	8009a9e <HAL_RCC_GetSysClockFreq+0x2be>
 80097f4:	a201      	add	r2, pc, #4	@ (adr r2, 80097fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80097f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fa:	bf00      	nop
 80097fc:	08009861 	.word	0x08009861
 8009800:	08009a9f 	.word	0x08009a9f
 8009804:	08009a9f 	.word	0x08009a9f
 8009808:	08009a9f 	.word	0x08009a9f
 800980c:	08009a9f 	.word	0x08009a9f
 8009810:	08009a9f 	.word	0x08009a9f
 8009814:	08009a9f 	.word	0x08009a9f
 8009818:	08009a9f 	.word	0x08009a9f
 800981c:	08009887 	.word	0x08009887
 8009820:	08009a9f 	.word	0x08009a9f
 8009824:	08009a9f 	.word	0x08009a9f
 8009828:	08009a9f 	.word	0x08009a9f
 800982c:	08009a9f 	.word	0x08009a9f
 8009830:	08009a9f 	.word	0x08009a9f
 8009834:	08009a9f 	.word	0x08009a9f
 8009838:	08009a9f 	.word	0x08009a9f
 800983c:	0800988d 	.word	0x0800988d
 8009840:	08009a9f 	.word	0x08009a9f
 8009844:	08009a9f 	.word	0x08009a9f
 8009848:	08009a9f 	.word	0x08009a9f
 800984c:	08009a9f 	.word	0x08009a9f
 8009850:	08009a9f 	.word	0x08009a9f
 8009854:	08009a9f 	.word	0x08009a9f
 8009858:	08009a9f 	.word	0x08009a9f
 800985c:	08009893 	.word	0x08009893
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009860:	4b94      	ldr	r3, [pc, #592]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d009      	beq.n	8009880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986c:	4b91      	ldr	r3, [pc, #580]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	08db      	lsrs	r3, r3, #3
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	4a90      	ldr	r2, [pc, #576]	@ (8009ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800987e:	e111      	b.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009880:	4b8d      	ldr	r3, [pc, #564]	@ (8009ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009882:	61bb      	str	r3, [r7, #24]
      break;
 8009884:	e10e      	b.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009886:	4b8d      	ldr	r3, [pc, #564]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009888:	61bb      	str	r3, [r7, #24]
      break;
 800988a:	e10b      	b.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800988c:	4b8c      	ldr	r3, [pc, #560]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800988e:	61bb      	str	r3, [r7, #24]
      break;
 8009890:	e108      	b.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009892:	4b88      	ldr	r3, [pc, #544]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800989c:	4b85      	ldr	r3, [pc, #532]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800989e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a0:	091b      	lsrs	r3, r3, #4
 80098a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80098a8:	4b82      	ldr	r3, [pc, #520]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098b2:	4b80      	ldr	r3, [pc, #512]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b6:	08db      	lsrs	r3, r3, #3
 80098b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	fb02 f303 	mul.w	r3, r2, r3
 80098c2:	ee07 3a90 	vmov	s15, r3
 80098c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 80e1 	beq.w	8009a98 <HAL_RCC_GetSysClockFreq+0x2b8>
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	f000 8083 	beq.w	80099e4 <HAL_RCC_GetSysClockFreq+0x204>
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	f200 80a1 	bhi.w	8009a28 <HAL_RCC_GetSysClockFreq+0x248>
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <HAL_RCC_GetSysClockFreq+0x114>
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d056      	beq.n	80099a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80098f2:	e099      	b.n	8009a28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098f4:	4b6f      	ldr	r3, [pc, #444]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0320 	and.w	r3, r3, #32
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d02d      	beq.n	800995c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009900:	4b6c      	ldr	r3, [pc, #432]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	08db      	lsrs	r3, r3, #3
 8009906:	f003 0303 	and.w	r3, r3, #3
 800990a:	4a6b      	ldr	r2, [pc, #428]	@ (8009ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800990c:	fa22 f303 	lsr.w	r3, r2, r3
 8009910:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	ee07 3a90 	vmov	s15, r3
 8009918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992a:	4b62      	ldr	r3, [pc, #392]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993a:	ed97 6a02 	vldr	s12, [r7, #8]
 800993e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800994e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009956:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800995a:	e087      	b.n	8009a6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009966:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009ac8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800996a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996e:	4b51      	ldr	r3, [pc, #324]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009982:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800999e:	e065      	b.n	8009a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009acc <HAL_RCC_GetSysClockFreq+0x2ec>
 80099ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b2:	4b40      	ldr	r3, [pc, #256]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099e2:	e043      	b.n	8009a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009ad0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80099f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f6:	4b2f      	ldr	r3, [pc, #188]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a26:	e021      	b.n	8009a6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009acc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a6c:	4b11      	ldr	r3, [pc, #68]	@ (8009ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a70:	0a5b      	lsrs	r3, r3, #9
 8009a72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a76:	3301      	adds	r3, #1
 8009a78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	ee07 3a90 	vmov	s15, r3
 8009a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a90:	ee17 3a90 	vmov	r3, s15
 8009a94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a96:	e005      	b.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61bb      	str	r3, [r7, #24]
      break;
 8009a9c:	e002      	b.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009a9e:	4b07      	ldr	r3, [pc, #28]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009aa0:	61bb      	str	r3, [r7, #24]
      break;
 8009aa2:	bf00      	nop
  }

  return sysclockfreq;
 8009aa4:	69bb      	ldr	r3, [r7, #24]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3724      	adds	r7, #36	@ 0x24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	58024400 	.word	0x58024400
 8009ab8:	03d09000 	.word	0x03d09000
 8009abc:	003d0900 	.word	0x003d0900
 8009ac0:	017d7840 	.word	0x017d7840
 8009ac4:	46000000 	.word	0x46000000
 8009ac8:	4c742400 	.word	0x4c742400
 8009acc:	4a742400 	.word	0x4a742400
 8009ad0:	4bbebc20 	.word	0x4bbebc20

08009ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009ada:	f7ff fe81 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	4b10      	ldr	r3, [pc, #64]	@ (8009b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	0a1b      	lsrs	r3, r3, #8
 8009ae6:	f003 030f 	and.w	r3, r3, #15
 8009aea:	490f      	ldr	r1, [pc, #60]	@ (8009b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8009aec:	5ccb      	ldrb	r3, [r1, r3]
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	fa22 f303 	lsr.w	r3, r2, r3
 8009af6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009af8:	4b0a      	ldr	r3, [pc, #40]	@ (8009b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f003 030f 	and.w	r3, r3, #15
 8009b00:	4a09      	ldr	r2, [pc, #36]	@ (8009b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b02:	5cd3      	ldrb	r3, [r2, r3]
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b0e:	4a07      	ldr	r2, [pc, #28]	@ (8009b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8009b10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b12:	4a07      	ldr	r2, [pc, #28]	@ (8009b30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b18:	4b04      	ldr	r3, [pc, #16]	@ (8009b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	58024400 	.word	0x58024400
 8009b28:	08011038 	.word	0x08011038
 8009b2c:	2400006c 	.word	0x2400006c
 8009b30:	24000068 	.word	0x24000068

08009b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b38:	f7ff ffcc 	bl	8009ad4 <HAL_RCC_GetHCLKFreq>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	091b      	lsrs	r3, r3, #4
 8009b44:	f003 0307 	and.w	r3, r3, #7
 8009b48:	4904      	ldr	r1, [pc, #16]	@ (8009b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b4a:	5ccb      	ldrb	r3, [r1, r3]
 8009b4c:	f003 031f 	and.w	r3, r3, #31
 8009b50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	08011038 	.word	0x08011038

08009b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b64:	f7ff ffb6 	bl	8009ad4 <HAL_RCC_GetHCLKFreq>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	4b06      	ldr	r3, [pc, #24]	@ (8009b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	0a1b      	lsrs	r3, r3, #8
 8009b70:	f003 0307 	and.w	r3, r3, #7
 8009b74:	4904      	ldr	r1, [pc, #16]	@ (8009b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b76:	5ccb      	ldrb	r3, [r1, r3]
 8009b78:	f003 031f 	and.w	r3, r3, #31
 8009b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	58024400 	.word	0x58024400
 8009b88:	08011038 	.word	0x08011038

08009b8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b90:	b0c6      	sub	sp, #280	@ 0x118
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009bb0:	2500      	movs	r5, #0
 8009bb2:	ea54 0305 	orrs.w	r3, r4, r5
 8009bb6:	d049      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bc2:	d02f      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009bc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bc8:	d828      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bce:	d01a      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009bd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bd4:	d822      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bde:	d007      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009be0:	e01c      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009be2:	4bab      	ldr	r3, [pc, #684]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be6:	4aaa      	ldr	r2, [pc, #680]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bee:	e01a      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 fa49 	bl	800c090 <RCCEx_PLL2_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c04:	e00f      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0a:	3328      	adds	r3, #40	@ 0x28
 8009c0c:	2102      	movs	r1, #2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f002 faf0 	bl	800c1f4 <RCCEx_PLL3_Config>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c1a:	e004      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c22:	e000      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c2e:	4b98      	ldr	r3, [pc, #608]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c3c:	4a94      	ldr	r2, [pc, #592]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c42:	e003      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009c58:	f04f 0900 	mov.w	r9, #0
 8009c5c:	ea58 0309 	orrs.w	r3, r8, r9
 8009c60:	d047      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d82a      	bhi.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c89 	.word	0x08009c89
 8009c78:	08009c97 	.word	0x08009c97
 8009c7c:	08009cad 	.word	0x08009cad
 8009c80:	08009ccb 	.word	0x08009ccb
 8009c84:	08009ccb 	.word	0x08009ccb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c88:	4b81      	ldr	r3, [pc, #516]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8c:	4a80      	ldr	r2, [pc, #512]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c94:	e01a      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f002 f9f6 	bl	800c090 <RCCEx_PLL2_Config>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009caa:	e00f      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb0:	3328      	adds	r3, #40	@ 0x28
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f002 fa9d 	bl	800c1f4 <RCCEx_PLL3_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cc8:	e000      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cd4:	4b6e      	ldr	r3, [pc, #440]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cd8:	f023 0107 	bic.w	r1, r3, #7
 8009cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ce8:	e003      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009cfe:	f04f 0b00 	mov.w	fp, #0
 8009d02:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d06:	d05b      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d10:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009d14:	d03b      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009d16:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009d1a:	d834      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d20:	d037      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009d22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d26:	d82e      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d2c:	d033      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009d2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d32:	d828      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d38:	d01a      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d3e:	d822      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009d44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d48:	d007      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009d4a:	e01c      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d4c:	4b50      	ldr	r3, [pc, #320]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d50:	4a4f      	ldr	r2, [pc, #316]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d58:	e01e      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5e:	3308      	adds	r3, #8
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 f994 	bl	800c090 <RCCEx_PLL2_Config>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d6e:	e013      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d74:	3328      	adds	r3, #40	@ 0x28
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f002 fa3b 	bl	800c1f4 <RCCEx_PLL3_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d84:	e008      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d8c:	e004      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009d8e:	bf00      	nop
 8009d90:	e002      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009d92:	bf00      	nop
 8009d94:	e000      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10b      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009da0:	4b3b      	ldr	r3, [pc, #236]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009db0:	4a37      	ldr	r2, [pc, #220]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009db2:	430b      	orrs	r3, r1
 8009db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009db6:	e003      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009dd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	d05d      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009de8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009dec:	d03b      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009dee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009df2:	d834      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009df4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009df8:	d037      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009dfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009dfe:	d82e      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009e04:	d033      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009e06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009e0a:	d828      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e10:	d01a      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009e12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e16:	d822      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e20:	d007      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009e22:	e01c      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e24:	4b1a      	ldr	r3, [pc, #104]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e28:	4a19      	ldr	r2, [pc, #100]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e30:	e01e      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e36:	3308      	adds	r3, #8
 8009e38:	2100      	movs	r1, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f002 f928 	bl	800c090 <RCCEx_PLL2_Config>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e46:	e013      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4c:	3328      	adds	r3, #40	@ 0x28
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f002 f9cf 	bl	800c1f4 <RCCEx_PLL3_Config>
 8009e56:	4603      	mov	r3, r0
 8009e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e5c:	e008      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e64:	e004      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009e66:	bf00      	nop
 8009e68:	e002      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009e6a:	bf00      	nop
 8009e6c:	e000      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10d      	bne.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009e78:	4b05      	ldr	r3, [pc, #20]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e88:	4a01      	ldr	r2, [pc, #4]	@ (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e8e:	e005      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009ea8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009eb2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	d03a      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ec2:	2b30      	cmp	r3, #48	@ 0x30
 8009ec4:	d01f      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009ec6:	2b30      	cmp	r3, #48	@ 0x30
 8009ec8:	d819      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	d00c      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009ece:	2b20      	cmp	r3, #32
 8009ed0:	d815      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d019      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009ed6:	2b10      	cmp	r3, #16
 8009ed8:	d111      	bne.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eda:	4baa      	ldr	r3, [pc, #680]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ede:	4aa9      	ldr	r2, [pc, #676]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009ee6:	e011      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	3308      	adds	r3, #8
 8009eee:	2102      	movs	r1, #2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 f8cd 	bl	800c090 <RCCEx_PLL2_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009efc:	e006      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f04:	e002      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009f06:	bf00      	nop
 8009f08:	e000      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f14:	4b9b      	ldr	r3, [pc, #620]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f22:	4a98      	ldr	r2, [pc, #608]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f24:	430b      	orrs	r3, r1
 8009f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f28:	e003      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009f42:	2300      	movs	r3, #0
 8009f44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	d051      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f5c:	d035      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f62:	d82e      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009f64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f68:	d031      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009f6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f6e:	d828      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f74:	d01a      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f7a:	d822      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f84:	d007      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009f86:	e01c      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f88:	4b7e      	ldr	r3, [pc, #504]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8c:	4a7d      	ldr	r2, [pc, #500]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009f94:	e01c      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f002 f876 	bl	800c090 <RCCEx_PLL2_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009faa:	e011      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	3328      	adds	r3, #40	@ 0x28
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f002 f91d 	bl	800c1f4 <RCCEx_PLL3_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009fc0:	e006      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009fca:	bf00      	nop
 8009fcc:	e000      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009fd8:	4b6a      	ldr	r3, [pc, #424]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fe6:	4a67      	ldr	r2, [pc, #412]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8009fec:	e003      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ff2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a002:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a006:	2300      	movs	r3, #0
 800a008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a00c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a010:	460b      	mov	r3, r1
 800a012:	4313      	orrs	r3, r2
 800a014:	d053      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a01a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a01c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a020:	d033      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a022:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a026:	d82c      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a02c:	d02f      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a02e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a032:	d826      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a038:	d02b      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a03a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a03e:	d820      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a044:	d012      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a04a:	d81a      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d022      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a054:	d115      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05a:	3308      	adds	r3, #8
 800a05c:	2101      	movs	r1, #1
 800a05e:	4618      	mov	r0, r3
 800a060:	f002 f816 	bl	800c090 <RCCEx_PLL2_Config>
 800a064:	4603      	mov	r3, r0
 800a066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a06a:	e015      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	3328      	adds	r3, #40	@ 0x28
 800a072:	2101      	movs	r1, #1
 800a074:	4618      	mov	r0, r3
 800a076:	f002 f8bd 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a080:	e00a      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a088:	e006      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a08a:	bf00      	nop
 800a08c:	e004      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a08e:	bf00      	nop
 800a090:	e002      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a092:	bf00      	nop
 800a094:	e000      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a0a0:	4b38      	ldr	r3, [pc, #224]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ae:	4a35      	ldr	r2, [pc, #212]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0b0:	430b      	orrs	r3, r1
 800a0b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a0b4:	e003      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a0ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a0d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	d058      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a0e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0ea:	d033      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a0ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0f0:	d82c      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0f6:	d02f      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0fc:	d826      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a0fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a102:	d02b      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a108:	d820      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a10a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a10e:	d012      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a114:	d81a      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d022      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a11a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a11e:	d115      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a124:	3308      	adds	r3, #8
 800a126:	2101      	movs	r1, #1
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 ffb1 	bl	800c090 <RCCEx_PLL2_Config>
 800a12e:	4603      	mov	r3, r0
 800a130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a134:	e015      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13a:	3328      	adds	r3, #40	@ 0x28
 800a13c:	2101      	movs	r1, #1
 800a13e:	4618      	mov	r0, r3
 800a140:	f002 f858 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a144:	4603      	mov	r3, r0
 800a146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a14a:	e00a      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a152:	e006      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a154:	bf00      	nop
 800a156:	e004      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a158:	bf00      	nop
 800a15a:	e002      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a15c:	bf00      	nop
 800a15e:	e000      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10e      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a16a:	4b06      	ldr	r3, [pc, #24]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a16c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a16e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a17a:	4a02      	ldr	r2, [pc, #8]	@ (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a17c:	430b      	orrs	r3, r1
 800a17e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a180:	e006      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a182:	bf00      	nop
 800a184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a18c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a19c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a1a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	d037      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1ba:	d00e      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a1bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1c0:	d816      	bhi.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d018      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a1c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1ca:	d111      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1cc:	4bc4      	ldr	r3, [pc, #784]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d0:	4ac3      	ldr	r2, [pc, #780]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a1d8:	e00f      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1de:	3308      	adds	r3, #8
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f001 ff54 	bl	800c090 <RCCEx_PLL2_Config>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a1ee:	e004      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1f6:	e000      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a202:	4bb7      	ldr	r3, [pc, #732]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a206:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a210:	4ab3      	ldr	r2, [pc, #716]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a212:	430b      	orrs	r3, r1
 800a214:	6513      	str	r3, [r2, #80]	@ 0x50
 800a216:	e003      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a21c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a22c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a230:	2300      	movs	r3, #0
 800a232:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a236:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a23a:	460b      	mov	r3, r1
 800a23c:	4313      	orrs	r3, r2
 800a23e:	d039      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a246:	2b03      	cmp	r3, #3
 800a248:	d81c      	bhi.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a24a:	a201      	add	r2, pc, #4	@ (adr r2, 800a250 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a28d 	.word	0x0800a28d
 800a254:	0800a261 	.word	0x0800a261
 800a258:	0800a26f 	.word	0x0800a26f
 800a25c:	0800a28d 	.word	0x0800a28d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a260:	4b9f      	ldr	r3, [pc, #636]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a264:	4a9e      	ldr	r2, [pc, #632]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a26a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a26c:	e00f      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a272:	3308      	adds	r3, #8
 800a274:	2102      	movs	r1, #2
 800a276:	4618      	mov	r0, r3
 800a278:	f001 ff0a 	bl	800c090 <RCCEx_PLL2_Config>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a282:	e004      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a28a:	e000      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a28e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a296:	4b92      	ldr	r3, [pc, #584]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a29a:	f023 0103 	bic.w	r1, r3, #3
 800a29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2a4:	4a8e      	ldr	r2, [pc, #568]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a2aa:	e003      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a2c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a2ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	f000 8099 	beq.w	800a408 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2d6:	4b83      	ldr	r3, [pc, #524]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a82      	ldr	r2, [pc, #520]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a2dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a2e2:	f7f9 fa87 	bl	80037f4 <HAL_GetTick>
 800a2e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2ea:	e00b      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2ec:	f7f9 fa82 	bl	80037f4 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	2b64      	cmp	r3, #100	@ 0x64
 800a2fa:	d903      	bls.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a302:	e005      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a304:	4b77      	ldr	r3, [pc, #476]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0ed      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a314:	2b00      	cmp	r3, #0
 800a316:	d173      	bne.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a318:	4b71      	ldr	r3, [pc, #452]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a31a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a324:	4053      	eors	r3, r2
 800a326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d015      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a32e:	4b6c      	ldr	r3, [pc, #432]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a336:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a33a:	4b69      	ldr	r3, [pc, #420]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a33c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a33e:	4a68      	ldr	r2, [pc, #416]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a344:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a346:	4b66      	ldr	r3, [pc, #408]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a34a:	4a65      	ldr	r2, [pc, #404]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a34c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a350:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a352:	4a63      	ldr	r2, [pc, #396]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a358:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a366:	d118      	bne.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a368:	f7f9 fa44 	bl	80037f4 <HAL_GetTick>
 800a36c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a370:	e00d      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a372:	f7f9 fa3f 	bl	80037f4 <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a37c:	1ad2      	subs	r2, r2, r3
 800a37e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a382:	429a      	cmp	r2, r3
 800a384:	d903      	bls.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a38c:	e005      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a38e:	4b54      	ldr	r3, [pc, #336]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0eb      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a39a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d129      	bne.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3b2:	d10e      	bne.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a3b4:	4b4a      	ldr	r3, [pc, #296]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3c4:	091a      	lsrs	r2, r3, #4
 800a3c6:	4b48      	ldr	r3, [pc, #288]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	4a45      	ldr	r2, [pc, #276]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	6113      	str	r3, [r2, #16]
 800a3d0:	e005      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a3d2:	4b43      	ldr	r3, [pc, #268]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	4a42      	ldr	r2, [pc, #264]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a3dc:	6113      	str	r3, [r2, #16]
 800a3de:	4b40      	ldr	r3, [pc, #256]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3ee:	4a3c      	ldr	r2, [pc, #240]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3f0:	430b      	orrs	r3, r1
 800a3f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3f4:	e008      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a3f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a3fe:	e003      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a404:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f002 0301 	and.w	r3, r2, #1
 800a414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a418:	2300      	movs	r3, #0
 800a41a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a41e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a422:	460b      	mov	r3, r1
 800a424:	4313      	orrs	r3, r2
 800a426:	f000 808f 	beq.w	800a548 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a430:	2b28      	cmp	r3, #40	@ 0x28
 800a432:	d871      	bhi.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a434:	a201      	add	r2, pc, #4	@ (adr r2, 800a43c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43a:	bf00      	nop
 800a43c:	0800a521 	.word	0x0800a521
 800a440:	0800a519 	.word	0x0800a519
 800a444:	0800a519 	.word	0x0800a519
 800a448:	0800a519 	.word	0x0800a519
 800a44c:	0800a519 	.word	0x0800a519
 800a450:	0800a519 	.word	0x0800a519
 800a454:	0800a519 	.word	0x0800a519
 800a458:	0800a519 	.word	0x0800a519
 800a45c:	0800a4ed 	.word	0x0800a4ed
 800a460:	0800a519 	.word	0x0800a519
 800a464:	0800a519 	.word	0x0800a519
 800a468:	0800a519 	.word	0x0800a519
 800a46c:	0800a519 	.word	0x0800a519
 800a470:	0800a519 	.word	0x0800a519
 800a474:	0800a519 	.word	0x0800a519
 800a478:	0800a519 	.word	0x0800a519
 800a47c:	0800a503 	.word	0x0800a503
 800a480:	0800a519 	.word	0x0800a519
 800a484:	0800a519 	.word	0x0800a519
 800a488:	0800a519 	.word	0x0800a519
 800a48c:	0800a519 	.word	0x0800a519
 800a490:	0800a519 	.word	0x0800a519
 800a494:	0800a519 	.word	0x0800a519
 800a498:	0800a519 	.word	0x0800a519
 800a49c:	0800a521 	.word	0x0800a521
 800a4a0:	0800a519 	.word	0x0800a519
 800a4a4:	0800a519 	.word	0x0800a519
 800a4a8:	0800a519 	.word	0x0800a519
 800a4ac:	0800a519 	.word	0x0800a519
 800a4b0:	0800a519 	.word	0x0800a519
 800a4b4:	0800a519 	.word	0x0800a519
 800a4b8:	0800a519 	.word	0x0800a519
 800a4bc:	0800a521 	.word	0x0800a521
 800a4c0:	0800a519 	.word	0x0800a519
 800a4c4:	0800a519 	.word	0x0800a519
 800a4c8:	0800a519 	.word	0x0800a519
 800a4cc:	0800a519 	.word	0x0800a519
 800a4d0:	0800a519 	.word	0x0800a519
 800a4d4:	0800a519 	.word	0x0800a519
 800a4d8:	0800a519 	.word	0x0800a519
 800a4dc:	0800a521 	.word	0x0800a521
 800a4e0:	58024400 	.word	0x58024400
 800a4e4:	58024800 	.word	0x58024800
 800a4e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f001 fdcb 	bl	800c090 <RCCEx_PLL2_Config>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a500:	e00f      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a506:	3328      	adds	r3, #40	@ 0x28
 800a508:	2101      	movs	r1, #1
 800a50a:	4618      	mov	r0, r3
 800a50c:	f001 fe72 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a510:	4603      	mov	r3, r0
 800a512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a516:	e004      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a51e:	e000      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a520:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a522:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10a      	bne.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a52a:	4bbf      	ldr	r3, [pc, #764]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a52e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a538:	4abb      	ldr	r2, [pc, #748]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a53a:	430b      	orrs	r3, r1
 800a53c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a53e:	e003      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f002 0302 	and.w	r3, r2, #2
 800a554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a558:	2300      	movs	r3, #0
 800a55a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a55e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a562:	460b      	mov	r3, r1
 800a564:	4313      	orrs	r3, r2
 800a566:	d041      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a56e:	2b05      	cmp	r3, #5
 800a570:	d824      	bhi.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a572:	a201      	add	r2, pc, #4	@ (adr r2, 800a578 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a5c5 	.word	0x0800a5c5
 800a57c:	0800a591 	.word	0x0800a591
 800a580:	0800a5a7 	.word	0x0800a5a7
 800a584:	0800a5c5 	.word	0x0800a5c5
 800a588:	0800a5c5 	.word	0x0800a5c5
 800a58c:	0800a5c5 	.word	0x0800a5c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a594:	3308      	adds	r3, #8
 800a596:	2101      	movs	r1, #1
 800a598:	4618      	mov	r0, r3
 800a59a:	f001 fd79 	bl	800c090 <RCCEx_PLL2_Config>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a5a4:	e00f      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5aa:	3328      	adds	r3, #40	@ 0x28
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 fe20 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a5ba:	e004      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5c2:	e000      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a5c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10a      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a5ce:	4b96      	ldr	r3, [pc, #600]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d2:	f023 0107 	bic.w	r1, r3, #7
 800a5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5dc:	4a92      	ldr	r2, [pc, #584]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5de:	430b      	orrs	r3, r1
 800a5e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a5e2:	e003      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	f002 0304 	and.w	r3, r2, #4
 800a5f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a602:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a606:	460b      	mov	r3, r1
 800a608:	4313      	orrs	r3, r2
 800a60a:	d044      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a614:	2b05      	cmp	r3, #5
 800a616:	d825      	bhi.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a618:	a201      	add	r2, pc, #4	@ (adr r2, 800a620 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a66d 	.word	0x0800a66d
 800a624:	0800a639 	.word	0x0800a639
 800a628:	0800a64f 	.word	0x0800a64f
 800a62c:	0800a66d 	.word	0x0800a66d
 800a630:	0800a66d 	.word	0x0800a66d
 800a634:	0800a66d 	.word	0x0800a66d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63c:	3308      	adds	r3, #8
 800a63e:	2101      	movs	r1, #1
 800a640:	4618      	mov	r0, r3
 800a642:	f001 fd25 	bl	800c090 <RCCEx_PLL2_Config>
 800a646:	4603      	mov	r3, r0
 800a648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a64c:	e00f      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a652:	3328      	adds	r3, #40	@ 0x28
 800a654:	2101      	movs	r1, #1
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fdcc 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a65c:	4603      	mov	r3, r0
 800a65e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a662:	e004      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a66a:	e000      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a66c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10b      	bne.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a676:	4b6c      	ldr	r3, [pc, #432]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a67a:	f023 0107 	bic.w	r1, r3, #7
 800a67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a686:	4a68      	ldr	r2, [pc, #416]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a688:	430b      	orrs	r3, r1
 800a68a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a68c:	e003      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a68e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a692:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	f002 0320 	and.w	r3, r2, #32
 800a6a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	d055      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6c2:	d033      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a6c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6c8:	d82c      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ce:	d02f      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d4:	d826      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a6d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6da:	d02b      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a6dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6e0:	d820      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a6e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6e6:	d012      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a6e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ec:	d81a      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d022      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a6f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6f6:	d115      	bne.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f001 fcc5 	bl	800c090 <RCCEx_PLL2_Config>
 800a706:	4603      	mov	r3, r0
 800a708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a70c:	e015      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a712:	3328      	adds	r3, #40	@ 0x28
 800a714:	2102      	movs	r1, #2
 800a716:	4618      	mov	r0, r3
 800a718:	f001 fd6c 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a722:	e00a      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a72a:	e006      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a72c:	bf00      	nop
 800a72e:	e004      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a730:	bf00      	nop
 800a732:	e002      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a734:	bf00      	nop
 800a736:	e000      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a73a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10b      	bne.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a742:	4b39      	ldr	r3, [pc, #228]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a746:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a752:	4a35      	ldr	r2, [pc, #212]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a754:	430b      	orrs	r3, r1
 800a756:	6553      	str	r3, [r2, #84]	@ 0x54
 800a758:	e003      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a75e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a76e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a772:	2300      	movs	r3, #0
 800a774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a778:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a77c:	460b      	mov	r3, r1
 800a77e:	4313      	orrs	r3, r2
 800a780:	d058      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a78a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a78e:	d033      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a790:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a794:	d82c      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a79a:	d02f      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a79c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7a0:	d826      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7a6:	d02b      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a7a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7ac:	d820      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7b2:	d012      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a7b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7b8:	d81a      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d022      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a7be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7c2:	d115      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c8:	3308      	adds	r3, #8
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f001 fc5f 	bl	800c090 <RCCEx_PLL2_Config>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a7d8:	e015      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7de:	3328      	adds	r3, #40	@ 0x28
 800a7e0:	2102      	movs	r1, #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fd06 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a7ee:	e00a      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7f6:	e006      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a7f8:	bf00      	nop
 800a7fa:	e004      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a7fc:	bf00      	nop
 800a7fe:	e002      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a800:	bf00      	nop
 800a802:	e000      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a804:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a806:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10e      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a80e:	4b06      	ldr	r3, [pc, #24]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a812:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a81e:	4a02      	ldr	r2, [pc, #8]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a820:	430b      	orrs	r3, r1
 800a822:	6593      	str	r3, [r2, #88]	@ 0x58
 800a824:	e006      	b.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a826:	bf00      	nop
 800a828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a844:	2300      	movs	r3, #0
 800a846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a84a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a84e:	460b      	mov	r3, r1
 800a850:	4313      	orrs	r3, r2
 800a852:	d055      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a85c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a860:	d033      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a862:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a866:	d82c      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a86c:	d02f      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a86e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a872:	d826      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a874:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a878:	d02b      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a87a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a87e:	d820      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a884:	d012      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a88a:	d81a      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d022      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a894:	d115      	bne.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89a:	3308      	adds	r3, #8
 800a89c:	2100      	movs	r1, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f001 fbf6 	bl	800c090 <RCCEx_PLL2_Config>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a8aa:	e015      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b0:	3328      	adds	r3, #40	@ 0x28
 800a8b2:	2102      	movs	r1, #2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f001 fc9d 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a8c0:	e00a      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8c8:	e006      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a8ca:	bf00      	nop
 800a8cc:	e004      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a8ce:	bf00      	nop
 800a8d0:	e002      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a8d2:	bf00      	nop
 800a8d4:	e000      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10b      	bne.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a8e0:	4ba0      	ldr	r3, [pc, #640]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8f0:	4a9c      	ldr	r2, [pc, #624]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8f2:	430b      	orrs	r3, r1
 800a8f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8f6:	e003      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f002 0308 	and.w	r3, r2, #8
 800a90c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a910:	2300      	movs	r3, #0
 800a912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a916:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a91a:	460b      	mov	r3, r1
 800a91c:	4313      	orrs	r3, r2
 800a91e:	d01e      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92c:	d10c      	bne.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a932:	3328      	adds	r3, #40	@ 0x28
 800a934:	2102      	movs	r1, #2
 800a936:	4618      	mov	r0, r3
 800a938:	f001 fc5c 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a948:	4b86      	ldr	r3, [pc, #536]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a94a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a94c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a958:	4a82      	ldr	r2, [pc, #520]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a95a:	430b      	orrs	r3, r1
 800a95c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f002 0310 	and.w	r3, r2, #16
 800a96a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a96e:	2300      	movs	r3, #0
 800a970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a974:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a978:	460b      	mov	r3, r1
 800a97a:	4313      	orrs	r3, r2
 800a97c:	d01e      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a98a:	d10c      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a990:	3328      	adds	r3, #40	@ 0x28
 800a992:	2102      	movs	r1, #2
 800a994:	4618      	mov	r0, r3
 800a996:	f001 fc2d 	bl	800c1f4 <RCCEx_PLL3_Config>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9a6:	4b6f      	ldr	r3, [pc, #444]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9b6:	4a6b      	ldr	r2, [pc, #428]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a9c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9ce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	d03e      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a9e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9e4:	d022      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a9e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9ea:	d81b      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d003      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a9f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9f4:	d00b      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a9f6:	e015      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 fb45 	bl	800c090 <RCCEx_PLL2_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa0c:	e00f      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa12:	3328      	adds	r3, #40	@ 0x28
 800aa14:	2102      	movs	r1, #2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 fbec 	bl	800c1f4 <RCCEx_PLL3_Config>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa22:	e004      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa2a:	e000      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800aa2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10b      	bne.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa36:	4b4b      	ldr	r3, [pc, #300]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800aa3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa46:	4a47      	ldr	r2, [pc, #284]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa48:	430b      	orrs	r3, r1
 800aa4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa4c:	e003      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800aa62:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa64:	2300      	movs	r3, #0
 800aa66:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	d03b      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aa72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa7e:	d01f      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800aa80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa84:	d818      	bhi.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800aa86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa8a:	d003      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800aa8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa90:	d007      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800aa92:	e011      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa94:	4b33      	ldr	r3, [pc, #204]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa98:	4a32      	ldr	r2, [pc, #200]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aaa0:	e00f      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa6:	3328      	adds	r3, #40	@ 0x28
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f001 fba2 	bl	800c1f4 <RCCEx_PLL3_Config>
 800aab0:	4603      	mov	r3, r0
 800aab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800aab6:	e004      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aabe:	e000      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800aac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10b      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aaca:	4b26      	ldr	r3, [pc, #152]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aace:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aada:	4a22      	ldr	r2, [pc, #136]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aadc:	430b      	orrs	r3, r1
 800aade:	6553      	str	r3, [r2, #84]	@ 0x54
 800aae0:	e003      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aae6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aaf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaf8:	2300      	movs	r3, #0
 800aafa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aafc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ab00:	460b      	mov	r3, r1
 800ab02:	4313      	orrs	r3, r2
 800ab04:	d034      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ab06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d003      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ab10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab14:	d007      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ab16:	e011      	b.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab18:	4b12      	ldr	r3, [pc, #72]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1c:	4a11      	ldr	r2, [pc, #68]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab24:	e00e      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	2102      	movs	r1, #2
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f001 faae 	bl	800c090 <RCCEx_PLL2_Config>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab3a:	e003      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10d      	bne.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab4c:	4b05      	ldr	r3, [pc, #20]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab5a:	4a02      	ldr	r2, [pc, #8]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ab60:	e006      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ab62:	bf00      	nop
 800ab64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ab70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ab7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab7e:	2300      	movs	r3, #0
 800ab80:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab82:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ab86:	460b      	mov	r3, r1
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	d00c      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab90:	3328      	adds	r3, #40	@ 0x28
 800ab92:	2102      	movs	r1, #2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 fb2d 	bl	800c1f4 <RCCEx_PLL3_Config>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800abb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abb4:	2300      	movs	r3, #0
 800abb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abb8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800abbc:	460b      	mov	r3, r1
 800abbe:	4313      	orrs	r3, r2
 800abc0:	d036      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800abc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abcc:	d018      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800abce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abd2:	d811      	bhi.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800abd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abd8:	d014      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800abda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abde:	d80b      	bhi.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d011      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800abe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abe8:	d106      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abea:	4bb7      	ldr	r3, [pc, #732]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abee:	4ab6      	ldr	r2, [pc, #728]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800abf6:	e008      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800abfe:	e004      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac00:	bf00      	nop
 800ac02:	e002      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac04:	bf00      	nop
 800ac06:	e000      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ac12:	4bad      	ldr	r3, [pc, #692]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac20:	4aa9      	ldr	r2, [pc, #676]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac22:	430b      	orrs	r3, r1
 800ac24:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac26:	e003      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ac3c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac3e:	2300      	movs	r3, #0
 800ac40:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ac46:	460b      	mov	r3, r1
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	d009      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac4c:	4b9e      	ldr	r3, [pc, #632]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac5a:	4a9b      	ldr	r2, [pc, #620]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac5c:	430b      	orrs	r3, r1
 800ac5e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ac6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac6e:	2300      	movs	r3, #0
 800ac70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ac76:	460b      	mov	r3, r1
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	d009      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac7c:	4b92      	ldr	r3, [pc, #584]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac80:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac8a:	4a8f      	ldr	r2, [pc, #572]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac8c:	430b      	orrs	r3, r1
 800ac8e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ac9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac9e:	2300      	movs	r3, #0
 800aca0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aca2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aca6:	460b      	mov	r3, r1
 800aca8:	4313      	orrs	r3, r2
 800acaa:	d00e      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800acac:	4b86      	ldr	r3, [pc, #536]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	4a85      	ldr	r2, [pc, #532]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800acb6:	6113      	str	r3, [r2, #16]
 800acb8:	4b83      	ldr	r3, [pc, #524]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acba:	6919      	ldr	r1, [r3, #16]
 800acbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acc4:	4a80      	ldr	r2, [pc, #512]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acc6:	430b      	orrs	r3, r1
 800acc8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800acd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800acd8:	2300      	movs	r3, #0
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acdc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ace0:	460b      	mov	r3, r1
 800ace2:	4313      	orrs	r3, r2
 800ace4:	d009      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ace6:	4b78      	ldr	r3, [pc, #480]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ace8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf4:	4a74      	ldr	r2, [pc, #464]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acf6:	430b      	orrs	r3, r1
 800acf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ad06:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad08:	2300      	movs	r3, #0
 800ad0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ad10:	460b      	mov	r3, r1
 800ad12:	4313      	orrs	r3, r2
 800ad14:	d00a      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad16:	4b6c      	ldr	r3, [pc, #432]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad1a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad26:	4a68      	ldr	r2, [pc, #416]	@ (800aec8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	2100      	movs	r1, #0
 800ad36:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ad42:	460b      	mov	r3, r1
 800ad44:	4313      	orrs	r3, r2
 800ad46:	d011      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4c:	3308      	adds	r3, #8
 800ad4e:	2100      	movs	r1, #0
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 f99d 	bl	800c090 <RCCEx_PLL2_Config>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ad5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ad6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad74:	2100      	movs	r1, #0
 800ad76:	6239      	str	r1, [r7, #32]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ad82:	460b      	mov	r3, r1
 800ad84:	4313      	orrs	r3, r2
 800ad86:	d011      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	2101      	movs	r1, #1
 800ad90:	4618      	mov	r0, r3
 800ad92:	f001 f97d 	bl	800c090 <RCCEx_PLL2_Config>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ad9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d003      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ada8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	2100      	movs	r1, #0
 800adb6:	61b9      	str	r1, [r7, #24]
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	61fb      	str	r3, [r7, #28]
 800adbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800adc2:	460b      	mov	r3, r1
 800adc4:	4313      	orrs	r3, r2
 800adc6:	d011      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adcc:	3308      	adds	r3, #8
 800adce:	2102      	movs	r1, #2
 800add0:	4618      	mov	r0, r3
 800add2:	f001 f95d 	bl	800c090 <RCCEx_PLL2_Config>
 800add6:	4603      	mov	r3, r0
 800add8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800addc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d003      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ade8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	2100      	movs	r1, #0
 800adf6:	6139      	str	r1, [r7, #16]
 800adf8:	f003 0308 	and.w	r3, r3, #8
 800adfc:	617b      	str	r3, [r7, #20]
 800adfe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ae02:	460b      	mov	r3, r1
 800ae04:	4313      	orrs	r3, r2
 800ae06:	d011      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae0c:	3328      	adds	r3, #40	@ 0x28
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4618      	mov	r0, r3
 800ae12:	f001 f9ef 	bl	800c1f4 <RCCEx_PLL3_Config>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ae1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ae2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	2100      	movs	r1, #0
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ae42:	460b      	mov	r3, r1
 800ae44:	4313      	orrs	r3, r2
 800ae46:	d011      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae4c:	3328      	adds	r3, #40	@ 0x28
 800ae4e:	2101      	movs	r1, #1
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 f9cf 	bl	800c1f4 <RCCEx_PLL3_Config>
 800ae56:	4603      	mov	r3, r0
 800ae58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ae5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	2100      	movs	r1, #0
 800ae76:	6039      	str	r1, [r7, #0]
 800ae78:	f003 0320 	and.w	r3, r3, #32
 800ae7c:	607b      	str	r3, [r7, #4]
 800ae7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ae82:	460b      	mov	r3, r1
 800ae84:	4313      	orrs	r3, r2
 800ae86:	d011      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8c:	3328      	adds	r3, #40	@ 0x28
 800ae8e:	2102      	movs	r1, #2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f001 f9af 	bl	800c1f4 <RCCEx_PLL3_Config>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ae9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800aeac:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e000      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800aec0:	46bd      	mov	sp, r7
 800aec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aec6:	bf00      	nop
 800aec8:	58024400 	.word	0x58024400

0800aecc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b090      	sub	sp, #64	@ 0x40
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeda:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800aede:	430b      	orrs	r3, r1
 800aee0:	f040 8094 	bne.w	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800aee4:	4b9b      	ldr	r3, [pc, #620]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	f200 8087 	bhi.w	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aef6:	a201      	add	r2, pc, #4	@ (adr r2, 800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefc:	0800af11 	.word	0x0800af11
 800af00:	0800af39 	.word	0x0800af39
 800af04:	0800af61 	.word	0x0800af61
 800af08:	0800affd 	.word	0x0800affd
 800af0c:	0800af89 	.word	0x0800af89
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af10:	4b90      	ldr	r3, [pc, #576]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af1c:	d108      	bne.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af22:	4618      	mov	r0, r3
 800af24:	f000 ff62 	bl	800bdec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2c:	f000 bc93 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af34:	f000 bc8f 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af38:	4b86      	ldr	r3, [pc, #536]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af44:	d108      	bne.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af46:	f107 0318 	add.w	r3, r7, #24
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 fca6 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af54:	f000 bc7f 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5c:	f000 bc7b 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af60:	4b7c      	ldr	r3, [pc, #496]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af6c:	d108      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af6e:	f107 030c 	add.w	r3, r7, #12
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fde6 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7c:	f000 bc6b 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af84:	f000 bc67 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af88:	4b72      	ldr	r3, [pc, #456]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af90:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af92:	4b70      	ldr	r3, [pc, #448]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	d10c      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d109      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afa4:	4b6b      	ldr	r3, [pc, #428]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	08db      	lsrs	r3, r3, #3
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	4a6a      	ldr	r2, [pc, #424]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800afb0:	fa22 f303 	lsr.w	r3, r2, r3
 800afb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afb6:	e01f      	b.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afb8:	4b66      	ldr	r3, [pc, #408]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afc4:	d106      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800afc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afcc:	d102      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afce:	4b63      	ldr	r3, [pc, #396]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afd2:	e011      	b.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afd4:	4b5f      	ldr	r3, [pc, #380]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afe0:	d106      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800afe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe8:	d102      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afea:	4b5d      	ldr	r3, [pc, #372]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afee:	e003      	b.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aff4:	f000 bc2f 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aff8:	f000 bc2d 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800affc:	4b59      	ldr	r3, [pc, #356]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800affe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b000:	f000 bc29 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b008:	f000 bc25 	b.w	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b00c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b010:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b014:	430b      	orrs	r3, r1
 800b016:	f040 80a7 	bne.w	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b01a:	4b4e      	ldr	r3, [pc, #312]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b01c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b01e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b022:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b02a:	d054      	beq.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b032:	f200 808b 	bhi.w	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b03c:	f000 8083 	beq.w	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b042:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b046:	f200 8081 	bhi.w	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b050:	d02f      	beq.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b058:	d878      	bhi.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d004      	beq.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b062:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b066:	d012      	beq.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b068:	e070      	b.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b06a:	4b3a      	ldr	r3, [pc, #232]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b076:	d107      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 feb5 	bl	800bdec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b086:	e3e6      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b08c:	e3e3      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b08e:	4b31      	ldr	r3, [pc, #196]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b09a:	d107      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b09c:	f107 0318 	add.w	r3, r7, #24
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 fbfb 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0aa:	e3d4      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b0:	e3d1      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0b2:	4b28      	ldr	r3, [pc, #160]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0be:	d107      	bne.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0c0:	f107 030c 	add.w	r3, r7, #12
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fd3d 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ce:	e3c2      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d4:	e3bf      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0d6:	4b1f      	ldr	r3, [pc, #124]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b0de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0e0:	4b1c      	ldr	r3, [pc, #112]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0304 	and.w	r3, r3, #4
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	d10c      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0f2:	4b18      	ldr	r3, [pc, #96]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	08db      	lsrs	r3, r3, #3
 800b0f8:	f003 0303 	and.w	r3, r3, #3
 800b0fc:	4a16      	ldr	r2, [pc, #88]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b104:	e01e      	b.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b106:	4b13      	ldr	r3, [pc, #76]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b10e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b112:	d106      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b11a:	d102      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b11c:	4b0f      	ldr	r3, [pc, #60]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b120:	e010      	b.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b122:	4b0c      	ldr	r3, [pc, #48]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b12a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b12e:	d106      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b136:	d102      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b138:	4b09      	ldr	r3, [pc, #36]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b13c:	e002      	b.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b142:	e388      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b144:	e387      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b146:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14a:	e384      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b150:	e381      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b152:	bf00      	nop
 800b154:	58024400 	.word	0x58024400
 800b158:	03d09000 	.word	0x03d09000
 800b15c:	003d0900 	.word	0x003d0900
 800b160:	017d7840 	.word	0x017d7840
 800b164:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b16c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b170:	430b      	orrs	r3, r1
 800b172:	f040 809c 	bne.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b176:	4b9e      	ldr	r3, [pc, #632]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b17a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b17e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b186:	d054      	beq.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b18e:	f200 808b 	bhi.w	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b194:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b198:	f000 8083 	beq.w	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b1a2:	f200 8081 	bhi.w	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1ac:	d02f      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1b4:	d878      	bhi.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d004      	beq.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1c2:	d012      	beq.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b1c4:	e070      	b.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1c6:	4b8a      	ldr	r3, [pc, #552]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d2:	d107      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fe07 	bl	800bdec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e2:	e338      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1e8:	e335      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ea:	4b81      	ldr	r3, [pc, #516]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1f6:	d107      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f8:	f107 0318 	add.w	r3, r7, #24
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 fb4d 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b206:	e326      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20c:	e323      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b20e:	4b78      	ldr	r3, [pc, #480]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b21a:	d107      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	4618      	mov	r0, r3
 800b222:	f000 fc8f 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22a:	e314      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b230:	e311      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b232:	4b6f      	ldr	r3, [pc, #444]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b236:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b23a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b23c:	4b6c      	ldr	r3, [pc, #432]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b04      	cmp	r3, #4
 800b246:	d10c      	bne.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d109      	bne.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b24e:	4b68      	ldr	r3, [pc, #416]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	08db      	lsrs	r3, r3, #3
 800b254:	f003 0303 	and.w	r3, r3, #3
 800b258:	4a66      	ldr	r2, [pc, #408]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b25a:	fa22 f303 	lsr.w	r3, r2, r3
 800b25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b260:	e01e      	b.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b262:	4b63      	ldr	r3, [pc, #396]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b26a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b26e:	d106      	bne.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b276:	d102      	bne.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b278:	4b5f      	ldr	r3, [pc, #380]	@ (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b27c:	e010      	b.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b27e:	4b5c      	ldr	r3, [pc, #368]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b28a:	d106      	bne.n	800b29a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b292:	d102      	bne.n	800b29a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b294:	4b59      	ldr	r3, [pc, #356]	@ (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b298:	e002      	b.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b29e:	e2da      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2a0:	e2d9      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2a2:	4b57      	ldr	r3, [pc, #348]	@ (800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a6:	e2d6      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ac:	e2d3      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b2b6:	430b      	orrs	r3, r1
 800b2b8:	f040 80a7 	bne.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b2bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b2c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2cc:	d055      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2d4:	f200 8096 	bhi.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b2de:	f000 8084 	beq.w	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b2e8:	f200 808c 	bhi.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2f2:	d030      	beq.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2fa:	f200 8083 	bhi.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b30a:	d012      	beq.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b30c:	e07a      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b30e:	4b38      	ldr	r3, [pc, #224]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b31a:	d107      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b31c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fd63 	bl	800bdec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b32a:	e294      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b330:	e291      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b332:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b33a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b33e:	d107      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b340:	f107 0318 	add.w	r3, r7, #24
 800b344:	4618      	mov	r0, r3
 800b346:	f000 faa9 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34e:	e282      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b354:	e27f      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b356:	4b26      	ldr	r3, [pc, #152]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b35e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b362:	d107      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b364:	f107 030c 	add.w	r3, r7, #12
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fbeb 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b372:	e270      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b378:	e26d      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b37a:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b37c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b37e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b382:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b384:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b04      	cmp	r3, #4
 800b38e:	d10c      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b396:	4b16      	ldr	r3, [pc, #88]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	08db      	lsrs	r3, r3, #3
 800b39c:	f003 0303 	and.w	r3, r3, #3
 800b3a0:	4a14      	ldr	r2, [pc, #80]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3a8:	e01e      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3aa:	4b11      	ldr	r3, [pc, #68]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3b6:	d106      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3be:	d102      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3c4:	e010      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3d2:	d106      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3da:	d102      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3dc:	4b07      	ldr	r3, [pc, #28]	@ (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3e0:	e002      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3e6:	e236      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3e8:	e235      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3ea:	4b05      	ldr	r3, [pc, #20]	@ (800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ee:	e232      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3f0:	58024400 	.word	0x58024400
 800b3f4:	03d09000 	.word	0x03d09000
 800b3f8:	003d0900 	.word	0x003d0900
 800b3fc:	017d7840 	.word	0x017d7840
 800b400:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b408:	e225      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b40e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b412:	430b      	orrs	r3, r1
 800b414:	f040 8085 	bne.w	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b418:	4b9c      	ldr	r3, [pc, #624]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b41c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b420:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b428:	d06b      	beq.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b430:	d874      	bhi.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b434:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b438:	d056      	beq.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b440:	d86c      	bhi.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b448:	d03b      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b450:	d864      	bhi.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b458:	d021      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b460:	d85c      	bhi.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b46e:	d004      	beq.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b470:	e054      	b.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b472:	f7fe fb5f 	bl	8009b34 <HAL_RCC_GetPCLK1Freq>
 800b476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b478:	e1ed      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b47a:	4b84      	ldr	r3, [pc, #528]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b486:	d107      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b488:	f107 0318 	add.w	r3, r7, #24
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 fa05 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b496:	e1de      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b49c:	e1db      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b49e:	4b7b      	ldr	r3, [pc, #492]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4aa:	d107      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ac:	f107 030c 	add.w	r3, r7, #12
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fb47 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ba:	e1cc      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4c0:	e1c9      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4c2:	4b72      	ldr	r3, [pc, #456]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 0304 	and.w	r3, r3, #4
 800b4ca:	2b04      	cmp	r3, #4
 800b4cc:	d109      	bne.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ce:	4b6f      	ldr	r3, [pc, #444]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	08db      	lsrs	r3, r3, #3
 800b4d4:	f003 0303 	and.w	r3, r3, #3
 800b4d8:	4a6d      	ldr	r2, [pc, #436]	@ (800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b4da:	fa22 f303 	lsr.w	r3, r2, r3
 800b4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e0:	e1b9      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4e6:	e1b6      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b4e8:	4b68      	ldr	r3, [pc, #416]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4f4:	d102      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b4f6:	4b67      	ldr	r3, [pc, #412]	@ (800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4fa:	e1ac      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b500:	e1a9      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b502:	4b62      	ldr	r3, [pc, #392]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b50a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b50e:	d102      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b510:	4b61      	ldr	r3, [pc, #388]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b514:	e19f      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b51a:	e19c      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b520:	e199      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b522:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b526:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b52a:	430b      	orrs	r3, r1
 800b52c:	d173      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b52e:	4b57      	ldr	r3, [pc, #348]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b536:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b53e:	d02f      	beq.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b546:	d863      	bhi.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b554:	d012      	beq.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b556:	e05b      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b558:	4b4c      	ldr	r3, [pc, #304]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b564:	d107      	bne.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b566:	f107 0318 	add.w	r3, r7, #24
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f996 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b574:	e16f      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b57a:	e16c      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b57c:	4b43      	ldr	r3, [pc, #268]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b588:	d107      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 fad8 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b598:	e15d      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b59e:	e15a      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5a0:	4b3a      	ldr	r3, [pc, #232]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5aa:	4b38      	ldr	r3, [pc, #224]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 0304 	and.w	r3, r3, #4
 800b5b2:	2b04      	cmp	r3, #4
 800b5b4:	d10c      	bne.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b5b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d109      	bne.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5bc:	4b33      	ldr	r3, [pc, #204]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	08db      	lsrs	r3, r3, #3
 800b5c2:	f003 0303 	and.w	r3, r3, #3
 800b5c6:	4a32      	ldr	r2, [pc, #200]	@ (800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b5c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ce:	e01e      	b.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5d0:	4b2e      	ldr	r3, [pc, #184]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5dc:	d106      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b5de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5e4:	d102      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5e6:	4b2b      	ldr	r3, [pc, #172]	@ (800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ea:	e010      	b.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5ec:	4b27      	ldr	r3, [pc, #156]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5f8:	d106      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b600:	d102      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b602:	4b25      	ldr	r3, [pc, #148]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b606:	e002      	b.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b60c:	e123      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b60e:	e122      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b614:	e11f      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b61a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b61e:	430b      	orrs	r3, r1
 800b620:	d13c      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b622:	4b1a      	ldr	r3, [pc, #104]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b62a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d004      	beq.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b638:	d012      	beq.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b63a:	e023      	b.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b63c:	4b13      	ldr	r3, [pc, #76]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b644:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b648:	d107      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b64a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 fbcc 	bl	800bdec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b658:	e0fd      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b65e:	e0fa      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b660:	4b0a      	ldr	r3, [pc, #40]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b66c:	d107      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b66e:	f107 0318 	add.w	r3, r7, #24
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f912 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b67c:	e0eb      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b682:	e0e8      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b688:	e0e5      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b68a:	bf00      	nop
 800b68c:	58024400 	.word	0x58024400
 800b690:	03d09000 	.word	0x03d09000
 800b694:	003d0900 	.word	0x003d0900
 800b698:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b69c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6a0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b6a4:	430b      	orrs	r3, r1
 800b6a6:	f040 8085 	bne.w	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b6aa:	4b6d      	ldr	r3, [pc, #436]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b6ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b6b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b6ba:	d06b      	beq.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b6c2:	d874      	bhi.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6ca:	d056      	beq.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6d2:	d86c      	bhi.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b6da:	d03b      	beq.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b6e2:	d864      	bhi.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6ea:	d021      	beq.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6f2:	d85c      	bhi.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d004      	beq.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b700:	d004      	beq.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b702:	e054      	b.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b704:	f000 f8b4 	bl	800b870 <HAL_RCCEx_GetD3PCLK1Freq>
 800b708:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b70a:	e0a4      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b70c:	4b54      	ldr	r3, [pc, #336]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b718:	d107      	bne.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b71a:	f107 0318 	add.w	r3, r7, #24
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 f8bc 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b728:	e095      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b72e:	e092      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b730:	4b4b      	ldr	r3, [pc, #300]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b73c:	d107      	bne.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b73e:	f107 030c 	add.w	r3, r7, #12
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f9fe 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b74c:	e083      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b752:	e080      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b754:	4b42      	ldr	r3, [pc, #264]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d109      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b760:	4b3f      	ldr	r3, [pc, #252]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	08db      	lsrs	r3, r3, #3
 800b766:	f003 0303 	and.w	r3, r3, #3
 800b76a:	4a3e      	ldr	r2, [pc, #248]	@ (800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b76c:	fa22 f303 	lsr.w	r3, r2, r3
 800b770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b772:	e070      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b778:	e06d      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b77a:	4b39      	ldr	r3, [pc, #228]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b786:	d102      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b788:	4b37      	ldr	r3, [pc, #220]	@ (800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b78c:	e063      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b792:	e060      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b794:	4b32      	ldr	r3, [pc, #200]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b79c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7a0:	d102      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b7a2:	4b32      	ldr	r3, [pc, #200]	@ (800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a6:	e056      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ac:	e053      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7b2:	e050      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7b8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	d148      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b7c0:	4b27      	ldr	r3, [pc, #156]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b7c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7d0:	d02a      	beq.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7d8:	d838      	bhi.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d004      	beq.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7e6:	d00d      	beq.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b7e8:	e030      	b.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7f6:	d102      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b7f8:	4b1c      	ldr	r3, [pc, #112]	@ (800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7fc:	e02b      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b802:	e028      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b804:	4b16      	ldr	r3, [pc, #88]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b80c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b810:	d107      	bne.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fae8 	bl	800bdec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b820:	e019      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b822:	2300      	movs	r3, #0
 800b824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b826:	e016      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b828:	4b0d      	ldr	r3, [pc, #52]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b830:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b834:	d107      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b836:	f107 0318 	add.w	r3, r7, #24
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 f82e 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b844:	e007      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b84a:	e004      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b850:	e001      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3740      	adds	r7, #64	@ 0x40
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	58024400 	.word	0x58024400
 800b864:	03d09000 	.word	0x03d09000
 800b868:	003d0900 	.word	0x003d0900
 800b86c:	017d7840 	.word	0x017d7840

0800b870 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b874:	f7fe f92e 	bl	8009ad4 <HAL_RCC_GetHCLKFreq>
 800b878:	4602      	mov	r2, r0
 800b87a:	4b06      	ldr	r3, [pc, #24]	@ (800b894 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	091b      	lsrs	r3, r3, #4
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	4904      	ldr	r1, [pc, #16]	@ (800b898 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b886:	5ccb      	ldrb	r3, [r1, r3]
 800b888:	f003 031f 	and.w	r3, r3, #31
 800b88c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b890:	4618      	mov	r0, r3
 800b892:	bd80      	pop	{r7, pc}
 800b894:	58024400 	.word	0x58024400
 800b898:	08011038 	.word	0x08011038

0800b89c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b089      	sub	sp, #36	@ 0x24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8a4:	4ba1      	ldr	r3, [pc, #644]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a8:	f003 0303 	and.w	r3, r3, #3
 800b8ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b8ae:	4b9f      	ldr	r3, [pc, #636]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b2:	0b1b      	lsrs	r3, r3, #12
 800b8b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b8ba:	4b9c      	ldr	r3, [pc, #624]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8be:	091b      	lsrs	r3, r3, #4
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b8c6:	4b99      	ldr	r3, [pc, #612]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8ca:	08db      	lsrs	r3, r3, #3
 800b8cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	fb02 f303 	mul.w	r3, r2, r3
 800b8d6:	ee07 3a90 	vmov	s15, r3
 800b8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 8111 	beq.w	800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	f000 8083 	beq.w	800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	f200 80a1 	bhi.w	800ba3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d003      	beq.n	800b908 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d056      	beq.n	800b9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b906:	e099      	b.n	800ba3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b908:	4b88      	ldr	r3, [pc, #544]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0320 	and.w	r3, r3, #32
 800b910:	2b00      	cmp	r3, #0
 800b912:	d02d      	beq.n	800b970 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b914:	4b85      	ldr	r3, [pc, #532]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	08db      	lsrs	r3, r3, #3
 800b91a:	f003 0303 	and.w	r3, r3, #3
 800b91e:	4a84      	ldr	r2, [pc, #528]	@ (800bb30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b920:	fa22 f303 	lsr.w	r3, r2, r3
 800b924:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	ee07 3a90 	vmov	s15, r3
 800b92c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b93e:	4b7b      	ldr	r3, [pc, #492]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b946:	ee07 3a90 	vmov	s15, r3
 800b94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b952:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b95e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b96a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b96e:	e087      	b.n	800ba80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	ee07 3a90 	vmov	s15, r3
 800b976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b97a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bb38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b982:	4b6a      	ldr	r3, [pc, #424]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b992:	ed97 6a03 	vldr	s12, [r7, #12]
 800b996:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9b2:	e065      	b.n	800ba80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	ee07 3a90 	vmov	s15, r3
 800b9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bb3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9c6:	4b59      	ldr	r3, [pc, #356]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9f6:	e043      	b.n	800ba80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ba06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba0a:	4b48      	ldr	r3, [pc, #288]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba3a:	e021      	b.n	800ba80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bb3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba4e:	4b37      	ldr	r3, [pc, #220]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bb34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ba80:	4b2a      	ldr	r3, [pc, #168]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba84:	0a5b      	lsrs	r3, r3, #9
 800ba86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba8a:	ee07 3a90 	vmov	s15, r3
 800ba8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa6:	ee17 2a90 	vmov	r2, s15
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800baae:	4b1f      	ldr	r3, [pc, #124]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab2:	0c1b      	lsrs	r3, r3, #16
 800bab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bac8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bacc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad4:	ee17 2a90 	vmov	r2, s15
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800badc:	4b13      	ldr	r3, [pc, #76]	@ (800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae0:	0e1b      	lsrs	r3, r3, #24
 800bae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bae6:	ee07 3a90 	vmov	s15, r3
 800baea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800baf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bafa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bafe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb02:	ee17 2a90 	vmov	r2, s15
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb0a:	e008      	b.n	800bb1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	609a      	str	r2, [r3, #8]
}
 800bb1e:	bf00      	nop
 800bb20:	3724      	adds	r7, #36	@ 0x24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	58024400 	.word	0x58024400
 800bb30:	03d09000 	.word	0x03d09000
 800bb34:	46000000 	.word	0x46000000
 800bb38:	4c742400 	.word	0x4c742400
 800bb3c:	4a742400 	.word	0x4a742400
 800bb40:	4bbebc20 	.word	0x4bbebc20

0800bb44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b089      	sub	sp, #36	@ 0x24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb4c:	4ba1      	ldr	r3, [pc, #644]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb50:	f003 0303 	and.w	r3, r3, #3
 800bb54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bb56:	4b9f      	ldr	r3, [pc, #636]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5a:	0d1b      	lsrs	r3, r3, #20
 800bb5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bb62:	4b9c      	ldr	r3, [pc, #624]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb66:	0a1b      	lsrs	r3, r3, #8
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bb6e:	4b99      	ldr	r3, [pc, #612]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb72:	08db      	lsrs	r3, r3, #3
 800bb74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	fb02 f303 	mul.w	r3, r2, r3
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 8111 	beq.w	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	f000 8083 	beq.w	800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	f200 80a1 	bhi.w	800bce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d003      	beq.n	800bbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d056      	beq.n	800bc5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bbae:	e099      	b.n	800bce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbb0:	4b88      	ldr	r3, [pc, #544]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d02d      	beq.n	800bc18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbbc:	4b85      	ldr	r3, [pc, #532]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	08db      	lsrs	r3, r3, #3
 800bbc2:	f003 0303 	and.w	r3, r3, #3
 800bbc6:	4a84      	ldr	r2, [pc, #528]	@ (800bdd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bbc8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbcc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	ee07 3a90 	vmov	s15, r3
 800bbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe6:	4b7b      	ldr	r3, [pc, #492]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbfa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc16:	e087      	b.n	800bd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bde0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc2a:	4b6a      	ldr	r3, [pc, #424]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc5a:	e065      	b.n	800bd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bde4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	4b59      	ldr	r3, [pc, #356]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc9e:	e043      	b.n	800bd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bcae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb2:	4b48      	ldr	r3, [pc, #288]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bce2:	e021      	b.n	800bd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bde4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bcf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf6:	4b37      	ldr	r3, [pc, #220]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd06:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bd28:	4b2a      	ldr	r3, [pc, #168]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd2c:	0a5b      	lsrs	r3, r3, #9
 800bd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd42:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd4e:	ee17 2a90 	vmov	r2, s15
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bd56:	4b1f      	ldr	r3, [pc, #124]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd5a:	0c1b      	lsrs	r3, r3, #16
 800bd5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd60:	ee07 3a90 	vmov	s15, r3
 800bd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd70:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd7c:	ee17 2a90 	vmov	r2, s15
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bd84:	4b13      	ldr	r3, [pc, #76]	@ (800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd88:	0e1b      	lsrs	r3, r3, #24
 800bd8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd8e:	ee07 3a90 	vmov	s15, r3
 800bd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bda2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bda6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdaa:	ee17 2a90 	vmov	r2, s15
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bdb2:	e008      	b.n	800bdc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	609a      	str	r2, [r3, #8]
}
 800bdc6:	bf00      	nop
 800bdc8:	3724      	adds	r7, #36	@ 0x24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	58024400 	.word	0x58024400
 800bdd8:	03d09000 	.word	0x03d09000
 800bddc:	46000000 	.word	0x46000000
 800bde0:	4c742400 	.word	0x4c742400
 800bde4:	4a742400 	.word	0x4a742400
 800bde8:	4bbebc20 	.word	0x4bbebc20

0800bdec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b089      	sub	sp, #36	@ 0x24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdf4:	4ba0      	ldr	r3, [pc, #640]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf8:	f003 0303 	and.w	r3, r3, #3
 800bdfc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bdfe:	4b9e      	ldr	r3, [pc, #632]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be02:	091b      	lsrs	r3, r3, #4
 800be04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800be0a:	4b9b      	ldr	r3, [pc, #620]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800be14:	4b98      	ldr	r3, [pc, #608]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be18:	08db      	lsrs	r3, r3, #3
 800be1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	fb02 f303 	mul.w	r3, r2, r3
 800be24:	ee07 3a90 	vmov	s15, r3
 800be28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 8111 	beq.w	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	f000 8083 	beq.w	800bf46 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	2b02      	cmp	r3, #2
 800be44:	f200 80a1 	bhi.w	800bf8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d056      	beq.n	800bf02 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800be54:	e099      	b.n	800bf8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be56:	4b88      	ldr	r3, [pc, #544]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0320 	and.w	r3, r3, #32
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d02d      	beq.n	800bebe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be62:	4b85      	ldr	r3, [pc, #532]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	08db      	lsrs	r3, r3, #3
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	4a83      	ldr	r2, [pc, #524]	@ (800c07c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800be6e:	fa22 f303 	lsr.w	r3, r2, r3
 800be72:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	ee07 3a90 	vmov	s15, r3
 800be7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	ee07 3a90 	vmov	s15, r3
 800be84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8c:	4b7a      	ldr	r3, [pc, #488]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be94:	ee07 3a90 	vmov	s15, r3
 800be98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bea0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bebc:	e087      	b.n	800bfce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	ee07 3a90 	vmov	s15, r3
 800bec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c084 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800becc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bed0:	4b69      	ldr	r3, [pc, #420]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed8:	ee07 3a90 	vmov	s15, r3
 800bedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bef0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf00:	e065      	b.n	800bfce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	ee07 3a90 	vmov	s15, r3
 800bf08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c088 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bf10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf14:	4b58      	ldr	r3, [pc, #352]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1c:	ee07 3a90 	vmov	s15, r3
 800bf20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf24:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf28:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf44:	e043      	b.n	800bfce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	ee07 3a90 	vmov	s15, r3
 800bf4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf50:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c08c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bf54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf58:	4b47      	ldr	r3, [pc, #284]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf60:	ee07 3a90 	vmov	s15, r3
 800bf64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf68:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf88:	e021      	b.n	800bfce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	ee07 3a90 	vmov	s15, r3
 800bf90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf94:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c084 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf9c:	4b36      	ldr	r3, [pc, #216]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa4:	ee07 3a90 	vmov	s15, r3
 800bfa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfac:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c080 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfcc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bfce:	4b2a      	ldr	r3, [pc, #168]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd2:	0a5b      	lsrs	r3, r3, #9
 800bfd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfd8:	ee07 3a90 	vmov	s15, r3
 800bfdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff4:	ee17 2a90 	vmov	r2, s15
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bffc:	4b1e      	ldr	r3, [pc, #120]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c000:	0c1b      	lsrs	r3, r3, #16
 800c002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c016:	edd7 6a07 	vldr	s13, [r7, #28]
 800c01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c022:	ee17 2a90 	vmov	r2, s15
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c02a:	4b13      	ldr	r3, [pc, #76]	@ (800c078 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c02e:	0e1b      	lsrs	r3, r3, #24
 800c030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c034:	ee07 3a90 	vmov	s15, r3
 800c038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c040:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c044:	edd7 6a07 	vldr	s13, [r7, #28]
 800c048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c050:	ee17 2a90 	vmov	r2, s15
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c058:	e008      	b.n	800c06c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	609a      	str	r2, [r3, #8]
}
 800c06c:	bf00      	nop
 800c06e:	3724      	adds	r7, #36	@ 0x24
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	58024400 	.word	0x58024400
 800c07c:	03d09000 	.word	0x03d09000
 800c080:	46000000 	.word	0x46000000
 800c084:	4c742400 	.word	0x4c742400
 800c088:	4a742400 	.word	0x4a742400
 800c08c:	4bbebc20 	.word	0x4bbebc20

0800c090 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c09e:	4b53      	ldr	r3, [pc, #332]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a2:	f003 0303 	and.w	r3, r3, #3
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d101      	bne.n	800c0ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e099      	b.n	800c1e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c0ae:	4b4f      	ldr	r3, [pc, #316]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a4e      	ldr	r2, [pc, #312]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c0b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ba:	f7f7 fb9b 	bl	80037f4 <HAL_GetTick>
 800c0be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0c0:	e008      	b.n	800c0d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c0c2:	f7f7 fb97 	bl	80037f4 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d901      	bls.n	800c0d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e086      	b.n	800c1e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0d4:	4b45      	ldr	r3, [pc, #276]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1f0      	bne.n	800c0c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c0e0:	4b42      	ldr	r3, [pc, #264]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	031b      	lsls	r3, r3, #12
 800c0ee:	493f      	ldr	r1, [pc, #252]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	3b01      	subs	r3, #1
 800c104:	025b      	lsls	r3, r3, #9
 800c106:	b29b      	uxth	r3, r3
 800c108:	431a      	orrs	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	3b01      	subs	r3, #1
 800c110:	041b      	lsls	r3, r3, #16
 800c112:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c116:	431a      	orrs	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	061b      	lsls	r3, r3, #24
 800c120:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c124:	4931      	ldr	r1, [pc, #196]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c126:	4313      	orrs	r3, r2
 800c128:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c12a:	4b30      	ldr	r3, [pc, #192]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	492d      	ldr	r1, [pc, #180]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c13c:	4b2b      	ldr	r3, [pc, #172]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c140:	f023 0220 	bic.w	r2, r3, #32
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	4928      	ldr	r1, [pc, #160]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c14e:	4b27      	ldr	r3, [pc, #156]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c152:	4a26      	ldr	r2, [pc, #152]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c154:	f023 0310 	bic.w	r3, r3, #16
 800c158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c15a:	4b24      	ldr	r3, [pc, #144]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c15c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c15e:	4b24      	ldr	r3, [pc, #144]	@ (800c1f0 <RCCEx_PLL2_Config+0x160>)
 800c160:	4013      	ands	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	69d2      	ldr	r2, [r2, #28]
 800c166:	00d2      	lsls	r2, r2, #3
 800c168:	4920      	ldr	r1, [pc, #128]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c16a:	4313      	orrs	r3, r2
 800c16c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c16e:	4b1f      	ldr	r3, [pc, #124]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c172:	4a1e      	ldr	r2, [pc, #120]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c174:	f043 0310 	orr.w	r3, r3, #16
 800c178:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d106      	bne.n	800c18e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c180:	4b1a      	ldr	r3, [pc, #104]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c184:	4a19      	ldr	r2, [pc, #100]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c186:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c18a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c18c:	e00f      	b.n	800c1ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d106      	bne.n	800c1a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c194:	4b15      	ldr	r3, [pc, #84]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c198:	4a14      	ldr	r2, [pc, #80]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c19a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c19e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c1a0:	e005      	b.n	800c1ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c1a2:	4b12      	ldr	r3, [pc, #72]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a6:	4a11      	ldr	r2, [pc, #68]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c1ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a0e      	ldr	r2, [pc, #56]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1ba:	f7f7 fb1b 	bl	80037f4 <HAL_GetTick>
 800c1be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1c0:	e008      	b.n	800c1d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1c2:	f7f7 fb17 	bl	80037f4 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d901      	bls.n	800c1d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e006      	b.n	800c1e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1d4:	4b05      	ldr	r3, [pc, #20]	@ (800c1ec <RCCEx_PLL2_Config+0x15c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0f0      	beq.n	800c1c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	58024400 	.word	0x58024400
 800c1f0:	ffff0007 	.word	0xffff0007

0800c1f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c202:	4b53      	ldr	r3, [pc, #332]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d101      	bne.n	800c212 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e099      	b.n	800c346 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c212:	4b4f      	ldr	r3, [pc, #316]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a4e      	ldr	r2, [pc, #312]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c21e:	f7f7 fae9 	bl	80037f4 <HAL_GetTick>
 800c222:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c224:	e008      	b.n	800c238 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c226:	f7f7 fae5 	bl	80037f4 <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d901      	bls.n	800c238 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e086      	b.n	800c346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c238:	4b45      	ldr	r3, [pc, #276]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1f0      	bne.n	800c226 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c244:	4b42      	ldr	r3, [pc, #264]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c248:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	051b      	lsls	r3, r3, #20
 800c252:	493f      	ldr	r1, [pc, #252]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c254:	4313      	orrs	r3, r2
 800c256:	628b      	str	r3, [r1, #40]	@ 0x28
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	3b01      	subs	r3, #1
 800c268:	025b      	lsls	r3, r3, #9
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	431a      	orrs	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	3b01      	subs	r3, #1
 800c274:	041b      	lsls	r3, r3, #16
 800c276:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c27a:	431a      	orrs	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	3b01      	subs	r3, #1
 800c282:	061b      	lsls	r3, r3, #24
 800c284:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c288:	4931      	ldr	r1, [pc, #196]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c28e:	4b30      	ldr	r3, [pc, #192]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c292:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	492d      	ldr	r1, [pc, #180]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c29c:	4313      	orrs	r3, r2
 800c29e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	4928      	ldr	r1, [pc, #160]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2b2:	4b27      	ldr	r3, [pc, #156]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b6:	4a26      	ldr	r2, [pc, #152]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c2be:	4b24      	ldr	r3, [pc, #144]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2c2:	4b24      	ldr	r3, [pc, #144]	@ (800c354 <RCCEx_PLL3_Config+0x160>)
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	69d2      	ldr	r2, [r2, #28]
 800c2ca:	00d2      	lsls	r2, r2, #3
 800c2cc:	4920      	ldr	r1, [pc, #128]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c2d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c2e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e8:	4a19      	ldr	r2, [pc, #100]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c2ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2f0:	e00f      	b.n	800c312 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d106      	bne.n	800c306 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c2f8:	4b15      	ldr	r3, [pc, #84]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fc:	4a14      	ldr	r2, [pc, #80]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c2fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c304:	e005      	b.n	800c312 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c306:	4b12      	ldr	r3, [pc, #72]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30a:	4a11      	ldr	r2, [pc, #68]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c30c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c310:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c312:	4b0f      	ldr	r3, [pc, #60]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a0e      	ldr	r2, [pc, #56]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c31e:	f7f7 fa69 	bl	80037f4 <HAL_GetTick>
 800c322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c324:	e008      	b.n	800c338 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c326:	f7f7 fa65 	bl	80037f4 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	2b02      	cmp	r3, #2
 800c332:	d901      	bls.n	800c338 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e006      	b.n	800c346 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c338:	4b05      	ldr	r3, [pc, #20]	@ (800c350 <RCCEx_PLL3_Config+0x15c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0f0      	beq.n	800c326 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c344:	7bfb      	ldrb	r3, [r7, #15]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	58024400 	.word	0x58024400
 800c354:	ffff0007 	.word	0xffff0007

0800c358 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e10f      	b.n	800c58a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a87      	ldr	r2, [pc, #540]	@ (800c594 <HAL_SPI_Init+0x23c>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d00f      	beq.n	800c39a <HAL_SPI_Init+0x42>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a86      	ldr	r2, [pc, #536]	@ (800c598 <HAL_SPI_Init+0x240>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d00a      	beq.n	800c39a <HAL_SPI_Init+0x42>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a84      	ldr	r2, [pc, #528]	@ (800c59c <HAL_SPI_Init+0x244>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d005      	beq.n	800c39a <HAL_SPI_Init+0x42>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	2b0f      	cmp	r3, #15
 800c394:	d901      	bls.n	800c39a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e0f7      	b.n	800c58a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fe3c 	bl	800d018 <SPI_GetPacketSize>
 800c3a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a7b      	ldr	r2, [pc, #492]	@ (800c594 <HAL_SPI_Init+0x23c>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d00c      	beq.n	800c3c6 <HAL_SPI_Init+0x6e>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a79      	ldr	r2, [pc, #484]	@ (800c598 <HAL_SPI_Init+0x240>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d007      	beq.n	800c3c6 <HAL_SPI_Init+0x6e>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a78      	ldr	r2, [pc, #480]	@ (800c59c <HAL_SPI_Init+0x244>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d002      	beq.n	800c3c6 <HAL_SPI_Init+0x6e>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2b08      	cmp	r3, #8
 800c3c4:	d811      	bhi.n	800c3ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3ca:	4a72      	ldr	r2, [pc, #456]	@ (800c594 <HAL_SPI_Init+0x23c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d009      	beq.n	800c3e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a70      	ldr	r2, [pc, #448]	@ (800c598 <HAL_SPI_Init+0x240>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d004      	beq.n	800c3e4 <HAL_SPI_Init+0x8c>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a6f      	ldr	r2, [pc, #444]	@ (800c59c <HAL_SPI_Init+0x244>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d104      	bne.n	800c3ee <HAL_SPI_Init+0x96>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b10      	cmp	r3, #16
 800c3e8:	d901      	bls.n	800c3ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e0cd      	b.n	800c58a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7f6 fe22 	bl	800304c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2202      	movs	r2, #2
 800c40c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f022 0201 	bic.w	r2, r2, #1
 800c41e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c42a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c434:	d119      	bne.n	800c46a <HAL_SPI_Init+0x112>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c43e:	d103      	bne.n	800c448 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c444:	2b00      	cmp	r3, #0
 800c446:	d008      	beq.n	800c45a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10c      	bne.n	800c46a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c458:	d107      	bne.n	800c46a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c468:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00f      	beq.n	800c496 <HAL_SPI_Init+0x13e>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	2b06      	cmp	r3, #6
 800c47c:	d90b      	bls.n	800c496 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	430a      	orrs	r2, r1
 800c492:	601a      	str	r2, [r3, #0]
 800c494:	e007      	b.n	800c4a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	69da      	ldr	r2, [r3, #28]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ae:	431a      	orrs	r2, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b8:	ea42 0103 	orr.w	r1, r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	68da      	ldr	r2, [r3, #12]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	430a      	orrs	r2, r1
 800c4c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4d6:	431a      	orrs	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	695b      	ldr	r3, [r3, #20]
 800c4e8:	431a      	orrs	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	431a      	orrs	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4fa:	431a      	orrs	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	431a      	orrs	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c506:	ea42 0103 	orr.w	r1, r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	430a      	orrs	r2, r1
 800c514:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d113      	bne.n	800c546 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c530:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c544:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f022 0201 	bic.w	r2, r2, #1
 800c554:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00a      	beq.n	800c578 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	430a      	orrs	r2, r1
 800c576:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	40013000 	.word	0x40013000
 800c598:	40003800 	.word	0x40003800
 800c59c:	40003c00 	.word	0x40003c00

0800c5a0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af02      	add	r7, sp, #8
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3320      	adds	r3, #32
 800c5b6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5b8:	f7f7 f91c 	bl	80037f4 <HAL_GetTick>
 800c5bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d001      	beq.n	800c5ce <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	e1d1      	b.n	800c972 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <HAL_SPI_Transmit+0x3a>
 800c5d4:	88fb      	ldrh	r3, [r7, #6]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e1c9      	b.n	800c972 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d101      	bne.n	800c5ec <HAL_SPI_Transmit+0x4c>
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	e1c2      	b.n	800c972 <HAL_SPI_Transmit+0x3d2>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2203      	movs	r2, #3
 800c5f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	88fa      	ldrh	r2, [r7, #6]
 800c60e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	88fa      	ldrh	r2, [r7, #6]
 800c616:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c644:	d108      	bne.n	800c658 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	e009      	b.n	800c66c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c66a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	4b96      	ldr	r3, [pc, #600]	@ (800c8cc <HAL_SPI_Transmit+0x32c>)
 800c674:	4013      	ands	r3, r2
 800c676:	88f9      	ldrh	r1, [r7, #6]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	6812      	ldr	r2, [r2, #0]
 800c67c:	430b      	orrs	r3, r1
 800c67e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f042 0201 	orr.w	r2, r2, #1
 800c68e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c698:	d107      	bne.n	800c6aa <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	2b0f      	cmp	r3, #15
 800c6b0:	d947      	bls.n	800c742 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c6b2:	e03f      	b.n	800c734 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	f003 0302 	and.w	r3, r3, #2
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d114      	bne.n	800c6ec <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6d2:	1d1a      	adds	r2, r3, #4
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c6ea:	e023      	b.n	800c734 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6ec:	f7f7 f882 	bl	80037f4 <HAL_GetTick>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d803      	bhi.n	800c704 <HAL_SPI_Transmit+0x164>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c702:	d102      	bne.n	800c70a <HAL_SPI_Transmit+0x16a>
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d114      	bne.n	800c734 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f000 fbb6 	bl	800ce7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c716:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c730:	2303      	movs	r3, #3
 800c732:	e11e      	b.n	800c972 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1b9      	bne.n	800c6b4 <HAL_SPI_Transmit+0x114>
 800c740:	e0f1      	b.n	800c926 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	2b07      	cmp	r3, #7
 800c748:	f240 80e6 	bls.w	800c918 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c74c:	e05d      	b.n	800c80a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	f003 0302 	and.w	r3, r3, #2
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d132      	bne.n	800c7c2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c762:	b29b      	uxth	r3, r3
 800c764:	2b01      	cmp	r3, #1
 800c766:	d918      	bls.n	800c79a <HAL_SPI_Transmit+0x1fa>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d014      	beq.n	800c79a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6812      	ldr	r2, [r2, #0]
 800c77a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c780:	1d1a      	adds	r2, r3, #4
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b02      	subs	r3, #2
 800c790:	b29a      	uxth	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c798:	e037      	b.n	800c80a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c79e:	881a      	ldrh	r2, [r3, #0]
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7a8:	1c9a      	adds	r2, r3, #2
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c7c0:	e023      	b.n	800c80a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7c2:	f7f7 f817 	bl	80037f4 <HAL_GetTick>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d803      	bhi.n	800c7da <HAL_SPI_Transmit+0x23a>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d8:	d102      	bne.n	800c7e0 <HAL_SPI_Transmit+0x240>
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d114      	bne.n	800c80a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 fb4b 	bl	800ce7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c806:	2303      	movs	r3, #3
 800c808:	e0b3      	b.n	800c972 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c810:	b29b      	uxth	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d19b      	bne.n	800c74e <HAL_SPI_Transmit+0x1ae>
 800c816:	e086      	b.n	800c926 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	f003 0302 	and.w	r3, r3, #2
 800c822:	2b02      	cmp	r3, #2
 800c824:	d154      	bne.n	800c8d0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	2b03      	cmp	r3, #3
 800c830:	d918      	bls.n	800c864 <HAL_SPI_Transmit+0x2c4>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c836:	2b40      	cmp	r3, #64	@ 0x40
 800c838:	d914      	bls.n	800c864 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6812      	ldr	r2, [r2, #0]
 800c844:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c856:	b29b      	uxth	r3, r3
 800c858:	3b04      	subs	r3, #4
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c862:	e059      	b.n	800c918 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d917      	bls.n	800c8a0 <HAL_SPI_Transmit+0x300>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c874:	2b00      	cmp	r3, #0
 800c876:	d013      	beq.n	800c8a0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c87c:	881a      	ldrh	r2, [r3, #0]
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c886:	1c9a      	adds	r2, r3, #2
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c892:	b29b      	uxth	r3, r3
 800c894:	3b02      	subs	r3, #2
 800c896:	b29a      	uxth	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c89e:	e03b      	b.n	800c918 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	3320      	adds	r3, #32
 800c8aa:	7812      	ldrb	r2, [r2, #0]
 800c8ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8b2:	1c5a      	adds	r2, r3, #1
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c8ca:	e025      	b.n	800c918 <HAL_SPI_Transmit+0x378>
 800c8cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8d0:	f7f6 ff90 	bl	80037f4 <HAL_GetTick>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d803      	bhi.n	800c8e8 <HAL_SPI_Transmit+0x348>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e6:	d102      	bne.n	800c8ee <HAL_SPI_Transmit+0x34e>
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d114      	bne.n	800c918 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f000 fac4 	bl	800ce7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c914:	2303      	movs	r3, #3
 800c916:	e02c      	b.n	800c972 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c91e:	b29b      	uxth	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	f47f af79 	bne.w	800c818 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2200      	movs	r2, #0
 800c92e:	2108      	movs	r1, #8
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f000 fb43 	bl	800cfbc <SPI_WaitOnFlagUntilTimeout>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d007      	beq.n	800c94c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c942:	f043 0220 	orr.w	r2, r3, #32
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f000 fa95 	bl	800ce7c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2201      	movs	r2, #1
 800c956:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	e000      	b.n	800c972 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c970:	2300      	movs	r3, #0
  }
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop

0800c97c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	4613      	mov	r3, r2
 800c98a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c990:	095b      	lsrs	r3, r3, #5
 800c992:	b29b      	uxth	r3, r3
 800c994:	3301      	adds	r3, #1
 800c996:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	3330      	adds	r3, #48	@ 0x30
 800c99e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c9a0:	f7f6 ff28 	bl	80037f4 <HAL_GetTick>
 800c9a4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d001      	beq.n	800c9b6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e250      	b.n	800ce58 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <HAL_SPI_Receive+0x46>
 800c9bc:	88fb      	ldrh	r3, [r7, #6]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d101      	bne.n	800c9c6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e248      	b.n	800ce58 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d101      	bne.n	800c9d4 <HAL_SPI_Receive+0x58>
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	e241      	b.n	800ce58 <HAL_SPI_Receive+0x4dc>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2204      	movs	r2, #4
 800c9e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	88fa      	ldrh	r2, [r7, #6]
 800c9f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	88fa      	ldrh	r2, [r7, #6]
 800c9fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ca2c:	d108      	bne.n	800ca40 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	e009      	b.n	800ca54 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ca52:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	4b95      	ldr	r3, [pc, #596]	@ (800ccb0 <HAL_SPI_Receive+0x334>)
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	88f9      	ldrh	r1, [r7, #6]
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	6812      	ldr	r2, [r2, #0]
 800ca64:	430b      	orrs	r3, r1
 800ca66:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f042 0201 	orr.w	r2, r2, #1
 800ca76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca80:	d107      	bne.n	800ca92 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	2b0f      	cmp	r3, #15
 800ca98:	d96c      	bls.n	800cb74 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ca9a:	e064      	b.n	800cb66 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	695b      	ldr	r3, [r3, #20]
 800caa2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d114      	bne.n	800cadc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cabc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cac2:	1d1a      	adds	r2, r3, #4
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cace:	b29b      	uxth	r3, r3
 800cad0:	3b01      	subs	r3, #1
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cada:	e044      	b.n	800cb66 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	8bfa      	ldrh	r2, [r7, #30]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d919      	bls.n	800cb1e <HAL_SPI_Receive+0x1a2>
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d014      	beq.n	800cb1e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cafc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cafe:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb04:	1d1a      	adds	r2, r3, #4
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	3b01      	subs	r3, #1
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb1c:	e023      	b.n	800cb66 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb1e:	f7f6 fe69 	bl	80037f4 <HAL_GetTick>
 800cb22:	4602      	mov	r2, r0
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	683a      	ldr	r2, [r7, #0]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d803      	bhi.n	800cb36 <HAL_SPI_Receive+0x1ba>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb34:	d102      	bne.n	800cb3c <HAL_SPI_Receive+0x1c0>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d114      	bne.n	800cb66 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f000 f99d 	bl	800ce7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e178      	b.n	800ce58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d194      	bne.n	800ca9c <HAL_SPI_Receive+0x120>
 800cb72:	e15e      	b.n	800ce32 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	2b07      	cmp	r3, #7
 800cb7a:	f240 8153 	bls.w	800ce24 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cb7e:	e08f      	b.n	800cca0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	f003 0301 	and.w	r3, r3, #1
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d114      	bne.n	800cbc0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	8812      	ldrh	r2, [r2, #0]
 800cb9e:	b292      	uxth	r2, r2
 800cba0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cba6:	1c9a      	adds	r2, r3, #2
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbbe:	e06f      	b.n	800cca0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	8bfa      	ldrh	r2, [r7, #30]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d924      	bls.n	800cc18 <HAL_SPI_Receive+0x29c>
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d01f      	beq.n	800cc18 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbdc:	69ba      	ldr	r2, [r7, #24]
 800cbde:	8812      	ldrh	r2, [r2, #0]
 800cbe0:	b292      	uxth	r2, r2
 800cbe2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbe8:	1c9a      	adds	r2, r3, #2
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbf2:	69ba      	ldr	r2, [r7, #24]
 800cbf4:	8812      	ldrh	r2, [r2, #0]
 800cbf6:	b292      	uxth	r2, r2
 800cbf8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbfe:	1c9a      	adds	r2, r3, #2
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	3b02      	subs	r3, #2
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc16:	e043      	b.n	800cca0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d119      	bne.n	800cc58 <HAL_SPI_Receive+0x2dc>
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d014      	beq.n	800cc58 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	8812      	ldrh	r2, [r2, #0]
 800cc36:	b292      	uxth	r2, r2
 800cc38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc3e:	1c9a      	adds	r2, r3, #2
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc56:	e023      	b.n	800cca0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc58:	f7f6 fdcc 	bl	80037f4 <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d803      	bhi.n	800cc70 <HAL_SPI_Receive+0x2f4>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	d102      	bne.n	800cc76 <HAL_SPI_Receive+0x2fa>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d114      	bne.n	800cca0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f000 f900 	bl	800ce7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e0db      	b.n	800ce58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f47f af69 	bne.w	800cb80 <HAL_SPI_Receive+0x204>
 800ccae:	e0c0      	b.n	800ce32 <HAL_SPI_Receive+0x4b6>
 800ccb0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d117      	bne.n	800ccfa <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccd6:	7812      	ldrb	r2, [r2, #0]
 800ccd8:	b2d2      	uxtb	r2, r2
 800ccda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cce0:	1c5a      	adds	r2, r3, #1
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ccf8:	e094      	b.n	800ce24 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	8bfa      	ldrh	r2, [r7, #30]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d946      	bls.n	800cd96 <HAL_SPI_Receive+0x41a>
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d041      	beq.n	800cd96 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd1e:	7812      	ldrb	r2, [r2, #0]
 800cd20:	b2d2      	uxtb	r2, r2
 800cd22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd3a:	7812      	ldrb	r2, [r2, #0]
 800cd3c:	b2d2      	uxtb	r2, r2
 800cd3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd56:	7812      	ldrb	r2, [r2, #0]
 800cd58:	b2d2      	uxtb	r2, r2
 800cd5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd72:	7812      	ldrb	r2, [r2, #0]
 800cd74:	b2d2      	uxtb	r2, r2
 800cd76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd7c:	1c5a      	adds	r2, r3, #1
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	3b04      	subs	r3, #4
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd94:	e046      	b.n	800ce24 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	2b03      	cmp	r3, #3
 800cda0:	d81c      	bhi.n	800cddc <HAL_SPI_Receive+0x460>
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d017      	beq.n	800cddc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdb8:	7812      	ldrb	r2, [r2, #0]
 800cdba:	b2d2      	uxtb	r2, r2
 800cdbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cdda:	e023      	b.n	800ce24 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cddc:	f7f6 fd0a 	bl	80037f4 <HAL_GetTick>
 800cde0:	4602      	mov	r2, r0
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d803      	bhi.n	800cdf4 <HAL_SPI_Receive+0x478>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf2:	d102      	bne.n	800cdfa <HAL_SPI_Receive+0x47e>
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d114      	bne.n	800ce24 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f000 f83e 	bl	800ce7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ce20:	2303      	movs	r3, #3
 800ce22:	e019      	b.n	800ce58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f47f af41 	bne.w	800ccb4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 f822 	bl	800ce7c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e000      	b.n	800ce58 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800ce56:	2300      	movs	r3, #0
  }
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3720      	adds	r7, #32
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ce6e:	b2db      	uxtb	r3, r3
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	695b      	ldr	r3, [r3, #20]
 800ce8a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f042 0208 	orr.w	r2, r2, #8
 800ce9a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	699a      	ldr	r2, [r3, #24]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f042 0210 	orr.w	r2, r2, #16
 800ceaa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0201 	bic.w	r2, r2, #1
 800ceba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6919      	ldr	r1, [r3, #16]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	4b3c      	ldr	r3, [pc, #240]	@ (800cfb8 <SPI_CloseTransfer+0x13c>)
 800cec8:	400b      	ands	r3, r1
 800ceca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	689a      	ldr	r2, [r3, #8]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ceda:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b04      	cmp	r3, #4
 800cee6:	d014      	beq.n	800cf12 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f003 0320 	and.w	r3, r3, #32
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00f      	beq.n	800cf12 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cef8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	699a      	ldr	r2, [r3, #24]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f042 0220 	orr.w	r2, r2, #32
 800cf10:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d014      	beq.n	800cf48 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00f      	beq.n	800cf48 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf2e:	f043 0204 	orr.w	r2, r3, #4
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	699a      	ldr	r2, [r3, #24]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf46:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00f      	beq.n	800cf72 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf58:	f043 0201 	orr.w	r2, r3, #1
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	699a      	ldr	r2, [r3, #24]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf70:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00f      	beq.n	800cf9c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf82:	f043 0208 	orr.w	r2, r3, #8
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	699a      	ldr	r2, [r3, #24]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf9a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800cfac:	bf00      	nop
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	fffffc90 	.word	0xfffffc90

0800cfbc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cfcc:	e010      	b.n	800cff0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfce:	f7f6 fc11 	bl	80037f4 <HAL_GetTick>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d803      	bhi.n	800cfe6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe4:	d102      	bne.n	800cfec <SPI_WaitOnFlagUntilTimeout+0x30>
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d101      	bne.n	800cff0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e00f      	b.n	800d010 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	695a      	ldr	r2, [r3, #20]
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	4013      	ands	r3, r2
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	bf0c      	ite	eq
 800d000:	2301      	moveq	r3, #1
 800d002:	2300      	movne	r3, #0
 800d004:	b2db      	uxtb	r3, r3
 800d006:	461a      	mov	r2, r3
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d0df      	beq.n	800cfce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d024:	095b      	lsrs	r3, r3, #5
 800d026:	3301      	adds	r3, #1
 800d028:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	3301      	adds	r3, #1
 800d030:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	3307      	adds	r3, #7
 800d036:	08db      	lsrs	r3, r3, #3
 800d038:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b082      	sub	sp, #8
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d101      	bne.n	800d060 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e049      	b.n	800d0f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d106      	bne.n	800d07a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7f6 f89f 	bl	80031b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2202      	movs	r2, #2
 800d07e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	3304      	adds	r3, #4
 800d08a:	4619      	mov	r1, r3
 800d08c:	4610      	mov	r0, r2
 800d08e:	f000 fc4d 	bl	800d92c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d001      	beq.n	800d114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e05e      	b.n	800d1d2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68da      	ldr	r2, [r3, #12]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f042 0201 	orr.w	r2, r2, #1
 800d12a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a2b      	ldr	r2, [pc, #172]	@ (800d1e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d02c      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d13e:	d027      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a27      	ldr	r2, [pc, #156]	@ (800d1e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d022      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a26      	ldr	r2, [pc, #152]	@ (800d1e8 <HAL_TIM_Base_Start_IT+0xec>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d01d      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a24      	ldr	r2, [pc, #144]	@ (800d1ec <HAL_TIM_Base_Start_IT+0xf0>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d018      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a23      	ldr	r2, [pc, #140]	@ (800d1f0 <HAL_TIM_Base_Start_IT+0xf4>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d013      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a21      	ldr	r2, [pc, #132]	@ (800d1f4 <HAL_TIM_Base_Start_IT+0xf8>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00e      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a20      	ldr	r2, [pc, #128]	@ (800d1f8 <HAL_TIM_Base_Start_IT+0xfc>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d009      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a1e      	ldr	r2, [pc, #120]	@ (800d1fc <HAL_TIM_Base_Start_IT+0x100>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d004      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x94>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a1d      	ldr	r2, [pc, #116]	@ (800d200 <HAL_TIM_Base_Start_IT+0x104>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d115      	bne.n	800d1bc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689a      	ldr	r2, [r3, #8]
 800d196:	4b1b      	ldr	r3, [pc, #108]	@ (800d204 <HAL_TIM_Base_Start_IT+0x108>)
 800d198:	4013      	ands	r3, r2
 800d19a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b06      	cmp	r3, #6
 800d1a0:	d015      	beq.n	800d1ce <HAL_TIM_Base_Start_IT+0xd2>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1a8:	d011      	beq.n	800d1ce <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f042 0201 	orr.w	r2, r2, #1
 800d1b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ba:	e008      	b.n	800d1ce <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f042 0201 	orr.w	r2, r2, #1
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	e000      	b.n	800d1d0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	40010000 	.word	0x40010000
 800d1e4:	40000400 	.word	0x40000400
 800d1e8:	40000800 	.word	0x40000800
 800d1ec:	40000c00 	.word	0x40000c00
 800d1f0:	40010400 	.word	0x40010400
 800d1f4:	40001800 	.word	0x40001800
 800d1f8:	40014000 	.word	0x40014000
 800d1fc:	4000e000 	.word	0x4000e000
 800d200:	4000e400 	.word	0x4000e400
 800d204:	00010007 	.word	0x00010007

0800d208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	e049      	b.n	800d2ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d106      	bne.n	800d234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7f5 ff9c 	bl	800316c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2202      	movs	r2, #2
 800d238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3304      	adds	r3, #4
 800d244:	4619      	mov	r1, r3
 800d246:	4610      	mov	r0, r2
 800d248:	f000 fb70 	bl	800d92c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2201      	movs	r2, #1
 800d278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2201      	movs	r2, #1
 800d298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	f003 0302 	and.w	r3, r3, #2
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d020      	beq.n	800d31a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f003 0302 	and.w	r3, r3, #2
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d01b      	beq.n	800d31a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f06f 0202 	mvn.w	r2, #2
 800d2ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	f003 0303 	and.w	r3, r3, #3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d003      	beq.n	800d308 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 faf5 	bl	800d8f0 <HAL_TIM_IC_CaptureCallback>
 800d306:	e005      	b.n	800d314 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fae7 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 faf8 	bl	800d904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	f003 0304 	and.w	r3, r3, #4
 800d320:	2b00      	cmp	r3, #0
 800d322:	d020      	beq.n	800d366 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f003 0304 	and.w	r3, r3, #4
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d01b      	beq.n	800d366 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f06f 0204 	mvn.w	r2, #4
 800d336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2202      	movs	r2, #2
 800d33c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	699b      	ldr	r3, [r3, #24]
 800d344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d003      	beq.n	800d354 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 facf 	bl	800d8f0 <HAL_TIM_IC_CaptureCallback>
 800d352:	e005      	b.n	800d360 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fac1 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fad2 	bl	800d904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	f003 0308 	and.w	r3, r3, #8
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d020      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f003 0308 	and.w	r3, r3, #8
 800d376:	2b00      	cmp	r3, #0
 800d378:	d01b      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f06f 0208 	mvn.w	r2, #8
 800d382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2204      	movs	r2, #4
 800d388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	f003 0303 	and.w	r3, r3, #3
 800d394:	2b00      	cmp	r3, #0
 800d396:	d003      	beq.n	800d3a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 faa9 	bl	800d8f0 <HAL_TIM_IC_CaptureCallback>
 800d39e:	e005      	b.n	800d3ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fa9b 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 faac 	bl	800d904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	f003 0310 	and.w	r3, r3, #16
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d020      	beq.n	800d3fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f003 0310 	and.w	r3, r3, #16
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d01b      	beq.n	800d3fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f06f 0210 	mvn.w	r2, #16
 800d3ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2208      	movs	r2, #8
 800d3d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	69db      	ldr	r3, [r3, #28]
 800d3dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d003      	beq.n	800d3ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 fa83 	bl	800d8f0 <HAL_TIM_IC_CaptureCallback>
 800d3ea:	e005      	b.n	800d3f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fa75 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fa86 	bl	800d904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00c      	beq.n	800d422 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d007      	beq.n	800d422 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f06f 0201 	mvn.w	r2, #1
 800d41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7f4 fa2b 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d104      	bne.n	800d436 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00c      	beq.n	800d450 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d007      	beq.n	800d450 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 ff3a 	bl	800e2c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00c      	beq.n	800d474 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d460:	2b00      	cmp	r3, #0
 800d462:	d007      	beq.n	800d474 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 ff32 	bl	800e2d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00c      	beq.n	800d498 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	d007      	beq.n	800d498 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 fa40 	bl	800d918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f003 0320 	and.w	r3, r3, #32
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00c      	beq.n	800d4bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f003 0320 	and.w	r3, r3, #32
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d007      	beq.n	800d4bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f06f 0220 	mvn.w	r2, #32
 800d4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fefa 	bl	800e2b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4bc:	bf00      	nop
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d101      	bne.n	800d4e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d4de:	2302      	movs	r3, #2
 800d4e0:	e0ff      	b.n	800d6e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b14      	cmp	r3, #20
 800d4ee:	f200 80f0 	bhi.w	800d6d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f8:	0800d54d 	.word	0x0800d54d
 800d4fc:	0800d6d3 	.word	0x0800d6d3
 800d500:	0800d6d3 	.word	0x0800d6d3
 800d504:	0800d6d3 	.word	0x0800d6d3
 800d508:	0800d58d 	.word	0x0800d58d
 800d50c:	0800d6d3 	.word	0x0800d6d3
 800d510:	0800d6d3 	.word	0x0800d6d3
 800d514:	0800d6d3 	.word	0x0800d6d3
 800d518:	0800d5cf 	.word	0x0800d5cf
 800d51c:	0800d6d3 	.word	0x0800d6d3
 800d520:	0800d6d3 	.word	0x0800d6d3
 800d524:	0800d6d3 	.word	0x0800d6d3
 800d528:	0800d60f 	.word	0x0800d60f
 800d52c:	0800d6d3 	.word	0x0800d6d3
 800d530:	0800d6d3 	.word	0x0800d6d3
 800d534:	0800d6d3 	.word	0x0800d6d3
 800d538:	0800d651 	.word	0x0800d651
 800d53c:	0800d6d3 	.word	0x0800d6d3
 800d540:	0800d6d3 	.word	0x0800d6d3
 800d544:	0800d6d3 	.word	0x0800d6d3
 800d548:	0800d691 	.word	0x0800d691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68b9      	ldr	r1, [r7, #8]
 800d552:	4618      	mov	r0, r3
 800d554:	f000 fa9c 	bl	800da90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	699a      	ldr	r2, [r3, #24]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f042 0208 	orr.w	r2, r2, #8
 800d566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	699a      	ldr	r2, [r3, #24]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f022 0204 	bic.w	r2, r2, #4
 800d576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6999      	ldr	r1, [r3, #24]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	691a      	ldr	r2, [r3, #16]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	430a      	orrs	r2, r1
 800d588:	619a      	str	r2, [r3, #24]
      break;
 800d58a:	e0a5      	b.n	800d6d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68b9      	ldr	r1, [r7, #8]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 fb0c 	bl	800dbb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	699a      	ldr	r2, [r3, #24]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d5a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	699a      	ldr	r2, [r3, #24]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d5b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6999      	ldr	r1, [r3, #24]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	021a      	lsls	r2, r3, #8
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	430a      	orrs	r2, r1
 800d5ca:	619a      	str	r2, [r3, #24]
      break;
 800d5cc:	e084      	b.n	800d6d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 fb75 	bl	800dcc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	69da      	ldr	r2, [r3, #28]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f042 0208 	orr.w	r2, r2, #8
 800d5e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	69da      	ldr	r2, [r3, #28]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f022 0204 	bic.w	r2, r2, #4
 800d5f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	69d9      	ldr	r1, [r3, #28]
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	691a      	ldr	r2, [r3, #16]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	430a      	orrs	r2, r1
 800d60a:	61da      	str	r2, [r3, #28]
      break;
 800d60c:	e064      	b.n	800d6d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68b9      	ldr	r1, [r7, #8]
 800d614:	4618      	mov	r0, r3
 800d616:	f000 fbdd 	bl	800ddd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	69da      	ldr	r2, [r3, #28]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	69da      	ldr	r2, [r3, #28]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	69d9      	ldr	r1, [r3, #28]
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	021a      	lsls	r2, r3, #8
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	430a      	orrs	r2, r1
 800d64c:	61da      	str	r2, [r3, #28]
      break;
 800d64e:	e043      	b.n	800d6d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68b9      	ldr	r1, [r7, #8]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fc26 	bl	800dea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f042 0208 	orr.w	r2, r2, #8
 800d66a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f022 0204 	bic.w	r2, r2, #4
 800d67a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	691a      	ldr	r2, [r3, #16]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d68e:	e023      	b.n	800d6d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68b9      	ldr	r1, [r7, #8]
 800d696:	4618      	mov	r0, r3
 800d698:	f000 fc6a 	bl	800df70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d6aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d6ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	021a      	lsls	r2, r3, #8
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d6d0:	e002      	b.n	800d6d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d6d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop

0800d6ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d700:	2b01      	cmp	r3, #1
 800d702:	d101      	bne.n	800d708 <HAL_TIM_ConfigClockSource+0x1c>
 800d704:	2302      	movs	r3, #2
 800d706:	e0dc      	b.n	800d8c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2202      	movs	r2, #2
 800d714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	4b6a      	ldr	r3, [pc, #424]	@ (800d8cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800d724:	4013      	ands	r3, r2
 800d726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d72e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a64      	ldr	r2, [pc, #400]	@ (800d8d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	f000 80a9 	beq.w	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d744:	4a62      	ldr	r2, [pc, #392]	@ (800d8d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d746:	4293      	cmp	r3, r2
 800d748:	f200 80ae 	bhi.w	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d74c:	4a61      	ldr	r2, [pc, #388]	@ (800d8d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	f000 80a1 	beq.w	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d754:	4a5f      	ldr	r2, [pc, #380]	@ (800d8d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d756:	4293      	cmp	r3, r2
 800d758:	f200 80a6 	bhi.w	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d75c:	4a5e      	ldr	r2, [pc, #376]	@ (800d8d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	f000 8099 	beq.w	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d764:	4a5c      	ldr	r2, [pc, #368]	@ (800d8d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d766:	4293      	cmp	r3, r2
 800d768:	f200 809e 	bhi.w	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d76c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d770:	f000 8091 	beq.w	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d774:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d778:	f200 8096 	bhi.w	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d77c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d780:	f000 8089 	beq.w	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d788:	f200 808e 	bhi.w	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d78c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d790:	d03e      	beq.n	800d810 <HAL_TIM_ConfigClockSource+0x124>
 800d792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d796:	f200 8087 	bhi.w	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d79a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d79e:	f000 8086 	beq.w	800d8ae <HAL_TIM_ConfigClockSource+0x1c2>
 800d7a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7a6:	d87f      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7a8:	2b70      	cmp	r3, #112	@ 0x70
 800d7aa:	d01a      	beq.n	800d7e2 <HAL_TIM_ConfigClockSource+0xf6>
 800d7ac:	2b70      	cmp	r3, #112	@ 0x70
 800d7ae:	d87b      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b0:	2b60      	cmp	r3, #96	@ 0x60
 800d7b2:	d050      	beq.n	800d856 <HAL_TIM_ConfigClockSource+0x16a>
 800d7b4:	2b60      	cmp	r3, #96	@ 0x60
 800d7b6:	d877      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b8:	2b50      	cmp	r3, #80	@ 0x50
 800d7ba:	d03c      	beq.n	800d836 <HAL_TIM_ConfigClockSource+0x14a>
 800d7bc:	2b50      	cmp	r3, #80	@ 0x50
 800d7be:	d873      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c0:	2b40      	cmp	r3, #64	@ 0x40
 800d7c2:	d058      	beq.n	800d876 <HAL_TIM_ConfigClockSource+0x18a>
 800d7c4:	2b40      	cmp	r3, #64	@ 0x40
 800d7c6:	d86f      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c8:	2b30      	cmp	r3, #48	@ 0x30
 800d7ca:	d064      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7cc:	2b30      	cmp	r3, #48	@ 0x30
 800d7ce:	d86b      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7d0:	2b20      	cmp	r3, #32
 800d7d2:	d060      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7d4:	2b20      	cmp	r3, #32
 800d7d6:	d867      	bhi.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d05c      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7dc:	2b10      	cmp	r3, #16
 800d7de:	d05a      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7e0:	e062      	b.n	800d8a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d7f2:	f000 fca1 	bl	800e138 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d804:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	609a      	str	r2, [r3, #8]
      break;
 800d80e:	e04f      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d820:	f000 fc8a 	bl	800e138 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	689a      	ldr	r2, [r3, #8]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d832:	609a      	str	r2, [r3, #8]
      break;
 800d834:	e03c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d842:	461a      	mov	r2, r3
 800d844:	f000 fbfa 	bl	800e03c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2150      	movs	r1, #80	@ 0x50
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fc54 	bl	800e0fc <TIM_ITRx_SetConfig>
      break;
 800d854:	e02c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d862:	461a      	mov	r2, r3
 800d864:	f000 fc19 	bl	800e09a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2160      	movs	r1, #96	@ 0x60
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fc44 	bl	800e0fc <TIM_ITRx_SetConfig>
      break;
 800d874:	e01c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d882:	461a      	mov	r2, r3
 800d884:	f000 fbda 	bl	800e03c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2140      	movs	r1, #64	@ 0x40
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fc34 	bl	800e0fc <TIM_ITRx_SetConfig>
      break;
 800d894:	e00c      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4619      	mov	r1, r3
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	f000 fc2b 	bl	800e0fc <TIM_ITRx_SetConfig>
      break;
 800d8a6:	e003      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d8ac:	e000      	b.n	800d8b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d8ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	ffceff88 	.word	0xffceff88
 800d8d0:	00100040 	.word	0x00100040
 800d8d4:	00100030 	.word	0x00100030
 800d8d8:	00100020 	.word	0x00100020

0800d8dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d90c:	bf00      	nop
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d920:	bf00      	nop
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a4a      	ldr	r2, [pc, #296]	@ (800da68 <TIM_Base_SetConfig+0x13c>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d013      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d94a:	d00f      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a47      	ldr	r2, [pc, #284]	@ (800da6c <TIM_Base_SetConfig+0x140>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d00b      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a46      	ldr	r2, [pc, #280]	@ (800da70 <TIM_Base_SetConfig+0x144>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d007      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a45      	ldr	r2, [pc, #276]	@ (800da74 <TIM_Base_SetConfig+0x148>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d003      	beq.n	800d96c <TIM_Base_SetConfig+0x40>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a44      	ldr	r2, [pc, #272]	@ (800da78 <TIM_Base_SetConfig+0x14c>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d108      	bne.n	800d97e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a39      	ldr	r2, [pc, #228]	@ (800da68 <TIM_Base_SetConfig+0x13c>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d027      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d98c:	d023      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a36      	ldr	r2, [pc, #216]	@ (800da6c <TIM_Base_SetConfig+0x140>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d01f      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a35      	ldr	r2, [pc, #212]	@ (800da70 <TIM_Base_SetConfig+0x144>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d01b      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a34      	ldr	r2, [pc, #208]	@ (800da74 <TIM_Base_SetConfig+0x148>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d017      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a33      	ldr	r2, [pc, #204]	@ (800da78 <TIM_Base_SetConfig+0x14c>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d013      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a32      	ldr	r2, [pc, #200]	@ (800da7c <TIM_Base_SetConfig+0x150>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d00f      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4a31      	ldr	r2, [pc, #196]	@ (800da80 <TIM_Base_SetConfig+0x154>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d00b      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a30      	ldr	r2, [pc, #192]	@ (800da84 <TIM_Base_SetConfig+0x158>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d007      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a2f      	ldr	r2, [pc, #188]	@ (800da88 <TIM_Base_SetConfig+0x15c>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d003      	beq.n	800d9d6 <TIM_Base_SetConfig+0xaa>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a2e      	ldr	r2, [pc, #184]	@ (800da8c <TIM_Base_SetConfig+0x160>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d108      	bne.n	800d9e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	689a      	ldr	r2, [r3, #8]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4a16      	ldr	r2, [pc, #88]	@ (800da68 <TIM_Base_SetConfig+0x13c>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d00f      	beq.n	800da34 <TIM_Base_SetConfig+0x108>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a18      	ldr	r2, [pc, #96]	@ (800da78 <TIM_Base_SetConfig+0x14c>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d00b      	beq.n	800da34 <TIM_Base_SetConfig+0x108>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a17      	ldr	r2, [pc, #92]	@ (800da7c <TIM_Base_SetConfig+0x150>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d007      	beq.n	800da34 <TIM_Base_SetConfig+0x108>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a16      	ldr	r2, [pc, #88]	@ (800da80 <TIM_Base_SetConfig+0x154>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d003      	beq.n	800da34 <TIM_Base_SetConfig+0x108>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a15      	ldr	r2, [pc, #84]	@ (800da84 <TIM_Base_SetConfig+0x158>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d103      	bne.n	800da3c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	691a      	ldr	r2, [r3, #16]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d105      	bne.n	800da5a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	f023 0201 	bic.w	r2, r3, #1
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	611a      	str	r2, [r3, #16]
  }
}
 800da5a:	bf00      	nop
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	40010000 	.word	0x40010000
 800da6c:	40000400 	.word	0x40000400
 800da70:	40000800 	.word	0x40000800
 800da74:	40000c00 	.word	0x40000c00
 800da78:	40010400 	.word	0x40010400
 800da7c:	40014000 	.word	0x40014000
 800da80:	40014400 	.word	0x40014400
 800da84:	40014800 	.word	0x40014800
 800da88:	4000e000 	.word	0x4000e000
 800da8c:	4000e400 	.word	0x4000e400

0800da90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da90:	b480      	push	{r7}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a1b      	ldr	r3, [r3, #32]
 800daa4:	f023 0201 	bic.w	r2, r3, #1
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	699b      	ldr	r3, [r3, #24]
 800dab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4b37      	ldr	r3, [pc, #220]	@ (800db98 <TIM_OC1_SetConfig+0x108>)
 800dabc:	4013      	ands	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f023 0303 	bic.w	r3, r3, #3
 800dac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	4313      	orrs	r3, r2
 800dad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f023 0302 	bic.w	r3, r3, #2
 800dad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	697a      	ldr	r2, [r7, #20]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a2d      	ldr	r2, [pc, #180]	@ (800db9c <TIM_OC1_SetConfig+0x10c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d00f      	beq.n	800db0c <TIM_OC1_SetConfig+0x7c>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a2c      	ldr	r2, [pc, #176]	@ (800dba0 <TIM_OC1_SetConfig+0x110>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d00b      	beq.n	800db0c <TIM_OC1_SetConfig+0x7c>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a2b      	ldr	r2, [pc, #172]	@ (800dba4 <TIM_OC1_SetConfig+0x114>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d007      	beq.n	800db0c <TIM_OC1_SetConfig+0x7c>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4a2a      	ldr	r2, [pc, #168]	@ (800dba8 <TIM_OC1_SetConfig+0x118>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d003      	beq.n	800db0c <TIM_OC1_SetConfig+0x7c>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a29      	ldr	r2, [pc, #164]	@ (800dbac <TIM_OC1_SetConfig+0x11c>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d10c      	bne.n	800db26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	f023 0308 	bic.w	r3, r3, #8
 800db12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f023 0304 	bic.w	r3, r3, #4
 800db24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a1c      	ldr	r2, [pc, #112]	@ (800db9c <TIM_OC1_SetConfig+0x10c>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d00f      	beq.n	800db4e <TIM_OC1_SetConfig+0xbe>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a1b      	ldr	r2, [pc, #108]	@ (800dba0 <TIM_OC1_SetConfig+0x110>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d00b      	beq.n	800db4e <TIM_OC1_SetConfig+0xbe>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a1a      	ldr	r2, [pc, #104]	@ (800dba4 <TIM_OC1_SetConfig+0x114>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d007      	beq.n	800db4e <TIM_OC1_SetConfig+0xbe>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a19      	ldr	r2, [pc, #100]	@ (800dba8 <TIM_OC1_SetConfig+0x118>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d003      	beq.n	800db4e <TIM_OC1_SetConfig+0xbe>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a18      	ldr	r2, [pc, #96]	@ (800dbac <TIM_OC1_SetConfig+0x11c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d111      	bne.n	800db72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800db5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	4313      	orrs	r3, r2
 800db66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	699b      	ldr	r3, [r3, #24]
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	4313      	orrs	r3, r2
 800db70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	621a      	str	r2, [r3, #32]
}
 800db8c:	bf00      	nop
 800db8e:	371c      	adds	r7, #28
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr
 800db98:	fffeff8f 	.word	0xfffeff8f
 800db9c:	40010000 	.word	0x40010000
 800dba0:	40010400 	.word	0x40010400
 800dba4:	40014000 	.word	0x40014000
 800dba8:	40014400 	.word	0x40014400
 800dbac:	40014800 	.word	0x40014800

0800dbb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a1b      	ldr	r3, [r3, #32]
 800dbbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	f023 0210 	bic.w	r2, r3, #16
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4b34      	ldr	r3, [pc, #208]	@ (800dcac <TIM_OC2_SetConfig+0xfc>)
 800dbdc:	4013      	ands	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dbe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	021b      	lsls	r3, r3, #8
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	f023 0320 	bic.w	r3, r3, #32
 800dbfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	011b      	lsls	r3, r3, #4
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a29      	ldr	r2, [pc, #164]	@ (800dcb0 <TIM_OC2_SetConfig+0x100>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d003      	beq.n	800dc18 <TIM_OC2_SetConfig+0x68>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4a28      	ldr	r2, [pc, #160]	@ (800dcb4 <TIM_OC2_SetConfig+0x104>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d10d      	bne.n	800dc34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	011b      	lsls	r3, r3, #4
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4a1e      	ldr	r2, [pc, #120]	@ (800dcb0 <TIM_OC2_SetConfig+0x100>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d00f      	beq.n	800dc5c <TIM_OC2_SetConfig+0xac>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4a1d      	ldr	r2, [pc, #116]	@ (800dcb4 <TIM_OC2_SetConfig+0x104>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d00b      	beq.n	800dc5c <TIM_OC2_SetConfig+0xac>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4a1c      	ldr	r2, [pc, #112]	@ (800dcb8 <TIM_OC2_SetConfig+0x108>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d007      	beq.n	800dc5c <TIM_OC2_SetConfig+0xac>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a1b      	ldr	r2, [pc, #108]	@ (800dcbc <TIM_OC2_SetConfig+0x10c>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d003      	beq.n	800dc5c <TIM_OC2_SetConfig+0xac>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a1a      	ldr	r2, [pc, #104]	@ (800dcc0 <TIM_OC2_SetConfig+0x110>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d113      	bne.n	800dc84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dc62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dc6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	693a      	ldr	r2, [r7, #16]
 800dc74:	4313      	orrs	r3, r2
 800dc76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	693a      	ldr	r2, [r7, #16]
 800dc80:	4313      	orrs	r3, r2
 800dc82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	693a      	ldr	r2, [r7, #16]
 800dc88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	621a      	str	r2, [r3, #32]
}
 800dc9e:	bf00      	nop
 800dca0:	371c      	adds	r7, #28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	feff8fff 	.word	0xfeff8fff
 800dcb0:	40010000 	.word	0x40010000
 800dcb4:	40010400 	.word	0x40010400
 800dcb8:	40014000 	.word	0x40014000
 800dcbc:	40014400 	.word	0x40014400
 800dcc0:	40014800 	.word	0x40014800

0800dcc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a1b      	ldr	r3, [r3, #32]
 800dcd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	69db      	ldr	r3, [r3, #28]
 800dcea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	4b33      	ldr	r3, [pc, #204]	@ (800ddbc <TIM_OC3_SetConfig+0xf8>)
 800dcf0:	4013      	ands	r3, r2
 800dcf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 0303 	bic.w	r3, r3, #3
 800dcfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	021b      	lsls	r3, r3, #8
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a28      	ldr	r2, [pc, #160]	@ (800ddc0 <TIM_OC3_SetConfig+0xfc>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d003      	beq.n	800dd2a <TIM_OC3_SetConfig+0x66>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a27      	ldr	r2, [pc, #156]	@ (800ddc4 <TIM_OC3_SetConfig+0x100>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d10d      	bne.n	800dd46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	021b      	lsls	r3, r3, #8
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a1d      	ldr	r2, [pc, #116]	@ (800ddc0 <TIM_OC3_SetConfig+0xfc>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d00f      	beq.n	800dd6e <TIM_OC3_SetConfig+0xaa>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a1c      	ldr	r2, [pc, #112]	@ (800ddc4 <TIM_OC3_SetConfig+0x100>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d00b      	beq.n	800dd6e <TIM_OC3_SetConfig+0xaa>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a1b      	ldr	r2, [pc, #108]	@ (800ddc8 <TIM_OC3_SetConfig+0x104>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d007      	beq.n	800dd6e <TIM_OC3_SetConfig+0xaa>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a1a      	ldr	r2, [pc, #104]	@ (800ddcc <TIM_OC3_SetConfig+0x108>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d003      	beq.n	800dd6e <TIM_OC3_SetConfig+0xaa>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a19      	ldr	r2, [pc, #100]	@ (800ddd0 <TIM_OC3_SetConfig+0x10c>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d113      	bne.n	800dd96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dd7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	011b      	lsls	r3, r3, #4
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	4313      	orrs	r3, r2
 800dd88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	011b      	lsls	r3, r3, #4
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	697a      	ldr	r2, [r7, #20]
 800ddae:	621a      	str	r2, [r3, #32]
}
 800ddb0:	bf00      	nop
 800ddb2:	371c      	adds	r7, #28
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	fffeff8f 	.word	0xfffeff8f
 800ddc0:	40010000 	.word	0x40010000
 800ddc4:	40010400 	.word	0x40010400
 800ddc8:	40014000 	.word	0x40014000
 800ddcc:	40014400 	.word	0x40014400
 800ddd0:	40014800 	.word	0x40014800

0800ddd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b087      	sub	sp, #28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	4b24      	ldr	r3, [pc, #144]	@ (800de90 <TIM_OC4_SetConfig+0xbc>)
 800de00:	4013      	ands	r3, r2
 800de02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	021b      	lsls	r3, r3, #8
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	4313      	orrs	r3, r2
 800de16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	031b      	lsls	r3, r3, #12
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	4313      	orrs	r3, r2
 800de2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4a19      	ldr	r2, [pc, #100]	@ (800de94 <TIM_OC4_SetConfig+0xc0>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d00f      	beq.n	800de54 <TIM_OC4_SetConfig+0x80>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a18      	ldr	r2, [pc, #96]	@ (800de98 <TIM_OC4_SetConfig+0xc4>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d00b      	beq.n	800de54 <TIM_OC4_SetConfig+0x80>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a17      	ldr	r2, [pc, #92]	@ (800de9c <TIM_OC4_SetConfig+0xc8>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d007      	beq.n	800de54 <TIM_OC4_SetConfig+0x80>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	4a16      	ldr	r2, [pc, #88]	@ (800dea0 <TIM_OC4_SetConfig+0xcc>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d003      	beq.n	800de54 <TIM_OC4_SetConfig+0x80>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a15      	ldr	r2, [pc, #84]	@ (800dea4 <TIM_OC4_SetConfig+0xd0>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d109      	bne.n	800de68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800de5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	695b      	ldr	r3, [r3, #20]
 800de60:	019b      	lsls	r3, r3, #6
 800de62:	697a      	ldr	r2, [r7, #20]
 800de64:	4313      	orrs	r3, r2
 800de66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	68fa      	ldr	r2, [r7, #12]
 800de72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	685a      	ldr	r2, [r3, #4]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	621a      	str	r2, [r3, #32]
}
 800de82:	bf00      	nop
 800de84:	371c      	adds	r7, #28
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	feff8fff 	.word	0xfeff8fff
 800de94:	40010000 	.word	0x40010000
 800de98:	40010400 	.word	0x40010400
 800de9c:	40014000 	.word	0x40014000
 800dea0:	40014400 	.word	0x40014400
 800dea4:	40014800 	.word	0x40014800

0800dea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b087      	sub	sp, #28
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a1b      	ldr	r3, [r3, #32]
 800deb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a1b      	ldr	r3, [r3, #32]
 800debc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	4b21      	ldr	r3, [pc, #132]	@ (800df58 <TIM_OC5_SetConfig+0xb0>)
 800ded4:	4013      	ands	r3, r2
 800ded6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	4313      	orrs	r3, r2
 800dee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	041b      	lsls	r3, r3, #16
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	4313      	orrs	r3, r2
 800def4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4a18      	ldr	r2, [pc, #96]	@ (800df5c <TIM_OC5_SetConfig+0xb4>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d00f      	beq.n	800df1e <TIM_OC5_SetConfig+0x76>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4a17      	ldr	r2, [pc, #92]	@ (800df60 <TIM_OC5_SetConfig+0xb8>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d00b      	beq.n	800df1e <TIM_OC5_SetConfig+0x76>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4a16      	ldr	r2, [pc, #88]	@ (800df64 <TIM_OC5_SetConfig+0xbc>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d007      	beq.n	800df1e <TIM_OC5_SetConfig+0x76>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4a15      	ldr	r2, [pc, #84]	@ (800df68 <TIM_OC5_SetConfig+0xc0>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d003      	beq.n	800df1e <TIM_OC5_SetConfig+0x76>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4a14      	ldr	r2, [pc, #80]	@ (800df6c <TIM_OC5_SetConfig+0xc4>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d109      	bne.n	800df32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	021b      	lsls	r3, r3, #8
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	4313      	orrs	r3, r2
 800df30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	697a      	ldr	r2, [r7, #20]
 800df36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	621a      	str	r2, [r3, #32]
}
 800df4c:	bf00      	nop
 800df4e:	371c      	adds	r7, #28
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	fffeff8f 	.word	0xfffeff8f
 800df5c:	40010000 	.word	0x40010000
 800df60:	40010400 	.word	0x40010400
 800df64:	40014000 	.word	0x40014000
 800df68:	40014400 	.word	0x40014400
 800df6c:	40014800 	.word	0x40014800

0800df70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df70:	b480      	push	{r7}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a1b      	ldr	r3, [r3, #32]
 800df7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a1b      	ldr	r3, [r3, #32]
 800df84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4b22      	ldr	r3, [pc, #136]	@ (800e024 <TIM_OC6_SetConfig+0xb4>)
 800df9c:	4013      	ands	r3, r2
 800df9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	021b      	lsls	r3, r3, #8
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dfb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	051b      	lsls	r3, r3, #20
 800dfba:	693a      	ldr	r2, [r7, #16]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a19      	ldr	r2, [pc, #100]	@ (800e028 <TIM_OC6_SetConfig+0xb8>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d00f      	beq.n	800dfe8 <TIM_OC6_SetConfig+0x78>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a18      	ldr	r2, [pc, #96]	@ (800e02c <TIM_OC6_SetConfig+0xbc>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d00b      	beq.n	800dfe8 <TIM_OC6_SetConfig+0x78>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a17      	ldr	r2, [pc, #92]	@ (800e030 <TIM_OC6_SetConfig+0xc0>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d007      	beq.n	800dfe8 <TIM_OC6_SetConfig+0x78>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a16      	ldr	r2, [pc, #88]	@ (800e034 <TIM_OC6_SetConfig+0xc4>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d003      	beq.n	800dfe8 <TIM_OC6_SetConfig+0x78>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a15      	ldr	r2, [pc, #84]	@ (800e038 <TIM_OC6_SetConfig+0xc8>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d109      	bne.n	800dffc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dfee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	695b      	ldr	r3, [r3, #20]
 800dff4:	029b      	lsls	r3, r3, #10
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	621a      	str	r2, [r3, #32]
}
 800e016:	bf00      	nop
 800e018:	371c      	adds	r7, #28
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	feff8fff 	.word	0xfeff8fff
 800e028:	40010000 	.word	0x40010000
 800e02c:	40010400 	.word	0x40010400
 800e030:	40014000 	.word	0x40014000
 800e034:	40014400 	.word	0x40014400
 800e038:	40014800 	.word	0x40014800

0800e03c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b087      	sub	sp, #28
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6a1b      	ldr	r3, [r3, #32]
 800e04c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	f023 0201 	bic.w	r2, r3, #1
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	011b      	lsls	r3, r3, #4
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	4313      	orrs	r3, r2
 800e070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f023 030a 	bic.w	r3, r3, #10
 800e078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	4313      	orrs	r3, r2
 800e080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	693a      	ldr	r2, [r7, #16]
 800e086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	697a      	ldr	r2, [r7, #20]
 800e08c:	621a      	str	r2, [r3, #32]
}
 800e08e:	bf00      	nop
 800e090:	371c      	adds	r7, #28
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e09a:	b480      	push	{r7}
 800e09c:	b087      	sub	sp, #28
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	60f8      	str	r0, [r7, #12]
 800e0a2:	60b9      	str	r1, [r7, #8]
 800e0a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6a1b      	ldr	r3, [r3, #32]
 800e0b0:	f023 0210 	bic.w	r2, r3, #16
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e0c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	031b      	lsls	r3, r3, #12
 800e0ca:	693a      	ldr	r2, [r7, #16]
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e0d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	011b      	lsls	r3, r3, #4
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	697a      	ldr	r2, [r7, #20]
 800e0ec:	621a      	str	r2, [r3, #32]
}
 800e0ee:	bf00      	nop
 800e0f0:	371c      	adds	r7, #28
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
	...

0800e0fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	4b09      	ldr	r3, [pc, #36]	@ (800e134 <TIM_ITRx_SetConfig+0x38>)
 800e110:	4013      	ands	r3, r2
 800e112:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	4313      	orrs	r3, r2
 800e11a:	f043 0307 	orr.w	r3, r3, #7
 800e11e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	609a      	str	r2, [r3, #8]
}
 800e126:	bf00      	nop
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	ffcfff8f 	.word	0xffcfff8f

0800e138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e138:	b480      	push	{r7}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
 800e144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	021a      	lsls	r2, r3, #8
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	431a      	orrs	r2, r3
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	4313      	orrs	r3, r2
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	4313      	orrs	r3, r2
 800e164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	697a      	ldr	r2, [r7, #20]
 800e16a:	609a      	str	r2, [r3, #8]
}
 800e16c:	bf00      	nop
 800e16e:	371c      	adds	r7, #28
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d101      	bne.n	800e190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e18c:	2302      	movs	r3, #2
 800e18e:	e077      	b.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2202      	movs	r2, #2
 800e19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a35      	ldr	r2, [pc, #212]	@ (800e28c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d004      	beq.n	800e1c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4a34      	ldr	r2, [pc, #208]	@ (800e290 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d108      	bne.n	800e1d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e1ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a25      	ldr	r2, [pc, #148]	@ (800e28c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d02c      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e202:	d027      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a22      	ldr	r2, [pc, #136]	@ (800e294 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d022      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a21      	ldr	r2, [pc, #132]	@ (800e298 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d01d      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a1f      	ldr	r2, [pc, #124]	@ (800e29c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d018      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a1a      	ldr	r2, [pc, #104]	@ (800e290 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d013      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a1b      	ldr	r2, [pc, #108]	@ (800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d00e      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a1a      	ldr	r2, [pc, #104]	@ (800e2a4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d009      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a18      	ldr	r2, [pc, #96]	@ (800e2a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d004      	beq.n	800e254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a17      	ldr	r2, [pc, #92]	@ (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d10c      	bne.n	800e26e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e25a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	4313      	orrs	r3, r2
 800e264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2201      	movs	r2, #1
 800e272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3714      	adds	r7, #20
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr
 800e28c:	40010000 	.word	0x40010000
 800e290:	40010400 	.word	0x40010400
 800e294:	40000400 	.word	0x40000400
 800e298:	40000800 	.word	0x40000800
 800e29c:	40000c00 	.word	0x40000c00
 800e2a0:	40001800 	.word	0x40001800
 800e2a4:	40014000 	.word	0x40014000
 800e2a8:	4000e000 	.word	0x4000e000
 800e2ac:	4000e400 	.word	0x4000e400

0800e2b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e042      	b.n	800e384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e304:	2b00      	cmp	r3, #0
 800e306:	d106      	bne.n	800e316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7f4 ffd1 	bl	80032b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2224      	movs	r2, #36	@ 0x24
 800e31a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f022 0201 	bic.w	r2, r2, #1
 800e32c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e332:	2b00      	cmp	r3, #0
 800e334:	d002      	beq.n	800e33c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f001 fafa 	bl	800f930 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fc8b 	bl	800ec58 <UART_SetConfig>
 800e342:	4603      	mov	r3, r0
 800e344:	2b01      	cmp	r3, #1
 800e346:	d101      	bne.n	800e34c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	e01b      	b.n	800e384 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	685a      	ldr	r2, [r3, #4]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e35a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	689a      	ldr	r2, [r3, #8]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e36a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f042 0201 	orr.w	r2, r2, #1
 800e37a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f001 fb79 	bl	800fa74 <UART_CheckIdleState>
 800e382:	4603      	mov	r3, r0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	@ 0x28
 800e390:	af02      	add	r7, sp, #8
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	4613      	mov	r3, r2
 800e39a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3a2:	2b20      	cmp	r3, #32
 800e3a4:	d17b      	bne.n	800e49e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <HAL_UART_Transmit+0x26>
 800e3ac:	88fb      	ldrh	r3, [r7, #6]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e074      	b.n	800e4a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2221      	movs	r2, #33	@ 0x21
 800e3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e3c6:	f7f5 fa15 	bl	80037f4 <HAL_GetTick>
 800e3ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	88fa      	ldrh	r2, [r7, #6]
 800e3d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	88fa      	ldrh	r2, [r7, #6]
 800e3d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3e4:	d108      	bne.n	800e3f8 <HAL_UART_Transmit+0x6c>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	691b      	ldr	r3, [r3, #16]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d104      	bne.n	800e3f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	61bb      	str	r3, [r7, #24]
 800e3f6:	e003      	b.n	800e400 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e400:	e030      	b.n	800e464 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	2200      	movs	r2, #0
 800e40a:	2180      	movs	r1, #128	@ 0x80
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f001 fbdb 	bl	800fbc8 <UART_WaitOnFlagUntilTimeout>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d005      	beq.n	800e424 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2220      	movs	r2, #32
 800e41c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e420:	2303      	movs	r3, #3
 800e422:	e03d      	b.n	800e4a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10b      	bne.n	800e442 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	461a      	mov	r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e438:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	3302      	adds	r3, #2
 800e43e:	61bb      	str	r3, [r7, #24]
 800e440:	e007      	b.n	800e452 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	781a      	ldrb	r2, [r3, #0]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	3301      	adds	r3, #1
 800e450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e458:	b29b      	uxth	r3, r3
 800e45a:	3b01      	subs	r3, #1
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1c8      	bne.n	800e402 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2200      	movs	r2, #0
 800e478:	2140      	movs	r1, #64	@ 0x40
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f001 fba4 	bl	800fbc8 <UART_WaitOnFlagUntilTimeout>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d005      	beq.n	800e492 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2220      	movs	r2, #32
 800e48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e48e:	2303      	movs	r3, #3
 800e490:	e006      	b.n	800e4a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2220      	movs	r2, #32
 800e496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	e000      	b.n	800e4a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e49e:	2302      	movs	r3, #2
  }
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3720      	adds	r7, #32
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b0ba      	sub	sp, #232	@ 0xe8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	69db      	ldr	r3, [r3, #28]
 800e4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e4ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e4d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d11b      	bne.n	800e51c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4e8:	f003 0320 	and.w	r3, r3, #32
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d015      	beq.n	800e51c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4f4:	f003 0320 	and.w	r3, r3, #32
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d105      	bne.n	800e508 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e504:	2b00      	cmp	r3, #0
 800e506:	d009      	beq.n	800e51c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f000 8377 	beq.w	800ec00 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	4798      	blx	r3
      }
      return;
 800e51a:	e371      	b.n	800ec00 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e51c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e520:	2b00      	cmp	r3, #0
 800e522:	f000 8123 	beq.w	800e76c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e526:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e52a:	4b8d      	ldr	r3, [pc, #564]	@ (800e760 <HAL_UART_IRQHandler+0x2b8>)
 800e52c:	4013      	ands	r3, r2
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e536:	4b8b      	ldr	r3, [pc, #556]	@ (800e764 <HAL_UART_IRQHandler+0x2bc>)
 800e538:	4013      	ands	r3, r2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 8116 	beq.w	800e76c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d011      	beq.n	800e570 <HAL_UART_IRQHandler+0xc8>
 800e54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00b      	beq.n	800e570 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2201      	movs	r2, #1
 800e55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e566:	f043 0201 	orr.w	r2, r3, #1
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d011      	beq.n	800e5a0 <HAL_UART_IRQHandler+0xf8>
 800e57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e580:	f003 0301 	and.w	r3, r3, #1
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00b      	beq.n	800e5a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2202      	movs	r2, #2
 800e58e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e596:	f043 0204 	orr.w	r2, r3, #4
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5a4:	f003 0304 	and.w	r3, r3, #4
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d011      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x128>
 800e5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2204      	movs	r2, #4
 800e5be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5c6:	f043 0202 	orr.w	r2, r3, #2
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5d4:	f003 0308 	and.w	r3, r3, #8
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d017      	beq.n	800e60c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5e0:	f003 0320 	and.w	r3, r3, #32
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d105      	bne.n	800e5f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e5e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e5ec:	4b5c      	ldr	r3, [pc, #368]	@ (800e760 <HAL_UART_IRQHandler+0x2b8>)
 800e5ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00b      	beq.n	800e60c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2208      	movs	r2, #8
 800e5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e602:	f043 0208 	orr.w	r2, r3, #8
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e614:	2b00      	cmp	r3, #0
 800e616:	d012      	beq.n	800e63e <HAL_UART_IRQHandler+0x196>
 800e618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e61c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00c      	beq.n	800e63e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e62c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e634:	f043 0220 	orr.w	r2, r3, #32
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 82dd 	beq.w	800ec04 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e64e:	f003 0320 	and.w	r3, r3, #32
 800e652:	2b00      	cmp	r3, #0
 800e654:	d013      	beq.n	800e67e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e65a:	f003 0320 	and.w	r3, r3, #32
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d105      	bne.n	800e66e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d007      	beq.n	800e67e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e684:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e692:	2b40      	cmp	r3, #64	@ 0x40
 800e694:	d005      	beq.n	800e6a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e69a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d054      	beq.n	800e74c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 fc20 	bl	800fee8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6b2:	2b40      	cmp	r3, #64	@ 0x40
 800e6b4:	d146      	bne.n	800e744 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e6c4:	e853 3f00 	ldrex	r3, [r3]
 800e6c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e6cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e6d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3308      	adds	r3, #8
 800e6de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e6e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e6e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e6ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e6fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1d9      	bne.n	800e6b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d017      	beq.n	800e73c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e712:	4a15      	ldr	r2, [pc, #84]	@ (800e768 <HAL_UART_IRQHandler+0x2c0>)
 800e714:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7f8 fb47 	bl	8006db0 <HAL_DMA_Abort_IT>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d019      	beq.n	800e75c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e72e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e736:	4610      	mov	r0, r2
 800e738:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e73a:	e00f      	b.n	800e75c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fa81 	bl	800ec44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e742:	e00b      	b.n	800e75c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 fa7d 	bl	800ec44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e74a:	e007      	b.n	800e75c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 fa79 	bl	800ec44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2200      	movs	r2, #0
 800e756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e75a:	e253      	b.n	800ec04 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e75c:	bf00      	nop
    return;
 800e75e:	e251      	b.n	800ec04 <HAL_UART_IRQHandler+0x75c>
 800e760:	10000001 	.word	0x10000001
 800e764:	04000120 	.word	0x04000120
 800e768:	0800ffb5 	.word	0x0800ffb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e770:	2b01      	cmp	r3, #1
 800e772:	f040 81e7 	bne.w	800eb44 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e77a:	f003 0310 	and.w	r3, r3, #16
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 81e0 	beq.w	800eb44 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e788:	f003 0310 	and.w	r3, r3, #16
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f000 81d9 	beq.w	800eb44 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2210      	movs	r2, #16
 800e798:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7a4:	2b40      	cmp	r3, #64	@ 0x40
 800e7a6:	f040 8151 	bne.w	800ea4c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4a96      	ldr	r2, [pc, #600]	@ (800ea0c <HAL_UART_IRQHandler+0x564>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d068      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a93      	ldr	r2, [pc, #588]	@ (800ea10 <HAL_UART_IRQHandler+0x568>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d061      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a91      	ldr	r2, [pc, #580]	@ (800ea14 <HAL_UART_IRQHandler+0x56c>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d05a      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a8e      	ldr	r2, [pc, #568]	@ (800ea18 <HAL_UART_IRQHandler+0x570>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d053      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a8c      	ldr	r2, [pc, #560]	@ (800ea1c <HAL_UART_IRQHandler+0x574>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d04c      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a89      	ldr	r2, [pc, #548]	@ (800ea20 <HAL_UART_IRQHandler+0x578>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d045      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a87      	ldr	r2, [pc, #540]	@ (800ea24 <HAL_UART_IRQHandler+0x57c>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d03e      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a84      	ldr	r2, [pc, #528]	@ (800ea28 <HAL_UART_IRQHandler+0x580>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d037      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a82      	ldr	r2, [pc, #520]	@ (800ea2c <HAL_UART_IRQHandler+0x584>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d030      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a7f      	ldr	r2, [pc, #508]	@ (800ea30 <HAL_UART_IRQHandler+0x588>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d029      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a7d      	ldr	r2, [pc, #500]	@ (800ea34 <HAL_UART_IRQHandler+0x58c>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d022      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a7a      	ldr	r2, [pc, #488]	@ (800ea38 <HAL_UART_IRQHandler+0x590>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d01b      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a78      	ldr	r2, [pc, #480]	@ (800ea3c <HAL_UART_IRQHandler+0x594>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d014      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a75      	ldr	r2, [pc, #468]	@ (800ea40 <HAL_UART_IRQHandler+0x598>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d00d      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a73      	ldr	r2, [pc, #460]	@ (800ea44 <HAL_UART_IRQHandler+0x59c>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d006      	beq.n	800e88a <HAL_UART_IRQHandler+0x3e2>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a70      	ldr	r2, [pc, #448]	@ (800ea48 <HAL_UART_IRQHandler+0x5a0>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d106      	bne.n	800e898 <HAL_UART_IRQHandler+0x3f0>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	b29b      	uxth	r3, r3
 800e896:	e005      	b.n	800e8a4 <HAL_UART_IRQHandler+0x3fc>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e8a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 81ab 	beq.w	800ec08 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e8b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	f080 81a3 	bcs.w	800ec08 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8d2:	69db      	ldr	r3, [r3, #28]
 800e8d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8d8:	f000 8087 	beq.w	800e9ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e8f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e8f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	461a      	mov	r2, r3
 800e902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e90a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e916:	e841 2300 	strex	r3, r2, [r1]
 800e91a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e91e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1da      	bne.n	800e8dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3308      	adds	r3, #8
 800e92c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e930:	e853 3f00 	ldrex	r3, [r3]
 800e934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e938:	f023 0301 	bic.w	r3, r3, #1
 800e93c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	3308      	adds	r3, #8
 800e946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e94a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e94e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e956:	e841 2300 	strex	r3, r2, [r1]
 800e95a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e95c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1e1      	bne.n	800e926 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	3308      	adds	r3, #8
 800e968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e96c:	e853 3f00 	ldrex	r3, [r3]
 800e970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3308      	adds	r3, #8
 800e982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e98c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e98e:	e841 2300 	strex	r3, r2, [r1]
 800e992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1e3      	bne.n	800e962 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2220      	movs	r2, #32
 800e99e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9b0:	e853 3f00 	ldrex	r3, [r3]
 800e9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e9b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9b8:	f023 0310 	bic.w	r3, r3, #16
 800e9bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e9d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9d2:	e841 2300 	strex	r3, r2, [r1]
 800e9d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e9d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1e4      	bne.n	800e9a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7f7 fec5 	bl	8006774 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2202      	movs	r2, #2
 800e9ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	4619      	mov	r1, r3
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7f2 ff15 	bl	8001834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea0a:	e0fd      	b.n	800ec08 <HAL_UART_IRQHandler+0x760>
 800ea0c:	40020010 	.word	0x40020010
 800ea10:	40020028 	.word	0x40020028
 800ea14:	40020040 	.word	0x40020040
 800ea18:	40020058 	.word	0x40020058
 800ea1c:	40020070 	.word	0x40020070
 800ea20:	40020088 	.word	0x40020088
 800ea24:	400200a0 	.word	0x400200a0
 800ea28:	400200b8 	.word	0x400200b8
 800ea2c:	40020410 	.word	0x40020410
 800ea30:	40020428 	.word	0x40020428
 800ea34:	40020440 	.word	0x40020440
 800ea38:	40020458 	.word	0x40020458
 800ea3c:	40020470 	.word	0x40020470
 800ea40:	40020488 	.word	0x40020488
 800ea44:	400204a0 	.word	0x400204a0
 800ea48:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f000 80cf 	beq.w	800ec0c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ea6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 80ca 	beq.w	800ec0c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea80:	e853 3f00 	ldrex	r3, [r3]
 800ea84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ea86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	461a      	mov	r2, r3
 800ea96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eaa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaa2:	e841 2300 	strex	r3, r2, [r1]
 800eaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eaa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1e4      	bne.n	800ea78 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	3308      	adds	r3, #8
 800eab4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab8:	e853 3f00 	ldrex	r3, [r3]
 800eabc:	623b      	str	r3, [r7, #32]
   return(result);
 800eabe:	6a3a      	ldr	r2, [r7, #32]
 800eac0:	4b55      	ldr	r3, [pc, #340]	@ (800ec18 <HAL_UART_IRQHandler+0x770>)
 800eac2:	4013      	ands	r3, r2
 800eac4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3308      	adds	r3, #8
 800eace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ead2:	633a      	str	r2, [r7, #48]	@ 0x30
 800ead4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ead8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eada:	e841 2300 	strex	r3, r2, [r1]
 800eade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d1e3      	bne.n	800eaae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2220      	movs	r2, #32
 800eaea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	e853 3f00 	ldrex	r3, [r3]
 800eb06:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f023 0310 	bic.w	r3, r3, #16
 800eb0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	461a      	mov	r2, r3
 800eb18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eb1c:	61fb      	str	r3, [r7, #28]
 800eb1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb20:	69b9      	ldr	r1, [r7, #24]
 800eb22:	69fa      	ldr	r2, [r7, #28]
 800eb24:	e841 2300 	strex	r3, r2, [r1]
 800eb28:	617b      	str	r3, [r7, #20]
   return(result);
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1e4      	bne.n	800eafa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2202      	movs	r2, #2
 800eb34:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7f2 fe79 	bl	8001834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb42:	e063      	b.n	800ec0c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00e      	beq.n	800eb6e <HAL_UART_IRQHandler+0x6c6>
 800eb50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d008      	beq.n	800eb6e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800eb64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f001 ff82 	bl	8010a70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb6c:	e051      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eb6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d014      	beq.n	800eba4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eb7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d105      	bne.n	800eb92 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eb86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d008      	beq.n	800eba4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d03a      	beq.n	800ec10 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	4798      	blx	r3
    }
    return;
 800eba2:	e035      	b.n	800ec10 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d009      	beq.n	800ebc4 <HAL_UART_IRQHandler+0x71c>
 800ebb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d003      	beq.n	800ebc4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f001 fa0f 	bl	800ffe0 <UART_EndTransmit_IT>
    return;
 800ebc2:	e026      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ebc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d009      	beq.n	800ebe4 <HAL_UART_IRQHandler+0x73c>
 800ebd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f001 ff5b 	bl	8010a98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebe2:	e016      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ebe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d010      	beq.n	800ec12 <HAL_UART_IRQHandler+0x76a>
 800ebf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	da0c      	bge.n	800ec12 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f001 ff43 	bl	8010a84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebfe:	e008      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec00:	bf00      	nop
 800ec02:	e006      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
    return;
 800ec04:	bf00      	nop
 800ec06:	e004      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec08:	bf00      	nop
 800ec0a:	e002      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec0c:	bf00      	nop
 800ec0e:	e000      	b.n	800ec12 <HAL_UART_IRQHandler+0x76a>
    return;
 800ec10:	bf00      	nop
  }
}
 800ec12:	37e8      	adds	r7, #232	@ 0xe8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	effffffe 	.word	0xeffffffe

0800ec1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec24:	bf00      	nop
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ec4c:	bf00      	nop
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec5c:	b092      	sub	sp, #72	@ 0x48
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	689a      	ldr	r2, [r3, #8]
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	691b      	ldr	r3, [r3, #16]
 800ec70:	431a      	orrs	r2, r3
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	695b      	ldr	r3, [r3, #20]
 800ec76:	431a      	orrs	r2, r3
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	69db      	ldr	r3, [r3, #28]
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	4bbe      	ldr	r3, [pc, #760]	@ (800ef80 <UART_SetConfig+0x328>)
 800ec88:	4013      	ands	r3, r2
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	6812      	ldr	r2, [r2, #0]
 800ec8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec90:	430b      	orrs	r3, r1
 800ec92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	68da      	ldr	r2, [r3, #12]
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	430a      	orrs	r2, r1
 800eca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	699b      	ldr	r3, [r3, #24]
 800ecae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4ab3      	ldr	r2, [pc, #716]	@ (800ef84 <UART_SetConfig+0x32c>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d004      	beq.n	800ecc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	6a1b      	ldr	r3, [r3, #32]
 800ecbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	689a      	ldr	r2, [r3, #8]
 800ecca:	4baf      	ldr	r3, [pc, #700]	@ (800ef88 <UART_SetConfig+0x330>)
 800eccc:	4013      	ands	r3, r2
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	6812      	ldr	r2, [r2, #0]
 800ecd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ecd4:	430b      	orrs	r3, r1
 800ecd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecde:	f023 010f 	bic.w	r1, r3, #15
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	430a      	orrs	r2, r1
 800ecec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4aa6      	ldr	r2, [pc, #664]	@ (800ef8c <UART_SetConfig+0x334>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d177      	bne.n	800ede8 <UART_SetConfig+0x190>
 800ecf8:	4ba5      	ldr	r3, [pc, #660]	@ (800ef90 <UART_SetConfig+0x338>)
 800ecfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed00:	2b28      	cmp	r3, #40	@ 0x28
 800ed02:	d86d      	bhi.n	800ede0 <UART_SetConfig+0x188>
 800ed04:	a201      	add	r2, pc, #4	@ (adr r2, 800ed0c <UART_SetConfig+0xb4>)
 800ed06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0a:	bf00      	nop
 800ed0c:	0800edb1 	.word	0x0800edb1
 800ed10:	0800ede1 	.word	0x0800ede1
 800ed14:	0800ede1 	.word	0x0800ede1
 800ed18:	0800ede1 	.word	0x0800ede1
 800ed1c:	0800ede1 	.word	0x0800ede1
 800ed20:	0800ede1 	.word	0x0800ede1
 800ed24:	0800ede1 	.word	0x0800ede1
 800ed28:	0800ede1 	.word	0x0800ede1
 800ed2c:	0800edb9 	.word	0x0800edb9
 800ed30:	0800ede1 	.word	0x0800ede1
 800ed34:	0800ede1 	.word	0x0800ede1
 800ed38:	0800ede1 	.word	0x0800ede1
 800ed3c:	0800ede1 	.word	0x0800ede1
 800ed40:	0800ede1 	.word	0x0800ede1
 800ed44:	0800ede1 	.word	0x0800ede1
 800ed48:	0800ede1 	.word	0x0800ede1
 800ed4c:	0800edc1 	.word	0x0800edc1
 800ed50:	0800ede1 	.word	0x0800ede1
 800ed54:	0800ede1 	.word	0x0800ede1
 800ed58:	0800ede1 	.word	0x0800ede1
 800ed5c:	0800ede1 	.word	0x0800ede1
 800ed60:	0800ede1 	.word	0x0800ede1
 800ed64:	0800ede1 	.word	0x0800ede1
 800ed68:	0800ede1 	.word	0x0800ede1
 800ed6c:	0800edc9 	.word	0x0800edc9
 800ed70:	0800ede1 	.word	0x0800ede1
 800ed74:	0800ede1 	.word	0x0800ede1
 800ed78:	0800ede1 	.word	0x0800ede1
 800ed7c:	0800ede1 	.word	0x0800ede1
 800ed80:	0800ede1 	.word	0x0800ede1
 800ed84:	0800ede1 	.word	0x0800ede1
 800ed88:	0800ede1 	.word	0x0800ede1
 800ed8c:	0800edd1 	.word	0x0800edd1
 800ed90:	0800ede1 	.word	0x0800ede1
 800ed94:	0800ede1 	.word	0x0800ede1
 800ed98:	0800ede1 	.word	0x0800ede1
 800ed9c:	0800ede1 	.word	0x0800ede1
 800eda0:	0800ede1 	.word	0x0800ede1
 800eda4:	0800ede1 	.word	0x0800ede1
 800eda8:	0800ede1 	.word	0x0800ede1
 800edac:	0800edd9 	.word	0x0800edd9
 800edb0:	2301      	movs	r3, #1
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb6:	e326      	b.n	800f406 <UART_SetConfig+0x7ae>
 800edb8:	2304      	movs	r3, #4
 800edba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edbe:	e322      	b.n	800f406 <UART_SetConfig+0x7ae>
 800edc0:	2308      	movs	r3, #8
 800edc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edc6:	e31e      	b.n	800f406 <UART_SetConfig+0x7ae>
 800edc8:	2310      	movs	r3, #16
 800edca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edce:	e31a      	b.n	800f406 <UART_SetConfig+0x7ae>
 800edd0:	2320      	movs	r3, #32
 800edd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edd6:	e316      	b.n	800f406 <UART_SetConfig+0x7ae>
 800edd8:	2340      	movs	r3, #64	@ 0x40
 800edda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edde:	e312      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ede0:	2380      	movs	r3, #128	@ 0x80
 800ede2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ede6:	e30e      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a69      	ldr	r2, [pc, #420]	@ (800ef94 <UART_SetConfig+0x33c>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d130      	bne.n	800ee54 <UART_SetConfig+0x1fc>
 800edf2:	4b67      	ldr	r3, [pc, #412]	@ (800ef90 <UART_SetConfig+0x338>)
 800edf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edf6:	f003 0307 	and.w	r3, r3, #7
 800edfa:	2b05      	cmp	r3, #5
 800edfc:	d826      	bhi.n	800ee4c <UART_SetConfig+0x1f4>
 800edfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ee04 <UART_SetConfig+0x1ac>)
 800ee00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee04:	0800ee1d 	.word	0x0800ee1d
 800ee08:	0800ee25 	.word	0x0800ee25
 800ee0c:	0800ee2d 	.word	0x0800ee2d
 800ee10:	0800ee35 	.word	0x0800ee35
 800ee14:	0800ee3d 	.word	0x0800ee3d
 800ee18:	0800ee45 	.word	0x0800ee45
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee22:	e2f0      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee24:	2304      	movs	r3, #4
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2a:	e2ec      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee2c:	2308      	movs	r3, #8
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee32:	e2e8      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee34:	2310      	movs	r3, #16
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3a:	e2e4      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee3c:	2320      	movs	r3, #32
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee42:	e2e0      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee44:	2340      	movs	r3, #64	@ 0x40
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4a:	e2dc      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee4c:	2380      	movs	r3, #128	@ 0x80
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee52:	e2d8      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a4f      	ldr	r2, [pc, #316]	@ (800ef98 <UART_SetConfig+0x340>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d130      	bne.n	800eec0 <UART_SetConfig+0x268>
 800ee5e:	4b4c      	ldr	r3, [pc, #304]	@ (800ef90 <UART_SetConfig+0x338>)
 800ee60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee62:	f003 0307 	and.w	r3, r3, #7
 800ee66:	2b05      	cmp	r3, #5
 800ee68:	d826      	bhi.n	800eeb8 <UART_SetConfig+0x260>
 800ee6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee70 <UART_SetConfig+0x218>)
 800ee6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee70:	0800ee89 	.word	0x0800ee89
 800ee74:	0800ee91 	.word	0x0800ee91
 800ee78:	0800ee99 	.word	0x0800ee99
 800ee7c:	0800eea1 	.word	0x0800eea1
 800ee80:	0800eea9 	.word	0x0800eea9
 800ee84:	0800eeb1 	.word	0x0800eeb1
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8e:	e2ba      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee90:	2304      	movs	r3, #4
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee96:	e2b6      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ee98:	2308      	movs	r3, #8
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee9e:	e2b2      	b.n	800f406 <UART_SetConfig+0x7ae>
 800eea0:	2310      	movs	r3, #16
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eea6:	e2ae      	b.n	800f406 <UART_SetConfig+0x7ae>
 800eea8:	2320      	movs	r3, #32
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeae:	e2aa      	b.n	800f406 <UART_SetConfig+0x7ae>
 800eeb0:	2340      	movs	r3, #64	@ 0x40
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeb6:	e2a6      	b.n	800f406 <UART_SetConfig+0x7ae>
 800eeb8:	2380      	movs	r3, #128	@ 0x80
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eebe:	e2a2      	b.n	800f406 <UART_SetConfig+0x7ae>
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a35      	ldr	r2, [pc, #212]	@ (800ef9c <UART_SetConfig+0x344>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d130      	bne.n	800ef2c <UART_SetConfig+0x2d4>
 800eeca:	4b31      	ldr	r3, [pc, #196]	@ (800ef90 <UART_SetConfig+0x338>)
 800eecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eece:	f003 0307 	and.w	r3, r3, #7
 800eed2:	2b05      	cmp	r3, #5
 800eed4:	d826      	bhi.n	800ef24 <UART_SetConfig+0x2cc>
 800eed6:	a201      	add	r2, pc, #4	@ (adr r2, 800eedc <UART_SetConfig+0x284>)
 800eed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eedc:	0800eef5 	.word	0x0800eef5
 800eee0:	0800eefd 	.word	0x0800eefd
 800eee4:	0800ef05 	.word	0x0800ef05
 800eee8:	0800ef0d 	.word	0x0800ef0d
 800eeec:	0800ef15 	.word	0x0800ef15
 800eef0:	0800ef1d 	.word	0x0800ef1d
 800eef4:	2300      	movs	r3, #0
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefa:	e284      	b.n	800f406 <UART_SetConfig+0x7ae>
 800eefc:	2304      	movs	r3, #4
 800eefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef02:	e280      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef04:	2308      	movs	r3, #8
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef0a:	e27c      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef0c:	2310      	movs	r3, #16
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef12:	e278      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef14:	2320      	movs	r3, #32
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1a:	e274      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef1c:	2340      	movs	r3, #64	@ 0x40
 800ef1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef22:	e270      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef24:	2380      	movs	r3, #128	@ 0x80
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef2a:	e26c      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a1b      	ldr	r2, [pc, #108]	@ (800efa0 <UART_SetConfig+0x348>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d142      	bne.n	800efbc <UART_SetConfig+0x364>
 800ef36:	4b16      	ldr	r3, [pc, #88]	@ (800ef90 <UART_SetConfig+0x338>)
 800ef38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef3a:	f003 0307 	and.w	r3, r3, #7
 800ef3e:	2b05      	cmp	r3, #5
 800ef40:	d838      	bhi.n	800efb4 <UART_SetConfig+0x35c>
 800ef42:	a201      	add	r2, pc, #4	@ (adr r2, 800ef48 <UART_SetConfig+0x2f0>)
 800ef44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef48:	0800ef61 	.word	0x0800ef61
 800ef4c:	0800ef69 	.word	0x0800ef69
 800ef50:	0800ef71 	.word	0x0800ef71
 800ef54:	0800ef79 	.word	0x0800ef79
 800ef58:	0800efa5 	.word	0x0800efa5
 800ef5c:	0800efad 	.word	0x0800efad
 800ef60:	2300      	movs	r3, #0
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e24e      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef68:	2304      	movs	r3, #4
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e24a      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef70:	2308      	movs	r3, #8
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e246      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef78:	2310      	movs	r3, #16
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e242      	b.n	800f406 <UART_SetConfig+0x7ae>
 800ef80:	cfff69f3 	.word	0xcfff69f3
 800ef84:	58000c00 	.word	0x58000c00
 800ef88:	11fff4ff 	.word	0x11fff4ff
 800ef8c:	40011000 	.word	0x40011000
 800ef90:	58024400 	.word	0x58024400
 800ef94:	40004400 	.word	0x40004400
 800ef98:	40004800 	.word	0x40004800
 800ef9c:	40004c00 	.word	0x40004c00
 800efa0:	40005000 	.word	0x40005000
 800efa4:	2320      	movs	r3, #32
 800efa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efaa:	e22c      	b.n	800f406 <UART_SetConfig+0x7ae>
 800efac:	2340      	movs	r3, #64	@ 0x40
 800efae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb2:	e228      	b.n	800f406 <UART_SetConfig+0x7ae>
 800efb4:	2380      	movs	r3, #128	@ 0x80
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efba:	e224      	b.n	800f406 <UART_SetConfig+0x7ae>
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4ab1      	ldr	r2, [pc, #708]	@ (800f288 <UART_SetConfig+0x630>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d176      	bne.n	800f0b4 <UART_SetConfig+0x45c>
 800efc6:	4bb1      	ldr	r3, [pc, #708]	@ (800f28c <UART_SetConfig+0x634>)
 800efc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800efce:	2b28      	cmp	r3, #40	@ 0x28
 800efd0:	d86c      	bhi.n	800f0ac <UART_SetConfig+0x454>
 800efd2:	a201      	add	r2, pc, #4	@ (adr r2, 800efd8 <UART_SetConfig+0x380>)
 800efd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd8:	0800f07d 	.word	0x0800f07d
 800efdc:	0800f0ad 	.word	0x0800f0ad
 800efe0:	0800f0ad 	.word	0x0800f0ad
 800efe4:	0800f0ad 	.word	0x0800f0ad
 800efe8:	0800f0ad 	.word	0x0800f0ad
 800efec:	0800f0ad 	.word	0x0800f0ad
 800eff0:	0800f0ad 	.word	0x0800f0ad
 800eff4:	0800f0ad 	.word	0x0800f0ad
 800eff8:	0800f085 	.word	0x0800f085
 800effc:	0800f0ad 	.word	0x0800f0ad
 800f000:	0800f0ad 	.word	0x0800f0ad
 800f004:	0800f0ad 	.word	0x0800f0ad
 800f008:	0800f0ad 	.word	0x0800f0ad
 800f00c:	0800f0ad 	.word	0x0800f0ad
 800f010:	0800f0ad 	.word	0x0800f0ad
 800f014:	0800f0ad 	.word	0x0800f0ad
 800f018:	0800f08d 	.word	0x0800f08d
 800f01c:	0800f0ad 	.word	0x0800f0ad
 800f020:	0800f0ad 	.word	0x0800f0ad
 800f024:	0800f0ad 	.word	0x0800f0ad
 800f028:	0800f0ad 	.word	0x0800f0ad
 800f02c:	0800f0ad 	.word	0x0800f0ad
 800f030:	0800f0ad 	.word	0x0800f0ad
 800f034:	0800f0ad 	.word	0x0800f0ad
 800f038:	0800f095 	.word	0x0800f095
 800f03c:	0800f0ad 	.word	0x0800f0ad
 800f040:	0800f0ad 	.word	0x0800f0ad
 800f044:	0800f0ad 	.word	0x0800f0ad
 800f048:	0800f0ad 	.word	0x0800f0ad
 800f04c:	0800f0ad 	.word	0x0800f0ad
 800f050:	0800f0ad 	.word	0x0800f0ad
 800f054:	0800f0ad 	.word	0x0800f0ad
 800f058:	0800f09d 	.word	0x0800f09d
 800f05c:	0800f0ad 	.word	0x0800f0ad
 800f060:	0800f0ad 	.word	0x0800f0ad
 800f064:	0800f0ad 	.word	0x0800f0ad
 800f068:	0800f0ad 	.word	0x0800f0ad
 800f06c:	0800f0ad 	.word	0x0800f0ad
 800f070:	0800f0ad 	.word	0x0800f0ad
 800f074:	0800f0ad 	.word	0x0800f0ad
 800f078:	0800f0a5 	.word	0x0800f0a5
 800f07c:	2301      	movs	r3, #1
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f082:	e1c0      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f084:	2304      	movs	r3, #4
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f08a:	e1bc      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f08c:	2308      	movs	r3, #8
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f092:	e1b8      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f094:	2310      	movs	r3, #16
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f09a:	e1b4      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f09c:	2320      	movs	r3, #32
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a2:	e1b0      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f0a4:	2340      	movs	r3, #64	@ 0x40
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0aa:	e1ac      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f0ac:	2380      	movs	r3, #128	@ 0x80
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0b2:	e1a8      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a75      	ldr	r2, [pc, #468]	@ (800f290 <UART_SetConfig+0x638>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d130      	bne.n	800f120 <UART_SetConfig+0x4c8>
 800f0be:	4b73      	ldr	r3, [pc, #460]	@ (800f28c <UART_SetConfig+0x634>)
 800f0c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	2b05      	cmp	r3, #5
 800f0c8:	d826      	bhi.n	800f118 <UART_SetConfig+0x4c0>
 800f0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f0d0 <UART_SetConfig+0x478>)
 800f0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d0:	0800f0e9 	.word	0x0800f0e9
 800f0d4:	0800f0f1 	.word	0x0800f0f1
 800f0d8:	0800f0f9 	.word	0x0800f0f9
 800f0dc:	0800f101 	.word	0x0800f101
 800f0e0:	0800f109 	.word	0x0800f109
 800f0e4:	0800f111 	.word	0x0800f111
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ee:	e18a      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f0f0:	2304      	movs	r3, #4
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0f6:	e186      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f0f8:	2308      	movs	r3, #8
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fe:	e182      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f100:	2310      	movs	r3, #16
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f106:	e17e      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f108:	2320      	movs	r3, #32
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10e:	e17a      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f110:	2340      	movs	r3, #64	@ 0x40
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f116:	e176      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f118:	2380      	movs	r3, #128	@ 0x80
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11e:	e172      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a5b      	ldr	r2, [pc, #364]	@ (800f294 <UART_SetConfig+0x63c>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d130      	bne.n	800f18c <UART_SetConfig+0x534>
 800f12a:	4b58      	ldr	r3, [pc, #352]	@ (800f28c <UART_SetConfig+0x634>)
 800f12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f12e:	f003 0307 	and.w	r3, r3, #7
 800f132:	2b05      	cmp	r3, #5
 800f134:	d826      	bhi.n	800f184 <UART_SetConfig+0x52c>
 800f136:	a201      	add	r2, pc, #4	@ (adr r2, 800f13c <UART_SetConfig+0x4e4>)
 800f138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f13c:	0800f155 	.word	0x0800f155
 800f140:	0800f15d 	.word	0x0800f15d
 800f144:	0800f165 	.word	0x0800f165
 800f148:	0800f16d 	.word	0x0800f16d
 800f14c:	0800f175 	.word	0x0800f175
 800f150:	0800f17d 	.word	0x0800f17d
 800f154:	2300      	movs	r3, #0
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15a:	e154      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f15c:	2304      	movs	r3, #4
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f162:	e150      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f164:	2308      	movs	r3, #8
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f16a:	e14c      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f16c:	2310      	movs	r3, #16
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f172:	e148      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f174:	2320      	movs	r3, #32
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f17a:	e144      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f17c:	2340      	movs	r3, #64	@ 0x40
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f182:	e140      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f184:	2380      	movs	r3, #128	@ 0x80
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f18a:	e13c      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a41      	ldr	r2, [pc, #260]	@ (800f298 <UART_SetConfig+0x640>)
 800f192:	4293      	cmp	r3, r2
 800f194:	f040 8082 	bne.w	800f29c <UART_SetConfig+0x644>
 800f198:	4b3c      	ldr	r3, [pc, #240]	@ (800f28c <UART_SetConfig+0x634>)
 800f19a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f19c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f1a0:	2b28      	cmp	r3, #40	@ 0x28
 800f1a2:	d86d      	bhi.n	800f280 <UART_SetConfig+0x628>
 800f1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800f1ac <UART_SetConfig+0x554>)
 800f1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1aa:	bf00      	nop
 800f1ac:	0800f251 	.word	0x0800f251
 800f1b0:	0800f281 	.word	0x0800f281
 800f1b4:	0800f281 	.word	0x0800f281
 800f1b8:	0800f281 	.word	0x0800f281
 800f1bc:	0800f281 	.word	0x0800f281
 800f1c0:	0800f281 	.word	0x0800f281
 800f1c4:	0800f281 	.word	0x0800f281
 800f1c8:	0800f281 	.word	0x0800f281
 800f1cc:	0800f259 	.word	0x0800f259
 800f1d0:	0800f281 	.word	0x0800f281
 800f1d4:	0800f281 	.word	0x0800f281
 800f1d8:	0800f281 	.word	0x0800f281
 800f1dc:	0800f281 	.word	0x0800f281
 800f1e0:	0800f281 	.word	0x0800f281
 800f1e4:	0800f281 	.word	0x0800f281
 800f1e8:	0800f281 	.word	0x0800f281
 800f1ec:	0800f261 	.word	0x0800f261
 800f1f0:	0800f281 	.word	0x0800f281
 800f1f4:	0800f281 	.word	0x0800f281
 800f1f8:	0800f281 	.word	0x0800f281
 800f1fc:	0800f281 	.word	0x0800f281
 800f200:	0800f281 	.word	0x0800f281
 800f204:	0800f281 	.word	0x0800f281
 800f208:	0800f281 	.word	0x0800f281
 800f20c:	0800f269 	.word	0x0800f269
 800f210:	0800f281 	.word	0x0800f281
 800f214:	0800f281 	.word	0x0800f281
 800f218:	0800f281 	.word	0x0800f281
 800f21c:	0800f281 	.word	0x0800f281
 800f220:	0800f281 	.word	0x0800f281
 800f224:	0800f281 	.word	0x0800f281
 800f228:	0800f281 	.word	0x0800f281
 800f22c:	0800f271 	.word	0x0800f271
 800f230:	0800f281 	.word	0x0800f281
 800f234:	0800f281 	.word	0x0800f281
 800f238:	0800f281 	.word	0x0800f281
 800f23c:	0800f281 	.word	0x0800f281
 800f240:	0800f281 	.word	0x0800f281
 800f244:	0800f281 	.word	0x0800f281
 800f248:	0800f281 	.word	0x0800f281
 800f24c:	0800f279 	.word	0x0800f279
 800f250:	2301      	movs	r3, #1
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f256:	e0d6      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f258:	2304      	movs	r3, #4
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f25e:	e0d2      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f260:	2308      	movs	r3, #8
 800f262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f266:	e0ce      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f268:	2310      	movs	r3, #16
 800f26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f26e:	e0ca      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f270:	2320      	movs	r3, #32
 800f272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f276:	e0c6      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f278:	2340      	movs	r3, #64	@ 0x40
 800f27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f27e:	e0c2      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f280:	2380      	movs	r3, #128	@ 0x80
 800f282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f286:	e0be      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f288:	40011400 	.word	0x40011400
 800f28c:	58024400 	.word	0x58024400
 800f290:	40007800 	.word	0x40007800
 800f294:	40007c00 	.word	0x40007c00
 800f298:	40011800 	.word	0x40011800
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4aad      	ldr	r2, [pc, #692]	@ (800f558 <UART_SetConfig+0x900>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d176      	bne.n	800f394 <UART_SetConfig+0x73c>
 800f2a6:	4bad      	ldr	r3, [pc, #692]	@ (800f55c <UART_SetConfig+0x904>)
 800f2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f2ae:	2b28      	cmp	r3, #40	@ 0x28
 800f2b0:	d86c      	bhi.n	800f38c <UART_SetConfig+0x734>
 800f2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2b8 <UART_SetConfig+0x660>)
 800f2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b8:	0800f35d 	.word	0x0800f35d
 800f2bc:	0800f38d 	.word	0x0800f38d
 800f2c0:	0800f38d 	.word	0x0800f38d
 800f2c4:	0800f38d 	.word	0x0800f38d
 800f2c8:	0800f38d 	.word	0x0800f38d
 800f2cc:	0800f38d 	.word	0x0800f38d
 800f2d0:	0800f38d 	.word	0x0800f38d
 800f2d4:	0800f38d 	.word	0x0800f38d
 800f2d8:	0800f365 	.word	0x0800f365
 800f2dc:	0800f38d 	.word	0x0800f38d
 800f2e0:	0800f38d 	.word	0x0800f38d
 800f2e4:	0800f38d 	.word	0x0800f38d
 800f2e8:	0800f38d 	.word	0x0800f38d
 800f2ec:	0800f38d 	.word	0x0800f38d
 800f2f0:	0800f38d 	.word	0x0800f38d
 800f2f4:	0800f38d 	.word	0x0800f38d
 800f2f8:	0800f36d 	.word	0x0800f36d
 800f2fc:	0800f38d 	.word	0x0800f38d
 800f300:	0800f38d 	.word	0x0800f38d
 800f304:	0800f38d 	.word	0x0800f38d
 800f308:	0800f38d 	.word	0x0800f38d
 800f30c:	0800f38d 	.word	0x0800f38d
 800f310:	0800f38d 	.word	0x0800f38d
 800f314:	0800f38d 	.word	0x0800f38d
 800f318:	0800f375 	.word	0x0800f375
 800f31c:	0800f38d 	.word	0x0800f38d
 800f320:	0800f38d 	.word	0x0800f38d
 800f324:	0800f38d 	.word	0x0800f38d
 800f328:	0800f38d 	.word	0x0800f38d
 800f32c:	0800f38d 	.word	0x0800f38d
 800f330:	0800f38d 	.word	0x0800f38d
 800f334:	0800f38d 	.word	0x0800f38d
 800f338:	0800f37d 	.word	0x0800f37d
 800f33c:	0800f38d 	.word	0x0800f38d
 800f340:	0800f38d 	.word	0x0800f38d
 800f344:	0800f38d 	.word	0x0800f38d
 800f348:	0800f38d 	.word	0x0800f38d
 800f34c:	0800f38d 	.word	0x0800f38d
 800f350:	0800f38d 	.word	0x0800f38d
 800f354:	0800f38d 	.word	0x0800f38d
 800f358:	0800f385 	.word	0x0800f385
 800f35c:	2301      	movs	r3, #1
 800f35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f362:	e050      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f364:	2304      	movs	r3, #4
 800f366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f36a:	e04c      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f36c:	2308      	movs	r3, #8
 800f36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f372:	e048      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f374:	2310      	movs	r3, #16
 800f376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f37a:	e044      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f37c:	2320      	movs	r3, #32
 800f37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f382:	e040      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f384:	2340      	movs	r3, #64	@ 0x40
 800f386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f38a:	e03c      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f38c:	2380      	movs	r3, #128	@ 0x80
 800f38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f392:	e038      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a71      	ldr	r2, [pc, #452]	@ (800f560 <UART_SetConfig+0x908>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d130      	bne.n	800f400 <UART_SetConfig+0x7a8>
 800f39e:	4b6f      	ldr	r3, [pc, #444]	@ (800f55c <UART_SetConfig+0x904>)
 800f3a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3a2:	f003 0307 	and.w	r3, r3, #7
 800f3a6:	2b05      	cmp	r3, #5
 800f3a8:	d826      	bhi.n	800f3f8 <UART_SetConfig+0x7a0>
 800f3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f3b0 <UART_SetConfig+0x758>)
 800f3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b0:	0800f3c9 	.word	0x0800f3c9
 800f3b4:	0800f3d1 	.word	0x0800f3d1
 800f3b8:	0800f3d9 	.word	0x0800f3d9
 800f3bc:	0800f3e1 	.word	0x0800f3e1
 800f3c0:	0800f3e9 	.word	0x0800f3e9
 800f3c4:	0800f3f1 	.word	0x0800f3f1
 800f3c8:	2302      	movs	r3, #2
 800f3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ce:	e01a      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f3d0:	2304      	movs	r3, #4
 800f3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3d6:	e016      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f3d8:	2308      	movs	r3, #8
 800f3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3de:	e012      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f3e0:	2310      	movs	r3, #16
 800f3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3e6:	e00e      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f3e8:	2320      	movs	r3, #32
 800f3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ee:	e00a      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f3f0:	2340      	movs	r3, #64	@ 0x40
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f6:	e006      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f3f8:	2380      	movs	r3, #128	@ 0x80
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fe:	e002      	b.n	800f406 <UART_SetConfig+0x7ae>
 800f400:	2380      	movs	r3, #128	@ 0x80
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a55      	ldr	r2, [pc, #340]	@ (800f560 <UART_SetConfig+0x908>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	f040 80f8 	bne.w	800f602 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f412:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f416:	2b20      	cmp	r3, #32
 800f418:	dc46      	bgt.n	800f4a8 <UART_SetConfig+0x850>
 800f41a:	2b02      	cmp	r3, #2
 800f41c:	db75      	blt.n	800f50a <UART_SetConfig+0x8b2>
 800f41e:	3b02      	subs	r3, #2
 800f420:	2b1e      	cmp	r3, #30
 800f422:	d872      	bhi.n	800f50a <UART_SetConfig+0x8b2>
 800f424:	a201      	add	r2, pc, #4	@ (adr r2, 800f42c <UART_SetConfig+0x7d4>)
 800f426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42a:	bf00      	nop
 800f42c:	0800f4af 	.word	0x0800f4af
 800f430:	0800f50b 	.word	0x0800f50b
 800f434:	0800f4b7 	.word	0x0800f4b7
 800f438:	0800f50b 	.word	0x0800f50b
 800f43c:	0800f50b 	.word	0x0800f50b
 800f440:	0800f50b 	.word	0x0800f50b
 800f444:	0800f4c7 	.word	0x0800f4c7
 800f448:	0800f50b 	.word	0x0800f50b
 800f44c:	0800f50b 	.word	0x0800f50b
 800f450:	0800f50b 	.word	0x0800f50b
 800f454:	0800f50b 	.word	0x0800f50b
 800f458:	0800f50b 	.word	0x0800f50b
 800f45c:	0800f50b 	.word	0x0800f50b
 800f460:	0800f50b 	.word	0x0800f50b
 800f464:	0800f4d7 	.word	0x0800f4d7
 800f468:	0800f50b 	.word	0x0800f50b
 800f46c:	0800f50b 	.word	0x0800f50b
 800f470:	0800f50b 	.word	0x0800f50b
 800f474:	0800f50b 	.word	0x0800f50b
 800f478:	0800f50b 	.word	0x0800f50b
 800f47c:	0800f50b 	.word	0x0800f50b
 800f480:	0800f50b 	.word	0x0800f50b
 800f484:	0800f50b 	.word	0x0800f50b
 800f488:	0800f50b 	.word	0x0800f50b
 800f48c:	0800f50b 	.word	0x0800f50b
 800f490:	0800f50b 	.word	0x0800f50b
 800f494:	0800f50b 	.word	0x0800f50b
 800f498:	0800f50b 	.word	0x0800f50b
 800f49c:	0800f50b 	.word	0x0800f50b
 800f4a0:	0800f50b 	.word	0x0800f50b
 800f4a4:	0800f4fd 	.word	0x0800f4fd
 800f4a8:	2b40      	cmp	r3, #64	@ 0x40
 800f4aa:	d02a      	beq.n	800f502 <UART_SetConfig+0x8aa>
 800f4ac:	e02d      	b.n	800f50a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f4ae:	f7fc f9df 	bl	800b870 <HAL_RCCEx_GetD3PCLK1Freq>
 800f4b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f4b4:	e02f      	b.n	800f516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fc f9ee 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4c4:	e027      	b.n	800f516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4c6:	f107 0318 	add.w	r3, r7, #24
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fc fb3a 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4d4:	e01f      	b.n	800f516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4d6:	4b21      	ldr	r3, [pc, #132]	@ (800f55c <UART_SetConfig+0x904>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f003 0320 	and.w	r3, r3, #32
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4e2:	4b1e      	ldr	r3, [pc, #120]	@ (800f55c <UART_SetConfig+0x904>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	08db      	lsrs	r3, r3, #3
 800f4e8:	f003 0303 	and.w	r3, r3, #3
 800f4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800f564 <UART_SetConfig+0x90c>)
 800f4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4f4:	e00f      	b.n	800f516 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f4f6:	4b1b      	ldr	r3, [pc, #108]	@ (800f564 <UART_SetConfig+0x90c>)
 800f4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4fa:	e00c      	b.n	800f516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4fc:	4b1a      	ldr	r3, [pc, #104]	@ (800f568 <UART_SetConfig+0x910>)
 800f4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f500:	e009      	b.n	800f516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f508:	e005      	b.n	800f516 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f50e:	2301      	movs	r3, #1
 800f510:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f514:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 81ee 	beq.w	800f8fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f522:	4a12      	ldr	r2, [pc, #72]	@ (800f56c <UART_SetConfig+0x914>)
 800f524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f528:	461a      	mov	r2, r3
 800f52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f52c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f530:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	685a      	ldr	r2, [r3, #4]
 800f536:	4613      	mov	r3, r2
 800f538:	005b      	lsls	r3, r3, #1
 800f53a:	4413      	add	r3, r2
 800f53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f53e:	429a      	cmp	r2, r3
 800f540:	d305      	bcc.n	800f54e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d910      	bls.n	800f570 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f554:	e1d1      	b.n	800f8fa <UART_SetConfig+0xca2>
 800f556:	bf00      	nop
 800f558:	40011c00 	.word	0x40011c00
 800f55c:	58024400 	.word	0x58024400
 800f560:	58000c00 	.word	0x58000c00
 800f564:	03d09000 	.word	0x03d09000
 800f568:	003d0900 	.word	0x003d0900
 800f56c:	08011050 	.word	0x08011050
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f572:	2200      	movs	r2, #0
 800f574:	60bb      	str	r3, [r7, #8]
 800f576:	60fa      	str	r2, [r7, #12]
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f57c:	4ac0      	ldr	r2, [pc, #768]	@ (800f880 <UART_SetConfig+0xc28>)
 800f57e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f582:	b29b      	uxth	r3, r3
 800f584:	2200      	movs	r2, #0
 800f586:	603b      	str	r3, [r7, #0]
 800f588:	607a      	str	r2, [r7, #4]
 800f58a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f58e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f592:	f7f0 febb 	bl	800030c <__aeabi_uldivmod>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	4610      	mov	r0, r2
 800f59c:	4619      	mov	r1, r3
 800f59e:	f04f 0200 	mov.w	r2, #0
 800f5a2:	f04f 0300 	mov.w	r3, #0
 800f5a6:	020b      	lsls	r3, r1, #8
 800f5a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f5ac:	0202      	lsls	r2, r0, #8
 800f5ae:	6979      	ldr	r1, [r7, #20]
 800f5b0:	6849      	ldr	r1, [r1, #4]
 800f5b2:	0849      	lsrs	r1, r1, #1
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	460c      	mov	r4, r1
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	eb12 0804 	adds.w	r8, r2, r4
 800f5be:	eb43 0905 	adc.w	r9, r3, r5
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	469a      	mov	sl, r3
 800f5ca:	4693      	mov	fp, r2
 800f5cc:	4652      	mov	r2, sl
 800f5ce:	465b      	mov	r3, fp
 800f5d0:	4640      	mov	r0, r8
 800f5d2:	4649      	mov	r1, r9
 800f5d4:	f7f0 fe9a 	bl	800030c <__aeabi_uldivmod>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	4613      	mov	r3, r2
 800f5de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f5e6:	d308      	bcc.n	800f5fa <UART_SetConfig+0x9a2>
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5ee:	d204      	bcs.n	800f5fa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5f6:	60da      	str	r2, [r3, #12]
 800f5f8:	e17f      	b.n	800f8fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f600:	e17b      	b.n	800f8fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f60a:	f040 80bd 	bne.w	800f788 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f60e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f612:	2b20      	cmp	r3, #32
 800f614:	dc48      	bgt.n	800f6a8 <UART_SetConfig+0xa50>
 800f616:	2b00      	cmp	r3, #0
 800f618:	db7b      	blt.n	800f712 <UART_SetConfig+0xaba>
 800f61a:	2b20      	cmp	r3, #32
 800f61c:	d879      	bhi.n	800f712 <UART_SetConfig+0xaba>
 800f61e:	a201      	add	r2, pc, #4	@ (adr r2, 800f624 <UART_SetConfig+0x9cc>)
 800f620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f624:	0800f6af 	.word	0x0800f6af
 800f628:	0800f6b7 	.word	0x0800f6b7
 800f62c:	0800f713 	.word	0x0800f713
 800f630:	0800f713 	.word	0x0800f713
 800f634:	0800f6bf 	.word	0x0800f6bf
 800f638:	0800f713 	.word	0x0800f713
 800f63c:	0800f713 	.word	0x0800f713
 800f640:	0800f713 	.word	0x0800f713
 800f644:	0800f6cf 	.word	0x0800f6cf
 800f648:	0800f713 	.word	0x0800f713
 800f64c:	0800f713 	.word	0x0800f713
 800f650:	0800f713 	.word	0x0800f713
 800f654:	0800f713 	.word	0x0800f713
 800f658:	0800f713 	.word	0x0800f713
 800f65c:	0800f713 	.word	0x0800f713
 800f660:	0800f713 	.word	0x0800f713
 800f664:	0800f6df 	.word	0x0800f6df
 800f668:	0800f713 	.word	0x0800f713
 800f66c:	0800f713 	.word	0x0800f713
 800f670:	0800f713 	.word	0x0800f713
 800f674:	0800f713 	.word	0x0800f713
 800f678:	0800f713 	.word	0x0800f713
 800f67c:	0800f713 	.word	0x0800f713
 800f680:	0800f713 	.word	0x0800f713
 800f684:	0800f713 	.word	0x0800f713
 800f688:	0800f713 	.word	0x0800f713
 800f68c:	0800f713 	.word	0x0800f713
 800f690:	0800f713 	.word	0x0800f713
 800f694:	0800f713 	.word	0x0800f713
 800f698:	0800f713 	.word	0x0800f713
 800f69c:	0800f713 	.word	0x0800f713
 800f6a0:	0800f713 	.word	0x0800f713
 800f6a4:	0800f705 	.word	0x0800f705
 800f6a8:	2b40      	cmp	r3, #64	@ 0x40
 800f6aa:	d02e      	beq.n	800f70a <UART_SetConfig+0xab2>
 800f6ac:	e031      	b.n	800f712 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6ae:	f7fa fa41 	bl	8009b34 <HAL_RCC_GetPCLK1Freq>
 800f6b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6b4:	e033      	b.n	800f71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6b6:	f7fa fa53 	bl	8009b60 <HAL_RCC_GetPCLK2Freq>
 800f6ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6bc:	e02f      	b.n	800f71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fc f8ea 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6cc:	e027      	b.n	800f71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6ce:	f107 0318 	add.w	r3, r7, #24
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fc fa36 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6dc:	e01f      	b.n	800f71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6de:	4b69      	ldr	r3, [pc, #420]	@ (800f884 <UART_SetConfig+0xc2c>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f003 0320 	and.w	r3, r3, #32
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d009      	beq.n	800f6fe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6ea:	4b66      	ldr	r3, [pc, #408]	@ (800f884 <UART_SetConfig+0xc2c>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	08db      	lsrs	r3, r3, #3
 800f6f0:	f003 0303 	and.w	r3, r3, #3
 800f6f4:	4a64      	ldr	r2, [pc, #400]	@ (800f888 <UART_SetConfig+0xc30>)
 800f6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6fc:	e00f      	b.n	800f71e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f6fe:	4b62      	ldr	r3, [pc, #392]	@ (800f888 <UART_SetConfig+0xc30>)
 800f700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f702:	e00c      	b.n	800f71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f704:	4b61      	ldr	r3, [pc, #388]	@ (800f88c <UART_SetConfig+0xc34>)
 800f706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f708:	e009      	b.n	800f71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f70a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f710:	e005      	b.n	800f71e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f712:	2300      	movs	r3, #0
 800f714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f716:	2301      	movs	r3, #1
 800f718:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f71c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 80ea 	beq.w	800f8fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f72a:	4a55      	ldr	r2, [pc, #340]	@ (800f880 <UART_SetConfig+0xc28>)
 800f72c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f730:	461a      	mov	r2, r3
 800f732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f734:	fbb3 f3f2 	udiv	r3, r3, r2
 800f738:	005a      	lsls	r2, r3, #1
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	085b      	lsrs	r3, r3, #1
 800f740:	441a      	add	r2, r3
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	fbb2 f3f3 	udiv	r3, r2, r3
 800f74a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74e:	2b0f      	cmp	r3, #15
 800f750:	d916      	bls.n	800f780 <UART_SetConfig+0xb28>
 800f752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f758:	d212      	bcs.n	800f780 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	f023 030f 	bic.w	r3, r3, #15
 800f762:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f766:	085b      	lsrs	r3, r3, #1
 800f768:	b29b      	uxth	r3, r3
 800f76a:	f003 0307 	and.w	r3, r3, #7
 800f76e:	b29a      	uxth	r2, r3
 800f770:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f772:	4313      	orrs	r3, r2
 800f774:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f77c:	60da      	str	r2, [r3, #12]
 800f77e:	e0bc      	b.n	800f8fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f780:	2301      	movs	r3, #1
 800f782:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f786:	e0b8      	b.n	800f8fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f788:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f78c:	2b20      	cmp	r3, #32
 800f78e:	dc4b      	bgt.n	800f828 <UART_SetConfig+0xbd0>
 800f790:	2b00      	cmp	r3, #0
 800f792:	f2c0 8087 	blt.w	800f8a4 <UART_SetConfig+0xc4c>
 800f796:	2b20      	cmp	r3, #32
 800f798:	f200 8084 	bhi.w	800f8a4 <UART_SetConfig+0xc4c>
 800f79c:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a4 <UART_SetConfig+0xb4c>)
 800f79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a2:	bf00      	nop
 800f7a4:	0800f82f 	.word	0x0800f82f
 800f7a8:	0800f837 	.word	0x0800f837
 800f7ac:	0800f8a5 	.word	0x0800f8a5
 800f7b0:	0800f8a5 	.word	0x0800f8a5
 800f7b4:	0800f83f 	.word	0x0800f83f
 800f7b8:	0800f8a5 	.word	0x0800f8a5
 800f7bc:	0800f8a5 	.word	0x0800f8a5
 800f7c0:	0800f8a5 	.word	0x0800f8a5
 800f7c4:	0800f84f 	.word	0x0800f84f
 800f7c8:	0800f8a5 	.word	0x0800f8a5
 800f7cc:	0800f8a5 	.word	0x0800f8a5
 800f7d0:	0800f8a5 	.word	0x0800f8a5
 800f7d4:	0800f8a5 	.word	0x0800f8a5
 800f7d8:	0800f8a5 	.word	0x0800f8a5
 800f7dc:	0800f8a5 	.word	0x0800f8a5
 800f7e0:	0800f8a5 	.word	0x0800f8a5
 800f7e4:	0800f85f 	.word	0x0800f85f
 800f7e8:	0800f8a5 	.word	0x0800f8a5
 800f7ec:	0800f8a5 	.word	0x0800f8a5
 800f7f0:	0800f8a5 	.word	0x0800f8a5
 800f7f4:	0800f8a5 	.word	0x0800f8a5
 800f7f8:	0800f8a5 	.word	0x0800f8a5
 800f7fc:	0800f8a5 	.word	0x0800f8a5
 800f800:	0800f8a5 	.word	0x0800f8a5
 800f804:	0800f8a5 	.word	0x0800f8a5
 800f808:	0800f8a5 	.word	0x0800f8a5
 800f80c:	0800f8a5 	.word	0x0800f8a5
 800f810:	0800f8a5 	.word	0x0800f8a5
 800f814:	0800f8a5 	.word	0x0800f8a5
 800f818:	0800f8a5 	.word	0x0800f8a5
 800f81c:	0800f8a5 	.word	0x0800f8a5
 800f820:	0800f8a5 	.word	0x0800f8a5
 800f824:	0800f897 	.word	0x0800f897
 800f828:	2b40      	cmp	r3, #64	@ 0x40
 800f82a:	d037      	beq.n	800f89c <UART_SetConfig+0xc44>
 800f82c:	e03a      	b.n	800f8a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f82e:	f7fa f981 	bl	8009b34 <HAL_RCC_GetPCLK1Freq>
 800f832:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f834:	e03c      	b.n	800f8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f836:	f7fa f993 	bl	8009b60 <HAL_RCC_GetPCLK2Freq>
 800f83a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f83c:	e038      	b.n	800f8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f83e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f842:	4618      	mov	r0, r3
 800f844:	f7fc f82a 	bl	800b89c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f84c:	e030      	b.n	800f8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f84e:	f107 0318 	add.w	r3, r7, #24
 800f852:	4618      	mov	r0, r3
 800f854:	f7fc f976 	bl	800bb44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f85c:	e028      	b.n	800f8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f85e:	4b09      	ldr	r3, [pc, #36]	@ (800f884 <UART_SetConfig+0xc2c>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f003 0320 	and.w	r3, r3, #32
 800f866:	2b00      	cmp	r3, #0
 800f868:	d012      	beq.n	800f890 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f86a:	4b06      	ldr	r3, [pc, #24]	@ (800f884 <UART_SetConfig+0xc2c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	08db      	lsrs	r3, r3, #3
 800f870:	f003 0303 	and.w	r3, r3, #3
 800f874:	4a04      	ldr	r2, [pc, #16]	@ (800f888 <UART_SetConfig+0xc30>)
 800f876:	fa22 f303 	lsr.w	r3, r2, r3
 800f87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f87c:	e018      	b.n	800f8b0 <UART_SetConfig+0xc58>
 800f87e:	bf00      	nop
 800f880:	08011050 	.word	0x08011050
 800f884:	58024400 	.word	0x58024400
 800f888:	03d09000 	.word	0x03d09000
 800f88c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f890:	4b24      	ldr	r3, [pc, #144]	@ (800f924 <UART_SetConfig+0xccc>)
 800f892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f894:	e00c      	b.n	800f8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f896:	4b24      	ldr	r3, [pc, #144]	@ (800f928 <UART_SetConfig+0xcd0>)
 800f898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f89a:	e009      	b.n	800f8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f89c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8a2:	e005      	b.n	800f8b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f8ae:	bf00      	nop
    }

    if (pclk != 0U)
 800f8b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d021      	beq.n	800f8fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8ba:	4a1c      	ldr	r2, [pc, #112]	@ (800f92c <UART_SetConfig+0xcd4>)
 800f8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	085b      	lsrs	r3, r3, #1
 800f8ce:	441a      	add	r2, r3
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8dc:	2b0f      	cmp	r3, #15
 800f8de:	d909      	bls.n	800f8f4 <UART_SetConfig+0xc9c>
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8e6:	d205      	bcs.n	800f8f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ea:	b29a      	uxth	r2, r3
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	60da      	str	r2, [r3, #12]
 800f8f2:	e002      	b.n	800f8fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	2201      	movs	r2, #1
 800f906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	2200      	movs	r2, #0
 800f90e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	2200      	movs	r2, #0
 800f914:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f916:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3748      	adds	r7, #72	@ 0x48
 800f91e:	46bd      	mov	sp, r7
 800f920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f924:	03d09000 	.word	0x03d09000
 800f928:	003d0900 	.word	0x003d0900
 800f92c:	08011050 	.word	0x08011050

0800f930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f93c:	f003 0308 	and.w	r3, r3, #8
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00a      	beq.n	800f95a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	430a      	orrs	r2, r1
 800f958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f95e:	f003 0301 	and.w	r3, r3, #1
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00a      	beq.n	800f97c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	430a      	orrs	r2, r1
 800f97a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f980:	f003 0302 	and.w	r3, r3, #2
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00a      	beq.n	800f99e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	430a      	orrs	r2, r1
 800f99c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9a2:	f003 0304 	and.w	r3, r3, #4
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00a      	beq.n	800f9c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	430a      	orrs	r2, r1
 800f9be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9c4:	f003 0310 	and.w	r3, r3, #16
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00a      	beq.n	800f9e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	689b      	ldr	r3, [r3, #8]
 800f9d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	430a      	orrs	r2, r1
 800f9e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9e6:	f003 0320 	and.w	r3, r3, #32
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00a      	beq.n	800fa04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	430a      	orrs	r2, r1
 800fa02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d01a      	beq.n	800fa46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	430a      	orrs	r2, r1
 800fa24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa2e:	d10a      	bne.n	800fa46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	430a      	orrs	r2, r1
 800fa44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00a      	beq.n	800fa68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	430a      	orrs	r2, r1
 800fa66:	605a      	str	r2, [r3, #4]
  }
}
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b098      	sub	sp, #96	@ 0x60
 800fa78:	af02      	add	r7, sp, #8
 800fa7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa84:	f7f3 feb6 	bl	80037f4 <HAL_GetTick>
 800fa88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f003 0308 	and.w	r3, r3, #8
 800fa94:	2b08      	cmp	r3, #8
 800fa96:	d12f      	bne.n	800faf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faa0:	2200      	movs	r2, #0
 800faa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f88e 	bl	800fbc8 <UART_WaitOnFlagUntilTimeout>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d022      	beq.n	800faf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faba:	e853 3f00 	ldrex	r3, [r3]
 800fabe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fac6:	653b      	str	r3, [r7, #80]	@ 0x50
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	461a      	mov	r2, r3
 800face:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fad0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fad2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fad8:	e841 2300 	strex	r3, r2, [r1]
 800fadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1e6      	bne.n	800fab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2220      	movs	r2, #32
 800fae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800faf4:	2303      	movs	r3, #3
 800faf6:	e063      	b.n	800fbc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f003 0304 	and.w	r3, r3, #4
 800fb02:	2b04      	cmp	r3, #4
 800fb04:	d149      	bne.n	800fb9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 f857 	bl	800fbc8 <UART_WaitOnFlagUntilTimeout>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d03c      	beq.n	800fb9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb28:	e853 3f00 	ldrex	r3, [r3]
 800fb2c:	623b      	str	r3, [r7, #32]
   return(result);
 800fb2e:	6a3b      	ldr	r3, [r7, #32]
 800fb30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb46:	e841 2300 	strex	r3, r2, [r1]
 800fb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1e6      	bne.n	800fb20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3308      	adds	r3, #8
 800fb58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	e853 3f00 	ldrex	r3, [r3]
 800fb60:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f023 0301 	bic.w	r3, r3, #1
 800fb68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3308      	adds	r3, #8
 800fb70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb72:	61fa      	str	r2, [r7, #28]
 800fb74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb76:	69b9      	ldr	r1, [r7, #24]
 800fb78:	69fa      	ldr	r2, [r7, #28]
 800fb7a:	e841 2300 	strex	r3, r2, [r1]
 800fb7e:	617b      	str	r3, [r7, #20]
   return(result);
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1e5      	bne.n	800fb52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2220      	movs	r2, #32
 800fb8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb96:	2303      	movs	r3, #3
 800fb98:	e012      	b.n	800fbc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2220      	movs	r2, #32
 800fb9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2220      	movs	r2, #32
 800fba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fbbe:	2300      	movs	r3, #0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3758      	adds	r7, #88	@ 0x58
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	603b      	str	r3, [r7, #0]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbd8:	e04f      	b.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe0:	d04b      	beq.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbe2:	f7f3 fe07 	bl	80037f4 <HAL_GetTick>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	69ba      	ldr	r2, [r7, #24]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d302      	bcc.n	800fbf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d101      	bne.n	800fbfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fbf8:	2303      	movs	r3, #3
 800fbfa:	e04e      	b.n	800fc9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f003 0304 	and.w	r3, r3, #4
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d037      	beq.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	2b80      	cmp	r3, #128	@ 0x80
 800fc0e:	d034      	beq.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	2b40      	cmp	r3, #64	@ 0x40
 800fc14:	d031      	beq.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	69db      	ldr	r3, [r3, #28]
 800fc1c:	f003 0308 	and.w	r3, r3, #8
 800fc20:	2b08      	cmp	r3, #8
 800fc22:	d110      	bne.n	800fc46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2208      	movs	r2, #8
 800fc2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 f95b 	bl	800fee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2208      	movs	r2, #8
 800fc36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fc42:	2301      	movs	r3, #1
 800fc44:	e029      	b.n	800fc9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	69db      	ldr	r3, [r3, #28]
 800fc4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc54:	d111      	bne.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f000 f941 	bl	800fee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2220      	movs	r2, #32
 800fc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fc76:	2303      	movs	r3, #3
 800fc78:	e00f      	b.n	800fc9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	69da      	ldr	r2, [r3, #28]
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	4013      	ands	r3, r2
 800fc84:	68ba      	ldr	r2, [r7, #8]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	bf0c      	ite	eq
 800fc8a:	2301      	moveq	r3, #1
 800fc8c:	2300      	movne	r3, #0
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	461a      	mov	r2, r3
 800fc92:	79fb      	ldrb	r3, [r7, #7]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d0a0      	beq.n	800fbda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b0a3      	sub	sp, #140	@ 0x8c
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	88fa      	ldrh	r2, [r7, #6]
 800fcbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	88fa      	ldrh	r2, [r7, #6]
 800fcc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2200      	movs	r2, #0
 800fccc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fcd6:	d10e      	bne.n	800fcf6 <UART_Start_Receive_IT+0x52>
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d105      	bne.n	800fcec <UART_Start_Receive_IT+0x48>
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800fce6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fcea:	e02d      	b.n	800fd48 <UART_Start_Receive_IT+0xa4>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	22ff      	movs	r2, #255	@ 0xff
 800fcf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fcf4:	e028      	b.n	800fd48 <UART_Start_Receive_IT+0xa4>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10d      	bne.n	800fd1a <UART_Start_Receive_IT+0x76>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d104      	bne.n	800fd10 <UART_Start_Receive_IT+0x6c>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	22ff      	movs	r2, #255	@ 0xff
 800fd0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd0e:	e01b      	b.n	800fd48 <UART_Start_Receive_IT+0xa4>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	227f      	movs	r2, #127	@ 0x7f
 800fd14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd18:	e016      	b.n	800fd48 <UART_Start_Receive_IT+0xa4>
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd22:	d10d      	bne.n	800fd40 <UART_Start_Receive_IT+0x9c>
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d104      	bne.n	800fd36 <UART_Start_Receive_IT+0x92>
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	227f      	movs	r2, #127	@ 0x7f
 800fd30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd34:	e008      	b.n	800fd48 <UART_Start_Receive_IT+0xa4>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	223f      	movs	r2, #63	@ 0x3f
 800fd3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd3e:	e003      	b.n	800fd48 <UART_Start_Receive_IT+0xa4>
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2222      	movs	r2, #34	@ 0x22
 800fd54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	3308      	adds	r3, #8
 800fd5e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd62:	e853 3f00 	ldrex	r3, [r3]
 800fd66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800fd68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fd6a:	f043 0301 	orr.w	r3, r3, #1
 800fd6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3308      	adds	r3, #8
 800fd78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fd7c:	673a      	str	r2, [r7, #112]	@ 0x70
 800fd7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd80:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fd82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fd84:	e841 2300 	strex	r3, r2, [r1]
 800fd88:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800fd8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d1e3      	bne.n	800fd58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd98:	d14f      	bne.n	800fe3a <UART_Start_Receive_IT+0x196>
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fda0:	88fa      	ldrh	r2, [r7, #6]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d349      	bcc.n	800fe3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdae:	d107      	bne.n	800fdc0 <UART_Start_Receive_IT+0x11c>
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	691b      	ldr	r3, [r3, #16]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d103      	bne.n	800fdc0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	4a47      	ldr	r2, [pc, #284]	@ (800fed8 <UART_Start_Receive_IT+0x234>)
 800fdbc:	675a      	str	r2, [r3, #116]	@ 0x74
 800fdbe:	e002      	b.n	800fdc6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4a46      	ldr	r2, [pc, #280]	@ (800fedc <UART_Start_Receive_IT+0x238>)
 800fdc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	691b      	ldr	r3, [r3, #16]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d01a      	beq.n	800fe04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fdd6:	e853 3f00 	ldrex	r3, [r3]
 800fdda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fde2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	461a      	mov	r2, r3
 800fdec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fdf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fdf2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fdf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fdf8:	e841 2300 	strex	r3, r2, [r1]
 800fdfc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800fdfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1e4      	bne.n	800fdce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	3308      	adds	r3, #8
 800fe0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe0e:	e853 3f00 	ldrex	r3, [r3]
 800fe12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3308      	adds	r3, #8
 800fe22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fe24:	64ba      	str	r2, [r7, #72]	@ 0x48
 800fe26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe2c:	e841 2300 	strex	r3, r2, [r1]
 800fe30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800fe32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1e5      	bne.n	800fe04 <UART_Start_Receive_IT+0x160>
 800fe38:	e046      	b.n	800fec8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe42:	d107      	bne.n	800fe54 <UART_Start_Receive_IT+0x1b0>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d103      	bne.n	800fe54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	4a24      	ldr	r2, [pc, #144]	@ (800fee0 <UART_Start_Receive_IT+0x23c>)
 800fe50:	675a      	str	r2, [r3, #116]	@ 0x74
 800fe52:	e002      	b.n	800fe5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	4a23      	ldr	r2, [pc, #140]	@ (800fee4 <UART_Start_Receive_IT+0x240>)
 800fe58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d019      	beq.n	800fe96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6a:	e853 3f00 	ldrex	r3, [r3]
 800fe6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fe70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe72:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800fe76:	677b      	str	r3, [r7, #116]	@ 0x74
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fe80:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe82:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fe86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe88:	e841 2300 	strex	r3, r2, [r1]
 800fe8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800fe8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1e6      	bne.n	800fe62 <UART_Start_Receive_IT+0x1be>
 800fe94:	e018      	b.n	800fec8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	e853 3f00 	ldrex	r3, [r3]
 800fea2:	613b      	str	r3, [r7, #16]
   return(result);
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	f043 0320 	orr.w	r3, r3, #32
 800feaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	461a      	mov	r2, r3
 800feb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800feb4:	623b      	str	r3, [r7, #32]
 800feb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb8:	69f9      	ldr	r1, [r7, #28]
 800feba:	6a3a      	ldr	r2, [r7, #32]
 800febc:	e841 2300 	strex	r3, r2, [r1]
 800fec0:	61bb      	str	r3, [r7, #24]
   return(result);
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1e6      	bne.n	800fe96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	378c      	adds	r7, #140	@ 0x8c
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	08010709 	.word	0x08010709
 800fedc:	080103a9 	.word	0x080103a9
 800fee0:	080101f1 	.word	0x080101f1
 800fee4:	08010039 	.word	0x08010039

0800fee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fee8:	b480      	push	{r7}
 800feea:	b095      	sub	sp, #84	@ 0x54
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fef8:	e853 3f00 	ldrex	r3, [r3]
 800fefc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ff14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff16:	e841 2300 	strex	r3, r2, [r1]
 800ff1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1e6      	bne.n	800fef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	3308      	adds	r3, #8
 800ff28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	e853 3f00 	ldrex	r3, [r3]
 800ff30:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff32:	69fa      	ldr	r2, [r7, #28]
 800ff34:	4b1e      	ldr	r3, [pc, #120]	@ (800ffb0 <UART_EndRxTransfer+0xc8>)
 800ff36:	4013      	ands	r3, r2
 800ff38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	3308      	adds	r3, #8
 800ff40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ff44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff4a:	e841 2300 	strex	r3, r2, [r1]
 800ff4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ff50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1e5      	bne.n	800ff22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d118      	bne.n	800ff90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	e853 3f00 	ldrex	r3, [r3]
 800ff6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	f023 0310 	bic.w	r3, r3, #16
 800ff72:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	461a      	mov	r2, r3
 800ff7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff7c:	61bb      	str	r3, [r7, #24]
 800ff7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff80:	6979      	ldr	r1, [r7, #20]
 800ff82:	69ba      	ldr	r2, [r7, #24]
 800ff84:	e841 2300 	strex	r3, r2, [r1]
 800ff88:	613b      	str	r3, [r7, #16]
   return(result);
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e6      	bne.n	800ff5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2220      	movs	r2, #32
 800ff94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ffa4:	bf00      	nop
 800ffa6:	3754      	adds	r7, #84	@ 0x54
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr
 800ffb0:	effffffe 	.word	0xeffffffe

0800ffb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	f7fe fe36 	bl	800ec44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffd8:	bf00      	nop
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b088      	sub	sp, #32
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	e853 3f00 	ldrex	r3, [r3]
 800fff4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fffc:	61fb      	str	r3, [r7, #28]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	461a      	mov	r2, r3
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	61bb      	str	r3, [r7, #24]
 8010008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801000a:	6979      	ldr	r1, [r7, #20]
 801000c:	69ba      	ldr	r2, [r7, #24]
 801000e:	e841 2300 	strex	r3, r2, [r1]
 8010012:	613b      	str	r3, [r7, #16]
   return(result);
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1e6      	bne.n	800ffe8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2220      	movs	r2, #32
 801001e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7fe fdf7 	bl	800ec1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801002e:	bf00      	nop
 8010030:	3720      	adds	r7, #32
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
	...

08010038 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b09c      	sub	sp, #112	@ 0x70
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010046:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010050:	2b22      	cmp	r3, #34	@ 0x22
 8010052:	f040 80be 	bne.w	80101d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801005c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010064:	b2d9      	uxtb	r1, r3
 8010066:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801006a:	b2da      	uxtb	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010070:	400a      	ands	r2, r1
 8010072:	b2d2      	uxtb	r2, r2
 8010074:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801007a:	1c5a      	adds	r2, r3, #1
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010086:	b29b      	uxth	r3, r3
 8010088:	3b01      	subs	r3, #1
 801008a:	b29a      	uxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010098:	b29b      	uxth	r3, r3
 801009a:	2b00      	cmp	r3, #0
 801009c:	f040 80a1 	bne.w	80101e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100a8:	e853 3f00 	ldrex	r3, [r3]
 80100ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80100ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80100be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80100c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80100c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80100cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e6      	bne.n	80100a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3308      	adds	r3, #8
 80100d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100dc:	e853 3f00 	ldrex	r3, [r3]
 80100e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80100e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100e4:	f023 0301 	bic.w	r3, r3, #1
 80100e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	3308      	adds	r3, #8
 80100f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80100f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80100f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80100f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100fa:	e841 2300 	strex	r3, r2, [r1]
 80100fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010102:	2b00      	cmp	r3, #0
 8010104:	d1e5      	bne.n	80100d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2220      	movs	r2, #32
 801010a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2200      	movs	r2, #0
 8010112:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2200      	movs	r2, #0
 8010118:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4a33      	ldr	r2, [pc, #204]	@ (80101ec <UART_RxISR_8BIT+0x1b4>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d01f      	beq.n	8010164 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801012e:	2b00      	cmp	r3, #0
 8010130:	d018      	beq.n	8010164 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013a:	e853 3f00 	ldrex	r3, [r3]
 801013e:	623b      	str	r3, [r7, #32]
   return(result);
 8010140:	6a3b      	ldr	r3, [r7, #32]
 8010142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010146:	663b      	str	r3, [r7, #96]	@ 0x60
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	461a      	mov	r2, r3
 801014e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010150:	633b      	str	r3, [r7, #48]	@ 0x30
 8010152:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010154:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010158:	e841 2300 	strex	r3, r2, [r1]
 801015c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801015e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1e6      	bne.n	8010132 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010168:	2b01      	cmp	r3, #1
 801016a:	d12e      	bne.n	80101ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	e853 3f00 	ldrex	r3, [r3]
 801017e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f023 0310 	bic.w	r3, r3, #16
 8010186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	461a      	mov	r2, r3
 801018e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010190:	61fb      	str	r3, [r7, #28]
 8010192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010194:	69b9      	ldr	r1, [r7, #24]
 8010196:	69fa      	ldr	r2, [r7, #28]
 8010198:	e841 2300 	strex	r3, r2, [r1]
 801019c:	617b      	str	r3, [r7, #20]
   return(result);
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1e6      	bne.n	8010172 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	69db      	ldr	r3, [r3, #28]
 80101aa:	f003 0310 	and.w	r3, r3, #16
 80101ae:	2b10      	cmp	r3, #16
 80101b0:	d103      	bne.n	80101ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2210      	movs	r2, #16
 80101b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80101c0:	4619      	mov	r1, r3
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7f1 fb36 	bl	8001834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101c8:	e00b      	b.n	80101e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7fe fd30 	bl	800ec30 <HAL_UART_RxCpltCallback>
}
 80101d0:	e007      	b.n	80101e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	699a      	ldr	r2, [r3, #24]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f042 0208 	orr.w	r2, r2, #8
 80101e0:	619a      	str	r2, [r3, #24]
}
 80101e2:	bf00      	nop
 80101e4:	3770      	adds	r7, #112	@ 0x70
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	58000c00 	.word	0x58000c00

080101f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b09c      	sub	sp, #112	@ 0x70
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80101fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010208:	2b22      	cmp	r3, #34	@ 0x22
 801020a:	f040 80be 	bne.w	801038a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010214:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801021c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801021e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8010222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010226:	4013      	ands	r3, r2
 8010228:	b29a      	uxth	r2, r3
 801022a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801022c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010232:	1c9a      	adds	r2, r3, #2
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801023e:	b29b      	uxth	r3, r3
 8010240:	3b01      	subs	r3, #1
 8010242:	b29a      	uxth	r2, r3
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010250:	b29b      	uxth	r3, r3
 8010252:	2b00      	cmp	r3, #0
 8010254:	f040 80a1 	bne.w	801039a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010260:	e853 3f00 	ldrex	r3, [r3]
 8010264:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801026c:	667b      	str	r3, [r7, #100]	@ 0x64
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	461a      	mov	r2, r3
 8010274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010276:	657b      	str	r3, [r7, #84]	@ 0x54
 8010278:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801027a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801027c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801027e:	e841 2300 	strex	r3, r2, [r1]
 8010282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1e6      	bne.n	8010258 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	3308      	adds	r3, #8
 8010290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010294:	e853 3f00 	ldrex	r3, [r3]
 8010298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801029a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801029c:	f023 0301 	bic.w	r3, r3, #1
 80102a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	3308      	adds	r3, #8
 80102a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80102aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80102ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80102b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102b2:	e841 2300 	strex	r3, r2, [r1]
 80102b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80102b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1e5      	bne.n	801028a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2220      	movs	r2, #32
 80102c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4a33      	ldr	r2, [pc, #204]	@ (80103a4 <UART_RxISR_16BIT+0x1b4>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d01f      	beq.n	801031c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d018      	beq.n	801031c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f0:	6a3b      	ldr	r3, [r7, #32]
 80102f2:	e853 3f00 	ldrex	r3, [r3]
 80102f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80102fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	461a      	mov	r2, r3
 8010306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801030a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801030e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010310:	e841 2300 	strex	r3, r2, [r1]
 8010314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1e6      	bne.n	80102ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010320:	2b01      	cmp	r3, #1
 8010322:	d12e      	bne.n	8010382 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	e853 3f00 	ldrex	r3, [r3]
 8010336:	60bb      	str	r3, [r7, #8]
   return(result);
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	f023 0310 	bic.w	r3, r3, #16
 801033e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	461a      	mov	r2, r3
 8010346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010348:	61bb      	str	r3, [r7, #24]
 801034a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801034c:	6979      	ldr	r1, [r7, #20]
 801034e:	69ba      	ldr	r2, [r7, #24]
 8010350:	e841 2300 	strex	r3, r2, [r1]
 8010354:	613b      	str	r3, [r7, #16]
   return(result);
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1e6      	bne.n	801032a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	f003 0310 	and.w	r3, r3, #16
 8010366:	2b10      	cmp	r3, #16
 8010368:	d103      	bne.n	8010372 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2210      	movs	r2, #16
 8010370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010378:	4619      	mov	r1, r3
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7f1 fa5a 	bl	8001834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010380:	e00b      	b.n	801039a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7fe fc54 	bl	800ec30 <HAL_UART_RxCpltCallback>
}
 8010388:	e007      	b.n	801039a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	699a      	ldr	r2, [r3, #24]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f042 0208 	orr.w	r2, r2, #8
 8010398:	619a      	str	r2, [r3, #24]
}
 801039a:	bf00      	nop
 801039c:	3770      	adds	r7, #112	@ 0x70
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	58000c00 	.word	0x58000c00

080103a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b0ac      	sub	sp, #176	@ 0xb0
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	69db      	ldr	r3, [r3, #28]
 80103c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80103de:	2b22      	cmp	r3, #34	@ 0x22
 80103e0:	f040 8180 	bne.w	80106e4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80103ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80103ee:	e123      	b.n	8010638 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80103fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80103fe:	b2d9      	uxtb	r1, r3
 8010400:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010404:	b2da      	uxtb	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801040a:	400a      	ands	r2, r1
 801040c:	b2d2      	uxtb	r2, r2
 801040e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010414:	1c5a      	adds	r2, r3, #1
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010420:	b29b      	uxth	r3, r3
 8010422:	3b01      	subs	r3, #1
 8010424:	b29a      	uxth	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	69db      	ldr	r3, [r3, #28]
 8010432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801043a:	f003 0307 	and.w	r3, r3, #7
 801043e:	2b00      	cmp	r3, #0
 8010440:	d053      	beq.n	80104ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010446:	f003 0301 	and.w	r3, r3, #1
 801044a:	2b00      	cmp	r3, #0
 801044c:	d011      	beq.n	8010472 <UART_RxISR_8BIT_FIFOEN+0xca>
 801044e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010456:	2b00      	cmp	r3, #0
 8010458:	d00b      	beq.n	8010472 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2201      	movs	r2, #1
 8010460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010468:	f043 0201 	orr.w	r2, r3, #1
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010476:	f003 0302 	and.w	r3, r3, #2
 801047a:	2b00      	cmp	r3, #0
 801047c:	d011      	beq.n	80104a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801047e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010482:	f003 0301 	and.w	r3, r3, #1
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00b      	beq.n	80104a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2202      	movs	r2, #2
 8010490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010498:	f043 0204 	orr.w	r2, r3, #4
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80104a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104a6:	f003 0304 	and.w	r3, r3, #4
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d011      	beq.n	80104d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80104ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80104b2:	f003 0301 	and.w	r3, r3, #1
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00b      	beq.n	80104d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2204      	movs	r2, #4
 80104c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104c8:	f043 0202 	orr.w	r2, r3, #2
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d006      	beq.n	80104ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7fe fbb1 	bl	800ec44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f040 80a0 	bne.w	8010638 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010500:	e853 3f00 	ldrex	r3, [r3]
 8010504:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8010506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801050c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	461a      	mov	r2, r3
 8010516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801051a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801051c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801051e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010520:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010522:	e841 2300 	strex	r3, r2, [r1]
 8010526:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8010528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1e4      	bne.n	80104f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	3308      	adds	r3, #8
 8010534:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010538:	e853 3f00 	ldrex	r3, [r3]
 801053c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801053e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010540:	4b6e      	ldr	r3, [pc, #440]	@ (80106fc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010542:	4013      	ands	r3, r2
 8010544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	3308      	adds	r3, #8
 801054e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010552:	66ba      	str	r2, [r7, #104]	@ 0x68
 8010554:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010556:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010558:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010560:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e3      	bne.n	801052e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2220      	movs	r2, #32
 801056a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4a60      	ldr	r2, [pc, #384]	@ (8010700 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d021      	beq.n	80105c8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801058e:	2b00      	cmp	r3, #0
 8010590:	d01a      	beq.n	80105c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801059a:	e853 3f00 	ldrex	r3, [r3]
 801059e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80105a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80105a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	461a      	mov	r2, r3
 80105b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80105b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80105ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80105bc:	e841 2300 	strex	r3, r2, [r1]
 80105c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80105c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d1e4      	bne.n	8010592 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d130      	bne.n	8010632 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105de:	e853 3f00 	ldrex	r3, [r3]
 80105e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80105e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105e6:	f023 0310 	bic.w	r3, r3, #16
 80105ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80105fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80105fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010600:	e841 2300 	strex	r3, r2, [r1]
 8010604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1e4      	bne.n	80105d6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	f003 0310 	and.w	r3, r3, #16
 8010616:	2b10      	cmp	r3, #16
 8010618:	d103      	bne.n	8010622 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2210      	movs	r2, #16
 8010620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010628:	4619      	mov	r1, r3
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7f1 f902 	bl	8001834 <HAL_UARTEx_RxEventCallback>
 8010630:	e002      	b.n	8010638 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7fe fafc 	bl	800ec30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010638:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801063c:	2b00      	cmp	r3, #0
 801063e:	d006      	beq.n	801064e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010644:	f003 0320 	and.w	r3, r3, #32
 8010648:	2b00      	cmp	r3, #0
 801064a:	f47f aed1 	bne.w	80103f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010654:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010658:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801065c:	2b00      	cmp	r3, #0
 801065e:	d049      	beq.n	80106f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010666:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801066a:	429a      	cmp	r2, r3
 801066c:	d242      	bcs.n	80106f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3308      	adds	r3, #8
 8010674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	e853 3f00 	ldrex	r3, [r3]
 801067c:	61fb      	str	r3, [r7, #28]
   return(result);
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	3308      	adds	r3, #8
 801068e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010694:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801069a:	e841 2300 	strex	r3, r2, [r1]
 801069e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d1e3      	bne.n	801066e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a16      	ldr	r2, [pc, #88]	@ (8010704 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80106aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	e853 3f00 	ldrex	r3, [r3]
 80106b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	f043 0320 	orr.w	r3, r3, #32
 80106c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	461a      	mov	r2, r3
 80106ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80106ce:	61bb      	str	r3, [r7, #24]
 80106d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d2:	6979      	ldr	r1, [r7, #20]
 80106d4:	69ba      	ldr	r2, [r7, #24]
 80106d6:	e841 2300 	strex	r3, r2, [r1]
 80106da:	613b      	str	r3, [r7, #16]
   return(result);
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d1e4      	bne.n	80106ac <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106e2:	e007      	b.n	80106f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	699a      	ldr	r2, [r3, #24]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	f042 0208 	orr.w	r2, r2, #8
 80106f2:	619a      	str	r2, [r3, #24]
}
 80106f4:	bf00      	nop
 80106f6:	37b0      	adds	r7, #176	@ 0xb0
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	effffffe 	.word	0xeffffffe
 8010700:	58000c00 	.word	0x58000c00
 8010704:	08010039 	.word	0x08010039

08010708 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b0ae      	sub	sp, #184	@ 0xb8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010716:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	69db      	ldr	r3, [r3, #28]
 8010720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	689b      	ldr	r3, [r3, #8]
 8010734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801073e:	2b22      	cmp	r3, #34	@ 0x22
 8010740:	f040 8184 	bne.w	8010a4c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801074a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801074e:	e127      	b.n	80109a0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010756:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801075e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010762:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8010766:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801076a:	4013      	ands	r3, r2
 801076c:	b29a      	uxth	r2, r3
 801076e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010772:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010778:	1c9a      	adds	r2, r3, #2
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010784:	b29b      	uxth	r3, r3
 8010786:	3b01      	subs	r3, #1
 8010788:	b29a      	uxth	r2, r3
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	69db      	ldr	r3, [r3, #28]
 8010796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801079a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801079e:	f003 0307 	and.w	r3, r3, #7
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d053      	beq.n	801084e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80107a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80107aa:	f003 0301 	and.w	r3, r3, #1
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d011      	beq.n	80107d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80107b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00b      	beq.n	80107d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2201      	movs	r2, #1
 80107c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107cc:	f043 0201 	orr.w	r2, r3, #1
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80107da:	f003 0302 	and.w	r3, r3, #2
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d011      	beq.n	8010806 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80107e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80107e6:	f003 0301 	and.w	r3, r3, #1
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00b      	beq.n	8010806 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2202      	movs	r2, #2
 80107f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107fc:	f043 0204 	orr.w	r2, r3, #4
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801080a:	f003 0304 	and.w	r3, r3, #4
 801080e:	2b00      	cmp	r3, #0
 8010810:	d011      	beq.n	8010836 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010816:	f003 0301 	and.w	r3, r3, #1
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00b      	beq.n	8010836 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2204      	movs	r2, #4
 8010824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801082c:	f043 0202 	orr.w	r2, r3, #2
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801083c:	2b00      	cmp	r3, #0
 801083e:	d006      	beq.n	801084e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7fe f9ff 	bl	800ec44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010854:	b29b      	uxth	r3, r3
 8010856:	2b00      	cmp	r3, #0
 8010858:	f040 80a2 	bne.w	80109a0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010864:	e853 3f00 	ldrex	r3, [r3]
 8010868:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801086a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801086c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	461a      	mov	r2, r3
 801087a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801087e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010882:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010884:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010886:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801088a:	e841 2300 	strex	r3, r2, [r1]
 801088e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010892:	2b00      	cmp	r3, #0
 8010894:	d1e2      	bne.n	801085c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	3308      	adds	r3, #8
 801089c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801089e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108a0:	e853 3f00 	ldrex	r3, [r3]
 80108a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80108a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80108a8:	4b6e      	ldr	r3, [pc, #440]	@ (8010a64 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80108aa:	4013      	ands	r3, r2
 80108ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	3308      	adds	r3, #8
 80108b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80108ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80108bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80108c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80108c2:	e841 2300 	strex	r3, r2, [r1]
 80108c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80108c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d1e3      	bne.n	8010896 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2220      	movs	r2, #32
 80108d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a60      	ldr	r2, [pc, #384]	@ (8010a68 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d021      	beq.n	8010930 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d01a      	beq.n	8010930 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010902:	e853 3f00 	ldrex	r3, [r3]
 8010906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801090a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801090e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	461a      	mov	r2, r3
 8010918:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801091c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801091e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010924:	e841 2300 	strex	r3, r2, [r1]
 8010928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801092a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801092c:	2b00      	cmp	r3, #0
 801092e:	d1e4      	bne.n	80108fa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010934:	2b01      	cmp	r3, #1
 8010936:	d130      	bne.n	801099a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010946:	e853 3f00 	ldrex	r3, [r3]
 801094a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801094c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801094e:	f023 0310 	bic.w	r3, r3, #16
 8010952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	461a      	mov	r2, r3
 801095c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010960:	647b      	str	r3, [r7, #68]	@ 0x44
 8010962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010968:	e841 2300 	strex	r3, r2, [r1]
 801096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801096e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1e4      	bne.n	801093e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	69db      	ldr	r3, [r3, #28]
 801097a:	f003 0310 	and.w	r3, r3, #16
 801097e:	2b10      	cmp	r3, #16
 8010980:	d103      	bne.n	801098a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	2210      	movs	r2, #16
 8010988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010990:	4619      	mov	r1, r3
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7f0 ff4e 	bl	8001834 <HAL_UARTEx_RxEventCallback>
 8010998:	e002      	b.n	80109a0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7fe f948 	bl	800ec30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80109a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d006      	beq.n	80109b6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80109a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80109ac:	f003 0320 	and.w	r3, r3, #32
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f47f aecd 	bne.w	8010750 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80109bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80109c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d049      	beq.n	8010a5c <UART_RxISR_16BIT_FIFOEN+0x354>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80109ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d242      	bcs.n	8010a5c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3308      	adds	r3, #8
 80109dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e0:	e853 3f00 	ldrex	r3, [r3]
 80109e4:	623b      	str	r3, [r7, #32]
   return(result);
 80109e6:	6a3b      	ldr	r3, [r7, #32]
 80109e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80109ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3308      	adds	r3, #8
 80109f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80109fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80109fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a02:	e841 2300 	strex	r3, r2, [r1]
 8010a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d1e3      	bne.n	80109d6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4a16      	ldr	r2, [pc, #88]	@ (8010a6c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010a12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	e853 3f00 	ldrex	r3, [r3]
 8010a20:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f043 0320 	orr.w	r3, r3, #32
 8010a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	461a      	mov	r2, r3
 8010a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010a36:	61fb      	str	r3, [r7, #28]
 8010a38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3a:	69b9      	ldr	r1, [r7, #24]
 8010a3c:	69fa      	ldr	r2, [r7, #28]
 8010a3e:	e841 2300 	strex	r3, r2, [r1]
 8010a42:	617b      	str	r3, [r7, #20]
   return(result);
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d1e4      	bne.n	8010a14 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a4a:	e007      	b.n	8010a5c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	699a      	ldr	r2, [r3, #24]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f042 0208 	orr.w	r2, r2, #8
 8010a5a:	619a      	str	r2, [r3, #24]
}
 8010a5c:	bf00      	nop
 8010a5e:	37b8      	adds	r7, #184	@ 0xb8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	effffffe 	.word	0xeffffffe
 8010a68:	58000c00 	.word	0x58000c00
 8010a6c:	080101f1 	.word	0x080101f1

08010a70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a8c:	bf00      	nop
 8010a8e:	370c      	adds	r7, #12
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d101      	bne.n	8010ac2 <HAL_UARTEx_DisableFifoMode+0x16>
 8010abe:	2302      	movs	r3, #2
 8010ac0:	e027      	b.n	8010b12 <HAL_UARTEx_DisableFifoMode+0x66>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2224      	movs	r2, #36	@ 0x24
 8010ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f022 0201 	bic.w	r2, r2, #1
 8010ae8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010af0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2220      	movs	r2, #32
 8010b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3714      	adds	r7, #20
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b1e:	b580      	push	{r7, lr}
 8010b20:	b084      	sub	sp, #16
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
 8010b26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d101      	bne.n	8010b36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010b32:	2302      	movs	r3, #2
 8010b34:	e02d      	b.n	8010b92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2201      	movs	r2, #1
 8010b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2224      	movs	r2, #36	@ 0x24
 8010b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f022 0201 	bic.w	r2, r2, #1
 8010b5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	689b      	ldr	r3, [r3, #8]
 8010b64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	683a      	ldr	r2, [r7, #0]
 8010b6e:	430a      	orrs	r2, r1
 8010b70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 f8a0 	bl	8010cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2220      	movs	r2, #32
 8010b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b084      	sub	sp, #16
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
 8010ba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010baa:	2b01      	cmp	r3, #1
 8010bac:	d101      	bne.n	8010bb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010bae:	2302      	movs	r3, #2
 8010bb0:	e02d      	b.n	8010c0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2224      	movs	r2, #36	@ 0x24
 8010bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f022 0201 	bic.w	r2, r2, #1
 8010bd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	430a      	orrs	r2, r1
 8010bec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 f862 	bl	8010cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2220      	movs	r2, #32
 8010c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}

08010c16 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c16:	b580      	push	{r7, lr}
 8010c18:	b08c      	sub	sp, #48	@ 0x30
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	60f8      	str	r0, [r7, #12]
 8010c1e:	60b9      	str	r1, [r7, #8]
 8010c20:	4613      	mov	r3, r2
 8010c22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8010c24:	2300      	movs	r3, #0
 8010c26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c30:	2b20      	cmp	r3, #32
 8010c32:	d13b      	bne.n	8010cac <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d002      	beq.n	8010c40 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8010c3a:	88fb      	ldrh	r3, [r7, #6]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d101      	bne.n	8010c44 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8010c40:	2301      	movs	r3, #1
 8010c42:	e034      	b.n	8010cae <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2201      	movs	r2, #1
 8010c48:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8010c50:	88fb      	ldrh	r3, [r7, #6]
 8010c52:	461a      	mov	r2, r3
 8010c54:	68b9      	ldr	r1, [r7, #8]
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f7ff f824 	bl	800fca4 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d11d      	bne.n	8010ca0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2210      	movs	r2, #16
 8010c6a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	e853 3f00 	ldrex	r3, [r3]
 8010c78:	617b      	str	r3, [r7, #20]
   return(result);
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	f043 0310 	orr.w	r3, r3, #16
 8010c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	461a      	mov	r2, r3
 8010c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c8c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c8e:	6a39      	ldr	r1, [r7, #32]
 8010c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c92:	e841 2300 	strex	r3, r2, [r1]
 8010c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1e6      	bne.n	8010c6c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8010c9e:	e002      	b.n	8010ca6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8010ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010caa:	e000      	b.n	8010cae <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8010cac:	2302      	movs	r3, #2
  }
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3730      	adds	r7, #48	@ 0x30
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d108      	bne.n	8010cda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010cd8:	e031      	b.n	8010d3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010cda:	2310      	movs	r3, #16
 8010cdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010cde:	2310      	movs	r3, #16
 8010ce0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	0e5b      	lsrs	r3, r3, #25
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	f003 0307 	and.w	r3, r3, #7
 8010cf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	689b      	ldr	r3, [r3, #8]
 8010cf8:	0f5b      	lsrs	r3, r3, #29
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	f003 0307 	and.w	r3, r3, #7
 8010d00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d02:	7bbb      	ldrb	r3, [r7, #14]
 8010d04:	7b3a      	ldrb	r2, [r7, #12]
 8010d06:	4911      	ldr	r1, [pc, #68]	@ (8010d4c <UARTEx_SetNbDataToProcess+0x94>)
 8010d08:	5c8a      	ldrb	r2, [r1, r2]
 8010d0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d0e:	7b3a      	ldrb	r2, [r7, #12]
 8010d10:	490f      	ldr	r1, [pc, #60]	@ (8010d50 <UARTEx_SetNbDataToProcess+0x98>)
 8010d12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d14:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d20:	7bfb      	ldrb	r3, [r7, #15]
 8010d22:	7b7a      	ldrb	r2, [r7, #13]
 8010d24:	4909      	ldr	r1, [pc, #36]	@ (8010d4c <UARTEx_SetNbDataToProcess+0x94>)
 8010d26:	5c8a      	ldrb	r2, [r1, r2]
 8010d28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d2c:	7b7a      	ldrb	r2, [r7, #13]
 8010d2e:	4908      	ldr	r1, [pc, #32]	@ (8010d50 <UARTEx_SetNbDataToProcess+0x98>)
 8010d30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d32:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010d3e:	bf00      	nop
 8010d40:	3714      	adds	r7, #20
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop
 8010d4c:	08011068 	.word	0x08011068
 8010d50:	08011070 	.word	0x08011070

08010d54 <memset>:
 8010d54:	4402      	add	r2, r0
 8010d56:	4603      	mov	r3, r0
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d100      	bne.n	8010d5e <memset+0xa>
 8010d5c:	4770      	bx	lr
 8010d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8010d62:	e7f9      	b.n	8010d58 <memset+0x4>

08010d64 <__libc_init_array>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	4d0d      	ldr	r5, [pc, #52]	@ (8010d9c <__libc_init_array+0x38>)
 8010d68:	4c0d      	ldr	r4, [pc, #52]	@ (8010da0 <__libc_init_array+0x3c>)
 8010d6a:	1b64      	subs	r4, r4, r5
 8010d6c:	10a4      	asrs	r4, r4, #2
 8010d6e:	2600      	movs	r6, #0
 8010d70:	42a6      	cmp	r6, r4
 8010d72:	d109      	bne.n	8010d88 <__libc_init_array+0x24>
 8010d74:	4d0b      	ldr	r5, [pc, #44]	@ (8010da4 <__libc_init_array+0x40>)
 8010d76:	4c0c      	ldr	r4, [pc, #48]	@ (8010da8 <__libc_init_array+0x44>)
 8010d78:	f000 f826 	bl	8010dc8 <_init>
 8010d7c:	1b64      	subs	r4, r4, r5
 8010d7e:	10a4      	asrs	r4, r4, #2
 8010d80:	2600      	movs	r6, #0
 8010d82:	42a6      	cmp	r6, r4
 8010d84:	d105      	bne.n	8010d92 <__libc_init_array+0x2e>
 8010d86:	bd70      	pop	{r4, r5, r6, pc}
 8010d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d8c:	4798      	blx	r3
 8010d8e:	3601      	adds	r6, #1
 8010d90:	e7ee      	b.n	8010d70 <__libc_init_array+0xc>
 8010d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d96:	4798      	blx	r3
 8010d98:	3601      	adds	r6, #1
 8010d9a:	e7f2      	b.n	8010d82 <__libc_init_array+0x1e>
 8010d9c:	08011080 	.word	0x08011080
 8010da0:	08011080 	.word	0x08011080
 8010da4:	08011080 	.word	0x08011080
 8010da8:	08011084 	.word	0x08011084

08010dac <memcpy>:
 8010dac:	440a      	add	r2, r1
 8010dae:	4291      	cmp	r1, r2
 8010db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010db4:	d100      	bne.n	8010db8 <memcpy+0xc>
 8010db6:	4770      	bx	lr
 8010db8:	b510      	push	{r4, lr}
 8010dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dc2:	4291      	cmp	r1, r2
 8010dc4:	d1f9      	bne.n	8010dba <memcpy+0xe>
 8010dc6:	bd10      	pop	{r4, pc}

08010dc8 <_init>:
 8010dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dca:	bf00      	nop
 8010dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dce:	bc08      	pop	{r3}
 8010dd0:	469e      	mov	lr, r3
 8010dd2:	4770      	bx	lr

08010dd4 <_fini>:
 8010dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dd6:	bf00      	nop
 8010dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dda:	bc08      	pop	{r3}
 8010ddc:	469e      	mov	lr, r3
 8010dde:	4770      	bx	lr
